AC_INIT([get2gnow], ["030401"], [http://bugzilla.gnome.org/enter_bug.cgi?product=get2gnow], [get2gnow])
AC_PREREQ(2.59)
AC_COPYRIGHT([Copyright (C) 2009 Kaity G. B.])

PACKAGE_RELEASE="a08"
PACKAGE_RELEASE_VERSION="${PACKAGE_VERSION}${PACKAGE_RELEASE}"
VERSION="${PACKAGE_VERSION}${PACKAGE_RELEASE}"

AC_CONFIG_SRCDIR([src/main.c])
AC_CONFIG_HEADERS(config.h)
AC_CONFIG_MACRO_DIR([m4])
AM_INIT_AUTOMAKE([1.9 no-dist-gzip dist-bzip2])

AC_DEFAULT_PREFIX(/usr)

AM_MAINTAINER_MODE

AM_PROG_LIBTOOL

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC

AC_PATH_PROG(GCONFTOOL, gconftool-2)
AM_GCONF_SOURCE_2

GNOME_DOC_INIT
IT_PROG_INTLTOOL([0.35.0])

GNOME_COMPILE_WARNINGS([maximum])
GNOME_CXX_WARNINGS
GNOME_DEBUG_CHECK
GNOME_MAINTAINER_MODE_DEFINES

dnl ************************************************************
dnl *	Library Dependencies,                                  *
dnl *	uses pkg-config, see PKG_CHECK_MODULES.                *
dnl ************************************************************

GNOME_DOC_UTILS_VERSION_REQUIRED=0.14.0
LIBSOUP_VERSION_REQUIRED=2.24.0
LIBXML_VERSION_REQUIRED=2.6.16
GTK_VERSION_REQUIRED=2.18
GLIB_VERSION_REQUIRED=2.20
GTHREAD_VERSION_REQUIRED=2.20
GCONF_VERSION_REQUIRED=1.2.0
LIBGIO_VERSION_REQUIRED=2.15.5

dnl ************************************************************
dnl *	GNOME Keyring                                          *
dnl ************************************************************
AC_ARG_ENABLE(gnome_keyring,
	      AS_HELP_STRING([--enable-gnome-keyring=@<:@no/yes/auto@:>@],
		             [compile with Gnome Keyring support]), ,
              enable_gnome_keyring=auto)

if test "x$enable_gnome_keyring" != "xno"; then
	gnome_keyring_pkgconfig_tmp="gnome-keyring-1"
	PKG_CHECK_MODULES(GNOME_KEYRING, $gnome_keyring_pkgconfig_tmp, have_gnome_keyring=yes, have_gnome_keyring=no)
	if test x$have_gnome_keyring = xyes; then
		AC_DEFINE(HAVE_GNOME_KEYRING, 1, [gnome keyring support])
		gnome_keyring_pkgconfig=$gnome_keyring_pkgconfig_tmp
	fi
else
	have_gnome_keyring=no
	gnome_keyring_pkgconfig=
fi

if test "x$enable_gnome_keyring" = "xyes"; then
	if test "x$have_gnome_keyring" != "xyes"; then
		AC_MSG_ERROR([Couldn't find GNOME Keyring.])
	fi
fi

AM_CONDITIONAL(HAVE_GNOME_KEYRING, test x$have_gnome_keyring = xyes)

dnl *************************************************************
dnl * Pkg-Config dependency checks.                             *
dnl *************************************************************
PKG_CHECK_MODULES(get2gnow,
[
	gnome-doc-utils-devel >= $GNOME_DOC_UTILS_DEVEL_VERSION_REQUIRED
	gnome-doc-utils >= $GNOME_DOC_UTILS_VERSION_REQUIRED
	libsexy
	openssl
	libsoup-2.4 >= $LIBSOUP_VERSION_REQUIRED
	libnotify
	gtk+-2.0 >= $GTK_VERSION_REQUIRED
	glib-2.0 >= $GLIB_VERSION_REQUIRED
	gio-2.0 >= $LIBGIO_VERSION_REQUIRED
	libxml-2.0 >= $LIBXML_VERSION_REQUIRED
	libgnome-2.0
	gobject-2.0
	gthread-2.0 >= $GTHREAD_VERSION_REGUIRED
	gconf-2.0 >= $GCONF_VERSION_REQUIRED
	$gnome_keyring_pkgconfig
])
AC_SUBST(get2gnow_CFLAGS)
AC_SUBST(get2gnow_LIBS)



dnl *******************************************************************
dnl * Rather to enable the system alert and system button sounds.     *
dnl *	This may cause pulseaudio related segfaults on some systems.  *
dnl *******************************************************************


dnl *************************************************************
dnl *   GNOME_ENABLE_DEBUG support                              *
dnl *************************************************************
AC_ARG_ENABLE(debug,
	      AS_HELP_STRING([--enable-debug=@<:@no/yes@:>@],
		             [turn on debug mode and gdb debugging symbols]), ,
              enable_debug=no)
AM_CONDITIONAL(GNOME_ENABLE_DEBUG, test x$enable_debug = xyes)

if test x$enable_debug = xyes ; then
	debug_CFLAGS="-g -ggdb"
	echo "#define GNOME_ENABLE_DEBUG 1" >> confdefs.h
	enable_gdb=yes;
fi


dnl ************************************************************
dnl *    gdb support                                           *
dnl ************************************************************
AC_ARG_ENABLE(gdb,
	      AS_HELP_STRING([--enable-gdb=@<:@no/yes@:>@],
		             [turn on gdb debugging symbols]), ,
              enable_gdb=yes)
AM_CONDITIONAL(debug_CFLAGS="-g3 -ggdb", test x$enable_gdb = xyes)

if test x$enable_gdb = xyes ; then
	debug_CFLAGS="-g3 -ggdb"
fi



dnl  *****************************************************************
dnl  * Rather to use the                                             *
dnl  *	GtkLabel based update viewer, which is ugly but does more    *
dnl  * or the                                                        *
dnl  *	SexyUrlLabel based update viewer which is much more elegant. *
dnl  *****************************************************************
AC_ARG_ENABLE(alpha_ui,
	      AS_HELP_STRING([--enable-alpha-ui=@<:@no/yes@:>@],
		             [compile with get2gnow's new UI elements enabled.
                          These add many increased functions but may also
                          introduce odd display and other various 'issues'.]), ,
              enable_alpha_ui=no)
AM_CONDITIONAL(ENABLE_ALPHA_UI, test x$enable_alpha_ui = xyes)

if test x$enable_alpha_ui = xyes ; then
	echo "#define ENABLE_ALPHA_UI 1" >> confdefs.h
fi



dnl *******************************************************************
dnl * Rather to enable the system alert and system button sounds.     *
dnl *	This may cause pulseaudio related segfaults on some systems.  *
dnl *******************************************************************
AC_ARG_ENABLE(sound,
	      AS_HELP_STRING([--enable-sound=@<:@no/yes@:>@],
		             [compile with sound and notification alerts enabled.
                          This may cause pulseaudio related segfaults so while
                          get2gnow's sound support is being refactored and
                          improved, to avoid any possibl pulseaudio segfaults
                          this is a disabled by default.]), ,
              enable_sound=no)
AM_CONDITIONAL(ENABLE_SOUND, test x$enable_sound = xyes)

if test x$enable_sound = xyes ; then
	echo "#define ENABLE_SOUND 1" >> confdefs.h
fi



dnl -----------------------------------------------------------
dnl Language Support
dnl -----------------------------------------------------------
GETTEXT_PACKAGE=$PACKAGE
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE",[Gettext package name])

AM_GLIB_GNU_GETTEXT

dnl /************************************************************
dnl  * get2gnow's package, data, & install variables.           *
dnl  ***********************************************************/
PACKAGE="get2gnow"
AC_SUBST(PACKAGE)


dnl -----------------------------------------------------------
dnl Forces GTK's icon cache to be updated.
dnl -----------------------------------------------------------
AC_ARG_ENABLE(gtk_icon_update,
	      AS_HELP_STRING([--enable-gtk-icon-update=@<:@no/yes@:>@],
		             [forces gtk-icon-update-icon-cache to be ran reguardless
			  of the packages icon being found of not.]), ,
              enable_gtk_icon_update=no)

AM_CONDITIONAL(gtk_update_icon_cache="gtk_update_icon_cache=gtk-update-icon-cache -f -t \$(datadir)/icons/hicolor", test x$enable_gtk_icon_update = xyes)

printf "Checking for %s's icon.  Looking for:\n\t%s/share/icons/hicolor/scalable/apps/get2gnow.svg\n" ${PACKAGE_NAME} ${prefix}
if `test -e "${prefix}/share/icons/hicolor/scalable/apps/get2gnow.svg"` && test x$enable_gtk_icon_update = xno ; then
	printf "%s icon already exists.  GTK's icon cache will not be refreshed.\n" ${PACKAGE_NAME};
	gtk_update_icon_cache="gtk_update_icon_cache=echo \"${PACKAGE_NAME} icon already installed\"";
else
	printf "%s will be installed and make install will attempt to update GTK's icon cache.\n" ${PACKAGE_NAME};
	gtk_update_icon_cache="gtk_update_icon_cache=gtk-update-icon-cache -f -t \$(datadir)/icons/hicolor";
	if test x$enable_gtk_icon_update = xno; then
		enable_gtk_icon_update=yes;
	fi
fi;

AC_SUBST(gtk_update_icon_cache)


AC_OUTPUT([
Makefile
get2gnow.control
get2gnow.spec
data/Makefile
data/get2gnow.desktop
data/get2gnow.schemas
help/Makefile
src/Makefile
po/Makefile
])




printf "\nPrefix:\t\t\t\t\t[%s]\n%s's BUILDDIR:\t\t\t[%s]\n" "$prefix" "$GETTEXT_PACKAGE" "$ac_pwd";
if test x$have_gnome_keyring = xyes; then printf "GNOME Keyring:\t\t\t\t[enabled]\n"; fi;
if test x$enable_alpha_ui = xyes; then printf "New & Improved, alpha, UI:\t\t[enabled]\n"; fi;
printf "System alerts and sounds:\t\t[";
if test x$enable_sound = xyes; then printf "en"; else printf "dis"; fi;
printf "abled]\n";
if test x$enable_debug = xyes; then printf "Debug Mode:\t\t\t\t[enabled]\n"; fi;
if test x$enable_gdb = xyes; then printf "Debug symbols:\t\t\t\t[enabled]\n"; fi;
if test x$enable_gtk_icon_update = xyes; then printf "Updating GTK's icon cache.\n"; fi;



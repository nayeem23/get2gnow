AC_INIT([get2gnow], ["#010001", "a70"], [http://bugzilla.gnome.org/enter_bug.cgi?product=get2gnow], [get2gnow])
AC_PREREQ(2.59)
AC_COPYRIGHT([Copyright (C) 2009 Kaity G. B.])

AC_CONFIG_SRCDIR([src/main.c])
AC_CONFIG_HEADERS(config.h)
AC_CONFIG_MACRO_DIR([m4])
AM_INIT_AUTOMAKE([1.9 no-dist-gzip dist-bzip2])

AC_DEFAULT_PREFIX(/usr)

AM_MAINTAINER_MODE

AM_PROG_LIBTOOL

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC

AC_PATH_PROG(GCONFTOOL, gconftool-2)
AM_GCONF_SOURCE_2

GNOME_DOC_INIT
IT_PROG_INTLTOOL([0.35.0])

GNOME_COMPILE_WARNINGS([maximum])
GNOME_CXX_WARNINGS
GNOME_DEBUG_CHECK
GNOME_MAINTAINER_MODE_DEFINES

dnl /************************************************************
dnl  *	Library Dependencies,					*
dnl  *	uses pkg-config, see PKG_CHECK_MODULES.			*
dnl  ************************************************************/

GNOME_DOC_UTILS_VERSION_REQUIRED=0.14.0
LIBSOUP_VERSION_REQUIRED=2.24.0
LIBXML_VERSION_REQUIRED=2.6.16
GTK_VERSION_REQUIRED=2.16
GLIB_VERSION_REQUIRED=2.20
GTHREAD_VERSION_REQUIRED=2.20
GCONF_VERSION_REQUIRED=1.2.0
LIBGIO_VERSION_REQUIRED=2.15.5

dnl /************************************************************
dnl  *	GNOME Keyring						*
dnl  ************************************************************/
AC_ARG_ENABLE(gnome_keyring,
	      AS_HELP_STRING([--enable-gnome-keyring=@<:@no/yes/auto@:>@],
		             [compile with Gnome Keyring support]), ,
              enable_gnome_keyring=auto)

if test "x$enable_gnome_keyring" != "xno"; then
	gnome_keyring_pkgconfig_tmp="gnome-keyring-1"
	PKG_CHECK_MODULES(GNOME_KEYRING, $gnome_keyring_pkgconfig_tmp, have_gnome_keyring=yes, have_gnome_keyring=no)
	if test x$have_gnome_keyring = xyes; then
		AC_DEFINE(HAVE_GNOME_KEYRING, 1, [gnome keyring support])
		gnome_keyring_pkgconfig=$gnome_keyring_pkgconfig_tmp
	fi
else
	have_gnome_keyring=no
	gnome_keyring_pkgconfig=
fi

if test "x$enable_gnome_keyring" = "xyes"; then
	if test "x$have_gnome_keyring" != "xyes"; then
		AC_MSG_ERROR([Couldn't find GNOME Keyring.])
	fi
fi

AM_CONDITIONAL(HAVE_GNOME_KEYRING, test x$have_gnome_keyring = xyes)

dnl /************************************************************
dnl  * Pkg-Config dependency checks				*
dnl  ************************************************************/
PKG_CHECK_MODULES(get2gnow,
[
	gnome-doc-utils >= $GNOME_DOC_UTILS_VERSION_REQUIRED
	libsexy
	openssl
	libsoup-2.4 >= $LIBSOUP_VERSION_REQUIRED
	libnotify
	gnome-vfs-2.0
	gtk+-2.0 >= $GTK_VERSION_REQUIRED
	glib-2.0 >= $GLIB_VERSION_REQUIRED
	gio-2.0 >= $LIBGIO_VERSION_REQUIRED
	libxml-2.0 >= $LIBXML_VERSION_REQUIRED
	libgnomeui-2.0
	gobject-2.0
	gthread-2.0 >= $GTHREAD_VERSION_REGUIRED
	gconf-2.0 >= $GCONF_VERSION_REQUIRED
	$gnome_keyring_pkgconfig
])
AC_SUBST(get2gnow_CFLAGS)
AC_SUBST(get2gnow_LIBS)

dnl /************************************************************
dnl *    gdb support                                            *
dnl /************************************************************
AM_CONDITIONAL(debug_CFLAGS="-g3 -ggdb", test x$enable_gdb = xyes)

if test x$enable_gdb = xyes ; then
	debug_CFLAGS="-g3 -ggdb"
fi

dnl /************************************************************
dnl *   GNOME_ENABLE_DEBUG support                              *
dnl /************************************************************
AM_CONDITIONAL(GNOME_ENABLE_DEBUG, test x$enable_debug = xyes)

if test x$enable_debug = xyes ; then
	debug_CFLAGS="-g -ggdb"
	echo "#define GNOME_ENABLE_DEBUG 1" >> confdefs.h
fi
		
dnl -----------------------------------------------------------
dnl Language Support
dnl -----------------------------------------------------------
GETTEXT_PACKAGE=$PACKAGE
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE",[Gettext package name])

AM_GLIB_GNU_GETTEXT

dnl /************************************************************
dnl  * get2gnow's package, data, & install variables.           *
dnl  ***********************************************************/
PACKAGE="get2gnow"
AC_SUBST(PACKAGE)

AM_CONDITIONAL(gtk_update_icon_cache="gtk_update_icon_cache=gtk-update-icon-cache -f -t \$(datadir)/icons/hicolor", test x$enable_gtk_icon_update = xyes)

printf "Checking for %s's icon.  Looking for:\n\t%s/share/icons/hicolor/scalable/apps/get2gnow.svg\n" ${PACKAGE_NAME} ${prefix}
if `test -e "${prefix}/share/icons/hicolor/scalable/apps/get2gnow.svg"` && test x$enable_gtk_icon_update = xno ; then
	printf "%s icon already exists.  GTK's icon cache will not be refreshed.\n" ${PACKAGE_NAME};
	gtk_update_icon_cache="gtk_update_icon_cache=echo \"${PACKAGE_NAME} icon already installed\"";
else
	printf "%s will be installed and make install will attempt to update GTK's icon cache.\n" ${PACKAGE_NAME};
	gtk_update_icon_cache="gtk_update_icon_cache=gtk-update-icon-cache -f -t \$(datadir)/icons/hicolor";
fi;

AC_SUBST(gtk_update_icon_cache)


AC_OUTPUT([
Makefile
get2gnow.control
get2gnow.spec
data/Makefile
data/get2gnow.desktop
data/get2gnow.schemas
help/Makefile
src/Makefile
po/Makefile
])

printf "\nPrefix:\t\t\t%s\nGNOME Keyring:\t\t%s\n" "$prefix" "$have_gnome_keyring";
if test x$enable_gtk_icon_update = xyes; then printf "forcing gtk-icon-update-cache\n"; fi;
if test x$enable_gdb = xyes ; then printf "gdb symbols:\t\t[enabled]\n"; fi;
if test x$enable_debug = xyes ; then printf "Debug Mode:\t\t[enabled]\nDebug BUILDDIR:\t$ac_pwd\n"; fi;

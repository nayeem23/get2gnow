# 1 "parser.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "parser.c"
# 24 "parser.c"
# 1 "../config.h" 1
# 25 "parser.c" 2





# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 330 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 348 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 349 "/usr/include/sys/cdefs.h" 2 3 4
# 331 "/usr/include/features.h" 2 3 4
# 354 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4



# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 5 "/usr/include/gnu/stubs.h" 2 3 4




# 1 "/usr/include/gnu/stubs-64.h" 1 3 4
# 10 "/usr/include/gnu/stubs.h" 2 3 4
# 355 "/usr/include/features.h" 2 3 4
# 30 "/usr/include/time.h" 2 3 4









# 1 "/usr/lib64/gcc/x86_64-suse-linux/4.3/include/stddef.h" 1 3 4
# 214 "/usr/lib64/gcc/x86_64-suse-linux/4.3/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 40 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/time.h" 1 3 4
# 39 "/usr/include/bits/time.h" 3 4
# 1 "/usr/include/bits/types.h" 1 3 4
# 28 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 131 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 132 "/usr/include/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef long int __swblk_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;

typedef long int __ssize_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 40 "/usr/include/bits/time.h" 2 3 4
extern long int __sysconf (int);
# 44 "/usr/include/time.h" 2 3 4
# 59 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 75 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 132 "/usr/include/time.h" 3 4


struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;





  long int __tm_gmtoff;
  __const char *__tm_zone;

};



# 181 "/usr/include/time.h" 3 4



extern clock_t clock (void) __attribute__ ((__nothrow__));


extern time_t time (time_t *__timer) __attribute__ ((__nothrow__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__));





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   __const char *__restrict __format,
   __const struct tm *__restrict __tp) __attribute__ ((__nothrow__));





extern char *strptime (__const char *__restrict __s,
         __const char *__restrict __fmt, struct tm *__tp)
     __attribute__ ((__nothrow__));
# 229 "/usr/include/time.h" 3 4



extern struct tm *gmtime (__const time_t *__timer) __attribute__ ((__nothrow__));



extern struct tm *localtime (__const time_t *__timer) __attribute__ ((__nothrow__));





extern struct tm *gmtime_r (__const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__));



extern struct tm *localtime_r (__const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__));





extern char *asctime (__const struct tm *__tp) __attribute__ ((__nothrow__));


extern char *ctime (__const time_t *__timer) __attribute__ ((__nothrow__));







extern char *asctime_r (__const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__));


extern char *ctime_r (__const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__));




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__));



extern int daylight;
extern long int timezone;
# 416 "/usr/include/time.h" 3 4

# 31 "parser.c" 2
# 1 "/usr/include/string.h" 1 3 4
# 28 "/usr/include/string.h" 3 4





# 1 "/usr/lib64/gcc/x86_64-suse-linux/4.3/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4




extern void *memcpy (void *__restrict __dest,
       __const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, __const void *__src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, __const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (__const void *__s1, __const void *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memchr (__const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));

# 82 "/usr/include/string.h" 3 4


extern char *strcpy (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, __const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (__const char *__s1, __const char *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));

# 165 "/usr/include/string.h" 3 4


extern char *strchr (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));

extern char *strrchr (__const char *__s, int __c)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));

# 181 "/usr/include/string.h" 3 4



extern size_t strcspn (__const char *__s, __const char *__reject)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (__const char *__s, __const char *__accept)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strpbrk (__const char *__s, __const char *__accept)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strstr (__const char *__haystack, __const char *__needle)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *strtok (char *__restrict __s, __const char *__restrict __delim)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    __const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, __const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (2, 3)));
# 240 "/usr/include/string.h" 3 4


extern size_t strlen (__const char *__s)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));

# 254 "/usr/include/string.h" 3 4


extern char *strerror (int __errnum) __attribute__ ((__nothrow__));

# 294 "/usr/include/string.h" 3 4
extern void __bzero (void *__s, size_t __n) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 420 "/usr/include/string.h" 3 4
# 1 "/usr/include/bits/string.h" 1 3 4
# 421 "/usr/include/string.h" 2 3 4


# 1 "/usr/include/bits/string2.h" 1 3 4
# 52 "/usr/include/bits/string2.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 38 "/usr/include/endian.h" 2 3 4
# 53 "/usr/include/bits/string2.h" 2 3 4
# 394 "/usr/include/bits/string2.h" 3 4
extern void *__rawmemchr (const void *__s, int __c);
# 969 "/usr/include/bits/string2.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) size_t __strcspn_c1 (__const char *__s, int __reject);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strcspn_c1 (__const char *__s, int __reject)
{
  register size_t __result = 0;
  while (__s[__result] != '\0' && __s[__result] != __reject)
    ++__result;
  return __result;
}

extern __inline __attribute__ ((__gnu_inline__)) size_t __strcspn_c2 (__const char *__s, int __reject1,
         int __reject2);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strcspn_c2 (__const char *__s, int __reject1, int __reject2)
{
  register size_t __result = 0;
  while (__s[__result] != '\0' && __s[__result] != __reject1
  && __s[__result] != __reject2)
    ++__result;
  return __result;
}

extern __inline __attribute__ ((__gnu_inline__)) size_t __strcspn_c3 (__const char *__s, int __reject1,
         int __reject2, int __reject3);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strcspn_c3 (__const char *__s, int __reject1, int __reject2,
       int __reject3)
{
  register size_t __result = 0;
  while (__s[__result] != '\0' && __s[__result] != __reject1
  && __s[__result] != __reject2 && __s[__result] != __reject3)
    ++__result;
  return __result;
}
# 1045 "/usr/include/bits/string2.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) size_t __strspn_c1 (__const char *__s, int __accept);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strspn_c1 (__const char *__s, int __accept)
{
  register size_t __result = 0;

  while (__s[__result] == __accept)
    ++__result;
  return __result;
}

extern __inline __attribute__ ((__gnu_inline__)) size_t __strspn_c2 (__const char *__s, int __accept1,
        int __accept2);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strspn_c2 (__const char *__s, int __accept1, int __accept2)
{
  register size_t __result = 0;

  while (__s[__result] == __accept1 || __s[__result] == __accept2)
    ++__result;
  return __result;
}

extern __inline __attribute__ ((__gnu_inline__)) size_t __strspn_c3 (__const char *__s, int __accept1,
        int __accept2, int __accept3);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strspn_c3 (__const char *__s, int __accept1, int __accept2, int __accept3)
{
  register size_t __result = 0;

  while (__s[__result] == __accept1 || __s[__result] == __accept2
  || __s[__result] == __accept3)
    ++__result;
  return __result;
}
# 1121 "/usr/include/bits/string2.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) char *__strpbrk_c2 (__const char *__s, int __accept1,
         int __accept2);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strpbrk_c2 (__const char *__s, int __accept1, int __accept2)
{

  while (*__s != '\0' && *__s != __accept1 && *__s != __accept2)
    ++__s;
  return *__s == '\0' ? ((void *)0) : (char *) (size_t) __s;
}

extern __inline __attribute__ ((__gnu_inline__)) char *__strpbrk_c3 (__const char *__s, int __accept1,
         int __accept2, int __accept3);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strpbrk_c3 (__const char *__s, int __accept1, int __accept2,
       int __accept3)
{

  while (*__s != '\0' && *__s != __accept1 && *__s != __accept2
  && *__s != __accept3)
    ++__s;
  return *__s == '\0' ? ((void *)0) : (char *) (size_t) __s;
}
# 1172 "/usr/include/bits/string2.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) char *__strtok_r_1c (char *__s, char __sep, char **__nextp);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strtok_r_1c (char *__s, char __sep, char **__nextp)
{
  char *__result;
  if (__s == ((void *)0))
    __s = *__nextp;
  while (*__s == __sep)
    ++__s;
  __result = ((void *)0);
  if (*__s != '\0')
    {
      __result = __s++;
      while (*__s != '\0')
 if (*__s++ == __sep)
   {
     __s[-1] = '\0';
     break;
   }
    }
  *__nextp = __s;
  return __result;
}
# 1204 "/usr/include/bits/string2.h" 3 4
extern char *__strsep_g (char **__stringp, __const char *__delim);
# 1222 "/usr/include/bits/string2.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) char *__strsep_1c (char **__s, char __reject);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strsep_1c (char **__s, char __reject)
{
  register char *__retval = *__s;
  if (__retval != ((void *)0) && (*__s = (__extension__ (__builtin_constant_p (__reject) && !__builtin_constant_p (__retval) && (__reject) == '\0' ? (char *) __rawmemchr (__retval, __reject) : __builtin_strchr (__retval, __reject)))) != ((void *)0))
    *(*__s)++ = '\0';
  return __retval;
}

extern __inline __attribute__ ((__gnu_inline__)) char *__strsep_2c (char **__s, char __reject1, char __reject2);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strsep_2c (char **__s, char __reject1, char __reject2)
{
  register char *__retval = *__s;
  if (__retval != ((void *)0))
    {
      register char *__cp = __retval;
      while (1)
 {
   if (*__cp == '\0')
     {
       __cp = ((void *)0);
   break;
     }
   if (*__cp == __reject1 || *__cp == __reject2)
     {
       *__cp++ = '\0';
       break;
     }
   ++__cp;
 }
      *__s = __cp;
    }
  return __retval;
}

extern __inline __attribute__ ((__gnu_inline__)) char *__strsep_3c (char **__s, char __reject1, char __reject2,
       char __reject3);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strsep_3c (char **__s, char __reject1, char __reject2, char __reject3)
{
  register char *__retval = *__s;
  if (__retval != ((void *)0))
    {
      register char *__cp = __retval;
      while (1)
 {
   if (*__cp == '\0')
     {
       __cp = ((void *)0);
   break;
     }
   if (*__cp == __reject1 || *__cp == __reject2 || *__cp == __reject3)
     {
       *__cp++ = '\0';
       break;
     }
   ++__cp;
 }
      *__s = __cp;
    }
  return __retval;
}
# 424 "/usr/include/string.h" 2 3 4
# 432 "/usr/include/string.h" 3 4

# 32 "parser.c" 2
# 1 "/usr/include/strings.h" 1 3 4
# 29 "/usr/include/strings.h" 3 4
# 1 "/usr/lib64/gcc/x86_64-suse-linux/4.3/include/stddef.h" 1 3 4
# 30 "/usr/include/strings.h" 2 3 4




extern int bcmp (__const void *__s1, __const void *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__));


extern void bcopy (__const void *__src, void *__dest, size_t __n) __attribute__ ((__nothrow__));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__));



extern int ffs (int __i) __attribute__ ((__nothrow__)) __attribute__ ((const));


extern char *index (__const char *__s, int __c) __attribute__ ((__nothrow__)) __attribute__ ((__pure__));


extern char *rindex (__const char *__s, int __c) __attribute__ ((__nothrow__)) __attribute__ ((__pure__));


extern int strcasecmp (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__));


extern int strncasecmp (__const char *__s1, __const char *__s2, size_t __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__));


# 33 "parser.c" 2

# 1 "/usr/include/gtk-2.0/gtk/gtk.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtk.h"
# 1 "/usr/include/gtk-2.0/gdk/gdk.h" 1
# 32 "/usr/include/gtk-2.0/gdk/gdk.h"
# 1 "/usr/include/gtk-2.0/gdk/gdkapplaunchcontext.h" 1
# 30 "/usr/include/gtk-2.0/gdk/gdkapplaunchcontext.h"
# 1 "/usr/include/glib-2.0/gio/gio.h" 1
# 28 "/usr/include/glib-2.0/gio/gio.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 30 "/usr/include/glib-2.0/gio/giotypes.h"
# 1 "/usr/include/glib-2.0/gio/gioenums.h" 1
# 30 "/usr/include/glib-2.0/gio/gioenums.h"
# 1 "/usr/include/glib-2.0/glib-object.h" 1
# 25 "/usr/include/glib-2.0/glib-object.h"
# 1 "/usr/include/glib-2.0/gobject/gboxed.h" 1
# 26 "/usr/include/glib-2.0/gobject/gboxed.h"
# 1 "/usr/include/glib-2.0/gobject/gtype.h" 1
# 26 "/usr/include/glib-2.0/gobject/gtype.h"
# 1 "/usr/include/glib-2.0/glib.h" 1
# 32 "/usr/include/glib-2.0/glib.h"
# 1 "/usr/include/glib-2.0/glib/galloca.h" 1
# 34 "/usr/include/glib-2.0/glib/galloca.h"
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 34 "/usr/include/glib-2.0/glib/gtypes.h"
# 1 "/usr/lib64/glib-2.0/include/glibconfig.h" 1
# 9 "/usr/lib64/glib-2.0/include/glibconfig.h"
# 1 "/usr/include/glib-2.0/glib/gmacros.h" 1
# 40 "/usr/include/glib-2.0/glib/gmacros.h"
# 1 "/usr/lib64/gcc/x86_64-suse-linux/4.3/include/stddef.h" 1 3 4
# 152 "/usr/lib64/gcc/x86_64-suse-linux/4.3/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 326 "/usr/lib64/gcc/x86_64-suse-linux/4.3/include/stddef.h" 3 4
typedef int wchar_t;
# 41 "/usr/include/glib-2.0/glib/gmacros.h" 2
# 10 "/usr/lib64/glib-2.0/include/glibconfig.h" 2

# 1 "/usr/lib64/gcc/x86_64-suse-linux/4.3/include-fixed/limits.h" 1 3 4
# 11 "/usr/lib64/gcc/x86_64-suse-linux/4.3/include-fixed/limits.h" 3 4
# 1 "/usr/lib64/gcc/x86_64-suse-linux/4.3/include-fixed/syslimits.h" 1 3 4






# 1 "/usr/lib64/gcc/x86_64-suse-linux/4.3/include-fixed/limits.h" 1 3 4
# 122 "/usr/lib64/gcc/x86_64-suse-linux/4.3/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 145 "/usr/include/limits.h" 3 4
# 1 "/usr/include/bits/posix1_lim.h" 1 3 4
# 153 "/usr/include/bits/posix1_lim.h" 3 4
# 1 "/usr/include/bits/local_lim.h" 1 3 4
# 39 "/usr/include/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 40 "/usr/include/bits/local_lim.h" 2 3 4
# 154 "/usr/include/bits/posix1_lim.h" 2 3 4
# 146 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/bits/posix2_lim.h" 1 3 4
# 150 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/bits/xopen_lim.h" 1 3 4
# 34 "/usr/include/bits/xopen_lim.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 35 "/usr/include/bits/xopen_lim.h" 2 3 4
# 154 "/usr/include/limits.h" 2 3 4
# 123 "/usr/lib64/gcc/x86_64-suse-linux/4.3/include-fixed/limits.h" 2 3 4
# 8 "/usr/lib64/gcc/x86_64-suse-linux/4.3/include-fixed/syslimits.h" 2 3 4
# 12 "/usr/lib64/gcc/x86_64-suse-linux/4.3/include-fixed/limits.h" 2 3 4
# 12 "/usr/lib64/glib-2.0/include/glibconfig.h" 2
# 1 "/usr/lib64/gcc/x86_64-suse-linux/4.3/include/float.h" 1 3 4
# 13 "/usr/lib64/glib-2.0/include/glibconfig.h" 2
# 22 "/usr/lib64/glib-2.0/include/glibconfig.h"

# 38 "/usr/lib64/glib-2.0/include/glibconfig.h"
typedef signed char gint8;
typedef unsigned char guint8;
typedef signed short gint16;
typedef unsigned short guint16;



typedef signed int gint32;
typedef unsigned int guint32;





typedef signed long gint64;
typedef unsigned long guint64;
# 65 "/usr/lib64/glib-2.0/include/glibconfig.h"
typedef signed long gssize;
typedef unsigned long gsize;
# 75 "/usr/lib64/glib-2.0/include/glibconfig.h"
typedef gint64 goffset;
# 90 "/usr/lib64/glib-2.0/include/glibconfig.h"
typedef signed long gintptr;
typedef unsigned long guintptr;
# 156 "/usr/lib64/glib-2.0/include/glibconfig.h"
typedef struct _GStaticMutex GStaticMutex;
struct _GStaticMutex
{
  struct _GMutex *runtime_mutex;
  union {
    char pad[40];
    double dummy_double;
    void *dummy_pointer;
    long dummy_long;
  } static_mutex;
};
# 175 "/usr/lib64/glib-2.0/include/glibconfig.h"
typedef union _GSystemThread GSystemThread;
union _GSystemThread
{
  char data[8];
  double dummy_double;
  void *dummy_pointer;
  long dummy_long;
};
# 222 "/usr/lib64/glib-2.0/include/glibconfig.h"
typedef int GPid;


# 35 "/usr/include/glib-2.0/glib/gtypes.h" 2
# 1 "/usr/include/glib-2.0/glib/gmacros.h" 1
# 36 "/usr/include/glib-2.0/glib/gtypes.h" 2


# 46 "/usr/include/glib-2.0/glib/gtypes.h"
typedef char gchar;
typedef short gshort;
typedef long glong;
typedef int gint;
typedef gint gboolean;

typedef unsigned char guchar;
typedef unsigned short gushort;
typedef unsigned long gulong;
typedef unsigned int guint;

typedef float gfloat;
typedef double gdouble;
# 77 "/usr/include/glib-2.0/glib/gtypes.h"
typedef void* gpointer;
typedef const void *gconstpointer;

typedef gint (*GCompareFunc) (gconstpointer a,
                                                 gconstpointer b);
typedef gint (*GCompareDataFunc) (gconstpointer a,
                                                 gconstpointer b,
       gpointer user_data);
typedef gboolean (*GEqualFunc) (gconstpointer a,
                                                 gconstpointer b);
typedef void (*GDestroyNotify) (gpointer data);
typedef void (*GFunc) (gpointer data,
                                                 gpointer user_data);
typedef guint (*GHashFunc) (gconstpointer key);
typedef void (*GHFunc) (gpointer key,
                                                 gpointer value,
                                                 gpointer user_data);
typedef void (*GFreeFunc) (gpointer data);
typedef const gchar * (*GTranslateFunc) (const gchar *str,
       gpointer data);
# 350 "/usr/include/glib-2.0/glib/gtypes.h"
typedef union _GDoubleIEEE754 GDoubleIEEE754;
typedef union _GFloatIEEE754 GFloatIEEE754;





union _GFloatIEEE754
{
  gfloat v_float;
  struct {
    guint mantissa : 23;
    guint biased_exponent : 8;
    guint sign : 1;
  } mpn;
};
union _GDoubleIEEE754
{
  gdouble v_double;
  struct {
    guint mantissa_low : 32;
    guint mantissa_high : 20;
    guint biased_exponent : 11;
    guint sign : 1;
  } mpn;
};
# 400 "/usr/include/glib-2.0/glib/gtypes.h"
typedef struct _GTimeVal GTimeVal;

struct _GTimeVal
{
  glong tv_sec;
  glong tv_usec;
};


# 35 "/usr/include/glib-2.0/glib/galloca.h" 2
# 33 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/garray.h" 1
# 34 "/usr/include/glib-2.0/glib/garray.h"
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 35 "/usr/include/glib-2.0/glib/garray.h" 2



typedef struct _GArray GArray;
typedef struct _GByteArray GByteArray;
typedef struct _GPtrArray GPtrArray;

struct _GArray
{
  gchar *data;
  guint len;
};

struct _GByteArray
{
  guint8 *data;
  guint len;
};

struct _GPtrArray
{
  gpointer *pdata;
  guint len;
};
# 70 "/usr/include/glib-2.0/glib/garray.h"
GArray* g_array_new (gboolean zero_terminated,
       gboolean clear_,
       guint element_size);
GArray* g_array_sized_new (gboolean zero_terminated,
       gboolean clear_,
       guint element_size,
       guint reserved_size);
gchar* g_array_free (GArray *array,
       gboolean free_segment);
GArray* g_array_append_vals (GArray *array,
       gconstpointer data,
       guint len);
GArray* g_array_prepend_vals (GArray *array,
       gconstpointer data,
       guint len);
GArray* g_array_insert_vals (GArray *array,
       guint index_,
       gconstpointer data,
       guint len);
GArray* g_array_set_size (GArray *array,
       guint length);
GArray* g_array_remove_index (GArray *array,
       guint index_);
GArray* g_array_remove_index_fast (GArray *array,
       guint index_);
GArray* g_array_remove_range (GArray *array,
       guint index_,
       guint length);
void g_array_sort (GArray *array,
       GCompareFunc compare_func);
void g_array_sort_with_data (GArray *array,
       GCompareDataFunc compare_func,
       gpointer user_data);






GPtrArray* g_ptr_array_new (void);
GPtrArray* g_ptr_array_sized_new (guint reserved_size);
gpointer* g_ptr_array_free (GPtrArray *array,
        gboolean free_seg);
void g_ptr_array_set_size (GPtrArray *array,
        gint length);
gpointer g_ptr_array_remove_index (GPtrArray *array,
        guint index_);
gpointer g_ptr_array_remove_index_fast (GPtrArray *array,
        guint index_);
gboolean g_ptr_array_remove (GPtrArray *array,
        gpointer data);
gboolean g_ptr_array_remove_fast (GPtrArray *array,
        gpointer data);
void g_ptr_array_remove_range (GPtrArray *array,
        guint index_,
        guint length);
void g_ptr_array_add (GPtrArray *array,
        gpointer data);
void g_ptr_array_sort (GPtrArray *array,
        GCompareFunc compare_func);
void g_ptr_array_sort_with_data (GPtrArray *array,
        GCompareDataFunc compare_func,
        gpointer user_data);
void g_ptr_array_foreach (GPtrArray *array,
        GFunc func,
        gpointer user_data);






GByteArray* g_byte_array_new (void);
GByteArray* g_byte_array_sized_new (guint reserved_size);
guint8* g_byte_array_free (GByteArray *array,
         gboolean free_segment);
GByteArray* g_byte_array_append (GByteArray *array,
         const guint8 *data,
         guint len);
GByteArray* g_byte_array_prepend (GByteArray *array,
         const guint8 *data,
         guint len);
GByteArray* g_byte_array_set_size (GByteArray *array,
         guint length);
GByteArray* g_byte_array_remove_index (GByteArray *array,
         guint index_);
GByteArray* g_byte_array_remove_index_fast (GByteArray *array,
         guint index_);
GByteArray* g_byte_array_remove_range (GByteArray *array,
         guint index_,
         guint length);
void g_byte_array_sort (GByteArray *array,
         GCompareFunc compare_func);
void g_byte_array_sort_with_data (GByteArray *array,
         GCompareDataFunc compare_func,
         gpointer user_data);


# 34 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gasyncqueue.h" 1
# 34 "/usr/include/glib-2.0/glib/gasyncqueue.h"
# 1 "/usr/include/glib-2.0/glib/gthread.h" 1
# 34 "/usr/include/glib-2.0/glib/gthread.h"
# 1 "/usr/include/glib-2.0/glib/gerror.h" 1
# 28 "/usr/include/glib-2.0/glib/gerror.h"
# 1 "/usr/include/glib-2.0/glib/gquark.h" 1
# 34 "/usr/include/glib-2.0/glib/gquark.h"
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 35 "/usr/include/glib-2.0/glib/gquark.h" 2



typedef guint32 GQuark;



GQuark g_quark_try_string (const gchar *string);
GQuark g_quark_from_static_string (const gchar *string);
GQuark g_quark_from_string (const gchar *string);
const gchar* g_quark_to_string (GQuark quark) __attribute__((__const__));

const gchar* g_intern_string (const gchar *string);
const gchar* g_intern_static_string (const gchar *string);


# 29 "/usr/include/glib-2.0/glib/gerror.h" 2



typedef struct _GError GError;

struct _GError
{
  GQuark domain;
  gint code;
  gchar *message;
};

GError* g_error_new (GQuark domain,
                                gint code,
                                const gchar *format,
                                ...) __attribute__((__format__ (__printf__, 3, 4)));

GError* g_error_new_literal (GQuark domain,
                                gint code,
                                const gchar *message);

void g_error_free (GError *error);
GError* g_error_copy (const GError *error);

gboolean g_error_matches (const GError *error,
                                GQuark domain,
                                gint code);




void g_set_error (GError **err,
                                GQuark domain,
                                gint code,
                                const gchar *format,
                                ...) __attribute__((__format__ (__printf__, 4, 5)));

void g_set_error_literal (GError **err,
                                GQuark domain,
                                gint code,
                                const gchar *message);



void g_propagate_error (GError **dest,
    GError *src);


void g_clear_error (GError **err);


void g_prefix_error (GError **err,
                                       const gchar *format,
                                       ...) __attribute__((__format__ (__printf__, 2, 3)));


void g_propagate_prefixed_error (GError **dest,
                                       GError *src,
                                       const gchar *format,
                                       ...) __attribute__((__format__ (__printf__, 3, 4)));


# 35 "/usr/include/glib-2.0/glib/gthread.h" 2
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 36 "/usr/include/glib-2.0/glib/gthread.h" 2
# 1 "/usr/include/glib-2.0/glib/gutils.h" 1
# 34 "/usr/include/glib-2.0/glib/gutils.h"
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 35 "/usr/include/glib-2.0/glib/gutils.h" 2
# 1 "/usr/lib64/gcc/x86_64-suse-linux/4.3/include/stdarg.h" 1 3 4
# 43 "/usr/lib64/gcc/x86_64-suse-linux/4.3/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 105 "/usr/lib64/gcc/x86_64-suse-linux/4.3/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 36 "/usr/include/glib-2.0/glib/gutils.h" 2


# 120 "/usr/include/glib-2.0/glib/gutils.h"
const gchar* g_get_user_name (void);
const gchar* g_get_real_name (void);
const gchar* g_get_home_dir (void);
const gchar* g_get_tmp_dir (void);
const gchar* g_get_host_name (void);
gchar* g_get_prgname (void);
void g_set_prgname (const gchar *prgname);
const gchar* g_get_application_name (void);
void g_set_application_name (const gchar *application_name);

const gchar* g_get_user_data_dir (void);
const gchar* g_get_user_config_dir (void);
const gchar* g_get_user_cache_dir (void);
const gchar* const * g_get_system_data_dirs (void);
# 153 "/usr/include/glib-2.0/glib/gutils.h"
const gchar* const * g_get_system_config_dirs (void);

const gchar* const * g_get_language_names (void);
# 179 "/usr/include/glib-2.0/glib/gutils.h"
typedef enum {
  G_USER_DIRECTORY_DESKTOP,
  G_USER_DIRECTORY_DOCUMENTS,
  G_USER_DIRECTORY_DOWNLOAD,
  G_USER_DIRECTORY_MUSIC,
  G_USER_DIRECTORY_PICTURES,
  G_USER_DIRECTORY_PUBLIC_SHARE,
  G_USER_DIRECTORY_TEMPLATES,
  G_USER_DIRECTORY_VIDEOS,

  G_USER_N_DIRECTORIES
} GUserDirectory;

const gchar* g_get_user_special_dir (GUserDirectory directory);

typedef struct _GDebugKey GDebugKey;
struct _GDebugKey
{
  const gchar *key;
  guint value;
};



guint g_parse_debug_string (const gchar *string,
         const GDebugKey *keys,
         guint nkeys);

gint g_snprintf (gchar *string,
         gulong n,
         gchar const *format,
         ...) __attribute__((__format__ (__printf__, 3, 4)));
gint g_vsnprintf (gchar *string,
         gulong n,
         gchar const *format,
         va_list args);


gboolean g_path_is_absolute (const gchar *file_name);


const gchar* g_path_skip_root (const gchar *file_name);







const gchar* g_basename (const gchar *file_name);
# 238 "/usr/include/glib-2.0/glib/gutils.h"
gchar* g_get_current_dir (void);
gchar* g_path_get_basename (const gchar *file_name) __attribute__((__malloc__));
gchar* g_path_get_dirname (const gchar *file_name) __attribute__((__malloc__));


void g_nullify_pointer (gpointer *nullify_location);
# 254 "/usr/include/glib-2.0/glib/gutils.h"
const gchar* g_getenv (const gchar *variable);
gboolean g_setenv (const gchar *variable,
         const gchar *value,
         gboolean overwrite);
void g_unsetenv (const gchar *variable);
gchar** g_listenv (void);


const gchar* _g_getenv_nomalloc (const gchar *variable,
         gchar buffer[1024]);





typedef void (*GVoidFunc) (void);
# 280 "/usr/include/glib-2.0/glib/gutils.h"
void g_atexit (GVoidFunc func);
# 294 "/usr/include/glib-2.0/glib/gutils.h"
gchar* g_find_program_in_path (const gchar *program);



static __inline __attribute__ ((unused)) gint g_bit_nth_lsf (gulong mask,
           gint nth_bit) __attribute__((__const__));
static __inline __attribute__ ((unused)) gint g_bit_nth_msf (gulong mask,
           gint nth_bit) __attribute__((__const__));
static __inline __attribute__ ((unused)) guint g_bit_storage (gulong number) __attribute__((__const__));




typedef struct _GTrashStack GTrashStack;
struct _GTrashStack
{
  GTrashStack *next;
};

static __inline __attribute__ ((unused)) void g_trash_stack_push (GTrashStack **stack_p,
       gpointer data_p);
static __inline __attribute__ ((unused)) gpointer g_trash_stack_pop (GTrashStack **stack_p);
static __inline __attribute__ ((unused)) gpointer g_trash_stack_peek (GTrashStack **stack_p);
static __inline __attribute__ ((unused)) guint g_trash_stack_height (GTrashStack **stack_p);




static __inline __attribute__ ((unused)) gint
g_bit_nth_lsf (gulong mask,
        gint nth_bit)
{
  if ((__builtin_expect (__extension__ ({ int _g_boolean_var_; if (nth_bit < -1) _g_boolean_var_ = 1; else _g_boolean_var_ = 0; _g_boolean_var_; }), 0)))
    nth_bit = -1;
  while (nth_bit < ((8 * 8) - 1))
    {
      nth_bit++;
      if (mask & (1UL << nth_bit))
 return nth_bit;
    }
  return -1;
}
static __inline __attribute__ ((unused)) gint
g_bit_nth_msf (gulong mask,
        gint nth_bit)
{
  if (nth_bit < 0 || (__builtin_expect (__extension__ ({ int _g_boolean_var_; if (nth_bit > 8 * 8) _g_boolean_var_ = 1; else _g_boolean_var_ = 0; _g_boolean_var_; }), 0)))
    nth_bit = 8 * 8;
  while (nth_bit > 0)
    {
      nth_bit--;
      if (mask & (1UL << nth_bit))
 return nth_bit;
    }
  return -1;
}
static __inline __attribute__ ((unused)) guint
g_bit_storage (gulong number)
{

  return (__builtin_expect (__extension__ ({ int _g_boolean_var_; if (number) _g_boolean_var_ = 1; else _g_boolean_var_ = 0; _g_boolean_var_; }), 1)) ?
    ((8 * 8 - 1) ^ __builtin_clzl(number)) + 1 : 1;
# 367 "/usr/include/glib-2.0/glib/gutils.h"
}
static __inline __attribute__ ((unused)) void
g_trash_stack_push (GTrashStack **stack_p,
      gpointer data_p)
{
  GTrashStack *data = (GTrashStack *) data_p;

  data->next = *stack_p;
  *stack_p = data;
}
static __inline __attribute__ ((unused)) gpointer
g_trash_stack_pop (GTrashStack **stack_p)
{
  GTrashStack *data;

  data = *stack_p;
  if (data)
    {
      *stack_p = data->next;



      data->next = ((void *)0);
    }

  return data;
}
static __inline __attribute__ ((unused)) gpointer
g_trash_stack_peek (GTrashStack **stack_p)
{
  GTrashStack *data;

  data = *stack_p;

  return data;
}
static __inline __attribute__ ((unused)) guint
g_trash_stack_height (GTrashStack **stack_p)
{
  GTrashStack *data;
  guint i = 0;

  for (data = *stack_p; data; data = data->next)
    i++;

  return i;
}






extern const guint glib_major_version;
extern const guint glib_minor_version;
extern const guint glib_micro_version;
extern const guint glib_interface_age;
extern const guint glib_binary_age;

const gchar * glib_check_version (guint required_major,
                                  guint required_minor,
                                  guint required_micro);








# 37 "/usr/include/glib-2.0/glib/gthread.h" 2
# 1 "/usr/include/glib-2.0/glib/gatomic.h" 1
# 37 "/usr/include/glib-2.0/glib/gatomic.h"
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 38 "/usr/include/glib-2.0/glib/gatomic.h" 2



gint g_atomic_int_exchange_and_add (volatile gint __attribute__((may_alias)) *atomic,
      gint val);
void g_atomic_int_add (volatile gint __attribute__((may_alias)) *atomic,
      gint val);
gboolean g_atomic_int_compare_and_exchange (volatile gint __attribute__((may_alias)) *atomic,
      gint oldval,
      gint newval);
gboolean g_atomic_pointer_compare_and_exchange (volatile gpointer __attribute__((may_alias)) *atomic,
      gpointer oldval,
      gpointer newval);

gint g_atomic_int_get (volatile gint __attribute__((may_alias)) *atomic);
void g_atomic_int_set (volatile gint __attribute__((may_alias)) *atomic,
      gint newval);
gpointer g_atomic_pointer_get (volatile gpointer __attribute__((may_alias)) *atomic);
void g_atomic_pointer_set (volatile gpointer __attribute__((may_alias)) *atomic,
      gpointer newval);
# 83 "/usr/include/glib-2.0/glib/gatomic.h"

# 38 "/usr/include/glib-2.0/glib/gthread.h" 2






extern GQuark g_thread_error_quark (void);


typedef enum
{
  G_THREAD_ERROR_AGAIN
} GThreadError;

typedef gpointer (*GThreadFunc) (gpointer data);

typedef enum
{
  G_THREAD_PRIORITY_LOW,
  G_THREAD_PRIORITY_NORMAL,
  G_THREAD_PRIORITY_HIGH,
  G_THREAD_PRIORITY_URGENT
} GThreadPriority;

typedef struct _GThread GThread;
struct _GThread
{

  GThreadFunc func;
  gpointer data;
  gboolean joinable;
  GThreadPriority priority;
};

typedef struct _GMutex GMutex;
typedef struct _GCond GCond;
typedef struct _GPrivate GPrivate;
typedef struct _GStaticPrivate GStaticPrivate;

typedef struct _GThreadFunctions GThreadFunctions;
struct _GThreadFunctions
{
  GMutex* (*mutex_new) (void);
  void (*mutex_lock) (GMutex *mutex);
  gboolean (*mutex_trylock) (GMutex *mutex);
  void (*mutex_unlock) (GMutex *mutex);
  void (*mutex_free) (GMutex *mutex);
  GCond* (*cond_new) (void);
  void (*cond_signal) (GCond *cond);
  void (*cond_broadcast) (GCond *cond);
  void (*cond_wait) (GCond *cond,
                                   GMutex *mutex);
  gboolean (*cond_timed_wait) (GCond *cond,
                                   GMutex *mutex,
                                   GTimeVal *end_time);
  void (*cond_free) (GCond *cond);
  GPrivate* (*private_new) (GDestroyNotify destructor);
  gpointer (*private_get) (GPrivate *private_key);
  void (*private_set) (GPrivate *private_key,
                                   gpointer data);
  void (*thread_create) (GThreadFunc func,
                                   gpointer data,
                                   gulong stack_size,
                                   gboolean joinable,
                                   gboolean bound,
                                   GThreadPriority priority,
                                   gpointer thread,
                                   GError **error);
  void (*thread_yield) (void);
  void (*thread_join) (gpointer thread);
  void (*thread_exit) (void);
  void (*thread_set_priority)(gpointer thread,
                                   GThreadPriority priority);
  void (*thread_self) (gpointer thread);
  gboolean (*thread_equal) (gpointer thread1,
       gpointer thread2);
};

extern GThreadFunctions g_thread_functions_for_glib_use;
extern gboolean g_thread_use_default_impl;
extern gboolean g_threads_got_initialized;

extern guint64 (*g_thread_gettime) (void);





void g_thread_init (GThreadFunctions *vtable);
# 135 "/usr/include/glib-2.0/glib/gthread.h"
void g_thread_init_with_errorcheck_mutexes (GThreadFunctions* vtable);




gboolean g_thread_get_initialized (void);
# 150 "/usr/include/glib-2.0/glib/gthread.h"
GMutex* g_static_mutex_get_mutex_impl (GMutex **mutex);
# 221 "/usr/include/glib-2.0/glib/gthread.h"
GThread* g_thread_create_full (GThreadFunc func,
                                gpointer data,
                                gulong stack_size,
                                gboolean joinable,
                                gboolean bound,
                                GThreadPriority priority,
                                GError **error);
GThread* g_thread_self (void);
void g_thread_exit (gpointer retval);
gpointer g_thread_join (GThread *thread);

void g_thread_set_priority (GThread *thread,
                                GThreadPriority priority);
# 246 "/usr/include/glib-2.0/glib/gthread.h"
void g_static_mutex_init (GStaticMutex *mutex);
void g_static_mutex_free (GStaticMutex *mutex);

struct _GStaticPrivate
{

  guint index;
};

void g_static_private_init (GStaticPrivate *private_key);
gpointer g_static_private_get (GStaticPrivate *private_key);
void g_static_private_set (GStaticPrivate *private_key,
       gpointer data,
       GDestroyNotify notify);
void g_static_private_free (GStaticPrivate *private_key);

typedef struct _GStaticRecMutex GStaticRecMutex;
struct _GStaticRecMutex
{

  GStaticMutex mutex;
  guint depth;
  GSystemThread owner;
};


void g_static_rec_mutex_init (GStaticRecMutex *mutex);
void g_static_rec_mutex_lock (GStaticRecMutex *mutex);
gboolean g_static_rec_mutex_trylock (GStaticRecMutex *mutex);
void g_static_rec_mutex_unlock (GStaticRecMutex *mutex);
void g_static_rec_mutex_lock_full (GStaticRecMutex *mutex,
                                         guint depth);
guint g_static_rec_mutex_unlock_full (GStaticRecMutex *mutex);
void g_static_rec_mutex_free (GStaticRecMutex *mutex);

typedef struct _GStaticRWLock GStaticRWLock;
struct _GStaticRWLock
{

  GStaticMutex mutex;
  GCond *read_cond;
  GCond *write_cond;
  guint read_counter;
  gboolean have_writer;
  guint want_to_read;
  guint want_to_write;
};



void g_static_rw_lock_init (GStaticRWLock* lock);
void g_static_rw_lock_reader_lock (GStaticRWLock* lock);
gboolean g_static_rw_lock_reader_trylock (GStaticRWLock* lock);
void g_static_rw_lock_reader_unlock (GStaticRWLock* lock);
void g_static_rw_lock_writer_lock (GStaticRWLock* lock);
gboolean g_static_rw_lock_writer_trylock (GStaticRWLock* lock);
void g_static_rw_lock_writer_unlock (GStaticRWLock* lock);
void g_static_rw_lock_free (GStaticRWLock* lock);

void g_thread_foreach (GFunc thread_func,
        gpointer user_data);

typedef enum
{
  G_ONCE_STATUS_NOTCALLED,
  G_ONCE_STATUS_PROGRESS,
  G_ONCE_STATUS_READY
} GOnceStatus;

typedef struct _GOnce GOnce;
struct _GOnce
{
  volatile GOnceStatus status;
  volatile gpointer retval;
};



gpointer g_once_impl (GOnce *once, GThreadFunc func, gpointer arg);
# 336 "/usr/include/glib-2.0/glib/gthread.h"
static __inline __attribute__ ((unused)) gboolean g_once_init_enter (volatile gsize *value_location);
gboolean g_once_init_enter_impl (volatile gsize *value_location);
void g_once_init_leave (volatile gsize *value_location,
                                                 gsize initialization_value);

static __inline __attribute__ ((unused)) gboolean
g_once_init_enter (volatile gsize *value_location)
{
  if (__builtin_expect (__extension__ ({ int _g_boolean_var_; if ((gpointer) ((gpointer)*(value_location)) != ((void *)0)) _g_boolean_var_ = 1; else _g_boolean_var_ = 0; _g_boolean_var_; }), 1))
    return (0);
  else
    return g_once_init_enter_impl (value_location);
}
# 360 "/usr/include/glib-2.0/glib/gthread.h"
extern void glib_dummy_decl (void);
# 402 "/usr/include/glib-2.0/glib/gthread.h"

# 35 "/usr/include/glib-2.0/glib/gasyncqueue.h" 2



typedef struct _GAsyncQueue GAsyncQueue;




GAsyncQueue* g_async_queue_new (void);

GAsyncQueue* g_async_queue_new_full (GDestroyNotify item_free_func);





void g_async_queue_lock (GAsyncQueue *queue);
void g_async_queue_unlock (GAsyncQueue *queue);


GAsyncQueue* g_async_queue_ref (GAsyncQueue *queue);
void g_async_queue_unref (GAsyncQueue *queue);



void g_async_queue_ref_unlocked (GAsyncQueue *queue);
void g_async_queue_unref_and_unlock (GAsyncQueue *queue);



void g_async_queue_push (GAsyncQueue *queue,
       gpointer data);
void g_async_queue_push_unlocked (GAsyncQueue *queue,
       gpointer data);

void g_async_queue_push_sorted (GAsyncQueue *queue,
       gpointer data,
       GCompareDataFunc func,
       gpointer user_data);
void g_async_queue_push_sorted_unlocked (GAsyncQueue *queue,
       gpointer data,
       GCompareDataFunc func,
       gpointer user_data);




gpointer g_async_queue_pop (GAsyncQueue *queue);
gpointer g_async_queue_pop_unlocked (GAsyncQueue *queue);


gpointer g_async_queue_try_pop (GAsyncQueue *queue);
gpointer g_async_queue_try_pop_unlocked (GAsyncQueue *queue);






gpointer g_async_queue_timed_pop (GAsyncQueue *queue,
       GTimeVal *end_time);
gpointer g_async_queue_timed_pop_unlocked (GAsyncQueue *queue,
       GTimeVal *end_time);
# 106 "/usr/include/glib-2.0/glib/gasyncqueue.h"
gint g_async_queue_length (GAsyncQueue *queue);
gint g_async_queue_length_unlocked (GAsyncQueue *queue);
void g_async_queue_sort (GAsyncQueue *queue,
       GCompareDataFunc func,
       gpointer user_data);
void g_async_queue_sort_unlocked (GAsyncQueue *queue,
       GCompareDataFunc func,
       gpointer user_data);


GMutex* _g_async_queue_get_mutex (GAsyncQueue *queue);


# 35 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gatomic.h" 1
# 36 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gbacktrace.h" 1
# 34 "/usr/include/glib-2.0/glib/gbacktrace.h"
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 35 "/usr/include/glib-2.0/glib/gbacktrace.h" 2
# 1 "/usr/include/signal.h" 1 3 4
# 31 "/usr/include/signal.h" 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 24 "/usr/include/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 104 "/usr/include/bits/sigset.h" 3 4
extern int __sigismember (__const __sigset_t *, int);
extern int __sigaddset (__sigset_t *, int);
extern int __sigdelset (__sigset_t *, int);
# 118 "/usr/include/bits/sigset.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int __sigismember (__const __sigset_t *__set, int __sig) { unsigned long int __mask = (((unsigned long int) 1) << (((__sig) - 1) % (8 * sizeof (unsigned long int)))); unsigned long int __word = (((__sig) - 1) / (8 * sizeof (unsigned long int))); return (__set->__val[__word] & __mask) ? 1 : 0; }
extern __inline __attribute__ ((__gnu_inline__)) int __sigaddset ( __sigset_t *__set, int __sig) { unsigned long int __mask = (((unsigned long int) 1) << (((__sig) - 1) % (8 * sizeof (unsigned long int)))); unsigned long int __word = (((__sig) - 1) / (8 * sizeof (unsigned long int))); return ((__set->__val[__word] |= __mask), 0); }
extern __inline __attribute__ ((__gnu_inline__)) int __sigdelset ( __sigset_t *__set, int __sig) { unsigned long int __mask = (((unsigned long int) 1) << (((__sig) - 1) % (8 * sizeof (unsigned long int)))); unsigned long int __word = (((__sig) - 1) / (8 * sizeof (unsigned long int))); return ((__set->__val[__word] &= ~__mask), 0); }
# 34 "/usr/include/signal.h" 2 3 4







typedef __sig_atomic_t sig_atomic_t;








typedef __sigset_t sigset_t;







# 1 "/usr/include/bits/signum.h" 1 3 4
# 59 "/usr/include/signal.h" 2 3 4



typedef __pid_t pid_t;





typedef __uid_t uid_t;






typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__));
# 90 "/usr/include/signal.h" 3 4







extern __sighandler_t signal (int __sig, __sighandler_t __handler) __asm__ ("" "__sysv_signal") __attribute__ ((__nothrow__));











extern __sighandler_t bsd_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__));






extern int kill (__pid_t __pid, int __sig) __attribute__ ((__nothrow__));
# 127 "/usr/include/signal.h" 3 4


extern int raise (int __sig) __attribute__ ((__nothrow__));

# 153 "/usr/include/signal.h" 3 4
extern int __sigpause (int __sig_or_mask, int __is_sig);
# 162 "/usr/include/signal.h" 3 4
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause");
# 216 "/usr/include/signal.h" 3 4
extern int sigemptyset (sigset_t *__set) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int sigismember (__const sigset_t *__set, int __signo)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 246 "/usr/include/signal.h" 3 4
# 1 "/usr/include/bits/sigaction.h" 1 3 4
# 25 "/usr/include/bits/sigaction.h" 3 4
struct sigaction
  {
# 40 "/usr/include/bits/sigaction.h" 3 4
    __sighandler_t sa_handler;



    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 247 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, __const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) __attribute__ ((__nothrow__));






extern int sigsuspend (__const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, __const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) __attribute__ ((__nothrow__));


extern int sigpending (sigset_t *__set) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int sigwait (__const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));
# 396 "/usr/include/signal.h" 3 4
extern int __libc_current_sigrtmin (void) __attribute__ ((__nothrow__));

extern int __libc_current_sigrtmax (void) __attribute__ ((__nothrow__));




# 36 "/usr/include/glib-2.0/glib/gbacktrace.h" 2


# 48 "/usr/include/glib-2.0/glib/gbacktrace.h"
void g_on_error_query (const gchar *prg_name);
void g_on_error_stack_trace (const gchar *prg_name);
# 66 "/usr/include/glib-2.0/glib/gbacktrace.h"

# 37 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gbase64.h" 1
# 28 "/usr/include/glib-2.0/glib/gbase64.h"
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 29 "/usr/include/glib-2.0/glib/gbase64.h" 2



gsize g_base64_encode_step (const guchar *in,
          gsize len,
          gboolean break_lines,
          gchar *out,
          gint *state,
          gint *save);
gsize g_base64_encode_close (gboolean break_lines,
          gchar *out,
          gint *state,
          gint *save);
gchar* g_base64_encode (const guchar *data,
          gsize len) __attribute__((__malloc__));
gsize g_base64_decode_step (const gchar *in,
          gsize len,
          guchar *out,
          gint *state,
          guint *save);
guchar *g_base64_decode (const gchar *text,
          gsize *out_len) __attribute__((__malloc__));
guchar *g_base64_decode_inplace (gchar *text,
                                 gsize *out_len);



# 38 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gbookmarkfile.h" 1
# 27 "/usr/include/glib-2.0/glib/gbookmarkfile.h"
# 1 "/usr/include/glib-2.0/glib/gerror.h" 1
# 28 "/usr/include/glib-2.0/glib/gbookmarkfile.h" 2








typedef enum
{
  G_BOOKMARK_FILE_ERROR_INVALID_URI,
  G_BOOKMARK_FILE_ERROR_INVALID_VALUE,
  G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED,
  G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
  G_BOOKMARK_FILE_ERROR_READ,
  G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING,
  G_BOOKMARK_FILE_ERROR_WRITE,
  G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND
} GBookmarkFileError;

GQuark g_bookmark_file_error_quark (void);




typedef struct _GBookmarkFile GBookmarkFile;

GBookmarkFile *g_bookmark_file_new (void);
void g_bookmark_file_free (GBookmarkFile *bookmark);

gboolean g_bookmark_file_load_from_file (GBookmarkFile *bookmark,
          const gchar *filename,
          GError **error);
gboolean g_bookmark_file_load_from_data (GBookmarkFile *bookmark,
          const gchar *data,
          gsize length,
          GError **error);
gboolean g_bookmark_file_load_from_data_dirs (GBookmarkFile *bookmark,
          const gchar *file,
          gchar **full_path,
          GError **error);
gchar * g_bookmark_file_to_data (GBookmarkFile *bookmark,
          gsize *length,
          GError **error) __attribute__((__malloc__));
gboolean g_bookmark_file_to_file (GBookmarkFile *bookmark,
          const gchar *filename,
          GError **error);

void g_bookmark_file_set_title (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *title);
gchar * g_bookmark_file_get_title (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error) __attribute__((__malloc__));
void g_bookmark_file_set_description (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *description);
gchar * g_bookmark_file_get_description (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error) __attribute__((__malloc__));
void g_bookmark_file_set_mime_type (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *mime_type);
gchar * g_bookmark_file_get_mime_type (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error) __attribute__((__malloc__));
void g_bookmark_file_set_groups (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar **groups,
          gsize length);
void g_bookmark_file_add_group (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *group);
gboolean g_bookmark_file_has_group (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *group,
          GError **error);
gchar ** g_bookmark_file_get_groups (GBookmarkFile *bookmark,
          const gchar *uri,
          gsize *length,
          GError **error) __attribute__((__malloc__));
void g_bookmark_file_add_application (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *name,
          const gchar *exec);
gboolean g_bookmark_file_has_application (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *name,
          GError **error);
gchar ** g_bookmark_file_get_applications (GBookmarkFile *bookmark,
          const gchar *uri,
          gsize *length,
          GError **error) __attribute__((__malloc__));
gboolean g_bookmark_file_set_app_info (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *name,
          const gchar *exec,
          gint count,
          time_t stamp,
          GError **error);
gboolean g_bookmark_file_get_app_info (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *name,
          gchar **exec,
          guint *count,
          time_t *stamp,
          GError **error);
void g_bookmark_file_set_is_private (GBookmarkFile *bookmark,
          const gchar *uri,
          gboolean is_private);
gboolean g_bookmark_file_get_is_private (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error);
void g_bookmark_file_set_icon (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *href,
          const gchar *mime_type);
gboolean g_bookmark_file_get_icon (GBookmarkFile *bookmark,
          const gchar *uri,
          gchar **href,
          gchar **mime_type,
          GError **error);
void g_bookmark_file_set_added (GBookmarkFile *bookmark,
          const gchar *uri,
          time_t added);
time_t g_bookmark_file_get_added (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error);
void g_bookmark_file_set_modified (GBookmarkFile *bookmark,
          const gchar *uri,
          time_t modified);
time_t g_bookmark_file_get_modified (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error);
void g_bookmark_file_set_visited (GBookmarkFile *bookmark,
          const gchar *uri,
          time_t visited);
time_t g_bookmark_file_get_visited (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error);
gboolean g_bookmark_file_has_item (GBookmarkFile *bookmark,
          const gchar *uri);
gint g_bookmark_file_get_size (GBookmarkFile *bookmark);
gchar ** g_bookmark_file_get_uris (GBookmarkFile *bookmark,
          gsize *length) __attribute__((__malloc__));
gboolean g_bookmark_file_remove_group (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *group,
          GError **error);
gboolean g_bookmark_file_remove_application (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *name,
          GError **error);
gboolean g_bookmark_file_remove_item (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error);
gboolean g_bookmark_file_move_item (GBookmarkFile *bookmark,
          const gchar *old_uri,
          const gchar *new_uri,
          GError **error);


# 39 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gcache.h" 1
# 34 "/usr/include/glib-2.0/glib/gcache.h"
# 1 "/usr/include/glib-2.0/glib/glist.h" 1
# 34 "/usr/include/glib-2.0/glib/glist.h"
# 1 "/usr/include/glib-2.0/glib/gmem.h" 1
# 34 "/usr/include/glib-2.0/glib/gmem.h"
# 1 "/usr/include/glib-2.0/glib/gslice.h" 1
# 31 "/usr/include/glib-2.0/glib/gslice.h"
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 32 "/usr/include/glib-2.0/glib/gslice.h" 2





gpointer g_slice_alloc (gsize block_size) __attribute__((__malloc__)) __attribute__((__alloc_size__(1)));
gpointer g_slice_alloc0 (gsize block_size) __attribute__((__malloc__)) __attribute__((__alloc_size__(1)));
gpointer g_slice_copy (gsize block_size,
                                         gconstpointer mem_block) __attribute__((__malloc__)) __attribute__((__alloc_size__(1)));
void g_slice_free1 (gsize block_size,
      gpointer mem_block);
void g_slice_free_chain_with_offset (gsize block_size,
      gpointer mem_chain,
      gsize next_offset);
# 76 "/usr/include/glib-2.0/glib/gslice.h"
typedef enum {
  G_SLICE_CONFIG_ALWAYS_MALLOC = 1,
  G_SLICE_CONFIG_BYPASS_MAGAZINES,
  G_SLICE_CONFIG_WORKING_SET_MSECS,
  G_SLICE_CONFIG_COLOR_INCREMENT,
  G_SLICE_CONFIG_CHUNK_SIZES,
  G_SLICE_CONFIG_CONTENTION_COUNTER
} GSliceConfig;
void g_slice_set_config (GSliceConfig ckey, gint64 value);
gint64 g_slice_get_config (GSliceConfig ckey);
gint64* g_slice_get_config_state (GSliceConfig ckey, gint64 address, guint *n_values);


# 35 "/usr/include/glib-2.0/glib/gmem.h" 2
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 36 "/usr/include/glib-2.0/glib/gmem.h" 2



typedef struct _GMemVTable GMemVTable;
# 51 "/usr/include/glib-2.0/glib/gmem.h"
gpointer g_malloc (gsize n_bytes) __attribute__((__malloc__)) __attribute__((__alloc_size__(1)));
gpointer g_malloc0 (gsize n_bytes) __attribute__((__malloc__)) __attribute__((__alloc_size__(1)));
gpointer g_realloc (gpointer mem,
      gsize n_bytes) __attribute__((warn_unused_result));
void g_free (gpointer mem);
gpointer g_try_malloc (gsize n_bytes) __attribute__((__malloc__)) __attribute__((__alloc_size__(1)));
gpointer g_try_malloc0 (gsize n_bytes) __attribute__((__malloc__)) __attribute__((__alloc_size__(1)));
gpointer g_try_realloc (gpointer mem,
      gsize n_bytes) __attribute__((warn_unused_result));
# 83 "/usr/include/glib-2.0/glib/gmem.h"
struct _GMemVTable
{
  gpointer (*malloc) (gsize n_bytes);
  gpointer (*realloc) (gpointer mem,
      gsize n_bytes);
  void (*free) (gpointer mem);

  gpointer (*calloc) (gsize n_blocks,
      gsize n_block_bytes);
  gpointer (*try_malloc) (gsize n_bytes);
  gpointer (*try_realloc) (gpointer mem,
      gsize n_bytes);
};
void g_mem_set_vtable (GMemVTable *vtable);
gboolean g_mem_is_system_malloc (void);

extern gboolean g_mem_gc_friendly;



extern GMemVTable *glib_mem_profiler_table;
void g_mem_profile (void);




typedef struct _GAllocator GAllocator;
typedef struct _GMemChunk GMemChunk;
# 128 "/usr/include/glib-2.0/glib/gmem.h"
GMemChunk* g_mem_chunk_new (const gchar *name,
    gint atom_size,
    gsize area_size,
    gint type);
void g_mem_chunk_destroy (GMemChunk *mem_chunk);
gpointer g_mem_chunk_alloc (GMemChunk *mem_chunk);
gpointer g_mem_chunk_alloc0 (GMemChunk *mem_chunk);
void g_mem_chunk_free (GMemChunk *mem_chunk,
    gpointer mem);
void g_mem_chunk_clean (GMemChunk *mem_chunk);
void g_mem_chunk_reset (GMemChunk *mem_chunk);
void g_mem_chunk_print (GMemChunk *mem_chunk);
void g_mem_chunk_info (void);
void g_blow_chunks (void);
GAllocator*g_allocator_new (const gchar *name,
    guint n_preallocs);
void g_allocator_free (GAllocator *allocator);






# 35 "/usr/include/glib-2.0/glib/glist.h" 2



typedef struct _GList GList;

struct _GList
{
  gpointer data;
  GList *next;
  GList *prev;
};



GList* g_list_alloc (void) __attribute__((warn_unused_result));
void g_list_free (GList *list);
void g_list_free_1 (GList *list);

GList* g_list_append (GList *list,
      gpointer data) __attribute__((warn_unused_result));
GList* g_list_prepend (GList *list,
      gpointer data) __attribute__((warn_unused_result));
GList* g_list_insert (GList *list,
      gpointer data,
      gint position) __attribute__((warn_unused_result));
GList* g_list_insert_sorted (GList *list,
      gpointer data,
      GCompareFunc func) __attribute__((warn_unused_result));
GList* g_list_insert_sorted_with_data (GList *list,
      gpointer data,
      GCompareDataFunc func,
      gpointer user_data) __attribute__((warn_unused_result));
GList* g_list_insert_before (GList *list,
      GList *sibling,
      gpointer data) __attribute__((warn_unused_result));
GList* g_list_concat (GList *list1,
      GList *list2) __attribute__((warn_unused_result));
GList* g_list_remove (GList *list,
      gconstpointer data) __attribute__((warn_unused_result));
GList* g_list_remove_all (GList *list,
      gconstpointer data) __attribute__((warn_unused_result));
GList* g_list_remove_link (GList *list,
      GList *llink) __attribute__((warn_unused_result));
GList* g_list_delete_link (GList *list,
      GList *link_) __attribute__((warn_unused_result));
GList* g_list_reverse (GList *list) __attribute__((warn_unused_result));
GList* g_list_copy (GList *list) __attribute__((warn_unused_result));
GList* g_list_nth (GList *list,
      guint n);
GList* g_list_nth_prev (GList *list,
      guint n);
GList* g_list_find (GList *list,
      gconstpointer data);
GList* g_list_find_custom (GList *list,
      gconstpointer data,
      GCompareFunc func);
gint g_list_position (GList *list,
      GList *llink);
gint g_list_index (GList *list,
      gconstpointer data);
GList* g_list_last (GList *list);
GList* g_list_first (GList *list);
guint g_list_length (GList *list);
void g_list_foreach (GList *list,
      GFunc func,
      gpointer user_data);
GList* g_list_sort (GList *list,
      GCompareFunc compare_func) __attribute__((warn_unused_result));
GList* g_list_sort_with_data (GList *list,
      GCompareDataFunc compare_func,
      gpointer user_data) __attribute__((warn_unused_result));
gpointer g_list_nth_data (GList *list,
      guint n);






void g_list_push_allocator (gpointer allocator);
void g_list_pop_allocator (void);



# 35 "/usr/include/glib-2.0/glib/gcache.h" 2



typedef struct _GCache GCache;

typedef gpointer (*GCacheNewFunc) (gpointer key);
typedef gpointer (*GCacheDupFunc) (gpointer value);
typedef void (*GCacheDestroyFunc) (gpointer value);



GCache* g_cache_new (GCacheNewFunc value_new_func,
                                GCacheDestroyFunc value_destroy_func,
                                GCacheDupFunc key_dup_func,
                                GCacheDestroyFunc key_destroy_func,
                                GHashFunc hash_key_func,
                                GHashFunc hash_value_func,
                                GEqualFunc key_equal_func);
void g_cache_destroy (GCache *cache);
gpointer g_cache_insert (GCache *cache,
                                gpointer key);
void g_cache_remove (GCache *cache,
                                gconstpointer value);
void g_cache_key_foreach (GCache *cache,
                                GHFunc func,
                                gpointer user_data);

void g_cache_value_foreach (GCache *cache,
                                GHFunc func,
                                gpointer user_data);



# 40 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gchecksum.h" 1
# 28 "/usr/include/glib-2.0/glib/gchecksum.h"
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 29 "/usr/include/glib-2.0/glib/gchecksum.h" 2


# 46 "/usr/include/glib-2.0/glib/gchecksum.h"
typedef enum {
  G_CHECKSUM_MD5,
  G_CHECKSUM_SHA1,
  G_CHECKSUM_SHA256
} GChecksumType;
# 61 "/usr/include/glib-2.0/glib/gchecksum.h"
typedef struct _GChecksum GChecksum;

gssize g_checksum_type_get_length (GChecksumType checksum_type);

GChecksum * g_checksum_new (GChecksumType checksum_type);
void g_checksum_reset (GChecksum *checksum);
GChecksum * g_checksum_copy (const GChecksum *checksum);
void g_checksum_free (GChecksum *checksum);
void g_checksum_update (GChecksum *checksum,
                                             const guchar *data,
                                             gssize length);
const gchar *g_checksum_get_string (GChecksum *checksum);
void g_checksum_get_digest (GChecksum *checksum,
                                             guint8 *buffer,
                                             gsize *digest_len);

gchar *g_compute_checksum_for_data (GChecksumType checksum_type,
                                      const guchar *data,
                                      gsize length);
gchar *g_compute_checksum_for_string (GChecksumType checksum_type,
                                      const gchar *str,
                                      gssize length);


# 41 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gcompletion.h" 1
# 34 "/usr/include/glib-2.0/glib/gcompletion.h"
# 1 "/usr/include/glib-2.0/glib/glist.h" 1
# 35 "/usr/include/glib-2.0/glib/gcompletion.h" 2



typedef struct _GCompletion GCompletion;

typedef gchar* (*GCompletionFunc) (gpointer);




typedef gint (*GCompletionStrncmpFunc) (const gchar *s1,
     const gchar *s2,
     gsize n);

struct _GCompletion
{
  GList* items;
  GCompletionFunc func;

  gchar* prefix;
  GList* cache;
  GCompletionStrncmpFunc strncmp_func;
};

GCompletion* g_completion_new (GCompletionFunc func);
void g_completion_add_items (GCompletion* cmp,
                                         GList* items);
void g_completion_remove_items (GCompletion* cmp,
                                         GList* items);
void g_completion_clear_items (GCompletion* cmp);
GList* g_completion_complete (GCompletion* cmp,
                                         const gchar* prefix,
                                         gchar** new_prefix);
GList* g_completion_complete_utf8 (GCompletion *cmp,
                                         const gchar* prefix,
                                         gchar** new_prefix);
void g_completion_set_compare (GCompletion *cmp,
             GCompletionStrncmpFunc strncmp_func);
void g_completion_free (GCompletion* cmp);


# 42 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gconvert.h" 1
# 34 "/usr/include/glib-2.0/glib/gconvert.h"
# 1 "/usr/include/glib-2.0/glib/gerror.h" 1
# 35 "/usr/include/glib-2.0/glib/gconvert.h" 2



typedef enum
{
  G_CONVERT_ERROR_NO_CONVERSION,
  G_CONVERT_ERROR_ILLEGAL_SEQUENCE,
  G_CONVERT_ERROR_FAILED,
  G_CONVERT_ERROR_PARTIAL_INPUT,
  G_CONVERT_ERROR_BAD_URI,
  G_CONVERT_ERROR_NOT_ABSOLUTE_PATH
} GConvertError;


GQuark g_convert_error_quark (void);



typedef struct _GIConv *GIConv;

GIConv g_iconv_open (const gchar *to_codeset,
         const gchar *from_codeset);
gsize g_iconv (GIConv converter,
         gchar **inbuf,
         gsize *inbytes_left,
         gchar **outbuf,
         gsize *outbytes_left);
gint g_iconv_close (GIConv converter);


gchar* g_convert (const gchar *str,
    gssize len,
    const gchar *to_codeset,
    const gchar *from_codeset,
    gsize *bytes_read,
    gsize *bytes_written,
    GError **error) __attribute__((__malloc__));
gchar* g_convert_with_iconv (const gchar *str,
    gssize len,
    GIConv converter,
    gsize *bytes_read,
    gsize *bytes_written,
    GError **error) __attribute__((__malloc__));
gchar* g_convert_with_fallback (const gchar *str,
    gssize len,
    const gchar *to_codeset,
    const gchar *from_codeset,
    gchar *fallback,
    gsize *bytes_read,
    gsize *bytes_written,
    GError **error) __attribute__((__malloc__));




gchar* g_locale_to_utf8 (const gchar *opsysstring,
      gssize len,
      gsize *bytes_read,
      gsize *bytes_written,
      GError **error) __attribute__((__malloc__));
gchar* g_locale_from_utf8 (const gchar *utf8string,
      gssize len,
      gsize *bytes_read,
      gsize *bytes_written,
      GError **error) __attribute__((__malloc__));
# 111 "/usr/include/glib-2.0/glib/gconvert.h"
gchar* g_filename_to_utf8 (const gchar *opsysstring,
        gssize len,
        gsize *bytes_read,
        gsize *bytes_written,
        GError **error) __attribute__((__malloc__));
gchar* g_filename_from_utf8 (const gchar *utf8string,
        gssize len,
        gsize *bytes_read,
        gsize *bytes_written,
        GError **error) __attribute__((__malloc__));

gchar *g_filename_from_uri (const gchar *uri,
       gchar **hostname,
       GError **error) __attribute__((__malloc__));

gchar *g_filename_to_uri (const gchar *filename,
       const gchar *hostname,
       GError **error) __attribute__((__malloc__));
gchar *g_filename_display_name (const gchar *filename) __attribute__((__malloc__));
gboolean g_get_filename_charsets (const gchar ***charsets);

gchar *g_filename_display_basename (const gchar *filename) __attribute__((__malloc__));

gchar **g_uri_list_extract_uris (const gchar *uri_list) __attribute__((__malloc__));


# 43 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gdataset.h" 1
# 34 "/usr/include/glib-2.0/glib/gdataset.h"
# 1 "/usr/include/glib-2.0/glib/gquark.h" 1
# 35 "/usr/include/glib-2.0/glib/gdataset.h" 2



typedef struct _GData GData;

typedef void (*GDataForeachFunc) (GQuark key_id,
                                                 gpointer data,
                                                 gpointer user_data);



void g_datalist_init (GData **datalist);
void g_datalist_clear (GData **datalist);
gpointer g_datalist_id_get_data (GData **datalist,
      GQuark key_id);
void g_datalist_id_set_data_full (GData **datalist,
      GQuark key_id,
      gpointer data,
      GDestroyNotify destroy_func);
gpointer g_datalist_id_remove_no_notify (GData **datalist,
      GQuark key_id);
void g_datalist_foreach (GData **datalist,
      GDataForeachFunc func,
      gpointer user_data);
# 69 "/usr/include/glib-2.0/glib/gdataset.h"
void g_datalist_set_flags (GData **datalist,
      guint flags);
void g_datalist_unset_flags (GData **datalist,
      guint flags);
guint g_datalist_get_flags (GData **datalist);
# 93 "/usr/include/glib-2.0/glib/gdataset.h"
void g_dataset_destroy (gconstpointer dataset_location);
gpointer g_dataset_id_get_data (gconstpointer dataset_location,
                                         GQuark key_id);
void g_dataset_id_set_data_full (gconstpointer dataset_location,
                                         GQuark key_id,
                                         gpointer data,
                                         GDestroyNotify destroy_func);
gpointer g_dataset_id_remove_no_notify (gconstpointer dataset_location,
                                         GQuark key_id);
void g_dataset_foreach (gconstpointer dataset_location,
                                         GDataForeachFunc func,
                                         gpointer user_data);
# 120 "/usr/include/glib-2.0/glib/gdataset.h"

# 44 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gdate.h" 1
# 36 "/usr/include/glib-2.0/glib/gdate.h"
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 37 "/usr/include/glib-2.0/glib/gdate.h" 2
# 1 "/usr/include/glib-2.0/glib/gquark.h" 1
# 38 "/usr/include/glib-2.0/glib/gdate.h" 2


# 50 "/usr/include/glib-2.0/glib/gdate.h"
typedef gint32 GTime;
typedef guint16 GDateYear;
typedef guint8 GDateDay;
typedef struct _GDate GDate;


typedef enum
{
  G_DATE_DAY = 0,
  G_DATE_MONTH = 1,
  G_DATE_YEAR = 2
} GDateDMY;


typedef enum
{
  G_DATE_BAD_WEEKDAY = 0,
  G_DATE_MONDAY = 1,
  G_DATE_TUESDAY = 2,
  G_DATE_WEDNESDAY = 3,
  G_DATE_THURSDAY = 4,
  G_DATE_FRIDAY = 5,
  G_DATE_SATURDAY = 6,
  G_DATE_SUNDAY = 7
} GDateWeekday;
typedef enum
{
  G_DATE_BAD_MONTH = 0,
  G_DATE_JANUARY = 1,
  G_DATE_FEBRUARY = 2,
  G_DATE_MARCH = 3,
  G_DATE_APRIL = 4,
  G_DATE_MAY = 5,
  G_DATE_JUNE = 6,
  G_DATE_JULY = 7,
  G_DATE_AUGUST = 8,
  G_DATE_SEPTEMBER = 9,
  G_DATE_OCTOBER = 10,
  G_DATE_NOVEMBER = 11,
  G_DATE_DECEMBER = 12
} GDateMonth;
# 101 "/usr/include/glib-2.0/glib/gdate.h"
struct _GDate
{
  guint julian_days : 32;





  guint julian : 1;
  guint dmy : 1;


  guint day : 6;
  guint month : 4;
  guint year : 16;
};





GDate* g_date_new (void);
GDate* g_date_new_dmy (GDateDay day,
                                           GDateMonth month,
                                           GDateYear year);
GDate* g_date_new_julian (guint32 julian_day);
void g_date_free (GDate *date);






gboolean g_date_valid (const GDate *date);
gboolean g_date_valid_day (GDateDay day) __attribute__((__const__));
gboolean g_date_valid_month (GDateMonth month) __attribute__((__const__));
gboolean g_date_valid_year (GDateYear year) __attribute__((__const__));
gboolean g_date_valid_weekday (GDateWeekday weekday) __attribute__((__const__));
gboolean g_date_valid_julian (guint32 julian_date) __attribute__((__const__));
gboolean g_date_valid_dmy (GDateDay day,
                                           GDateMonth month,
                                           GDateYear year) __attribute__((__const__));

GDateWeekday g_date_get_weekday (const GDate *date);
GDateMonth g_date_get_month (const GDate *date);
GDateYear g_date_get_year (const GDate *date);
GDateDay g_date_get_day (const GDate *date);
guint32 g_date_get_julian (const GDate *date);
guint g_date_get_day_of_year (const GDate *date);






guint g_date_get_monday_week_of_year (const GDate *date);
guint g_date_get_sunday_week_of_year (const GDate *date);
guint g_date_get_iso8601_week_of_year (const GDate *date);





void g_date_clear (GDate *date,
                                           guint n_dates);





void g_date_set_parse (GDate *date,
                                           const gchar *str);
void g_date_set_time_t (GDate *date,
        time_t timet);
void g_date_set_time_val (GDate *date,
        GTimeVal *timeval);

void g_date_set_time (GDate *date,
                                           GTime time_);

void g_date_set_month (GDate *date,
                                           GDateMonth month);
void g_date_set_day (GDate *date,
                                           GDateDay day);
void g_date_set_year (GDate *date,
                                           GDateYear year);
void g_date_set_dmy (GDate *date,
                                           GDateDay day,
                                           GDateMonth month,
                                           GDateYear y);
void g_date_set_julian (GDate *date,
                                           guint32 julian_date);
gboolean g_date_is_first_of_month (const GDate *date);
gboolean g_date_is_last_of_month (const GDate *date);


void g_date_add_days (GDate *date,
                                           guint n_days);
void g_date_subtract_days (GDate *date,
                                           guint n_days);


void g_date_add_months (GDate *date,
                                           guint n_months);
void g_date_subtract_months (GDate *date,
                                           guint n_months);


void g_date_add_years (GDate *date,
                                           guint n_years);
void g_date_subtract_years (GDate *date,
                                           guint n_years);
gboolean g_date_is_leap_year (GDateYear year) __attribute__((__const__));
guint8 g_date_get_days_in_month (GDateMonth month,
                                           GDateYear year) __attribute__((__const__));
guint8 g_date_get_monday_weeks_in_year (GDateYear year) __attribute__((__const__));
guint8 g_date_get_sunday_weeks_in_year (GDateYear year) __attribute__((__const__));



gint g_date_days_between (const GDate *date1,
        const GDate *date2);


gint g_date_compare (const GDate *lhs,
                                           const GDate *rhs);
void g_date_to_struct_tm (const GDate *date,
                                           struct tm *tm);

void g_date_clamp (GDate *date,
        const GDate *min_date,
        const GDate *max_date);


void g_date_order (GDate *date1, GDate *date2);




gsize g_date_strftime (gchar *s,
                                           gsize slen,
                                           const gchar *format,
                                           const GDate *date);
# 261 "/usr/include/glib-2.0/glib/gdate.h"

# 45 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gdir.h" 1
# 31 "/usr/include/glib-2.0/glib/gdir.h"
# 1 "/usr/include/glib-2.0/glib/gerror.h" 1
# 32 "/usr/include/glib-2.0/glib/gdir.h" 2



typedef struct _GDir GDir;







GDir * g_dir_open (const gchar *path,
            guint flags,
            GError **error);
const gchar *g_dir_read_name (GDir *dir);
void g_dir_rewind (GDir *dir);
void g_dir_close (GDir *dir);


# 46 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gerror.h" 1
# 47 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gfileutils.h" 1
# 28 "/usr/include/glib-2.0/glib/gfileutils.h"
# 1 "/usr/include/glib-2.0/glib/gerror.h" 1
# 29 "/usr/include/glib-2.0/glib/gfileutils.h" 2





typedef enum
{
  G_FILE_ERROR_EXIST,
  G_FILE_ERROR_ISDIR,
  G_FILE_ERROR_ACCES,
  G_FILE_ERROR_NAMETOOLONG,
  G_FILE_ERROR_NOENT,
  G_FILE_ERROR_NOTDIR,
  G_FILE_ERROR_NXIO,
  G_FILE_ERROR_NODEV,
  G_FILE_ERROR_ROFS,
  G_FILE_ERROR_TXTBSY,
  G_FILE_ERROR_FAULT,
  G_FILE_ERROR_LOOP,
  G_FILE_ERROR_NOSPC,
  G_FILE_ERROR_NOMEM,
  G_FILE_ERROR_MFILE,
  G_FILE_ERROR_NFILE,
  G_FILE_ERROR_BADF,
  G_FILE_ERROR_INVAL,
  G_FILE_ERROR_PIPE,
  G_FILE_ERROR_AGAIN,
  G_FILE_ERROR_INTR,
  G_FILE_ERROR_IO,
  G_FILE_ERROR_PERM,
  G_FILE_ERROR_NOSYS,
  G_FILE_ERROR_FAILED
} GFileError;





typedef enum
{
  G_FILE_TEST_IS_REGULAR = 1 << 0,
  G_FILE_TEST_IS_SYMLINK = 1 << 1,
  G_FILE_TEST_IS_DIR = 1 << 2,
  G_FILE_TEST_IS_EXECUTABLE = 1 << 3,
  G_FILE_TEST_EXISTS = 1 << 4
} GFileTest;

GQuark g_file_error_quark (void);

GFileError g_file_error_from_errno (gint err_no);
# 87 "/usr/include/glib-2.0/glib/gfileutils.h"
gboolean g_file_test (const gchar *filename,
                              GFileTest test);
gboolean g_file_get_contents (const gchar *filename,
                              gchar **contents,
                              gsize *length,
                              GError **error);
gboolean g_file_set_contents (const gchar *filename,
         const gchar *contents,
         gssize length,
         GError **error);
gchar *g_file_read_link (const gchar *filename,
         GError **error);


gint g_mkstemp (gchar *tmpl);


gint g_file_open_tmp (const gchar *tmpl,
         gchar **name_used,
         GError **error);

char *g_format_size_for_display (goffset size);

gchar *g_build_path (const gchar *separator,
    const gchar *first_element,
    ...) __attribute__((__malloc__)) __attribute__((__sentinel__));
gchar *g_build_pathv (const gchar *separator,
    gchar **args) __attribute__((__malloc__));

gchar *g_build_filename (const gchar *first_element,
    ...) __attribute__((__malloc__)) __attribute__((__sentinel__));
gchar *g_build_filenamev (gchar **args) __attribute__((__malloc__));

int g_mkdir_with_parents (const gchar *pathname,
        int mode);


# 48 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/ghash.h" 1
# 34 "/usr/include/glib-2.0/glib/ghash.h"
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 35 "/usr/include/glib-2.0/glib/ghash.h" 2
# 1 "/usr/include/glib-2.0/glib/glist.h" 1
# 36 "/usr/include/glib-2.0/glib/ghash.h" 2



typedef struct _GHashTable GHashTable;

typedef gboolean (*GHRFunc) (gpointer key,
                               gpointer value,
                               gpointer user_data);

typedef struct _GHashTableIter GHashTableIter;

struct _GHashTableIter
{

  gpointer dummy1;
  gpointer dummy2;
  gpointer dummy3;
  int dummy4;
  gboolean dummy5;
  gpointer dummy6;
};



GHashTable* g_hash_table_new (GHashFunc hash_func,
         GEqualFunc key_equal_func);
GHashTable* g_hash_table_new_full (GHashFunc hash_func,
         GEqualFunc key_equal_func,
         GDestroyNotify key_destroy_func,
         GDestroyNotify value_destroy_func);
void g_hash_table_destroy (GHashTable *hash_table);
void g_hash_table_insert (GHashTable *hash_table,
         gpointer key,
         gpointer value);
void g_hash_table_replace (GHashTable *hash_table,
         gpointer key,
         gpointer value);
gboolean g_hash_table_remove (GHashTable *hash_table,
         gconstpointer key);
void g_hash_table_remove_all (GHashTable *hash_table);
gboolean g_hash_table_steal (GHashTable *hash_table,
         gconstpointer key);
void g_hash_table_steal_all (GHashTable *hash_table);
gpointer g_hash_table_lookup (GHashTable *hash_table,
         gconstpointer key);
gboolean g_hash_table_lookup_extended (GHashTable *hash_table,
         gconstpointer lookup_key,
         gpointer *orig_key,
         gpointer *value);
void g_hash_table_foreach (GHashTable *hash_table,
         GHFunc func,
         gpointer user_data);
gpointer g_hash_table_find (GHashTable *hash_table,
         GHRFunc predicate,
         gpointer user_data);
guint g_hash_table_foreach_remove (GHashTable *hash_table,
         GHRFunc func,
         gpointer user_data);
guint g_hash_table_foreach_steal (GHashTable *hash_table,
         GHRFunc func,
         gpointer user_data);
guint g_hash_table_size (GHashTable *hash_table);
GList * g_hash_table_get_keys (GHashTable *hash_table);
GList * g_hash_table_get_values (GHashTable *hash_table);

void g_hash_table_iter_init (GHashTableIter *iter,
         GHashTable *hash_table);
gboolean g_hash_table_iter_next (GHashTableIter *iter,
         gpointer *key,
         gpointer *value);
GHashTable* g_hash_table_iter_get_hash_table (GHashTableIter *iter);
void g_hash_table_iter_remove (GHashTableIter *iter);
void g_hash_table_iter_steal (GHashTableIter *iter);


GHashTable* g_hash_table_ref (GHashTable *hash_table);
void g_hash_table_unref (GHashTable *hash_table);
# 125 "/usr/include/glib-2.0/glib/ghash.h"
gboolean g_str_equal (gconstpointer v1,
                      gconstpointer v2);
guint g_str_hash (gconstpointer v);

gboolean g_int_equal (gconstpointer v1,
                      gconstpointer v2);
guint g_int_hash (gconstpointer v);







guint g_direct_hash (gconstpointer v) __attribute__((__const__));
gboolean g_direct_equal (gconstpointer v1,
                         gconstpointer v2) __attribute__((__const__));


# 49 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/ghook.h" 1
# 34 "/usr/include/glib-2.0/glib/ghook.h"
# 1 "/usr/include/glib-2.0/glib/gmem.h" 1
# 35 "/usr/include/glib-2.0/glib/ghook.h" 2





typedef struct _GHook GHook;
typedef struct _GHookList GHookList;

typedef gint (*GHookCompareFunc) (GHook *new_hook,
       GHook *sibling);
typedef gboolean (*GHookFindFunc) (GHook *hook,
       gpointer data);
typedef void (*GHookMarshaller) (GHook *hook,
       gpointer marshal_data);
typedef gboolean (*GHookCheckMarshaller) (GHook *hook,
       gpointer marshal_data);
typedef void (*GHookFunc) (gpointer data);
typedef gboolean (*GHookCheckFunc) (gpointer data);
typedef void (*GHookFinalizeFunc) (GHookList *hook_list,
       GHook *hook);
typedef enum
{
  G_HOOK_FLAG_ACTIVE = 1 << 0,
  G_HOOK_FLAG_IN_CALL = 1 << 1,
  G_HOOK_FLAG_MASK = 0x0f
} GHookFlagMask;




struct _GHookList
{
  gulong seq_id;
  guint hook_size : 16;
  guint is_setup : 1;
  GHook *hooks;
  gpointer dummy3;
  GHookFinalizeFunc finalize_hook;
  gpointer dummy[2];
};
struct _GHook
{
  gpointer data;
  GHook *next;
  GHook *prev;
  guint ref_count;
  gulong hook_id;
  guint flags;
  gpointer func;
  GDestroyNotify destroy;
};
# 106 "/usr/include/glib-2.0/glib/ghook.h"
void g_hook_list_init (GHookList *hook_list,
      guint hook_size);
void g_hook_list_clear (GHookList *hook_list);
GHook* g_hook_alloc (GHookList *hook_list);
void g_hook_free (GHookList *hook_list,
      GHook *hook);
GHook * g_hook_ref (GHookList *hook_list,
      GHook *hook);
void g_hook_unref (GHookList *hook_list,
      GHook *hook);
gboolean g_hook_destroy (GHookList *hook_list,
      gulong hook_id);
void g_hook_destroy_link (GHookList *hook_list,
      GHook *hook);
void g_hook_prepend (GHookList *hook_list,
      GHook *hook);
void g_hook_insert_before (GHookList *hook_list,
      GHook *sibling,
      GHook *hook);
void g_hook_insert_sorted (GHookList *hook_list,
      GHook *hook,
      GHookCompareFunc func);
GHook* g_hook_get (GHookList *hook_list,
      gulong hook_id);
GHook* g_hook_find (GHookList *hook_list,
      gboolean need_valids,
      GHookFindFunc func,
      gpointer data);
GHook* g_hook_find_data (GHookList *hook_list,
      gboolean need_valids,
      gpointer data);
GHook* g_hook_find_func (GHookList *hook_list,
      gboolean need_valids,
      gpointer func);
GHook* g_hook_find_func_data (GHookList *hook_list,
      gboolean need_valids,
      gpointer func,
      gpointer data);

GHook* g_hook_first_valid (GHookList *hook_list,
      gboolean may_be_in_call);



GHook* g_hook_next_valid (GHookList *hook_list,
      GHook *hook,
      gboolean may_be_in_call);

gint g_hook_compare_ids (GHook *new_hook,
      GHook *sibling);





void g_hook_list_invoke (GHookList *hook_list,
      gboolean may_recurse);



void g_hook_list_invoke_check (GHookList *hook_list,
      gboolean may_recurse);


void g_hook_list_marshal (GHookList *hook_list,
      gboolean may_recurse,
      GHookMarshaller marshaller,
      gpointer marshal_data);
void g_hook_list_marshal_check (GHookList *hook_list,
      gboolean may_recurse,
      GHookCheckMarshaller marshaller,
      gpointer marshal_data);


# 50 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/giochannel.h" 1
# 34 "/usr/include/glib-2.0/glib/giochannel.h"
# 1 "/usr/include/glib-2.0/glib/gconvert.h" 1
# 35 "/usr/include/glib-2.0/glib/giochannel.h" 2
# 1 "/usr/include/glib-2.0/glib/gmain.h" 1
# 27 "/usr/include/glib-2.0/glib/gmain.h"
# 1 "/usr/include/glib-2.0/glib/gpoll.h" 1
# 27 "/usr/include/glib-2.0/glib/gpoll.h"
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 28 "/usr/include/glib-2.0/glib/gpoll.h" 2


# 61 "/usr/include/glib-2.0/glib/gpoll.h"
typedef struct _GPollFD GPollFD;
typedef gint (*GPollFunc) (GPollFD *ufds,
     guint nfsd,
     gint timeout_);

struct _GPollFD
{



  gint fd;

  gushort events;
  gushort revents;
};
# 87 "/usr/include/glib-2.0/glib/gpoll.h"
gint g_poll (GPollFD *fds,
      guint nfds,
      gint timeout);


# 28 "/usr/include/glib-2.0/glib/gmain.h" 2
# 1 "/usr/include/glib-2.0/glib/gslist.h" 1
# 34 "/usr/include/glib-2.0/glib/gslist.h"
# 1 "/usr/include/glib-2.0/glib/gmem.h" 1
# 35 "/usr/include/glib-2.0/glib/gslist.h" 2



typedef struct _GSList GSList;

struct _GSList
{
  gpointer data;
  GSList *next;
};



GSList* g_slist_alloc (void) __attribute__((warn_unused_result));
void g_slist_free (GSList *list);
void g_slist_free_1 (GSList *list);

GSList* g_slist_append (GSList *list,
       gpointer data) __attribute__((warn_unused_result));
GSList* g_slist_prepend (GSList *list,
       gpointer data) __attribute__((warn_unused_result));
GSList* g_slist_insert (GSList *list,
       gpointer data,
       gint position) __attribute__((warn_unused_result));
GSList* g_slist_insert_sorted (GSList *list,
       gpointer data,
       GCompareFunc func) __attribute__((warn_unused_result));
GSList* g_slist_insert_sorted_with_data (GSList *list,
       gpointer data,
       GCompareDataFunc func,
       gpointer user_data) __attribute__((warn_unused_result));
GSList* g_slist_insert_before (GSList *slist,
       GSList *sibling,
       gpointer data) __attribute__((warn_unused_result));
GSList* g_slist_concat (GSList *list1,
       GSList *list2) __attribute__((warn_unused_result));
GSList* g_slist_remove (GSList *list,
       gconstpointer data) __attribute__((warn_unused_result));
GSList* g_slist_remove_all (GSList *list,
       gconstpointer data) __attribute__((warn_unused_result));
GSList* g_slist_remove_link (GSList *list,
       GSList *link_) __attribute__((warn_unused_result));
GSList* g_slist_delete_link (GSList *list,
       GSList *link_) __attribute__((warn_unused_result));
GSList* g_slist_reverse (GSList *list) __attribute__((warn_unused_result));
GSList* g_slist_copy (GSList *list) __attribute__((warn_unused_result));
GSList* g_slist_nth (GSList *list,
       guint n);
GSList* g_slist_find (GSList *list,
       gconstpointer data);
GSList* g_slist_find_custom (GSList *list,
       gconstpointer data,
       GCompareFunc func);
gint g_slist_position (GSList *list,
       GSList *llink);
gint g_slist_index (GSList *list,
       gconstpointer data);
GSList* g_slist_last (GSList *list);
guint g_slist_length (GSList *list);
void g_slist_foreach (GSList *list,
       GFunc func,
       gpointer user_data);
GSList* g_slist_sort (GSList *list,
       GCompareFunc compare_func) __attribute__((warn_unused_result));
GSList* g_slist_sort_with_data (GSList *list,
       GCompareDataFunc compare_func,
       gpointer user_data) __attribute__((warn_unused_result));
gpointer g_slist_nth_data (GSList *list,
       guint n);




void g_slist_push_allocator (gpointer dummy);
void g_slist_pop_allocator (void);



# 29 "/usr/include/glib-2.0/glib/gmain.h" 2
# 1 "/usr/include/glib-2.0/glib/gthread.h" 1
# 30 "/usr/include/glib-2.0/glib/gmain.h" 2



typedef struct _GMainContext GMainContext;
typedef struct _GMainLoop GMainLoop;
typedef struct _GSource GSource;
typedef struct _GSourceCallbackFuncs GSourceCallbackFuncs;
typedef struct _GSourceFuncs GSourceFuncs;

typedef gboolean (*GSourceFunc) (gpointer data);
typedef void (*GChildWatchFunc) (GPid pid,
           gint status,
           gpointer data);
struct _GSource
{

  gpointer callback_data;
  GSourceCallbackFuncs *callback_funcs;

  GSourceFuncs *source_funcs;
  guint ref_count;

  GMainContext *context;

  gint priority;
  guint flags;
  guint source_id;

  GSList *poll_fds;

  GSource *prev;
  GSource *next;

  gpointer reserved1;
  gpointer reserved2;
};

struct _GSourceCallbackFuncs
{
  void (*ref) (gpointer cb_data);
  void (*unref) (gpointer cb_data);
  void (*get) (gpointer cb_data,
   GSource *source,
   GSourceFunc *func,
   gpointer *data);
};

typedef void (*GSourceDummyMarshal) (void);

struct _GSourceFuncs
{
  gboolean (*prepare) (GSource *source,
   gint *timeout_);
  gboolean (*check) (GSource *source);
  gboolean (*dispatch) (GSource *source,
   GSourceFunc callback,
   gpointer user_data);
  void (*finalize) (GSource *source);


  GSourceFunc closure_callback;
  GSourceDummyMarshal closure_marshal;
};
# 104 "/usr/include/glib-2.0/glib/gmain.h"
GMainContext *g_main_context_new (void);
GMainContext *g_main_context_ref (GMainContext *context);
void g_main_context_unref (GMainContext *context);
GMainContext *g_main_context_default (void);

gboolean g_main_context_iteration (GMainContext *context,
     gboolean may_block);
gboolean g_main_context_pending (GMainContext *context);



GSource *g_main_context_find_source_by_id (GMainContext *context,
            guint source_id);
GSource *g_main_context_find_source_by_user_data (GMainContext *context,
            gpointer user_data);
GSource *g_main_context_find_source_by_funcs_user_data (GMainContext *context,
             GSourceFuncs *funcs,
            gpointer user_data);



void g_main_context_wakeup (GMainContext *context);
gboolean g_main_context_acquire (GMainContext *context);
void g_main_context_release (GMainContext *context);
gboolean g_main_context_is_owner (GMainContext *context);
gboolean g_main_context_wait (GMainContext *context,
     GCond *cond,
     GMutex *mutex);

gboolean g_main_context_prepare (GMainContext *context,
      gint *priority);
gint g_main_context_query (GMainContext *context,
      gint max_priority,
      gint *timeout_,
      GPollFD *fds,
      gint n_fds);
gint g_main_context_check (GMainContext *context,
      gint max_priority,
      GPollFD *fds,
      gint n_fds);
void g_main_context_dispatch (GMainContext *context);

void g_main_context_set_poll_func (GMainContext *context,
           GPollFunc func);
GPollFunc g_main_context_get_poll_func (GMainContext *context);



void g_main_context_add_poll (GMainContext *context,
         GPollFD *fd,
         gint priority);
void g_main_context_remove_poll (GMainContext *context,
         GPollFD *fd);

gint g_main_depth (void);
GSource *g_main_current_source (void);




GMainLoop *g_main_loop_new (GMainContext *context,
           gboolean is_running);
void g_main_loop_run (GMainLoop *loop);
void g_main_loop_quit (GMainLoop *loop);
GMainLoop *g_main_loop_ref (GMainLoop *loop);
void g_main_loop_unref (GMainLoop *loop);
gboolean g_main_loop_is_running (GMainLoop *loop);
GMainContext *g_main_loop_get_context (GMainLoop *loop);



GSource *g_source_new (GSourceFuncs *source_funcs,
       guint struct_size);
GSource *g_source_ref (GSource *source);
void g_source_unref (GSource *source);

guint g_source_attach (GSource *source,
       GMainContext *context);
void g_source_destroy (GSource *source);

void g_source_set_priority (GSource *source,
       gint priority);
gint g_source_get_priority (GSource *source);
void g_source_set_can_recurse (GSource *source,
       gboolean can_recurse);
gboolean g_source_get_can_recurse (GSource *source);
guint g_source_get_id (GSource *source);

GMainContext *g_source_get_context (GSource *source);

void g_source_set_callback (GSource *source,
       GSourceFunc func,
       gpointer data,
       GDestroyNotify notify);

void g_source_set_funcs (GSource *source,
                                   GSourceFuncs *funcs);
gboolean g_source_is_destroyed (GSource *source);


void g_source_set_callback_indirect (GSource *source,
         gpointer callback_data,
         GSourceCallbackFuncs *callback_funcs);

void g_source_add_poll (GSource *source,
        GPollFD *fd);
void g_source_remove_poll (GSource *source,
        GPollFD *fd);

void g_source_get_current_time (GSource *source,
        GTimeVal *timeval);







GSource *g_idle_source_new (void);
GSource *g_child_watch_source_new (GPid pid);
GSource *g_timeout_source_new (guint interval);
GSource *g_timeout_source_new_seconds (guint interval);



void g_get_current_time (GTimeVal *result);
# 254 "/usr/include/glib-2.0/glib/gmain.h"
gboolean g_source_remove (guint tag);
gboolean g_source_remove_by_user_data (gpointer user_data);
gboolean g_source_remove_by_funcs_user_data (GSourceFuncs *funcs,
           gpointer user_data);


guint g_timeout_add_full (gint priority,
         guint interval,
         GSourceFunc function,
         gpointer data,
         GDestroyNotify notify);
guint g_timeout_add (guint interval,
         GSourceFunc function,
         gpointer data);
guint g_timeout_add_seconds_full (gint priority,
                                     guint interval,
                                     GSourceFunc function,
                                     gpointer data,
                                     GDestroyNotify notify);
guint g_timeout_add_seconds (guint interval,
         GSourceFunc function,
         gpointer data);
guint g_child_watch_add_full (gint priority,
         GPid pid,
         GChildWatchFunc function,
         gpointer data,
         GDestroyNotify notify);
guint g_child_watch_add (GPid pid,
         GChildWatchFunc function,
         gpointer data);
guint g_idle_add (GSourceFunc function,
         gpointer data);
guint g_idle_add_full (gint priority,
         GSourceFunc function,
         gpointer data,
         GDestroyNotify notify);
gboolean g_idle_remove_by_data (gpointer data);


extern GSourceFuncs g_timeout_funcs;
extern GSourceFuncs g_child_watch_funcs;
extern GSourceFuncs g_idle_funcs;


# 36 "/usr/include/glib-2.0/glib/giochannel.h" 2
# 1 "/usr/include/glib-2.0/glib/gstring.h" 1
# 34 "/usr/include/glib-2.0/glib/gstring.h"
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 35 "/usr/include/glib-2.0/glib/gstring.h" 2
# 1 "/usr/include/glib-2.0/glib/gunicode.h" 1
# 29 "/usr/include/glib-2.0/glib/gunicode.h"
# 1 "/usr/include/glib-2.0/glib/gerror.h" 1
# 30 "/usr/include/glib-2.0/glib/gunicode.h" 2
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 31 "/usr/include/glib-2.0/glib/gunicode.h" 2



typedef guint32 gunichar;
typedef guint16 gunichar2;




typedef enum
{
  G_UNICODE_CONTROL,
  G_UNICODE_FORMAT,
  G_UNICODE_UNASSIGNED,
  G_UNICODE_PRIVATE_USE,
  G_UNICODE_SURROGATE,
  G_UNICODE_LOWERCASE_LETTER,
  G_UNICODE_MODIFIER_LETTER,
  G_UNICODE_OTHER_LETTER,
  G_UNICODE_TITLECASE_LETTER,
  G_UNICODE_UPPERCASE_LETTER,
  G_UNICODE_COMBINING_MARK,
  G_UNICODE_ENCLOSING_MARK,
  G_UNICODE_NON_SPACING_MARK,
  G_UNICODE_DECIMAL_NUMBER,
  G_UNICODE_LETTER_NUMBER,
  G_UNICODE_OTHER_NUMBER,
  G_UNICODE_CONNECT_PUNCTUATION,
  G_UNICODE_DASH_PUNCTUATION,
  G_UNICODE_CLOSE_PUNCTUATION,
  G_UNICODE_FINAL_PUNCTUATION,
  G_UNICODE_INITIAL_PUNCTUATION,
  G_UNICODE_OTHER_PUNCTUATION,
  G_UNICODE_OPEN_PUNCTUATION,
  G_UNICODE_CURRENCY_SYMBOL,
  G_UNICODE_MODIFIER_SYMBOL,
  G_UNICODE_MATH_SYMBOL,
  G_UNICODE_OTHER_SYMBOL,
  G_UNICODE_LINE_SEPARATOR,
  G_UNICODE_PARAGRAPH_SEPARATOR,
  G_UNICODE_SPACE_SEPARATOR
} GUnicodeType;






typedef enum
{
  G_UNICODE_BREAK_MANDATORY,
  G_UNICODE_BREAK_CARRIAGE_RETURN,
  G_UNICODE_BREAK_LINE_FEED,
  G_UNICODE_BREAK_COMBINING_MARK,
  G_UNICODE_BREAK_SURROGATE,
  G_UNICODE_BREAK_ZERO_WIDTH_SPACE,
  G_UNICODE_BREAK_INSEPARABLE,
  G_UNICODE_BREAK_NON_BREAKING_GLUE,
  G_UNICODE_BREAK_CONTINGENT,
  G_UNICODE_BREAK_SPACE,
  G_UNICODE_BREAK_AFTER,
  G_UNICODE_BREAK_BEFORE,
  G_UNICODE_BREAK_BEFORE_AND_AFTER,
  G_UNICODE_BREAK_HYPHEN,
  G_UNICODE_BREAK_NON_STARTER,
  G_UNICODE_BREAK_OPEN_PUNCTUATION,
  G_UNICODE_BREAK_CLOSE_PUNCTUATION,
  G_UNICODE_BREAK_QUOTATION,
  G_UNICODE_BREAK_EXCLAMATION,
  G_UNICODE_BREAK_IDEOGRAPHIC,
  G_UNICODE_BREAK_NUMERIC,
  G_UNICODE_BREAK_INFIX_SEPARATOR,
  G_UNICODE_BREAK_SYMBOL,
  G_UNICODE_BREAK_ALPHABETIC,
  G_UNICODE_BREAK_PREFIX,
  G_UNICODE_BREAK_POSTFIX,
  G_UNICODE_BREAK_COMPLEX_CONTEXT,
  G_UNICODE_BREAK_AMBIGUOUS,
  G_UNICODE_BREAK_UNKNOWN,
  G_UNICODE_BREAK_NEXT_LINE,
  G_UNICODE_BREAK_WORD_JOINER,
  G_UNICODE_BREAK_HANGUL_L_JAMO,
  G_UNICODE_BREAK_HANGUL_V_JAMO,
  G_UNICODE_BREAK_HANGUL_T_JAMO,
  G_UNICODE_BREAK_HANGUL_LV_SYLLABLE,
  G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE
} GUnicodeBreakType;

typedef enum
{
  G_UNICODE_SCRIPT_INVALID_CODE = -1,
  G_UNICODE_SCRIPT_COMMON = 0,
  G_UNICODE_SCRIPT_INHERITED,
  G_UNICODE_SCRIPT_ARABIC,
  G_UNICODE_SCRIPT_ARMENIAN,
  G_UNICODE_SCRIPT_BENGALI,
  G_UNICODE_SCRIPT_BOPOMOFO,
  G_UNICODE_SCRIPT_CHEROKEE,
  G_UNICODE_SCRIPT_COPTIC,
  G_UNICODE_SCRIPT_CYRILLIC,
  G_UNICODE_SCRIPT_DESERET,
  G_UNICODE_SCRIPT_DEVANAGARI,
  G_UNICODE_SCRIPT_ETHIOPIC,
  G_UNICODE_SCRIPT_GEORGIAN,
  G_UNICODE_SCRIPT_GOTHIC,
  G_UNICODE_SCRIPT_GREEK,
  G_UNICODE_SCRIPT_GUJARATI,
  G_UNICODE_SCRIPT_GURMUKHI,
  G_UNICODE_SCRIPT_HAN,
  G_UNICODE_SCRIPT_HANGUL,
  G_UNICODE_SCRIPT_HEBREW,
  G_UNICODE_SCRIPT_HIRAGANA,
  G_UNICODE_SCRIPT_KANNADA,
  G_UNICODE_SCRIPT_KATAKANA,
  G_UNICODE_SCRIPT_KHMER,
  G_UNICODE_SCRIPT_LAO,
  G_UNICODE_SCRIPT_LATIN,
  G_UNICODE_SCRIPT_MALAYALAM,
  G_UNICODE_SCRIPT_MONGOLIAN,
  G_UNICODE_SCRIPT_MYANMAR,
  G_UNICODE_SCRIPT_OGHAM,
  G_UNICODE_SCRIPT_OLD_ITALIC,
  G_UNICODE_SCRIPT_ORIYA,
  G_UNICODE_SCRIPT_RUNIC,
  G_UNICODE_SCRIPT_SINHALA,
  G_UNICODE_SCRIPT_SYRIAC,
  G_UNICODE_SCRIPT_TAMIL,
  G_UNICODE_SCRIPT_TELUGU,
  G_UNICODE_SCRIPT_THAANA,
  G_UNICODE_SCRIPT_THAI,
  G_UNICODE_SCRIPT_TIBETAN,
  G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL,
  G_UNICODE_SCRIPT_YI,
  G_UNICODE_SCRIPT_TAGALOG,
  G_UNICODE_SCRIPT_HANUNOO,
  G_UNICODE_SCRIPT_BUHID,
  G_UNICODE_SCRIPT_TAGBANWA,


  G_UNICODE_SCRIPT_BRAILLE,
  G_UNICODE_SCRIPT_CYPRIOT,
  G_UNICODE_SCRIPT_LIMBU,
  G_UNICODE_SCRIPT_OSMANYA,
  G_UNICODE_SCRIPT_SHAVIAN,
  G_UNICODE_SCRIPT_LINEAR_B,
  G_UNICODE_SCRIPT_TAI_LE,
  G_UNICODE_SCRIPT_UGARITIC,


  G_UNICODE_SCRIPT_NEW_TAI_LUE,
  G_UNICODE_SCRIPT_BUGINESE,
  G_UNICODE_SCRIPT_GLAGOLITIC,
  G_UNICODE_SCRIPT_TIFINAGH,
  G_UNICODE_SCRIPT_SYLOTI_NAGRI,
  G_UNICODE_SCRIPT_OLD_PERSIAN,
  G_UNICODE_SCRIPT_KHAROSHTHI,


  G_UNICODE_SCRIPT_UNKNOWN,
  G_UNICODE_SCRIPT_BALINESE,
  G_UNICODE_SCRIPT_CUNEIFORM,
  G_UNICODE_SCRIPT_PHOENICIAN,
  G_UNICODE_SCRIPT_PHAGS_PA,
  G_UNICODE_SCRIPT_NKO,


  G_UNICODE_SCRIPT_KAYAH_LI,
  G_UNICODE_SCRIPT_LEPCHA,
  G_UNICODE_SCRIPT_REJANG,
  G_UNICODE_SCRIPT_SUNDANESE,
  G_UNICODE_SCRIPT_SAURASHTRA,
  G_UNICODE_SCRIPT_CHAM,
  G_UNICODE_SCRIPT_OL_CHIKI,
  G_UNICODE_SCRIPT_VAI,
  G_UNICODE_SCRIPT_CARIAN,
  G_UNICODE_SCRIPT_LYCIAN,
  G_UNICODE_SCRIPT_LYDIAN
} GUnicodeScript;







gboolean g_get_charset (const char **charset);



gboolean g_unichar_isalnum (gunichar c) __attribute__((__const__));
gboolean g_unichar_isalpha (gunichar c) __attribute__((__const__));
gboolean g_unichar_iscntrl (gunichar c) __attribute__((__const__));
gboolean g_unichar_isdigit (gunichar c) __attribute__((__const__));
gboolean g_unichar_isgraph (gunichar c) __attribute__((__const__));
gboolean g_unichar_islower (gunichar c) __attribute__((__const__));
gboolean g_unichar_isprint (gunichar c) __attribute__((__const__));
gboolean g_unichar_ispunct (gunichar c) __attribute__((__const__));
gboolean g_unichar_isspace (gunichar c) __attribute__((__const__));
gboolean g_unichar_isupper (gunichar c) __attribute__((__const__));
gboolean g_unichar_isxdigit (gunichar c) __attribute__((__const__));
gboolean g_unichar_istitle (gunichar c) __attribute__((__const__));
gboolean g_unichar_isdefined (gunichar c) __attribute__((__const__));
gboolean g_unichar_iswide (gunichar c) __attribute__((__const__));
gboolean g_unichar_iswide_cjk(gunichar c) __attribute__((__const__));
gboolean g_unichar_iszerowidth(gunichar c) __attribute__((__const__));
gboolean g_unichar_ismark (gunichar c) __attribute__((__const__));



gunichar g_unichar_toupper (gunichar c) __attribute__((__const__));
gunichar g_unichar_tolower (gunichar c) __attribute__((__const__));
gunichar g_unichar_totitle (gunichar c) __attribute__((__const__));



gint g_unichar_digit_value (gunichar c) __attribute__((__const__));

gint g_unichar_xdigit_value (gunichar c) __attribute__((__const__));


GUnicodeType g_unichar_type (gunichar c) __attribute__((__const__));


GUnicodeBreakType g_unichar_break_type (gunichar c) __attribute__((__const__));


gint g_unichar_combining_class (gunichar uc) __attribute__((__const__));





void g_unicode_canonical_ordering (gunichar *string,
       gsize len);




gunichar *g_unicode_canonical_decomposition (gunichar ch,
          gsize *result_len) __attribute__((__malloc__));



extern const gchar * const g_utf8_skip;



gunichar g_utf8_get_char (const gchar *p) __attribute__((__pure__));
gunichar g_utf8_get_char_validated (const gchar *p,
        gssize max_len) __attribute__((__pure__));

gchar* g_utf8_offset_to_pointer (const gchar *str,
                                   glong offset) __attribute__((__pure__));
glong g_utf8_pointer_to_offset (const gchar *str,
       const gchar *pos) __attribute__((__pure__));
gchar* g_utf8_prev_char (const gchar *p) __attribute__((__pure__));
gchar* g_utf8_find_next_char (const gchar *p,
       const gchar *end) __attribute__((__pure__));
gchar* g_utf8_find_prev_char (const gchar *str,
       const gchar *p) __attribute__((__pure__));

glong g_utf8_strlen (const gchar *p,
       gssize max) __attribute__((__pure__));


gchar* g_utf8_strncpy (gchar *dest,
         const gchar *src,
         gsize n);



gchar* g_utf8_strchr (const gchar *p,
         gssize len,
         gunichar c);
gchar* g_utf8_strrchr (const gchar *p,
         gssize len,
         gunichar c);
gchar* g_utf8_strreverse (const gchar *str,
     gssize len);

gunichar2 *g_utf8_to_utf16 (const gchar *str,
    glong len,
    glong *items_read,
    glong *items_written,
    GError **error) __attribute__((__malloc__));
gunichar * g_utf8_to_ucs4 (const gchar *str,
    glong len,
    glong *items_read,
    glong *items_written,
    GError **error) __attribute__((__malloc__));
gunichar * g_utf8_to_ucs4_fast (const gchar *str,
    glong len,
    glong *items_written) __attribute__((__malloc__));
gunichar * g_utf16_to_ucs4 (const gunichar2 *str,
    glong len,
    glong *items_read,
    glong *items_written,
    GError **error) __attribute__((__malloc__));
gchar* g_utf16_to_utf8 (const gunichar2 *str,
    glong len,
    glong *items_read,
    glong *items_written,
    GError **error) __attribute__((__malloc__));
gunichar2 *g_ucs4_to_utf16 (const gunichar *str,
    glong len,
    glong *items_read,
    glong *items_written,
    GError **error) __attribute__((__malloc__));
gchar* g_ucs4_to_utf8 (const gunichar *str,
    glong len,
    glong *items_read,
    glong *items_written,
    GError **error) __attribute__((__malloc__));





gint g_unichar_to_utf8 (gunichar c,
        gchar *outbuf);





gboolean g_utf8_validate (const gchar *str,
                          gssize max_len,
                          const gchar **end);


gboolean g_unichar_validate (gunichar ch) __attribute__((__const__));

gchar *g_utf8_strup (const gchar *str,
         gssize len) __attribute__((__malloc__));
gchar *g_utf8_strdown (const gchar *str,
         gssize len) __attribute__((__malloc__));
gchar *g_utf8_casefold (const gchar *str,
   gssize len) __attribute__((__malloc__));

typedef enum {
  G_NORMALIZE_DEFAULT,
  G_NORMALIZE_NFD = G_NORMALIZE_DEFAULT,
  G_NORMALIZE_DEFAULT_COMPOSE,
  G_NORMALIZE_NFC = G_NORMALIZE_DEFAULT_COMPOSE,
  G_NORMALIZE_ALL,
  G_NORMALIZE_NFKD = G_NORMALIZE_ALL,
  G_NORMALIZE_ALL_COMPOSE,
  G_NORMALIZE_NFKC = G_NORMALIZE_ALL_COMPOSE
} GNormalizeMode;

gchar *g_utf8_normalize (const gchar *str,
    gssize len,
    GNormalizeMode mode) __attribute__((__malloc__));

gint g_utf8_collate (const gchar *str1,
      const gchar *str2) __attribute__((__pure__));
gchar *g_utf8_collate_key (const gchar *str,
      gssize len) __attribute__((__malloc__));
gchar *g_utf8_collate_key_for_filename (const gchar *str,
                   gssize len) __attribute__((__malloc__));

gboolean g_unichar_get_mirror_char (gunichar ch,
                                    gunichar *mirrored_ch);

GUnicodeScript g_unichar_get_script (gunichar ch) __attribute__((__const__));




gchar *_g_utf8_make_valid (const gchar *name);


# 36 "/usr/include/glib-2.0/glib/gstring.h" 2
# 1 "/usr/include/glib-2.0/glib/gutils.h" 1
# 37 "/usr/include/glib-2.0/glib/gstring.h" 2



typedef struct _GString GString;
typedef struct _GStringChunk GStringChunk;

struct _GString
{
  gchar *str;
  gsize len;
  gsize allocated_len;
};



GStringChunk* g_string_chunk_new (gsize size);
void g_string_chunk_free (GStringChunk *chunk);
void g_string_chunk_clear (GStringChunk *chunk);
gchar* g_string_chunk_insert (GStringChunk *chunk,
         const gchar *string);
gchar* g_string_chunk_insert_len (GStringChunk *chunk,
         const gchar *string,
         gssize len);
gchar* g_string_chunk_insert_const (GStringChunk *chunk,
         const gchar *string);




GString* g_string_new (const gchar *init);
GString* g_string_new_len (const gchar *init,
                                         gssize len);
GString* g_string_sized_new (gsize dfl_size);
gchar* g_string_free (GString *string,
      gboolean free_segment);
gboolean g_string_equal (const GString *v,
      const GString *v2);
guint g_string_hash (const GString *str);
GString* g_string_assign (GString *string,
      const gchar *rval);
GString* g_string_truncate (GString *string,
      gsize len);
GString* g_string_set_size (GString *string,
      gsize len);
GString* g_string_insert_len (GString *string,
                                         gssize pos,
                                         const gchar *val,
                                         gssize len);
GString* g_string_append (GString *string,
                    const gchar *val);
GString* g_string_append_len (GString *string,
                    const gchar *val,
                                         gssize len);
GString* g_string_append_c (GString *string,
      gchar c);
GString* g_string_append_unichar (GString *string,
      gunichar wc);
GString* g_string_prepend (GString *string,
      const gchar *val);
GString* g_string_prepend_c (GString *string,
      gchar c);
GString* g_string_prepend_unichar (GString *string,
      gunichar wc);
GString* g_string_prepend_len (GString *string,
                    const gchar *val,
                                         gssize len);
GString* g_string_insert (GString *string,
      gssize pos,
      const gchar *val);
GString* g_string_insert_c (GString *string,
      gssize pos,
      gchar c);
GString* g_string_insert_unichar (GString *string,
      gssize pos,
      gunichar wc);
GString* g_string_overwrite (GString *string,
      gsize pos,
      const gchar *val);
GString* g_string_overwrite_len (GString *string,
      gsize pos,
      const gchar *val,
      gssize len);
GString* g_string_erase (GString *string,
      gssize pos,
      gssize len);
GString* g_string_ascii_down (GString *string);
GString* g_string_ascii_up (GString *string);
void g_string_vprintf (GString *string,
      const gchar *format,
      va_list args);
void g_string_printf (GString *string,
      const gchar *format,
      ...) __attribute__((__format__ (__printf__, 2, 3)));
void g_string_append_vprintf (GString *string,
      const gchar *format,
      va_list args);
void g_string_append_printf (GString *string,
      const gchar *format,
      ...) __attribute__((__format__ (__printf__, 2, 3)));
GString * g_string_append_uri_escaped(GString *string,
      const char *unescaped,
      const char *reserved_chars_allowed,
      gboolean allow_utf8);



static inline GString*
g_string_append_c_inline (GString *gstring,
                          gchar c)
{
  if (gstring->len + 1 < gstring->allocated_len)
    {
      gstring->str[gstring->len++] = c;
      gstring->str[gstring->len] = 0;
    }
  else
    g_string_insert_c (gstring, -1, c);
  return gstring;
}
# 167 "/usr/include/glib-2.0/glib/gstring.h"
GString* g_string_down (GString *string);
GString* g_string_up (GString *string);








# 37 "/usr/include/glib-2.0/glib/giochannel.h" 2






typedef struct _GIOChannel GIOChannel;
typedef struct _GIOFuncs GIOFuncs;

typedef enum
{
  G_IO_ERROR_NONE,
  G_IO_ERROR_AGAIN,
  G_IO_ERROR_INVAL,
  G_IO_ERROR_UNKNOWN
} GIOError;



typedef enum
{

  G_IO_CHANNEL_ERROR_FBIG,
  G_IO_CHANNEL_ERROR_INVAL,
  G_IO_CHANNEL_ERROR_IO,
  G_IO_CHANNEL_ERROR_ISDIR,
  G_IO_CHANNEL_ERROR_NOSPC,
  G_IO_CHANNEL_ERROR_NXIO,
  G_IO_CHANNEL_ERROR_OVERFLOW,
  G_IO_CHANNEL_ERROR_PIPE,

  G_IO_CHANNEL_ERROR_FAILED
} GIOChannelError;

typedef enum
{
  G_IO_STATUS_ERROR,
  G_IO_STATUS_NORMAL,
  G_IO_STATUS_EOF,
  G_IO_STATUS_AGAIN
} GIOStatus;

typedef enum
{
  G_SEEK_CUR,
  G_SEEK_SET,
  G_SEEK_END
} GSeekType;

typedef enum
{
  G_IO_IN =1,
  G_IO_OUT =4,
  G_IO_PRI =2,
  G_IO_ERR =8,
  G_IO_HUP =16,
  G_IO_NVAL =32
} GIOCondition;

typedef enum
{
  G_IO_FLAG_APPEND = 1 << 0,
  G_IO_FLAG_NONBLOCK = 1 << 1,
  G_IO_FLAG_IS_READABLE = 1 << 2,
  G_IO_FLAG_IS_WRITEABLE = 1 << 3,
  G_IO_FLAG_IS_SEEKABLE = 1 << 4,
  G_IO_FLAG_MASK = (1 << 5) - 1,
  G_IO_FLAG_GET_MASK = G_IO_FLAG_MASK,
  G_IO_FLAG_SET_MASK = G_IO_FLAG_APPEND | G_IO_FLAG_NONBLOCK
} GIOFlags;

struct _GIOChannel
{

  gint ref_count;
  GIOFuncs *funcs;

  gchar *encoding;
  GIConv read_cd;
  GIConv write_cd;
  gchar *line_term;
  guint line_term_len;

  gsize buf_size;
  GString *read_buf;
  GString *encoded_read_buf;
  GString *write_buf;
  gchar partial_write_buf[6];



  guint use_buffer : 1;
  guint do_encode : 1;
  guint close_on_unref : 1;
  guint is_readable : 1;
  guint is_writeable : 1;
  guint is_seekable : 1;

  gpointer reserved1;
  gpointer reserved2;
};

typedef gboolean (*GIOFunc) (GIOChannel *source,
        GIOCondition condition,
        gpointer data);
struct _GIOFuncs
{
  GIOStatus (*io_read) (GIOChannel *channel,
             gchar *buf,
      gsize count,
      gsize *bytes_read,
      GError **err);
  GIOStatus (*io_write) (GIOChannel *channel,
      const gchar *buf,
      gsize count,
      gsize *bytes_written,
      GError **err);
  GIOStatus (*io_seek) (GIOChannel *channel,
      gint64 offset,
      GSeekType type,
      GError **err);
  GIOStatus (*io_close) (GIOChannel *channel,
      GError **err);
  GSource* (*io_create_watch) (GIOChannel *channel,
      GIOCondition condition);
  void (*io_free) (GIOChannel *channel);
  GIOStatus (*io_set_flags) (GIOChannel *channel,
                                  GIOFlags flags,
      GError **err);
  GIOFlags (*io_get_flags) (GIOChannel *channel);
};

void g_io_channel_init (GIOChannel *channel);
GIOChannel *g_io_channel_ref (GIOChannel *channel);
void g_io_channel_unref (GIOChannel *channel);


GIOError g_io_channel_read (GIOChannel *channel,
            gchar *buf,
            gsize count,
            gsize *bytes_read);
GIOError g_io_channel_write (GIOChannel *channel,
            const gchar *buf,
            gsize count,
            gsize *bytes_written);
GIOError g_io_channel_seek (GIOChannel *channel,
            gint64 offset,
            GSeekType type);
void g_io_channel_close (GIOChannel *channel);


GIOStatus g_io_channel_shutdown (GIOChannel *channel,
     gboolean flush,
     GError **err);
guint g_io_add_watch_full (GIOChannel *channel,
     gint priority,
     GIOCondition condition,
     GIOFunc func,
     gpointer user_data,
     GDestroyNotify notify);
GSource * g_io_create_watch (GIOChannel *channel,
     GIOCondition condition);
guint g_io_add_watch (GIOChannel *channel,
     GIOCondition condition,
     GIOFunc func,
     gpointer user_data);




void g_io_channel_set_buffer_size (GIOChannel *channel,
        gsize size);
gsize g_io_channel_get_buffer_size (GIOChannel *channel);
GIOCondition g_io_channel_get_buffer_condition (GIOChannel *channel);
GIOStatus g_io_channel_set_flags (GIOChannel *channel,
        GIOFlags flags,
        GError **error);
GIOFlags g_io_channel_get_flags (GIOChannel *channel);
void g_io_channel_set_line_term (GIOChannel *channel,
        const gchar *line_term,
        gint length);
const gchar* g_io_channel_get_line_term (GIOChannel *channel,
        gint *length);
void g_io_channel_set_buffered (GIOChannel *channel,
        gboolean buffered);
gboolean g_io_channel_get_buffered (GIOChannel *channel);
GIOStatus g_io_channel_set_encoding (GIOChannel *channel,
        const gchar *encoding,
        GError **error);
const gchar* g_io_channel_get_encoding (GIOChannel *channel);
void g_io_channel_set_close_on_unref (GIOChannel *channel,
        gboolean do_close);
gboolean g_io_channel_get_close_on_unref (GIOChannel *channel);


GIOStatus g_io_channel_flush (GIOChannel *channel,
        GError **error);
GIOStatus g_io_channel_read_line (GIOChannel *channel,
        gchar **str_return,
        gsize *length,
        gsize *terminator_pos,
        GError **error);
GIOStatus g_io_channel_read_line_string (GIOChannel *channel,
        GString *buffer,
        gsize *terminator_pos,
        GError **error);
GIOStatus g_io_channel_read_to_end (GIOChannel *channel,
        gchar **str_return,
        gsize *length,
        GError **error);
GIOStatus g_io_channel_read_chars (GIOChannel *channel,
        gchar *buf,
        gsize count,
        gsize *bytes_read,
        GError **error);
GIOStatus g_io_channel_read_unichar (GIOChannel *channel,
        gunichar *thechar,
        GError **error);
GIOStatus g_io_channel_write_chars (GIOChannel *channel,
        const gchar *buf,
        gssize count,
        gsize *bytes_written,
        GError **error);
GIOStatus g_io_channel_write_unichar (GIOChannel *channel,
        gunichar thechar,
        GError **error);
GIOStatus g_io_channel_seek_position (GIOChannel *channel,
        gint64 offset,
        GSeekType type,
        GError **error);




GIOChannel* g_io_channel_new_file (const gchar *filename,
        const gchar *mode,
        GError **error);



GQuark g_io_channel_error_quark (void);
GIOChannelError g_io_channel_error_from_errno (gint en);
# 298 "/usr/include/glib-2.0/glib/giochannel.h"
GIOChannel* g_io_channel_unix_new (int fd);
gint g_io_channel_unix_get_fd (GIOChannel *channel);



extern GSourceFuncs g_io_watch_funcs;
# 364 "/usr/include/glib-2.0/glib/giochannel.h"

# 51 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gkeyfile.h" 1
# 30 "/usr/include/glib-2.0/glib/gkeyfile.h"
# 1 "/usr/include/glib-2.0/glib/gerror.h" 1
# 31 "/usr/include/glib-2.0/glib/gkeyfile.h" 2



typedef enum
{
  G_KEY_FILE_ERROR_UNKNOWN_ENCODING,
  G_KEY_FILE_ERROR_PARSE,
  G_KEY_FILE_ERROR_NOT_FOUND,
  G_KEY_FILE_ERROR_KEY_NOT_FOUND,
  G_KEY_FILE_ERROR_GROUP_NOT_FOUND,
  G_KEY_FILE_ERROR_INVALID_VALUE
} GKeyFileError;



GQuark g_key_file_error_quark (void);

typedef struct _GKeyFile GKeyFile;

typedef enum
{
  G_KEY_FILE_NONE = 0,
  G_KEY_FILE_KEEP_COMMENTS = 1 << 0,
  G_KEY_FILE_KEEP_TRANSLATIONS = 1 << 1
} GKeyFileFlags;

GKeyFile *g_key_file_new (void);
void g_key_file_free (GKeyFile *key_file);
void g_key_file_set_list_separator (GKeyFile *key_file,
          gchar separator);
gboolean g_key_file_load_from_file (GKeyFile *key_file,
          const gchar *file,
          GKeyFileFlags flags,
          GError **error);
gboolean g_key_file_load_from_data (GKeyFile *key_file,
          const gchar *data,
          gsize length,
          GKeyFileFlags flags,
          GError **error);
gboolean g_key_file_load_from_dirs (GKeyFile *key_file,
          const gchar *file,
          const gchar **search_dirs,
          gchar **full_path,
          GKeyFileFlags flags,
          GError **error);
gboolean g_key_file_load_from_data_dirs (GKeyFile *key_file,
          const gchar *file,
          gchar **full_path,
          GKeyFileFlags flags,
          GError **error);
gchar *g_key_file_to_data (GKeyFile *key_file,
          gsize *length,
          GError **error) __attribute__((__malloc__));
gchar *g_key_file_get_start_group (GKeyFile *key_file) __attribute__((__malloc__));
gchar **g_key_file_get_groups (GKeyFile *key_file,
          gsize *length) __attribute__((__malloc__));
gchar **g_key_file_get_keys (GKeyFile *key_file,
          const gchar *group_name,
          gsize *length,
          GError **error) __attribute__((__malloc__));
gboolean g_key_file_has_group (GKeyFile *key_file,
          const gchar *group_name);
gboolean g_key_file_has_key (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
gchar *g_key_file_get_value (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error) __attribute__((__malloc__));
void g_key_file_set_value (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *value);
gchar *g_key_file_get_string (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error) __attribute__((__malloc__));
void g_key_file_set_string (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *string);
gchar *g_key_file_get_locale_string (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *locale,
          GError **error) __attribute__((__malloc__));
void g_key_file_set_locale_string (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *locale,
          const gchar *string);
gboolean g_key_file_get_boolean (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
void g_key_file_set_boolean (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gboolean value);
gint g_key_file_get_integer (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
void g_key_file_set_integer (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gint value);
gdouble g_key_file_get_double (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             GError **error);
void g_key_file_set_double (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             gdouble value);
gchar **g_key_file_get_string_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gsize *length,
          GError **error) __attribute__((__malloc__));
void g_key_file_set_string_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar * const list[],
          gsize length);
gchar **g_key_file_get_locale_string_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *locale,
          gsize *length,
          GError **error) __attribute__((__malloc__));
void g_key_file_set_locale_string_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *locale,
          const gchar * const list[],
          gsize length);
gboolean *g_key_file_get_boolean_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gsize *length,
          GError **error) __attribute__((__malloc__));
void g_key_file_set_boolean_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gboolean list[],
          gsize length);
gint *g_key_file_get_integer_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gsize *length,
          GError **error) __attribute__((__malloc__));
void g_key_file_set_double_list (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             gdouble list[],
                                             gsize length);
gdouble *g_key_file_get_double_list (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             gsize *length,
                                             GError **error) __attribute__((__malloc__));
void g_key_file_set_integer_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gint list[],
          gsize length);
gboolean g_key_file_set_comment (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             const gchar *comment,
                                             GError **error);
gchar *g_key_file_get_comment (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             GError **error) __attribute__((__malloc__));

gboolean g_key_file_remove_comment (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
          GError **error);
gboolean g_key_file_remove_key (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
gboolean g_key_file_remove_group (GKeyFile *key_file,
          const gchar *group_name,
          GError **error);
# 249 "/usr/include/glib-2.0/glib/gkeyfile.h"

# 52 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/glist.h" 1
# 53 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gmacros.h" 1
# 54 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gmain.h" 1
# 55 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gmappedfile.h" 1
# 29 "/usr/include/glib-2.0/glib/gmappedfile.h"
# 1 "/usr/include/glib-2.0/glib/gerror.h" 1
# 30 "/usr/include/glib-2.0/glib/gmappedfile.h" 2



typedef struct _GMappedFile GMappedFile;

GMappedFile *g_mapped_file_new (const gchar *filename,
             gboolean writable,
             GError **error) __attribute__((__malloc__));
gsize g_mapped_file_get_length (GMappedFile *file);
gchar *g_mapped_file_get_contents (GMappedFile *file);
void g_mapped_file_free (GMappedFile *file);


# 56 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gmarkup.h" 1
# 30 "/usr/include/glib-2.0/glib/gmarkup.h"
# 1 "/usr/include/glib-2.0/glib/gerror.h" 1
# 31 "/usr/include/glib-2.0/glib/gmarkup.h" 2
# 1 "/usr/include/glib-2.0/glib/gslist.h" 1
# 32 "/usr/include/glib-2.0/glib/gmarkup.h" 2



typedef enum
{
  G_MARKUP_ERROR_BAD_UTF8,
  G_MARKUP_ERROR_EMPTY,
  G_MARKUP_ERROR_PARSE,



  G_MARKUP_ERROR_UNKNOWN_ELEMENT,
  G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE,
  G_MARKUP_ERROR_INVALID_CONTENT,
  G_MARKUP_ERROR_MISSING_ATTRIBUTE
} GMarkupError;



GQuark g_markup_error_quark (void);

typedef enum
{
  G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1 << 0,
  G_MARKUP_TREAT_CDATA_AS_TEXT = 1 << 1,
  G_MARKUP_PREFIX_ERROR_POSITION = 1 << 2
} GMarkupParseFlags;

typedef struct _GMarkupParseContext GMarkupParseContext;
typedef struct _GMarkupParser GMarkupParser;

struct _GMarkupParser
{

  void (*start_element) (GMarkupParseContext *context,
                          const gchar *element_name,
                          const gchar **attribute_names,
                          const gchar **attribute_values,
                          gpointer user_data,
                          GError **error);


  void (*end_element) (GMarkupParseContext *context,
                          const gchar *element_name,
                          gpointer user_data,
                          GError **error);



  void (*text) (GMarkupParseContext *context,
                          const gchar *text,
                          gsize text_len,
                          gpointer user_data,
                          GError **error);






  void (*passthrough) (GMarkupParseContext *context,
                          const gchar *passthrough_text,
                          gsize text_len,
                          gpointer user_data,
                          GError **error);




  void (*error) (GMarkupParseContext *context,
                          GError *error,
                          gpointer user_data);
};

GMarkupParseContext *g_markup_parse_context_new (const GMarkupParser *parser,
                                                   GMarkupParseFlags flags,
                                                   gpointer user_data,
                                                   GDestroyNotify user_data_dnotify);
void g_markup_parse_context_free (GMarkupParseContext *context);
gboolean g_markup_parse_context_parse (GMarkupParseContext *context,
                                                   const gchar *text,
                                                   gssize text_len,
                                                   GError **error);
void g_markup_parse_context_push (GMarkupParseContext *context,
                                                   GMarkupParser *parser,
                                                   gpointer user_data);
gpointer g_markup_parse_context_pop (GMarkupParseContext *context);

gboolean g_markup_parse_context_end_parse (GMarkupParseContext *context,
                                                       GError **error);
const gchar *g_markup_parse_context_get_element (GMarkupParseContext *context);
const GSList *g_markup_parse_context_get_element_stack (GMarkupParseContext *context);


void g_markup_parse_context_get_position (GMarkupParseContext *context,
                                                          gint *line_number,
                                                          gint *char_number);
gpointer g_markup_parse_context_get_user_data (GMarkupParseContext *context);


gchar* g_markup_escape_text (const gchar *text,
                             gssize length);

gchar *g_markup_printf_escaped (const char *format,
    ...) __attribute__((__format__ (__printf__, 1, 2)));
gchar *g_markup_vprintf_escaped (const char *format,
     va_list args);

typedef enum
{
  G_MARKUP_COLLECT_INVALID,
  G_MARKUP_COLLECT_STRING,
  G_MARKUP_COLLECT_STRDUP,
  G_MARKUP_COLLECT_BOOLEAN,
  G_MARKUP_COLLECT_TRISTATE,

  G_MARKUP_COLLECT_OPTIONAL = (1 << 16)
} GMarkupCollectType;



gboolean g_markup_collect_attributes (const gchar *element_name,
                                        const gchar **attribute_names,
                                        const gchar **attribute_values,
                                        GError **error,
                                        GMarkupCollectType first_type,
                                        const gchar *first_attr,
                                        ...);


# 57 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gmem.h" 1
# 58 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gmessages.h" 1
# 35 "/usr/include/glib-2.0/glib/gmessages.h"
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 36 "/usr/include/glib-2.0/glib/gmessages.h" 2
# 1 "/usr/include/glib-2.0/glib/gmacros.h" 1
# 37 "/usr/include/glib-2.0/glib/gmessages.h" 2




       
# 42 "/usr/include/glib-2.0/glib/gmessages.h" 3






gsize g_printf_string_upper_bound (const gchar* format,
         va_list args);
# 58 "/usr/include/glib-2.0/glib/gmessages.h" 3
typedef enum
{

  G_LOG_FLAG_RECURSION = 1 << 0,
  G_LOG_FLAG_FATAL = 1 << 1,


  G_LOG_LEVEL_ERROR = 1 << 2,
  G_LOG_LEVEL_CRITICAL = 1 << 3,
  G_LOG_LEVEL_WARNING = 1 << 4,
  G_LOG_LEVEL_MESSAGE = 1 << 5,
  G_LOG_LEVEL_INFO = 1 << 6,
  G_LOG_LEVEL_DEBUG = 1 << 7,

  G_LOG_LEVEL_MASK = ~(G_LOG_FLAG_RECURSION | G_LOG_FLAG_FATAL)
} GLogLevelFlags;




typedef void (*GLogFunc) (const gchar *log_domain,
                                                 GLogLevelFlags log_level,
                                                 const gchar *message,
                                                 gpointer user_data);



guint g_log_set_handler (const gchar *log_domain,
                                         GLogLevelFlags log_levels,
                                         GLogFunc log_func,
                                         gpointer user_data);
void g_log_remove_handler (const gchar *log_domain,
                                         guint handler_id);
void g_log_default_handler (const gchar *log_domain,
                                         GLogLevelFlags log_level,
                                         const gchar *message,
                                         gpointer unused_data);
GLogFunc g_log_set_default_handler (GLogFunc log_func,
        gpointer user_data);
void g_log (const gchar *log_domain,
                                         GLogLevelFlags log_level,
                                         const gchar *format,
                                         ...) __attribute__((__format__ (__printf__, 3, 4)));
void g_logv (const gchar *log_domain,
                                         GLogLevelFlags log_level,
                                         const gchar *format,
                                         va_list args);
GLogLevelFlags g_log_set_fatal_mask (const gchar *log_domain,
                                         GLogLevelFlags fatal_mask);
GLogLevelFlags g_log_set_always_fatal (GLogLevelFlags fatal_mask);


__attribute__((visibility("hidden"))) void _g_log_fallback_handler (const gchar *log_domain,
       GLogLevelFlags log_level,
       const gchar *message,
       gpointer unused_data);


void g_return_if_fail_warning (const char *log_domain,
          const char *pretty_function,
          const char *expression);
void g_warn_message (const char *domain,
                               const char *file,
                               int line,
                               const char *func,
                               const char *warnexpr);

void g_assert_warning (const char *log_domain,
          const char *file,
          const int line,
                 const char *pretty_function,
                 const char *expression) __attribute__((__noreturn__));
# 227 "/usr/include/glib-2.0/glib/gmessages.h" 3
typedef void (*GPrintFunc) (const gchar *string);
void g_print (const gchar *format,
                                         ...) __attribute__((__format__ (__printf__, 1, 2)));
GPrintFunc g_set_print_handler (GPrintFunc func);
void g_printerr (const gchar *format,
                                         ...) __attribute__((__format__ (__printf__, 1, 2)));
GPrintFunc g_set_printerr_handler (GPrintFunc func);
# 339 "/usr/include/glib-2.0/glib/gmessages.h" 3

# 59 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gnode.h" 1
# 34 "/usr/include/glib-2.0/glib/gnode.h"
# 1 "/usr/include/glib-2.0/glib/gmem.h" 1
# 35 "/usr/include/glib-2.0/glib/gnode.h" 2



typedef struct _GNode GNode;


typedef enum
{
  G_TRAVERSE_LEAVES = 1 << 0,
  G_TRAVERSE_NON_LEAVES = 1 << 1,
  G_TRAVERSE_ALL = G_TRAVERSE_LEAVES | G_TRAVERSE_NON_LEAVES,
  G_TRAVERSE_MASK = 0x03,
  G_TRAVERSE_LEAFS = G_TRAVERSE_LEAVES,
  G_TRAVERSE_NON_LEAFS = G_TRAVERSE_NON_LEAVES
} GTraverseFlags;


typedef enum
{
  G_IN_ORDER,
  G_PRE_ORDER,
  G_POST_ORDER,
  G_LEVEL_ORDER
} GTraverseType;

typedef gboolean (*GNodeTraverseFunc) (GNode *node,
       gpointer data);
typedef void (*GNodeForeachFunc) (GNode *node,
       gpointer data);
# 77 "/usr/include/glib-2.0/glib/gnode.h"
typedef gpointer (*GCopyFunc) (gconstpointer src,
                                                 gpointer data);



struct _GNode
{
  gpointer data;
  GNode *next;
  GNode *prev;
  GNode *parent;
  GNode *children;
};
# 115 "/usr/include/glib-2.0/glib/gnode.h"
GNode* g_node_new (gpointer data);
void g_node_destroy (GNode *root);
void g_node_unlink (GNode *node);
GNode* g_node_copy_deep (GNode *node,
     GCopyFunc copy_func,
     gpointer data);
GNode* g_node_copy (GNode *node);
GNode* g_node_insert (GNode *parent,
     gint position,
     GNode *node);
GNode* g_node_insert_before (GNode *parent,
     GNode *sibling,
     GNode *node);
GNode* g_node_insert_after (GNode *parent,
     GNode *sibling,
     GNode *node);
GNode* g_node_prepend (GNode *parent,
     GNode *node);
guint g_node_n_nodes (GNode *root,
     GTraverseFlags flags);
GNode* g_node_get_root (GNode *node);
gboolean g_node_is_ancestor (GNode *node,
     GNode *descendant);
guint g_node_depth (GNode *node);
GNode* g_node_find (GNode *root,
     GTraverseType order,
     GTraverseFlags flags,
     gpointer data);
# 213 "/usr/include/glib-2.0/glib/gnode.h"
void g_node_traverse (GNode *root,
     GTraverseType order,
     GTraverseFlags flags,
     gint max_depth,
     GNodeTraverseFunc func,
     gpointer data);






guint g_node_max_height (GNode *root);

void g_node_children_foreach (GNode *node,
      GTraverseFlags flags,
      GNodeForeachFunc func,
      gpointer data);
void g_node_reverse_children (GNode *node);
guint g_node_n_children (GNode *node);
GNode* g_node_nth_child (GNode *node,
      guint n);
GNode* g_node_last_child (GNode *node);
GNode* g_node_find_child (GNode *node,
      GTraverseFlags flags,
      gpointer data);
gint g_node_child_position (GNode *node,
      GNode *child);
gint g_node_child_index (GNode *node,
      gpointer data);

GNode* g_node_first_sibling (GNode *node);
GNode* g_node_last_sibling (GNode *node);
# 282 "/usr/include/glib-2.0/glib/gnode.h"
void g_node_push_allocator (gpointer dummy);
void g_node_pop_allocator (void);



# 60 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/goption.h" 1
# 28 "/usr/include/glib-2.0/glib/goption.h"
# 1 "/usr/include/glib-2.0/glib/gerror.h" 1
# 29 "/usr/include/glib-2.0/glib/goption.h" 2
# 1 "/usr/include/glib-2.0/glib/gquark.h" 1
# 30 "/usr/include/glib-2.0/glib/goption.h" 2



typedef struct _GOptionContext GOptionContext;
typedef struct _GOptionGroup GOptionGroup;
typedef struct _GOptionEntry GOptionEntry;

typedef enum
{
  G_OPTION_FLAG_HIDDEN = 1 << 0,
  G_OPTION_FLAG_IN_MAIN = 1 << 1,
  G_OPTION_FLAG_REVERSE = 1 << 2,
  G_OPTION_FLAG_NO_ARG = 1 << 3,
  G_OPTION_FLAG_FILENAME = 1 << 4,
  G_OPTION_FLAG_OPTIONAL_ARG = 1 << 5,
  G_OPTION_FLAG_NOALIAS = 1 << 6
} GOptionFlags;

typedef enum
{
  G_OPTION_ARG_NONE,
  G_OPTION_ARG_STRING,
  G_OPTION_ARG_INT,
  G_OPTION_ARG_CALLBACK,
  G_OPTION_ARG_FILENAME,
  G_OPTION_ARG_STRING_ARRAY,
  G_OPTION_ARG_FILENAME_ARRAY,
  G_OPTION_ARG_DOUBLE,
  G_OPTION_ARG_INT64
} GOptionArg;

typedef gboolean (*GOptionArgFunc) (const gchar *option_name,
        const gchar *value,
        gpointer data,
        GError **error);

typedef gboolean (*GOptionParseFunc) (GOptionContext *context,
          GOptionGroup *group,
          gpointer data,
          GError **error);

typedef void (*GOptionErrorFunc) (GOptionContext *context,
      GOptionGroup *group,
      gpointer data,
      GError **error);



typedef enum
{
  G_OPTION_ERROR_UNKNOWN_OPTION,
  G_OPTION_ERROR_BAD_VALUE,
  G_OPTION_ERROR_FAILED
} GOptionError;

GQuark g_option_error_quark (void);


struct _GOptionEntry
{
  const gchar *long_name;
  gchar short_name;
  gint flags;

  GOptionArg arg;
  gpointer arg_data;

  const gchar *description;
  const gchar *arg_description;
};



GOptionContext *g_option_context_new (const gchar *parameter_string);
void g_option_context_set_summary (GOptionContext *context,
                                                   const gchar *summary);
const gchar *g_option_context_get_summary (GOptionContext *context);
void g_option_context_set_description (GOptionContext *context,
                                                   const gchar *description);
const gchar *g_option_context_get_description (GOptionContext *context);
void g_option_context_free (GOptionContext *context);
void g_option_context_set_help_enabled (GOptionContext *context,
         gboolean help_enabled);
gboolean g_option_context_get_help_enabled (GOptionContext *context);
void g_option_context_set_ignore_unknown_options (GOptionContext *context,
            gboolean ignore_unknown);
gboolean g_option_context_get_ignore_unknown_options (GOptionContext *context);

void g_option_context_add_main_entries (GOptionContext *context,
         const GOptionEntry *entries,
         const gchar *translation_domain);
gboolean g_option_context_parse (GOptionContext *context,
         gint *argc,
         gchar ***argv,
         GError **error);
void g_option_context_set_translate_func (GOptionContext *context,
           GTranslateFunc func,
           gpointer data,
           GDestroyNotify destroy_notify);
void g_option_context_set_translation_domain (GOptionContext *context,
        const gchar *domain);

void g_option_context_add_group (GOptionContext *context,
       GOptionGroup *group);
void g_option_context_set_main_group (GOptionContext *context,
            GOptionGroup *group);
GOptionGroup *g_option_context_get_main_group (GOptionContext *context);
gchar *g_option_context_get_help (GOptionContext *context,
                                               gboolean main_help,
                                               GOptionGroup *group);

GOptionGroup *g_option_group_new (const gchar *name,
           const gchar *description,
           const gchar *help_description,
           gpointer user_data,
           GDestroyNotify destroy);
void g_option_group_set_parse_hooks (GOptionGroup *group,
           GOptionParseFunc pre_parse_func,
           GOptionParseFunc post_parse_func);
void g_option_group_set_error_hook (GOptionGroup *group,
           GOptionErrorFunc error_func);
void g_option_group_free (GOptionGroup *group);
void g_option_group_add_entries (GOptionGroup *group,
           const GOptionEntry *entries);
void g_option_group_set_translate_func (GOptionGroup *group,
           GTranslateFunc func,
           gpointer data,
           GDestroyNotify destroy_notify);
void g_option_group_set_translation_domain (GOptionGroup *group,
           const gchar *domain);


# 61 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gpattern.h" 1
# 27 "/usr/include/glib-2.0/glib/gpattern.h"
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 28 "/usr/include/glib-2.0/glib/gpattern.h" 2




typedef struct _GPatternSpec GPatternSpec;

GPatternSpec* g_pattern_spec_new (const gchar *pattern);
void g_pattern_spec_free (GPatternSpec *pspec);
gboolean g_pattern_spec_equal (GPatternSpec *pspec1,
     GPatternSpec *pspec2);
gboolean g_pattern_match (GPatternSpec *pspec,
     guint string_length,
     const gchar *string,
     const gchar *string_reversed);
gboolean g_pattern_match_string (GPatternSpec *pspec,
     const gchar *string);
gboolean g_pattern_match_simple (const gchar *pattern,
     const gchar *string);


# 62 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gpoll.h" 1
# 63 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gprimes.h" 1
# 34 "/usr/include/glib-2.0/glib/gprimes.h"
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 35 "/usr/include/glib-2.0/glib/gprimes.h" 2


# 47 "/usr/include/glib-2.0/glib/gprimes.h"
guint g_spaced_primes_closest (guint num) __attribute__((__const__));


# 64 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gqsort.h" 1
# 34 "/usr/include/glib-2.0/glib/gqsort.h"
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 35 "/usr/include/glib-2.0/glib/gqsort.h" 2



void g_qsort_with_data (gconstpointer pbase,
   gint total_elems,
   gsize size,
   GCompareDataFunc compare_func,
   gpointer user_data);


# 65 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gquark.h" 1
# 66 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gqueue.h" 1
# 34 "/usr/include/glib-2.0/glib/gqueue.h"
# 1 "/usr/include/glib-2.0/glib/glist.h" 1
# 35 "/usr/include/glib-2.0/glib/gqueue.h" 2



typedef struct _GQueue GQueue;

struct _GQueue
{
  GList *head;
  GList *tail;
  guint length;
};





GQueue* g_queue_new (void);
void g_queue_free (GQueue *queue);
void g_queue_init (GQueue *queue);
void g_queue_clear (GQueue *queue);
gboolean g_queue_is_empty (GQueue *queue);
guint g_queue_get_length (GQueue *queue);
void g_queue_reverse (GQueue *queue);
GQueue * g_queue_copy (GQueue *queue);
void g_queue_foreach (GQueue *queue,
     GFunc func,
     gpointer user_data);
GList * g_queue_find (GQueue *queue,
     gconstpointer data);
GList * g_queue_find_custom (GQueue *queue,
     gconstpointer data,
     GCompareFunc func);
void g_queue_sort (GQueue *queue,
     GCompareDataFunc compare_func,
     gpointer user_data);

void g_queue_push_head (GQueue *queue,
     gpointer data);
void g_queue_push_tail (GQueue *queue,
     gpointer data);
void g_queue_push_nth (GQueue *queue,
     gpointer data,
     gint n);
gpointer g_queue_pop_head (GQueue *queue);
gpointer g_queue_pop_tail (GQueue *queue);
gpointer g_queue_pop_nth (GQueue *queue,
     guint n);
gpointer g_queue_peek_head (GQueue *queue);
gpointer g_queue_peek_tail (GQueue *queue);
gpointer g_queue_peek_nth (GQueue *queue,
     guint n);
gint g_queue_index (GQueue *queue,
     gconstpointer data);
void g_queue_remove (GQueue *queue,
     gconstpointer data);
void g_queue_remove_all (GQueue *queue,
     gconstpointer data);
void g_queue_insert_before (GQueue *queue,
     GList *sibling,
     gpointer data);
void g_queue_insert_after (GQueue *queue,
     GList *sibling,
     gpointer data);
void g_queue_insert_sorted (GQueue *queue,
     gpointer data,
     GCompareDataFunc func,
     gpointer user_data);

void g_queue_push_head_link (GQueue *queue,
     GList *link_);
void g_queue_push_tail_link (GQueue *queue,
     GList *link_);
void g_queue_push_nth_link (GQueue *queue,
     gint n,
     GList *link_);
GList* g_queue_pop_head_link (GQueue *queue);
GList* g_queue_pop_tail_link (GQueue *queue);
GList* g_queue_pop_nth_link (GQueue *queue,
     guint n);
GList* g_queue_peek_head_link (GQueue *queue);
GList* g_queue_peek_tail_link (GQueue *queue);
GList* g_queue_peek_nth_link (GQueue *queue,
     guint n);
gint g_queue_link_index (GQueue *queue,
     GList *link_);
void g_queue_unlink (GQueue *queue,
     GList *link_);
void g_queue_delete_link (GQueue *queue,
     GList *link_);


# 67 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/grand.h" 1
# 34 "/usr/include/glib-2.0/glib/grand.h"
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 35 "/usr/include/glib-2.0/glib/grand.h" 2



typedef struct _GRand GRand;
# 49 "/usr/include/glib-2.0/glib/grand.h"
GRand* g_rand_new_with_seed (guint32 seed);
GRand* g_rand_new_with_seed_array (const guint32 *seed,
        guint seed_length);
GRand* g_rand_new (void);
void g_rand_free (GRand *rand_);
GRand* g_rand_copy (GRand *rand_);
void g_rand_set_seed (GRand *rand_,
          guint32 seed);
void g_rand_set_seed_array (GRand *rand_,
          const guint32 *seed,
          guint seed_length);



guint32 g_rand_int (GRand *rand_);
gint32 g_rand_int_range (GRand *rand_,
          gint32 begin,
          gint32 end);
gdouble g_rand_double (GRand *rand_);
gdouble g_rand_double_range (GRand *rand_,
          gdouble begin,
          gdouble end);
void g_random_set_seed (guint32 seed);



guint32 g_random_int (void);
gint32 g_random_int_range (gint32 begin,
          gint32 end);
gdouble g_random_double (void);
gdouble g_random_double_range (gdouble begin,
          gdouble end);



# 68 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/grel.h" 1
# 34 "/usr/include/glib-2.0/glib/grel.h"
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 35 "/usr/include/glib-2.0/glib/grel.h" 2



typedef struct _GRelation GRelation;
typedef struct _GTuples GTuples;

struct _GTuples
{
  guint len;
};
# 69 "/usr/include/glib-2.0/glib/grel.h"
GRelation* g_relation_new (gint fields);
void g_relation_destroy (GRelation *relation);
void g_relation_index (GRelation *relation,
                               gint field,
                               GHashFunc hash_func,
                               GEqualFunc key_equal_func);
void g_relation_insert (GRelation *relation,
                               ...);
gint g_relation_delete (GRelation *relation,
                               gconstpointer key,
                               gint field);
GTuples* g_relation_select (GRelation *relation,
                               gconstpointer key,
                               gint field);
gint g_relation_count (GRelation *relation,
                               gconstpointer key,
                               gint field);
gboolean g_relation_exists (GRelation *relation,
                               ...);
void g_relation_print (GRelation *relation);

void g_tuples_destroy (GTuples *tuples);
gpointer g_tuples_index (GTuples *tuples,
                               gint index_,
                               gint field);


# 69 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gregex.h" 1
# 29 "/usr/include/glib-2.0/glib/gregex.h"
# 1 "/usr/include/glib-2.0/glib/gerror.h" 1
# 30 "/usr/include/glib-2.0/glib/gregex.h" 2
# 1 "/usr/include/glib-2.0/glib/gstring.h" 1
# 31 "/usr/include/glib-2.0/glib/gregex.h" 2



typedef enum
{
  G_REGEX_ERROR_COMPILE,
  G_REGEX_ERROR_OPTIMIZE,
  G_REGEX_ERROR_REPLACE,
  G_REGEX_ERROR_MATCH,
  G_REGEX_ERROR_INTERNAL,


  G_REGEX_ERROR_STRAY_BACKSLASH = 101,
  G_REGEX_ERROR_MISSING_CONTROL_CHAR = 102,
  G_REGEX_ERROR_UNRECOGNIZED_ESCAPE = 103,
  G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = 104,
  G_REGEX_ERROR_QUANTIFIER_TOO_BIG = 105,
  G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = 106,
  G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = 107,
  G_REGEX_ERROR_RANGE_OUT_OF_ORDER = 108,
  G_REGEX_ERROR_NOTHING_TO_REPEAT = 109,
  G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = 112,
  G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = 113,
  G_REGEX_ERROR_UNMATCHED_PARENTHESIS = 114,
  G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = 115,
  G_REGEX_ERROR_UNTERMINATED_COMMENT = 118,
  G_REGEX_ERROR_EXPRESSION_TOO_LARGE = 120,
  G_REGEX_ERROR_MEMORY_ERROR = 121,
  G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = 125,
  G_REGEX_ERROR_MALFORMED_CONDITION = 126,
  G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = 127,
  G_REGEX_ERROR_ASSERTION_EXPECTED = 128,
  G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = 130,
  G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = 131,
  G_REGEX_ERROR_HEX_CODE_TOO_LARGE = 134,
  G_REGEX_ERROR_INVALID_CONDITION = 135,
  G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = 136,
  G_REGEX_ERROR_INFINITE_LOOP = 140,
  G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = 142,
  G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = 143,
  G_REGEX_ERROR_MALFORMED_PROPERTY = 146,
  G_REGEX_ERROR_UNKNOWN_PROPERTY = 147,
  G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = 148,
  G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = 149,
  G_REGEX_ERROR_INVALID_OCTAL_VALUE = 151,
  G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = 154,
  G_REGEX_ERROR_DEFINE_REPETION = 155,
  G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = 156,
  G_REGEX_ERROR_MISSING_BACK_REFERENCE = 157
} GRegexError;



GQuark g_regex_error_quark (void);



typedef enum
{
  G_REGEX_CASELESS = 1 << 0,
  G_REGEX_MULTILINE = 1 << 1,
  G_REGEX_DOTALL = 1 << 2,
  G_REGEX_EXTENDED = 1 << 3,
  G_REGEX_ANCHORED = 1 << 4,
  G_REGEX_DOLLAR_ENDONLY = 1 << 5,
  G_REGEX_UNGREEDY = 1 << 9,
  G_REGEX_RAW = 1 << 11,
  G_REGEX_NO_AUTO_CAPTURE = 1 << 12,
  G_REGEX_OPTIMIZE = 1 << 13,
  G_REGEX_DUPNAMES = 1 << 19,
  G_REGEX_NEWLINE_CR = 1 << 20,
  G_REGEX_NEWLINE_LF = 1 << 21,
  G_REGEX_NEWLINE_CRLF = G_REGEX_NEWLINE_CR | G_REGEX_NEWLINE_LF
} GRegexCompileFlags;



typedef enum
{
  G_REGEX_MATCH_ANCHORED = 1 << 4,
  G_REGEX_MATCH_NOTBOL = 1 << 7,
  G_REGEX_MATCH_NOTEOL = 1 << 8,
  G_REGEX_MATCH_NOTEMPTY = 1 << 10,
  G_REGEX_MATCH_PARTIAL = 1 << 15,
  G_REGEX_MATCH_NEWLINE_CR = 1 << 20,
  G_REGEX_MATCH_NEWLINE_LF = 1 << 21,
  G_REGEX_MATCH_NEWLINE_CRLF = G_REGEX_MATCH_NEWLINE_CR | G_REGEX_MATCH_NEWLINE_LF,
  G_REGEX_MATCH_NEWLINE_ANY = 1 << 22
} GRegexMatchFlags;

typedef struct _GRegex GRegex;
typedef struct _GMatchInfo GMatchInfo;

typedef gboolean (*GRegexEvalCallback) (const GMatchInfo *match_info,
       GString *result,
       gpointer user_data);


GRegex *g_regex_new (const gchar *pattern,
       GRegexCompileFlags compile_options,
       GRegexMatchFlags match_options,
       GError **error);
GRegex *g_regex_ref (GRegex *regex);
void g_regex_unref (GRegex *regex);
const gchar *g_regex_get_pattern (const GRegex *regex);
gint g_regex_get_max_backref (const GRegex *regex);
gint g_regex_get_capture_count (const GRegex *regex);
gint g_regex_get_string_number (const GRegex *regex,
       const gchar *name);
gchar *g_regex_escape_string (const gchar *string,
       gint length);


gboolean g_regex_match_simple (const gchar *pattern,
       const gchar *string,
       GRegexCompileFlags compile_options,
       GRegexMatchFlags match_options);
gboolean g_regex_match (const GRegex *regex,
       const gchar *string,
       GRegexMatchFlags match_options,
       GMatchInfo **match_info);
gboolean g_regex_match_full (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       GRegexMatchFlags match_options,
       GMatchInfo **match_info,
       GError **error);
gboolean g_regex_match_all (const GRegex *regex,
       const gchar *string,
       GRegexMatchFlags match_options,
       GMatchInfo **match_info);
gboolean g_regex_match_all_full (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       GRegexMatchFlags match_options,
       GMatchInfo **match_info,
       GError **error);


gchar **g_regex_split_simple (const gchar *pattern,
       const gchar *string,
       GRegexCompileFlags compile_options,
       GRegexMatchFlags match_options);
gchar **g_regex_split (const GRegex *regex,
       const gchar *string,
       GRegexMatchFlags match_options);
gchar **g_regex_split_full (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       GRegexMatchFlags match_options,
       gint max_tokens,
       GError **error);


gchar *g_regex_replace (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       const gchar *replacement,
       GRegexMatchFlags match_options,
       GError **error);
gchar *g_regex_replace_literal (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       const gchar *replacement,
       GRegexMatchFlags match_options,
       GError **error);
gchar *g_regex_replace_eval (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       GRegexMatchFlags match_options,
       GRegexEvalCallback eval,
       gpointer user_data,
       GError **error);
gboolean g_regex_check_replacement (const gchar *replacement,
       gboolean *has_references,
       GError **error);


GRegex *g_match_info_get_regex (const GMatchInfo *match_info);
const gchar *g_match_info_get_string (const GMatchInfo *match_info);

void g_match_info_free (GMatchInfo *match_info);
gboolean g_match_info_next (GMatchInfo *match_info,
       GError **error);
gboolean g_match_info_matches (const GMatchInfo *match_info);
gint g_match_info_get_match_count (const GMatchInfo *match_info);
gboolean g_match_info_is_partial_match (const GMatchInfo *match_info);
gchar *g_match_info_expand_references(const GMatchInfo *match_info,
       const gchar *string_to_expand,
       GError **error);
gchar *g_match_info_fetch (const GMatchInfo *match_info,
       gint match_num);
gboolean g_match_info_fetch_pos (const GMatchInfo *match_info,
       gint match_num,
       gint *start_pos,
       gint *end_pos);
gchar *g_match_info_fetch_named (const GMatchInfo *match_info,
       const gchar *name);
gboolean g_match_info_fetch_named_pos (const GMatchInfo *match_info,
       const gchar *name,
       gint *start_pos,
       gint *end_pos);
gchar **g_match_info_fetch_all (const GMatchInfo *match_info);


# 70 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gscanner.h" 1
# 34 "/usr/include/glib-2.0/glib/gscanner.h"
# 1 "/usr/include/glib-2.0/glib/gdataset.h" 1
# 35 "/usr/include/glib-2.0/glib/gscanner.h" 2
# 1 "/usr/include/glib-2.0/glib/ghash.h" 1
# 36 "/usr/include/glib-2.0/glib/gscanner.h" 2



typedef struct _GScanner GScanner;
typedef struct _GScannerConfig GScannerConfig;
typedef union _GTokenValue GTokenValue;

typedef void (*GScannerMsgFunc) (GScanner *scanner,
       gchar *message,
       gboolean error);
# 64 "/usr/include/glib-2.0/glib/gscanner.h"
typedef enum
{
  G_ERR_UNKNOWN,
  G_ERR_UNEXP_EOF,
  G_ERR_UNEXP_EOF_IN_STRING,
  G_ERR_UNEXP_EOF_IN_COMMENT,
  G_ERR_NON_DIGIT_IN_CONST,
  G_ERR_DIGIT_RADIX,
  G_ERR_FLOAT_RADIX,
  G_ERR_FLOAT_MALFORMED
} GErrorType;


typedef enum
{
  G_TOKEN_EOF = 0,

  G_TOKEN_LEFT_PAREN = '(',
  G_TOKEN_RIGHT_PAREN = ')',
  G_TOKEN_LEFT_CURLY = '{',
  G_TOKEN_RIGHT_CURLY = '}',
  G_TOKEN_LEFT_BRACE = '[',
  G_TOKEN_RIGHT_BRACE = ']',
  G_TOKEN_EQUAL_SIGN = '=',
  G_TOKEN_COMMA = ',',

  G_TOKEN_NONE = 256,

  G_TOKEN_ERROR,

  G_TOKEN_CHAR,
  G_TOKEN_BINARY,
  G_TOKEN_OCTAL,
  G_TOKEN_INT,
  G_TOKEN_HEX,
  G_TOKEN_FLOAT,
  G_TOKEN_STRING,

  G_TOKEN_SYMBOL,
  G_TOKEN_IDENTIFIER,
  G_TOKEN_IDENTIFIER_NULL,

  G_TOKEN_COMMENT_SINGLE,
  G_TOKEN_COMMENT_MULTI,
  G_TOKEN_LAST
} GTokenType;

union _GTokenValue
{
  gpointer v_symbol;
  gchar *v_identifier;
  gulong v_binary;
  gulong v_octal;
  gulong v_int;
  guint64 v_int64;
  gdouble v_float;
  gulong v_hex;
  gchar *v_string;
  gchar *v_comment;
  guchar v_char;
  guint v_error;
};

struct _GScannerConfig
{


  gchar *cset_skip_characters;
  gchar *cset_identifier_first;
  gchar *cset_identifier_nth;
  gchar *cpair_comment_single;



  guint case_sensitive : 1;




  guint skip_comment_multi : 1;
  guint skip_comment_single : 1;
  guint scan_comment_multi : 1;
  guint scan_identifier : 1;
  guint scan_identifier_1char : 1;
  guint scan_identifier_NULL : 1;
  guint scan_symbols : 1;
  guint scan_binary : 1;
  guint scan_octal : 1;
  guint scan_float : 1;
  guint scan_hex : 1;
  guint scan_hex_dollar : 1;
  guint scan_string_sq : 1;
  guint scan_string_dq : 1;
  guint numbers_2_int : 1;
  guint int_2_float : 1;
  guint identifier_2_string : 1;
  guint char_2_token : 1;
  guint symbol_2_token : 1;
  guint scope_0_fallback : 1;
  guint store_int64 : 1;
  guint padding_dummy;
};

struct _GScanner
{

  gpointer user_data;
  guint max_parse_errors;


  guint parse_errors;


  const gchar *input_name;


  GData *qdata;


  GScannerConfig *config;


  GTokenType token;
  GTokenValue value;
  guint line;
  guint position;


  GTokenType next_token;
  GTokenValue next_value;
  guint next_line;
  guint next_position;


  GHashTable *symbol_table;
  gint input_fd;
  const gchar *text;
  const gchar *text_end;
  gchar *buffer;
  guint scope_id;


  GScannerMsgFunc msg_handler;
};

GScanner* g_scanner_new (const GScannerConfig *config_templ);
void g_scanner_destroy (GScanner *scanner);
void g_scanner_input_file (GScanner *scanner,
       gint input_fd);
void g_scanner_sync_file_offset (GScanner *scanner);
void g_scanner_input_text (GScanner *scanner,
       const gchar *text,
       guint text_len);
GTokenType g_scanner_get_next_token (GScanner *scanner);
GTokenType g_scanner_peek_next_token (GScanner *scanner);
GTokenType g_scanner_cur_token (GScanner *scanner);
GTokenValue g_scanner_cur_value (GScanner *scanner);
guint g_scanner_cur_line (GScanner *scanner);
guint g_scanner_cur_position (GScanner *scanner);
gboolean g_scanner_eof (GScanner *scanner);
guint g_scanner_set_scope (GScanner *scanner,
       guint scope_id);
void g_scanner_scope_add_symbol (GScanner *scanner,
       guint scope_id,
       const gchar *symbol,
       gpointer value);
void g_scanner_scope_remove_symbol (GScanner *scanner,
       guint scope_id,
       const gchar *symbol);
gpointer g_scanner_scope_lookup_symbol (GScanner *scanner,
       guint scope_id,
       const gchar *symbol);
void g_scanner_scope_foreach_symbol (GScanner *scanner,
       guint scope_id,
       GHFunc func,
       gpointer user_data);
gpointer g_scanner_lookup_symbol (GScanner *scanner,
       const gchar *symbol);
void g_scanner_unexp_token (GScanner *scanner,
       GTokenType expected_token,
       const gchar *identifier_spec,
       const gchar *symbol_spec,
       const gchar *symbol_name,
       const gchar *message,
       gint is_error);
void g_scanner_error (GScanner *scanner,
       const gchar *format,
       ...) __attribute__((__format__ (__printf__, 2, 3)));
void g_scanner_warn (GScanner *scanner,
       const gchar *format,
       ...) __attribute__((__format__ (__printf__, 2, 3)));
# 276 "/usr/include/glib-2.0/glib/gscanner.h"

# 71 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gsequence.h" 1
# 28 "/usr/include/glib-2.0/glib/gsequence.h"
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 29 "/usr/include/glib-2.0/glib/gsequence.h" 2



typedef struct _GSequence GSequence;
typedef struct _GSequenceNode GSequenceIter;

typedef gint (* GSequenceIterCompareFunc) (GSequenceIter *a,
                                           GSequenceIter *b,
                                           gpointer data);



GSequence * g_sequence_new (GDestroyNotify data_destroy);
void g_sequence_free (GSequence *seq);
gint g_sequence_get_length (GSequence *seq);
void g_sequence_foreach (GSequence *seq,
                                              GFunc func,
                                              gpointer user_data);
void g_sequence_foreach_range (GSequenceIter *begin,
                                              GSequenceIter *end,
                                              GFunc func,
                                              gpointer user_data);
void g_sequence_sort (GSequence *seq,
                                              GCompareDataFunc cmp_func,
                                              gpointer cmp_data);
void g_sequence_sort_iter (GSequence *seq,
                                              GSequenceIterCompareFunc cmp_func,
                                              gpointer cmp_data);



GSequenceIter *g_sequence_get_begin_iter (GSequence *seq);
GSequenceIter *g_sequence_get_end_iter (GSequence *seq);
GSequenceIter *g_sequence_get_iter_at_pos (GSequence *seq,
                                              gint pos);
GSequenceIter *g_sequence_append (GSequence *seq,
                                              gpointer data);
GSequenceIter *g_sequence_prepend (GSequence *seq,
                                              gpointer data);
GSequenceIter *g_sequence_insert_before (GSequenceIter *iter,
                                              gpointer data);
void g_sequence_move (GSequenceIter *src,
                                              GSequenceIter *dest);
void g_sequence_swap (GSequenceIter *a,
                                              GSequenceIter *b);
GSequenceIter *g_sequence_insert_sorted (GSequence *seq,
                                              gpointer data,
                                              GCompareDataFunc cmp_func,
                                              gpointer cmp_data);
GSequenceIter *g_sequence_insert_sorted_iter (GSequence *seq,
                                              gpointer data,
                                              GSequenceIterCompareFunc iter_cmp,
                                              gpointer cmp_data);
void g_sequence_sort_changed (GSequenceIter *iter,
                                              GCompareDataFunc cmp_func,
                                              gpointer cmp_data);
void g_sequence_sort_changed_iter (GSequenceIter *iter,
                                              GSequenceIterCompareFunc iter_cmp,
                                              gpointer cmp_data);
void g_sequence_remove (GSequenceIter *iter);
void g_sequence_remove_range (GSequenceIter *begin,
                                              GSequenceIter *end);
void g_sequence_move_range (GSequenceIter *dest,
                                              GSequenceIter *begin,
                                              GSequenceIter *end);
GSequenceIter *g_sequence_search (GSequence *seq,
                                              gpointer data,
                                              GCompareDataFunc cmp_func,
                                              gpointer cmp_data);
GSequenceIter *g_sequence_search_iter (GSequence *seq,
                                              gpointer data,
                                              GSequenceIterCompareFunc iter_cmp,
                                              gpointer cmp_data);



gpointer g_sequence_get (GSequenceIter *iter);
void g_sequence_set (GSequenceIter *iter,
                                              gpointer data);


gboolean g_sequence_iter_is_begin (GSequenceIter *iter);
gboolean g_sequence_iter_is_end (GSequenceIter *iter);
GSequenceIter *g_sequence_iter_next (GSequenceIter *iter);
GSequenceIter *g_sequence_iter_prev (GSequenceIter *iter);
gint g_sequence_iter_get_position (GSequenceIter *iter);
GSequenceIter *g_sequence_iter_move (GSequenceIter *iter,
                                              gint delta);
GSequence * g_sequence_iter_get_sequence (GSequenceIter *iter);



gint g_sequence_iter_compare (GSequenceIter *a,
                                              GSequenceIter *b);
GSequenceIter *g_sequence_range_get_midpoint (GSequenceIter *begin,
                                              GSequenceIter *end);


# 72 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gshell.h" 1
# 28 "/usr/include/glib-2.0/glib/gshell.h"
# 1 "/usr/include/glib-2.0/glib/gerror.h" 1
# 29 "/usr/include/glib-2.0/glib/gshell.h" 2





typedef enum
{

  G_SHELL_ERROR_BAD_QUOTING,

  G_SHELL_ERROR_EMPTY_STRING,
  G_SHELL_ERROR_FAILED
} GShellError;

GQuark g_shell_error_quark (void);

gchar* g_shell_quote (const gchar *unquoted_string);
gchar* g_shell_unquote (const gchar *quoted_string,
                             GError **error);
gboolean g_shell_parse_argv (const gchar *command_line,
                             gint *argcp,
                             gchar ***argvp,
                             GError **error);


# 73 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gslice.h" 1
# 74 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gslist.h" 1
# 75 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gspawn.h" 1
# 28 "/usr/include/glib-2.0/glib/gspawn.h"
# 1 "/usr/include/glib-2.0/glib/gerror.h" 1
# 29 "/usr/include/glib-2.0/glib/gspawn.h" 2






typedef enum
{
  G_SPAWN_ERROR_FORK,
  G_SPAWN_ERROR_READ,
  G_SPAWN_ERROR_CHDIR,
  G_SPAWN_ERROR_ACCES,
  G_SPAWN_ERROR_PERM,
  G_SPAWN_ERROR_2BIG,
  G_SPAWN_ERROR_NOEXEC,
  G_SPAWN_ERROR_NAMETOOLONG,
  G_SPAWN_ERROR_NOENT,
  G_SPAWN_ERROR_NOMEM,
  G_SPAWN_ERROR_NOTDIR,
  G_SPAWN_ERROR_LOOP,
  G_SPAWN_ERROR_TXTBUSY,
  G_SPAWN_ERROR_IO,
  G_SPAWN_ERROR_NFILE,
  G_SPAWN_ERROR_MFILE,
  G_SPAWN_ERROR_INVAL,
  G_SPAWN_ERROR_ISDIR,
  G_SPAWN_ERROR_LIBBAD,
  G_SPAWN_ERROR_FAILED


} GSpawnError;

typedef void (* GSpawnChildSetupFunc) (gpointer user_data);

typedef enum
{
  G_SPAWN_LEAVE_DESCRIPTORS_OPEN = 1 << 0,
  G_SPAWN_DO_NOT_REAP_CHILD = 1 << 1,

  G_SPAWN_SEARCH_PATH = 1 << 2,

  G_SPAWN_STDOUT_TO_DEV_NULL = 1 << 3,
  G_SPAWN_STDERR_TO_DEV_NULL = 1 << 4,
  G_SPAWN_CHILD_INHERITS_STDIN = 1 << 5,
  G_SPAWN_FILE_AND_ARGV_ZERO = 1 << 6
} GSpawnFlags;

GQuark g_spawn_error_quark (void);
# 86 "/usr/include/glib-2.0/glib/gspawn.h"
gboolean g_spawn_async (const gchar *working_directory,
                        gchar **argv,
                        gchar **envp,
                        GSpawnFlags flags,
                        GSpawnChildSetupFunc child_setup,
                        gpointer user_data,
                        GPid *child_pid,
                        GError **error);





gboolean g_spawn_async_with_pipes (const gchar *working_directory,
                                   gchar **argv,
                                   gchar **envp,
                                   GSpawnFlags flags,
                                   GSpawnChildSetupFunc child_setup,
                                   gpointer user_data,
                                   GPid *child_pid,
                                   gint *standard_input,
                                   gint *standard_output,
                                   gint *standard_error,
                                   GError **error);






gboolean g_spawn_sync (const gchar *working_directory,
                               gchar **argv,
                               gchar **envp,
                               GSpawnFlags flags,
                               GSpawnChildSetupFunc child_setup,
                               gpointer user_data,
                               gchar **standard_output,
                               gchar **standard_error,
                               gint *exit_status,
                               GError **error);

gboolean g_spawn_command_line_sync (const gchar *command_line,
                                     gchar **standard_output,
                                     gchar **standard_error,
                                     gint *exit_status,
                                     GError **error);
gboolean g_spawn_command_line_async (const gchar *command_line,
                                     GError **error);

void g_spawn_close_pid (GPid pid);


# 76 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gstrfuncs.h" 1
# 35 "/usr/include/glib-2.0/glib/gstrfuncs.h"
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 36 "/usr/include/glib-2.0/glib/gstrfuncs.h" 2




typedef enum {
  G_ASCII_ALNUM = 1 << 0,
  G_ASCII_ALPHA = 1 << 1,
  G_ASCII_CNTRL = 1 << 2,
  G_ASCII_DIGIT = 1 << 3,
  G_ASCII_GRAPH = 1 << 4,
  G_ASCII_LOWER = 1 << 5,
  G_ASCII_PRINT = 1 << 6,
  G_ASCII_PUNCT = 1 << 7,
  G_ASCII_SPACE = 1 << 8,
  G_ASCII_UPPER = 1 << 9,
  G_ASCII_XDIGIT = 1 << 10
} GAsciiType;

extern const guint16 * const g_ascii_table;
# 89 "/usr/include/glib-2.0/glib/gstrfuncs.h"
gchar g_ascii_tolower (gchar c) __attribute__((__const__));
gchar g_ascii_toupper (gchar c) __attribute__((__const__));

gint g_ascii_digit_value (gchar c) __attribute__((__const__));
gint g_ascii_xdigit_value (gchar c) __attribute__((__const__));





gchar* g_strdelimit (gchar *string,
     const gchar *delimiters,
     gchar new_delimiter);
gchar* g_strcanon (gchar *string,
     const gchar *valid_chars,
     gchar substitutor);
const gchar* g_strerror (gint errnum) __attribute__((__const__));
const gchar* g_strsignal (gint signum) __attribute__((__const__));
gchar* g_strreverse (gchar *string);
gsize g_strlcpy (gchar *dest,
     const gchar *src,
     gsize dest_size);
gsize g_strlcat (gchar *dest,
     const gchar *src,
     gsize dest_size);
gchar * g_strstr_len (const gchar *haystack,
     gssize haystack_len,
     const gchar *needle);
gchar * g_strrstr (const gchar *haystack,
     const gchar *needle);
gchar * g_strrstr_len (const gchar *haystack,
     gssize haystack_len,
     const gchar *needle);

gboolean g_str_has_suffix (const gchar *str,
     const gchar *suffix);
gboolean g_str_has_prefix (const gchar *str,
     const gchar *prefix);



gdouble g_strtod (const gchar *nptr,
     gchar **endptr);
gdouble g_ascii_strtod (const gchar *nptr,
     gchar **endptr);
guint64 g_ascii_strtoull (const gchar *nptr,
     gchar **endptr,
     guint base);
gint64 g_ascii_strtoll (const gchar *nptr,
     gchar **endptr,
     guint base);




gchar * g_ascii_dtostr (gchar *buffer,
     gint buf_len,
     gdouble d);
gchar * g_ascii_formatd (gchar *buffer,
     gint buf_len,
     const gchar *format,
     gdouble d);


gchar* g_strchug (gchar *string);

gchar* g_strchomp (gchar *string);



gint g_ascii_strcasecmp (const gchar *s1,
        const gchar *s2);
gint g_ascii_strncasecmp (const gchar *s1,
        const gchar *s2,
        gsize n);
gchar* g_ascii_strdown (const gchar *str,
        gssize len) __attribute__((__malloc__));
gchar* g_ascii_strup (const gchar *str,
        gssize len) __attribute__((__malloc__));
# 176 "/usr/include/glib-2.0/glib/gstrfuncs.h"
gint g_strcasecmp (const gchar *s1,
     const gchar *s2);
gint g_strncasecmp (const gchar *s1,
     const gchar *s2,
     guint n);
gchar* g_strdown (gchar *string);
gchar* g_strup (gchar *string);






gchar* g_strdup (const gchar *str) __attribute__((__malloc__));
gchar* g_strdup_printf (const gchar *format,
     ...) __attribute__((__format__ (__printf__, 1, 2))) __attribute__((__malloc__));
gchar* g_strdup_vprintf (const gchar *format,
     va_list args) __attribute__((__malloc__));
gchar* g_strndup (const gchar *str,
     gsize n) __attribute__((__malloc__));
gchar* g_strnfill (gsize length,
     gchar fill_char) __attribute__((__malloc__));
gchar* g_strconcat (const gchar *string1,
     ...) __attribute__((__malloc__)) __attribute__((__sentinel__));
gchar* g_strjoin (const gchar *separator,
     ...) __attribute__((__malloc__)) __attribute__((__sentinel__));





gchar* g_strcompress (const gchar *source) __attribute__((__malloc__));
# 217 "/usr/include/glib-2.0/glib/gstrfuncs.h"
gchar* g_strescape (const gchar *source,
     const gchar *exceptions) __attribute__((__malloc__));

gpointer g_memdup (gconstpointer mem,
     guint byte_size) __attribute__((__malloc__)) __attribute__((__alloc_size__(2)));
# 232 "/usr/include/glib-2.0/glib/gstrfuncs.h"
gchar** g_strsplit (const gchar *string,
     const gchar *delimiter,
     gint max_tokens) __attribute__((__malloc__));
gchar ** g_strsplit_set (const gchar *string,
     const gchar *delimiters,
     gint max_tokens) __attribute__((__malloc__));
gchar* g_strjoinv (const gchar *separator,
     gchar **str_array) __attribute__((__malloc__));
void g_strfreev (gchar **str_array);
gchar** g_strdupv (gchar **str_array) __attribute__((__malloc__));
guint g_strv_length (gchar **str_array);

gchar* g_stpcpy (gchar *dest,
                                        const char *src);

const gchar *g_strip_context (const gchar *msgid,
     const gchar *msgval) __attribute__((__format_arg__ (1)));

const gchar *g_dgettext (const gchar *domain,
     const gchar *msgid) __attribute__((__format_arg__ (2)));

const gchar *g_dngettext (const gchar *domain,
     const gchar *msgid,
     const gchar *msgid_plural,
     gulong n) __attribute__((__format_arg__ (3)));
const gchar *g_dpgettext (const gchar *domain,
                                        const gchar *msgctxtid,
                                        gsize msgidoffset) __attribute__((__format_arg__ (2)));
const gchar *g_dpgettext2 (const gchar *domain,
                                        const gchar *context,
                                        const gchar *msgid) __attribute__((__format_arg__ (3)));


# 77 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gstring.h" 1
# 78 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gtestutils.h" 1
# 28 "/usr/include/glib-2.0/glib/gtestutils.h"
# 1 "/usr/include/glib-2.0/glib.h" 1
# 29 "/usr/include/glib-2.0/glib/gtestutils.h" 2



typedef struct GTestCase GTestCase;
typedef struct GTestSuite GTestSuite;
# 72 "/usr/include/glib-2.0/glib/gtestutils.h"
int g_strcmp0 (const char *str1,
                                         const char *str2);


void g_test_minimized_result (double minimized_quantity,
                                         const char *format,
                                         ...) __attribute__((__format__ (__printf__, 2, 3)));
void g_test_maximized_result (double maximized_quantity,
                                         const char *format,
                                         ...) __attribute__((__format__ (__printf__, 2, 3)));


void g_test_init (int *argc,
                                         char ***argv,
                                         ...);
# 95 "/usr/include/glib-2.0/glib/gtestutils.h"
int g_test_run (void);

void g_test_add_func (const char *testpath,
                                         void (*test_func) (void));
void g_test_add_data_func (const char *testpath,
                                         gconstpointer test_data,
                                         void (*test_func) (gconstpointer));
# 116 "/usr/include/glib-2.0/glib/gtestutils.h"
void g_test_message (const char *format,
                                         ...) __attribute__((__format__ (__printf__, 1, 2)));
void g_test_bug_base (const char *uri_pattern);
void g_test_bug (const char *bug_uri_snippet);

void g_test_timer_start (void);
double g_test_timer_elapsed (void);
double g_test_timer_last (void);


void g_test_queue_free (gpointer gfree_pointer);
void g_test_queue_destroy (GDestroyNotify destroy_func,
                                         gpointer destroy_data);



typedef enum {
  G_TEST_TRAP_SILENCE_STDOUT = 1 << 7,
  G_TEST_TRAP_SILENCE_STDERR = 1 << 8,
  G_TEST_TRAP_INHERIT_STDIN = 1 << 9
} GTestTrapFlags;
gboolean g_test_trap_fork (guint64 usec_timeout,
                                         GTestTrapFlags test_trap_flags);
gboolean g_test_trap_has_passed (void);
gboolean g_test_trap_reached_timeout (void);
# 150 "/usr/include/glib-2.0/glib/gtestutils.h"
gint32 g_test_rand_int (void);
gint32 g_test_rand_int_range (gint32 begin,
                                         gint32 end);
double g_test_rand_double (void);
double g_test_rand_double_range (double range_start,
                                         double range_end);


GTestCase* g_test_create_case (const char *test_name,
                                         gsize data_size,
                                         gconstpointer test_data,
                                         void (*data_setup) (void),
                                         void (*data_test) (void),
                                         void (*data_teardown) (void));
GTestSuite* g_test_create_suite (const char *suite_name);
GTestSuite* g_test_get_root (void);
void g_test_suite_add (GTestSuite *suite,
                                         GTestCase *test_case);
void g_test_suite_add_suite (GTestSuite *suite,
                                         GTestSuite *nestedsuite);
int g_test_run_suite (GTestSuite *suite);


void g_test_trap_assertions (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         guint64 assertion_flags,
                                         const char *pattern);
void g_assertion_message (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *message) __attribute__((__noreturn__));
void g_assertion_message_expr (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *expr) __attribute__((__noreturn__));
void g_assertion_message_cmpstr (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *expr,
                                         const char *arg1,
                                         const char *cmp,
                                         const char *arg2) __attribute__((__noreturn__));
void g_assertion_message_cmpnum (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *expr,
                                         long double arg1,
                                         const char *cmp,
                                         long double arg2,
                                         char numtype) __attribute__((__noreturn__));
void g_assertion_message_error (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *expr,
                                         GError *error,
                                         GQuark error_domain,
                                         int error_code) __attribute__((__noreturn__));
void g_test_add_vtable (const char *testpath,
                                         gsize data_size,
                                         gconstpointer test_data,
                                         void (*data_setup) (void),
                                         void (*data_test) (void),
                                         void (*data_teardown) (void));
typedef struct {
  gboolean test_initialized;
  gboolean test_quick;
  gboolean test_perf;
  gboolean test_verbose;
  gboolean test_quiet;
} GTestConfig;
extern const GTestConfig * const g_test_config_vars;


typedef enum {
  G_TEST_LOG_NONE,
  G_TEST_LOG_ERROR,
  G_TEST_LOG_START_BINARY,
  G_TEST_LOG_LIST_CASE,
  G_TEST_LOG_SKIP_CASE,
  G_TEST_LOG_START_CASE,
  G_TEST_LOG_STOP_CASE,
  G_TEST_LOG_MIN_RESULT,
  G_TEST_LOG_MAX_RESULT,
  G_TEST_LOG_MESSAGE
} GTestLogType;

typedef struct {
  GTestLogType log_type;
  guint n_strings;
  gchar **strings;
  guint n_nums;
  long double *nums;
} GTestLogMsg;
typedef struct {

  GString *data;
  GSList *msgs;
} GTestLogBuffer;

const char* g_test_log_type_name (GTestLogType log_type);
GTestLogBuffer* g_test_log_buffer_new (void);
void g_test_log_buffer_free (GTestLogBuffer *tbuffer);
void g_test_log_buffer_push (GTestLogBuffer *tbuffer,
                                         guint n_bytes,
                                         const guint8 *bytes);
GTestLogMsg* g_test_log_buffer_pop (GTestLogBuffer *tbuffer);
void g_test_log_msg_free (GTestLogMsg *tmsg);


# 79 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gthread.h" 1
# 80 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gthreadpool.h" 1
# 34 "/usr/include/glib-2.0/glib/gthreadpool.h"
# 1 "/usr/include/glib-2.0/glib/gthread.h" 1
# 35 "/usr/include/glib-2.0/glib/gthreadpool.h" 2



typedef struct _GThreadPool GThreadPool;






struct _GThreadPool
{
  GFunc func;
  gpointer user_data;
  gboolean exclusive;
};






GThreadPool* g_thread_pool_new (GFunc func,
                                               gpointer user_data,
                                               gint max_threads,
                                               gboolean exclusive,
                                               GError **error);





void g_thread_pool_push (GThreadPool *pool,
                                               gpointer data,
                                               GError **error);




void g_thread_pool_set_max_threads (GThreadPool *pool,
                                               gint max_threads,
                                               GError **error);
gint g_thread_pool_get_max_threads (GThreadPool *pool);



guint g_thread_pool_get_num_threads (GThreadPool *pool);


guint g_thread_pool_unprocessed (GThreadPool *pool);





void g_thread_pool_free (GThreadPool *pool,
                                               gboolean immediate,
                                               gboolean wait_);



void g_thread_pool_set_max_unused_threads (gint max_threads);
gint g_thread_pool_get_max_unused_threads (void);
guint g_thread_pool_get_num_unused_threads (void);


void g_thread_pool_stop_unused_threads (void);


void g_thread_pool_set_sort_function (GThreadPool *pool,
                                        GCompareDataFunc func,
            gpointer user_data);


void g_thread_pool_set_max_idle_time (guint interval);
guint g_thread_pool_get_max_idle_time (void);


# 81 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gtimer.h" 1
# 34 "/usr/include/glib-2.0/glib/gtimer.h"
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 35 "/usr/include/glib-2.0/glib/gtimer.h" 2







typedef struct _GTimer GTimer;



GTimer* g_timer_new (void);
void g_timer_destroy (GTimer *timer);
void g_timer_start (GTimer *timer);
void g_timer_stop (GTimer *timer);
void g_timer_reset (GTimer *timer);
void g_timer_continue (GTimer *timer);
gdouble g_timer_elapsed (GTimer *timer,
      gulong *microseconds);

void g_usleep (gulong microseconds);

void g_time_val_add (GTimeVal *time_,
                                  glong microseconds);
gboolean g_time_val_from_iso8601 (const gchar *iso_date,
      GTimeVal *time_);
gchar* g_time_val_to_iso8601 (GTimeVal *time_) __attribute__((__malloc__));


# 82 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gtree.h" 1
# 34 "/usr/include/glib-2.0/glib/gtree.h"
# 1 "/usr/include/glib-2.0/glib/gnode.h" 1
# 35 "/usr/include/glib-2.0/glib/gtree.h" 2



typedef struct _GTree GTree;

typedef gboolean (*GTraverseFunc) (gpointer key,
                                   gpointer value,
                                   gpointer data);



GTree* g_tree_new (GCompareFunc key_compare_func);
GTree* g_tree_new_with_data (GCompareDataFunc key_compare_func,
                                 gpointer key_compare_data);
GTree* g_tree_new_full (GCompareDataFunc key_compare_func,
                                 gpointer key_compare_data,
                                 GDestroyNotify key_destroy_func,
                                 GDestroyNotify value_destroy_func);
void g_tree_destroy (GTree *tree);
void g_tree_insert (GTree *tree,
                                 gpointer key,
                                 gpointer value);
void g_tree_replace (GTree *tree,
                                 gpointer key,
                                 gpointer value);
gboolean g_tree_remove (GTree *tree,
                                 gconstpointer key);
gboolean g_tree_steal (GTree *tree,
                                 gconstpointer key);
gpointer g_tree_lookup (GTree *tree,
                                 gconstpointer key);
gboolean g_tree_lookup_extended (GTree *tree,
                                 gconstpointer lookup_key,
                                 gpointer *orig_key,
                                 gpointer *value);
void g_tree_foreach (GTree *tree,
                                 GTraverseFunc func,
                                 gpointer user_data);


void g_tree_traverse (GTree *tree,
                                 GTraverseFunc traverse_func,
                                 GTraverseType traverse_type,
                                 gpointer user_data);


gpointer g_tree_search (GTree *tree,
                                 GCompareFunc search_func,
                                 gconstpointer user_data);
gint g_tree_height (GTree *tree);
gint g_tree_nnodes (GTree *tree);


# 83 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 84 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gunicode.h" 1
# 85 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gurifuncs.h" 1
# 32 "/usr/include/glib-2.0/glib/gurifuncs.h"

# 69 "/usr/include/glib-2.0/glib/gurifuncs.h"
char * g_uri_unescape_string (const char *escaped_string,
          const char *illegal_characters);
char * g_uri_unescape_segment (const char *escaped_string,
          const char *escaped_string_end,
          const char *illegal_characters);
char * g_uri_parse_scheme (const char *uri);
char * g_uri_escape_string (const char *unescaped,
          const char *reserved_chars_allowed,
          gboolean allow_utf8);


# 86 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gutils.h" 1
# 87 "/usr/include/glib-2.0/glib.h" 2
# 27 "/usr/include/glib-2.0/gobject/gtype.h" 2


# 367 "/usr/include/glib-2.0/gobject/gtype.h"
typedef gsize GType;



typedef struct _GValue GValue;
typedef union _GTypeCValue GTypeCValue;
typedef struct _GTypePlugin GTypePlugin;
typedef struct _GTypeClass GTypeClass;
typedef struct _GTypeInterface GTypeInterface;
typedef struct _GTypeInstance GTypeInstance;
typedef struct _GTypeInfo GTypeInfo;
typedef struct _GTypeFundamentalInfo GTypeFundamentalInfo;
typedef struct _GInterfaceInfo GInterfaceInfo;
typedef struct _GTypeValueTable GTypeValueTable;
typedef struct _GTypeQuery GTypeQuery;
# 391 "/usr/include/glib-2.0/gobject/gtype.h"
struct _GTypeClass
{

  GType g_type;
};





struct _GTypeInstance
{

  GTypeClass *g_class;
};





struct _GTypeInterface
{

  GType g_type;
  GType g_instance_type;
};
# 427 "/usr/include/glib-2.0/gobject/gtype.h"
struct _GTypeQuery
{
  GType type;
  const gchar *type_name;
  guint class_size;
  guint instance_size;
};
# 623 "/usr/include/glib-2.0/gobject/gtype.h"
typedef enum
{
  G_TYPE_DEBUG_NONE = 0,
  G_TYPE_DEBUG_OBJECTS = 1 << 0,
  G_TYPE_DEBUG_SIGNALS = 1 << 1,
  G_TYPE_DEBUG_MASK = 0x03
} GTypeDebugFlags;



void g_type_init (void);
void g_type_init_with_debug_flags (GTypeDebugFlags debug_flags);
const gchar* g_type_name (GType type);
GQuark g_type_qname (GType type);
GType g_type_from_name (const gchar *name);
GType g_type_parent (GType type);
guint g_type_depth (GType type);
GType g_type_next_base (GType leaf_type,
            GType root_type);
gboolean g_type_is_a (GType type,
            GType is_a_type);
gpointer g_type_class_ref (GType type);
gpointer g_type_class_peek (GType type);
gpointer g_type_class_peek_static (GType type);
void g_type_class_unref (gpointer g_class);
gpointer g_type_class_peek_parent (gpointer g_class);
gpointer g_type_interface_peek (gpointer instance_class,
            GType iface_type);
gpointer g_type_interface_peek_parent (gpointer g_iface);

gpointer g_type_default_interface_ref (GType g_type);
gpointer g_type_default_interface_peek (GType g_type);
void g_type_default_interface_unref (gpointer g_iface);


GType* g_type_children (GType type,
            guint *n_children);
GType* g_type_interfaces (GType type,
            guint *n_interfaces);


void g_type_set_qdata (GType type,
            GQuark quark,
            gpointer data);
gpointer g_type_get_qdata (GType type,
            GQuark quark);
void g_type_query (GType type,
            GTypeQuery *query);
# 687 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (*GBaseInitFunc) (gpointer g_class);
# 698 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (*GBaseFinalizeFunc) (gpointer g_class);
# 803 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (*GClassInitFunc) (gpointer g_class,
           gpointer class_data);
# 818 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (*GClassFinalizeFunc) (gpointer g_class,
           gpointer class_data);
# 833 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (*GInstanceInitFunc) (GTypeInstance *instance,
           gpointer g_class);
# 844 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (*GInterfaceInitFunc) (gpointer g_iface,
           gpointer iface_data);
# 855 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (*GInterfaceFinalizeFunc) (gpointer g_iface,
           gpointer iface_data);
# 875 "/usr/include/glib-2.0/gobject/gtype.h"
typedef gboolean (*GTypeClassCacheFunc) (gpointer cache_data,
           GTypeClass *g_class);
# 887 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (*GTypeInterfaceCheckFunc) (gpointer check_data,
           gpointer g_iface);
# 899 "/usr/include/glib-2.0/gobject/gtype.h"
typedef enum
{
  G_TYPE_FLAG_CLASSED = (1 << 0),
  G_TYPE_FLAG_INSTANTIATABLE = (1 << 1),
  G_TYPE_FLAG_DERIVABLE = (1 << 2),
  G_TYPE_FLAG_DEEP_DERIVABLE = (1 << 3)
} GTypeFundamentalFlags;
# 916 "/usr/include/glib-2.0/gobject/gtype.h"
typedef enum
{
  G_TYPE_FLAG_ABSTRACT = (1 << 4),
  G_TYPE_FLAG_VALUE_ABSTRACT = (1 << 5)
} GTypeFlags;
# 951 "/usr/include/glib-2.0/gobject/gtype.h"
struct _GTypeInfo
{

  guint16 class_size;

  GBaseInitFunc base_init;
  GBaseFinalizeFunc base_finalize;


  GClassInitFunc class_init;
  GClassFinalizeFunc class_finalize;
  gconstpointer class_data;


  guint16 instance_size;
  guint16 n_preallocs;
  GInstanceInitFunc instance_init;


  const GTypeValueTable *value_table;
};







struct _GTypeFundamentalInfo
{
  GTypeFundamentalFlags type_flags;
};
# 992 "/usr/include/glib-2.0/gobject/gtype.h"
struct _GInterfaceInfo
{
  GInterfaceInitFunc interface_init;
  GInterfaceFinalizeFunc interface_finalize;
  gpointer interface_data;
};
# 1166 "/usr/include/glib-2.0/gobject/gtype.h"
struct _GTypeValueTable
{
  void (*value_init) (GValue *value);
  void (*value_free) (GValue *value);
  void (*value_copy) (const GValue *src_value,
      GValue *dest_value);

  gpointer (*value_peek_pointer) (const GValue *value);
  gchar *collect_format;
  gchar* (*collect_value) (GValue *value,
      guint n_collect_values,
      GTypeCValue *collect_values,
      guint collect_flags);
  gchar *lcopy_format;
  gchar* (*lcopy_value) (const GValue *value,
      guint n_collect_values,
      GTypeCValue *collect_values,
      guint collect_flags);
};
GType g_type_register_static (GType parent_type,
      const gchar *type_name,
      const GTypeInfo *info,
      GTypeFlags flags);
GType g_type_register_static_simple (GType parent_type,
      const gchar *type_name,
      guint class_size,
      GClassInitFunc class_init,
      guint instance_size,
      GInstanceInitFunc instance_init,
      GTypeFlags flags);

GType g_type_register_dynamic (GType parent_type,
      const gchar *type_name,
      GTypePlugin *plugin,
      GTypeFlags flags);
GType g_type_register_fundamental (GType type_id,
      const gchar *type_name,
      const GTypeInfo *info,
      const GTypeFundamentalInfo *finfo,
      GTypeFlags flags);
void g_type_add_interface_static (GType instance_type,
      GType interface_type,
      const GInterfaceInfo *info);
void g_type_add_interface_dynamic (GType instance_type,
      GType interface_type,
      GTypePlugin *plugin);
void g_type_interface_add_prerequisite (GType interface_type,
      GType prerequisite_type);
GType*g_type_interface_prerequisites (GType interface_type,
      guint *n_prerequisites);
void g_type_class_add_private (gpointer g_class,
                                         gsize private_size);
gpointer g_type_instance_get_private (GTypeInstance *instance,
                                         GType private_type);
# 1407 "/usr/include/glib-2.0/gobject/gtype.h"
GTypePlugin* g_type_get_plugin (GType type);
GTypePlugin* g_type_interface_get_plugin (GType instance_type,
       GType interface_type);
GType g_type_fundamental_next (void);
GType g_type_fundamental (GType type_id);
GTypeInstance* g_type_create_instance (GType type);
void g_type_free_instance (GTypeInstance *instance);

void g_type_add_class_cache_func (gpointer cache_data,
       GTypeClassCacheFunc cache_func);
void g_type_remove_class_cache_func (gpointer cache_data,
       GTypeClassCacheFunc cache_func);
void g_type_class_unref_uncached (gpointer g_class);

void g_type_add_interface_check (gpointer check_data,
       GTypeInterfaceCheckFunc check_func);
void g_type_remove_interface_check (gpointer check_data,
       GTypeInterfaceCheckFunc check_func);

GTypeValueTable* g_type_value_table_peek (GType type);



gboolean g_type_check_instance (GTypeInstance *instance) __attribute__((__pure__));
GTypeInstance* g_type_check_instance_cast (GTypeInstance *instance,
       GType iface_type);
gboolean g_type_check_instance_is_a (GTypeInstance *instance,
       GType iface_type) __attribute__((__pure__));
GTypeClass* g_type_check_class_cast (GTypeClass *g_class,
       GType is_a_type);
gboolean g_type_check_class_is_a (GTypeClass *g_class,
       GType is_a_type) __attribute__((__pure__));
gboolean g_type_check_is_value_type (GType type) __attribute__((__const__));
gboolean g_type_check_value (GValue *value) __attribute__((__pure__));
gboolean g_type_check_value_holds (GValue *value,
       GType type) __attribute__((__pure__));
gboolean g_type_test_flags (GType type,
       guint flags) __attribute__((__const__));



const gchar* g_type_name_from_instance (GTypeInstance *instance);
const gchar* g_type_name_from_class (GTypeClass *g_class);



__attribute__((visibility("hidden"))) void g_value_c_init (void);
__attribute__((visibility("hidden"))) void g_value_types_init (void);
__attribute__((visibility("hidden"))) void g_enum_types_init (void);
__attribute__((visibility("hidden"))) void g_param_type_init (void);
__attribute__((visibility("hidden"))) void g_boxed_type_init (void);
__attribute__((visibility("hidden"))) void g_object_type_init (void);
__attribute__((visibility("hidden"))) void g_param_spec_types_init (void);
__attribute__((visibility("hidden"))) void g_value_transforms_init (void);
__attribute__((visibility("hidden"))) void g_signal_init (void);
# 1514 "/usr/include/glib-2.0/gobject/gtype.h"
extern GTypeDebugFlags _g_type_debug_flags;


# 27 "/usr/include/glib-2.0/gobject/gboxed.h" 2


# 53 "/usr/include/glib-2.0/gobject/gboxed.h"
typedef gpointer (*GBoxedCopyFunc) (gpointer boxed);
# 62 "/usr/include/glib-2.0/gobject/gboxed.h"
typedef void (*GBoxedFreeFunc) (gpointer boxed);



gpointer g_boxed_copy (GType boxed_type,
       gconstpointer src_boxed);
void g_boxed_free (GType boxed_type,
       gpointer boxed);
void g_value_set_boxed (GValue *value,
       gconstpointer v_boxed);
void g_value_set_static_boxed (GValue *value,
       gconstpointer v_boxed);
gpointer g_value_get_boxed (const GValue *value);
gpointer g_value_dup_boxed (const GValue *value);



GType g_boxed_type_register_static (const gchar *name,
       GBoxedCopyFunc boxed_copy,
       GBoxedFreeFunc boxed_free);
# 167 "/usr/include/glib-2.0/gobject/gboxed.h"
void g_value_take_boxed (GValue *value,
     gconstpointer v_boxed);

void g_value_set_boxed_take_ownership (GValue *value,
       gconstpointer v_boxed);

GType g_closure_get_type (void) __attribute__((__const__));
GType g_value_get_type (void) __attribute__((__const__));
GType g_value_array_get_type (void) __attribute__((__const__));
GType g_date_get_type (void) __attribute__((__const__));
GType g_strv_get_type (void) __attribute__((__const__));
GType g_gstring_get_type (void) __attribute__((__const__));
GType g_hash_table_get_type (void) __attribute__((__const__));
GType g_regex_get_type (void) __attribute__((__const__));






typedef gchar** GStrv;


# 26 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/genums.h" 1
# 26 "/usr/include/glib-2.0/gobject/genums.h"
# 1 "/usr/include/glib-2.0/gobject/gtype.h" 1
# 27 "/usr/include/glib-2.0/gobject/genums.h" 2


# 140 "/usr/include/glib-2.0/gobject/genums.h"
typedef struct _GEnumClass GEnumClass;
typedef struct _GFlagsClass GFlagsClass;
typedef struct _GEnumValue GEnumValue;
typedef struct _GFlagsValue GFlagsValue;
# 157 "/usr/include/glib-2.0/gobject/genums.h"
struct _GEnumClass
{
  GTypeClass g_type_class;


  gint minimum;
  gint maximum;
  guint n_values;
  GEnumValue *values;
};
# 178 "/usr/include/glib-2.0/gobject/genums.h"
struct _GFlagsClass
{
  GTypeClass g_type_class;


  guint mask;
  guint n_values;
  GFlagsValue *values;
};
# 196 "/usr/include/glib-2.0/gobject/genums.h"
struct _GEnumValue
{
  gint value;
  const gchar *value_name;
  const gchar *value_nick;
};
# 211 "/usr/include/glib-2.0/gobject/genums.h"
struct _GFlagsValue
{
  guint value;
  const gchar *value_name;
  const gchar *value_nick;
};



GEnumValue* g_enum_get_value (GEnumClass *enum_class,
       gint value);
GEnumValue* g_enum_get_value_by_name (GEnumClass *enum_class,
       const gchar *name);
GEnumValue* g_enum_get_value_by_nick (GEnumClass *enum_class,
       const gchar *nick);
GFlagsValue* g_flags_get_first_value (GFlagsClass *flags_class,
       guint value);
GFlagsValue* g_flags_get_value_by_name (GFlagsClass *flags_class,
       const gchar *name);
GFlagsValue* g_flags_get_value_by_nick (GFlagsClass *flags_class,
       const gchar *nick);
void g_value_set_enum (GValue *value,
       gint v_enum);
gint g_value_get_enum (const GValue *value);
void g_value_set_flags (GValue *value,
       guint v_flags);
guint g_value_get_flags (const GValue *value);







GType g_enum_register_static (const gchar *name,
        const GEnumValue *const_static_values);
GType g_flags_register_static (const gchar *name,
        const GFlagsValue *const_static_values);



void g_enum_complete_type_info (GType g_enum_type,
        GTypeInfo *info,
        const GEnumValue *const_values);
void g_flags_complete_type_info (GType g_flags_type,
        GTypeInfo *info,
        const GFlagsValue *const_values);


# 27 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gobject.h" 1
# 26 "/usr/include/glib-2.0/gobject/gobject.h"
# 1 "/usr/include/glib-2.0/gobject/gtype.h" 1
# 27 "/usr/include/glib-2.0/gobject/gobject.h" 2
# 1 "/usr/include/glib-2.0/gobject/gvalue.h" 1
# 28 "/usr/include/glib-2.0/gobject/gvalue.h"
# 1 "/usr/include/glib-2.0/gobject/gtype.h" 1
# 29 "/usr/include/glib-2.0/gobject/gvalue.h" 2


# 94 "/usr/include/glib-2.0/gobject/gvalue.h"
typedef void (*GValueTransform) (const GValue *src_value,
     GValue *dest_value);
# 108 "/usr/include/glib-2.0/gobject/gvalue.h"
struct _GValue
{

  GType g_type;


  union {
    gint v_int;
    guint v_uint;
    glong v_long;
    gulong v_ulong;
    gint64 v_int64;
    guint64 v_uint64;
    gfloat v_float;
    gdouble v_double;
    gpointer v_pointer;
  } data[2];
};



GValue* g_value_init (GValue *value,
      GType g_type);
void g_value_copy (const GValue *src_value,
      GValue *dest_value);
GValue* g_value_reset (GValue *value);
void g_value_unset (GValue *value);
void g_value_set_instance (GValue *value,
      gpointer instance);



gboolean g_value_fits_pointer (const GValue *value);
gpointer g_value_peek_pointer (const GValue *value);



gboolean g_value_type_compatible (GType src_type,
      GType dest_type);
gboolean g_value_type_transformable (GType src_type,
      GType dest_type);
gboolean g_value_transform (const GValue *src_value,
      GValue *dest_value);
void g_value_register_transform_func (GType src_type,
      GType dest_type,
      GValueTransform transform_func);




# 28 "/usr/include/glib-2.0/gobject/gobject.h" 2
# 1 "/usr/include/glib-2.0/gobject/gparam.h" 1
# 28 "/usr/include/glib-2.0/gobject/gparam.h"
# 1 "/usr/include/glib-2.0/gobject/gvalue.h" 1
# 29 "/usr/include/glib-2.0/gobject/gparam.h" 2


# 139 "/usr/include/glib-2.0/gobject/gparam.h"
typedef enum
{
  G_PARAM_READABLE = 1 << 0,
  G_PARAM_WRITABLE = 1 << 1,
  G_PARAM_CONSTRUCT = 1 << 2,
  G_PARAM_CONSTRUCT_ONLY = 1 << 3,
  G_PARAM_LAX_VALIDATION = 1 << 4,
  G_PARAM_STATIC_NAME = 1 << 5,

  G_PARAM_PRIVATE = G_PARAM_STATIC_NAME,

  G_PARAM_STATIC_NICK = 1 << 6,
  G_PARAM_STATIC_BLURB = 1 << 7
} GParamFlags;
# 184 "/usr/include/glib-2.0/gobject/gparam.h"
typedef struct _GParamSpec GParamSpec;
typedef struct _GParamSpecClass GParamSpecClass;
typedef struct _GParameter GParameter;
typedef struct _GParamSpecPool GParamSpecPool;
# 199 "/usr/include/glib-2.0/gobject/gparam.h"
struct _GParamSpec
{
  GTypeInstance g_type_instance;

  gchar *name;
  GParamFlags flags;
  GType value_type;
  GType owner_type;


  gchar *_nick;
  gchar *_blurb;
  GData *qdata;
  guint ref_count;
  guint param_id;
};
# 234 "/usr/include/glib-2.0/gobject/gparam.h"
struct _GParamSpecClass
{
  GTypeClass g_type_class;

  GType value_type;

  void (*finalize) (GParamSpec *pspec);


  void (*value_set_default) (GParamSpec *pspec,
      GValue *value);
  gboolean (*value_validate) (GParamSpec *pspec,
      GValue *value);
  gint (*values_cmp) (GParamSpec *pspec,
      const GValue *value1,
      const GValue *value2);

  gpointer dummy[4];
};
# 261 "/usr/include/glib-2.0/gobject/gparam.h"
struct _GParameter
{
  const gchar *name;
  GValue value;
};



GParamSpec* g_param_spec_ref (GParamSpec *pspec);
void g_param_spec_unref (GParamSpec *pspec);
void g_param_spec_sink (GParamSpec *pspec);
GParamSpec* g_param_spec_ref_sink (GParamSpec *pspec);
gpointer g_param_spec_get_qdata (GParamSpec *pspec,
       GQuark quark);
void g_param_spec_set_qdata (GParamSpec *pspec,
       GQuark quark,
       gpointer data);
void g_param_spec_set_qdata_full (GParamSpec *pspec,
       GQuark quark,
       gpointer data,
       GDestroyNotify destroy);
gpointer g_param_spec_steal_qdata (GParamSpec *pspec,
       GQuark quark);
GParamSpec* g_param_spec_get_redirect_target (GParamSpec *pspec);

void g_param_value_set_default (GParamSpec *pspec,
       GValue *value);
gboolean g_param_value_defaults (GParamSpec *pspec,
       GValue *value);
gboolean g_param_value_validate (GParamSpec *pspec,
       GValue *value);
gboolean g_param_value_convert (GParamSpec *pspec,
       const GValue *src_value,
       GValue *dest_value,
       gboolean strict_validation);
gint g_param_values_cmp (GParamSpec *pspec,
       const GValue *value1,
       const GValue *value2);
const gchar* g_param_spec_get_name (GParamSpec *pspec);
const gchar* g_param_spec_get_nick (GParamSpec *pspec);
const gchar* g_param_spec_get_blurb (GParamSpec *pspec);
void g_value_set_param (GValue *value,
       GParamSpec *param);
GParamSpec* g_value_get_param (const GValue *value);
GParamSpec* g_value_dup_param (const GValue *value);


void g_value_take_param (GValue *value,
              GParamSpec *param);

void g_value_set_param_take_ownership (GValue *value,
              GParamSpec *param);



typedef struct _GParamSpecTypeInfo GParamSpecTypeInfo;
# 341 "/usr/include/glib-2.0/gobject/gparam.h"
struct _GParamSpecTypeInfo
{

  guint16 instance_size;
  guint16 n_preallocs;
  void (*instance_init) (GParamSpec *pspec);


  GType value_type;
  void (*finalize) (GParamSpec *pspec);
  void (*value_set_default) (GParamSpec *pspec,
      GValue *value);
  gboolean (*value_validate) (GParamSpec *pspec,
      GValue *value);
  gint (*values_cmp) (GParamSpec *pspec,
      const GValue *value1,
      const GValue *value2);
};
GType g_param_type_register_static (const gchar *name,
      const GParamSpecTypeInfo *pspec_info);


GType _g_param_type_register_static_constant (const gchar *name,
            const GParamSpecTypeInfo *pspec_info,
            GType opt_type);



gpointer g_param_spec_internal (GType param_type,
       const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GParamFlags flags);
GParamSpecPool* g_param_spec_pool_new (gboolean type_prefixing);
void g_param_spec_pool_insert (GParamSpecPool *pool,
       GParamSpec *pspec,
       GType owner_type);
void g_param_spec_pool_remove (GParamSpecPool *pool,
       GParamSpec *pspec);
GParamSpec* g_param_spec_pool_lookup (GParamSpecPool *pool,
       const gchar *param_name,
       GType owner_type,
       gboolean walk_ancestors);
GList* g_param_spec_pool_list_owned (GParamSpecPool *pool,
       GType owner_type);
GParamSpec** g_param_spec_pool_list (GParamSpecPool *pool,
       GType owner_type,
       guint *n_pspecs_p);
# 408 "/usr/include/glib-2.0/gobject/gparam.h"

# 29 "/usr/include/glib-2.0/gobject/gobject.h" 2
# 1 "/usr/include/glib-2.0/gobject/gclosure.h" 1
# 27 "/usr/include/glib-2.0/gobject/gclosure.h"
# 1 "/usr/include/glib-2.0/gobject/gtype.h" 1
# 28 "/usr/include/glib-2.0/gobject/gclosure.h" 2


# 76 "/usr/include/glib-2.0/gobject/gclosure.h"
typedef struct _GClosure GClosure;
typedef struct _GClosureNotifyData GClosureNotifyData;
# 88 "/usr/include/glib-2.0/gobject/gclosure.h"
typedef void (*GCallback) (void);
# 97 "/usr/include/glib-2.0/gobject/gclosure.h"
typedef void (*GClosureNotify) (gpointer data,
      GClosure *closure);
# 114 "/usr/include/glib-2.0/gobject/gclosure.h"
typedef void (*GClosureMarshal) (GClosure *closure,
      GValue *return_value,
      guint n_param_values,
      const GValue *param_values,
      gpointer invocation_hint,
      gpointer marshal_data);







typedef struct _GCClosure GCClosure;



struct _GClosureNotifyData
{
  gpointer data;
  GClosureNotify notify;
};
# 145 "/usr/include/glib-2.0/gobject/gclosure.h"
struct _GClosure
{

  volatile guint ref_count : 15;
  volatile guint meta_marshal : 1;
  volatile guint n_guards : 1;
  volatile guint n_fnotifiers : 2;
  volatile guint n_inotifiers : 8;
  volatile guint in_inotify : 1;
  volatile guint floating : 1;

  volatile guint derivative_flag : 1;

  volatile guint in_marshal : 1;
  volatile guint is_invalid : 1;

                  void (*marshal) (GClosure *closure,
         GValue *return_value,
         guint n_param_values,
         const GValue *param_values,
         gpointer invocation_hint,
         gpointer marshal_data);
                    gpointer data;

                  GClosureNotifyData *notifiers;
# 181 "/usr/include/glib-2.0/gobject/gclosure.h"
};


struct _GCClosure
{
  GClosure closure;
  gpointer callback;
};



GClosure* g_cclosure_new (GCallback callback_func,
       gpointer user_data,
       GClosureNotify destroy_data);
GClosure* g_cclosure_new_swap (GCallback callback_func,
       gpointer user_data,
       GClosureNotify destroy_data);
GClosure* g_signal_type_cclosure_new (GType itype,
       guint struct_offset);



GClosure* g_closure_ref (GClosure *closure);
void g_closure_sink (GClosure *closure);
void g_closure_unref (GClosure *closure);

GClosure* g_closure_new_simple (guint sizeof_closure,
       gpointer data);
void g_closure_add_finalize_notifier (GClosure *closure,
       gpointer notify_data,
       GClosureNotify notify_func);
void g_closure_remove_finalize_notifier (GClosure *closure,
       gpointer notify_data,
       GClosureNotify notify_func);
void g_closure_add_invalidate_notifier (GClosure *closure,
       gpointer notify_data,
       GClosureNotify notify_func);
void g_closure_remove_invalidate_notifier (GClosure *closure,
       gpointer notify_data,
       GClosureNotify notify_func);
void g_closure_add_marshal_guards (GClosure *closure,
       gpointer pre_marshal_data,
       GClosureNotify pre_marshal_notify,
       gpointer post_marshal_data,
       GClosureNotify post_marshal_notify);
void g_closure_set_marshal (GClosure *closure,
       GClosureMarshal marshal);
void g_closure_set_meta_marshal (GClosure *closure,
       gpointer marshal_data,
       GClosureMarshal meta_marshal);
void g_closure_invalidate (GClosure *closure);
void g_closure_invoke (GClosure *closure,
       GValue *return_value,
       guint n_param_values,
       const GValue *param_values,
       gpointer invocation_hint);
# 249 "/usr/include/glib-2.0/gobject/gclosure.h"

# 30 "/usr/include/glib-2.0/gobject/gobject.h" 2
# 1 "/usr/include/glib-2.0/gobject/gsignal.h" 1
# 26 "/usr/include/glib-2.0/gobject/gsignal.h"
# 1 "/usr/include/glib-2.0/gobject/gclosure.h" 1
# 27 "/usr/include/glib-2.0/gobject/gsignal.h" 2
# 1 "/usr/include/glib-2.0/gobject/gvalue.h" 1
# 28 "/usr/include/glib-2.0/gobject/gsignal.h" 2
# 1 "/usr/include/glib-2.0/gobject/gparam.h" 1
# 29 "/usr/include/glib-2.0/gobject/gsignal.h" 2
# 1 "/usr/include/glib-2.0/gobject/gmarshal.h" 1






extern void g_cclosure_marshal_VOID__VOID (GClosure *closure,
                                           GValue *return_value,
                                           guint n_param_values,
                                           const GValue *param_values,
                                           gpointer invocation_hint,
                                           gpointer marshal_data);


extern void g_cclosure_marshal_VOID__BOOLEAN (GClosure *closure,
                                              GValue *return_value,
                                              guint n_param_values,
                                              const GValue *param_values,
                                              gpointer invocation_hint,
                                              gpointer marshal_data);


extern void g_cclosure_marshal_VOID__CHAR (GClosure *closure,
                                           GValue *return_value,
                                           guint n_param_values,
                                           const GValue *param_values,
                                           gpointer invocation_hint,
                                           gpointer marshal_data);


extern void g_cclosure_marshal_VOID__UCHAR (GClosure *closure,
                                            GValue *return_value,
                                            guint n_param_values,
                                            const GValue *param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data);


extern void g_cclosure_marshal_VOID__INT (GClosure *closure,
                                          GValue *return_value,
                                          guint n_param_values,
                                          const GValue *param_values,
                                          gpointer invocation_hint,
                                          gpointer marshal_data);


extern void g_cclosure_marshal_VOID__UINT (GClosure *closure,
                                           GValue *return_value,
                                           guint n_param_values,
                                           const GValue *param_values,
                                           gpointer invocation_hint,
                                           gpointer marshal_data);


extern void g_cclosure_marshal_VOID__LONG (GClosure *closure,
                                           GValue *return_value,
                                           guint n_param_values,
                                           const GValue *param_values,
                                           gpointer invocation_hint,
                                           gpointer marshal_data);


extern void g_cclosure_marshal_VOID__ULONG (GClosure *closure,
                                            GValue *return_value,
                                            guint n_param_values,
                                            const GValue *param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data);


extern void g_cclosure_marshal_VOID__ENUM (GClosure *closure,
                                           GValue *return_value,
                                           guint n_param_values,
                                           const GValue *param_values,
                                           gpointer invocation_hint,
                                           gpointer marshal_data);


extern void g_cclosure_marshal_VOID__FLAGS (GClosure *closure,
                                            GValue *return_value,
                                            guint n_param_values,
                                            const GValue *param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data);


extern void g_cclosure_marshal_VOID__FLOAT (GClosure *closure,
                                            GValue *return_value,
                                            guint n_param_values,
                                            const GValue *param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data);


extern void g_cclosure_marshal_VOID__DOUBLE (GClosure *closure,
                                             GValue *return_value,
                                             guint n_param_values,
                                             const GValue *param_values,
                                             gpointer invocation_hint,
                                             gpointer marshal_data);


extern void g_cclosure_marshal_VOID__STRING (GClosure *closure,
                                             GValue *return_value,
                                             guint n_param_values,
                                             const GValue *param_values,
                                             gpointer invocation_hint,
                                             gpointer marshal_data);


extern void g_cclosure_marshal_VOID__PARAM (GClosure *closure,
                                            GValue *return_value,
                                            guint n_param_values,
                                            const GValue *param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data);


extern void g_cclosure_marshal_VOID__BOXED (GClosure *closure,
                                            GValue *return_value,
                                            guint n_param_values,
                                            const GValue *param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data);


extern void g_cclosure_marshal_VOID__POINTER (GClosure *closure,
                                              GValue *return_value,
                                              guint n_param_values,
                                              const GValue *param_values,
                                              gpointer invocation_hint,
                                              gpointer marshal_data);


extern void g_cclosure_marshal_VOID__OBJECT (GClosure *closure,
                                             GValue *return_value,
                                             guint n_param_values,
                                             const GValue *param_values,
                                             gpointer invocation_hint,
                                             gpointer marshal_data);


extern void g_cclosure_marshal_VOID__UINT_POINTER (GClosure *closure,
                                                   GValue *return_value,
                                                   guint n_param_values,
                                                   const GValue *param_values,
                                                   gpointer invocation_hint,
                                                   gpointer marshal_data);


extern void g_cclosure_marshal_BOOLEAN__FLAGS (GClosure *closure,
                                               GValue *return_value,
                                               guint n_param_values,
                                               const GValue *param_values,
                                               gpointer invocation_hint,
                                               gpointer marshal_data);



extern void g_cclosure_marshal_STRING__OBJECT_POINTER (GClosure *closure,
                                                       GValue *return_value,
                                                       guint n_param_values,
                                                       const GValue *param_values,
                                                       gpointer invocation_hint,
                                                       gpointer marshal_data);


# 30 "/usr/include/glib-2.0/gobject/gsignal.h" 2




typedef struct _GSignalQuery GSignalQuery;
typedef struct _GSignalInvocationHint GSignalInvocationHint;
# 45 "/usr/include/glib-2.0/gobject/gsignal.h"
typedef GClosureMarshal GSignalCMarshaller;
# 64 "/usr/include/glib-2.0/gobject/gsignal.h"
typedef gboolean (*GSignalEmissionHook) (GSignalInvocationHint *ihint,
      guint n_param_values,
      const GValue *param_values,
      gpointer data);
# 87 "/usr/include/glib-2.0/gobject/gsignal.h"
typedef gboolean (*GSignalAccumulator) (GSignalInvocationHint *ihint,
      GValue *return_accu,
      const GValue *handler_return,
      gpointer data);
# 116 "/usr/include/glib-2.0/gobject/gsignal.h"
typedef enum
{
  G_SIGNAL_RUN_FIRST = 1 << 0,
  G_SIGNAL_RUN_LAST = 1 << 1,
  G_SIGNAL_RUN_CLEANUP = 1 << 2,
  G_SIGNAL_NO_RECURSE = 1 << 3,
  G_SIGNAL_DETAILED = 1 << 4,
  G_SIGNAL_ACTION = 1 << 5,
  G_SIGNAL_NO_HOOKS = 1 << 6
} GSignalFlags;
# 142 "/usr/include/glib-2.0/gobject/gsignal.h"
typedef enum
{
  G_CONNECT_AFTER = 1 << 0,
  G_CONNECT_SWAPPED = 1 << 1
} GConnectFlags;
# 160 "/usr/include/glib-2.0/gobject/gsignal.h"
typedef enum
{
  G_SIGNAL_MATCH_ID = 1 << 0,
  G_SIGNAL_MATCH_DETAIL = 1 << 1,
  G_SIGNAL_MATCH_CLOSURE = 1 << 2,
  G_SIGNAL_MATCH_FUNC = 1 << 3,
  G_SIGNAL_MATCH_DATA = 1 << 4,
  G_SIGNAL_MATCH_UNBLOCKED = 1 << 5
} GSignalMatchType;
# 211 "/usr/include/glib-2.0/gobject/gsignal.h"
struct _GSignalInvocationHint
{
  guint signal_id;
  GQuark detail;
  GSignalFlags run_type;
};
# 237 "/usr/include/glib-2.0/gobject/gsignal.h"
struct _GSignalQuery
{
  guint signal_id;
  const gchar *signal_name;
  GType itype;
  GSignalFlags signal_flags;
  GType return_type;
  guint n_params;
  const GType *param_types;
};



guint g_signal_newv (const gchar *signal_name,
          GType itype,
          GSignalFlags signal_flags,
          GClosure *class_closure,
          GSignalAccumulator accumulator,
          gpointer accu_data,
          GSignalCMarshaller c_marshaller,
          GType return_type,
          guint n_params,
          GType *param_types);
guint g_signal_new_valist (const gchar *signal_name,
          GType itype,
          GSignalFlags signal_flags,
          GClosure *class_closure,
          GSignalAccumulator accumulator,
          gpointer accu_data,
          GSignalCMarshaller c_marshaller,
          GType return_type,
          guint n_params,
          va_list args);
guint g_signal_new (const gchar *signal_name,
          GType itype,
          GSignalFlags signal_flags,
          guint class_offset,
          GSignalAccumulator accumulator,
          gpointer accu_data,
          GSignalCMarshaller c_marshaller,
          GType return_type,
          guint n_params,
          ...);
guint g_signal_new_class_handler (const gchar *signal_name,
                                             GType itype,
                                             GSignalFlags signal_flags,
                                             GCallback class_handler,
                                             GSignalAccumulator accumulator,
                                             gpointer accu_data,
                                             GSignalCMarshaller c_marshaller,
                                             GType return_type,
                                             guint n_params,
                                             ...);

void g_signal_emitv (const GValue *instance_and_params,
          guint signal_id,
          GQuark detail,
          GValue *return_value);
void g_signal_emit_valist (gpointer instance,
          guint signal_id,
          GQuark detail,
          va_list var_args);
void g_signal_emit (gpointer instance,
          guint signal_id,
          GQuark detail,
          ...);
void g_signal_emit_by_name (gpointer instance,
          const gchar *detailed_signal,
          ...);
guint g_signal_lookup (const gchar *name,
          GType itype);
const gchar* g_signal_name (guint signal_id);
void g_signal_query (guint signal_id,
          GSignalQuery *query);
guint* g_signal_list_ids (GType itype,
          guint *n_ids);
gboolean g_signal_parse_name (const gchar *detailed_signal,
          GType itype,
          guint *signal_id_p,
          GQuark *detail_p,
          gboolean force_detail_quark);
GSignalInvocationHint* g_signal_get_invocation_hint (gpointer instance);



void g_signal_stop_emission (gpointer instance,
          guint signal_id,
          GQuark detail);
void g_signal_stop_emission_by_name (gpointer instance,
          const gchar *detailed_signal);
gulong g_signal_add_emission_hook (guint signal_id,
          GQuark detail,
          GSignalEmissionHook hook_func,
          gpointer hook_data,
          GDestroyNotify data_destroy);
void g_signal_remove_emission_hook (guint signal_id,
          gulong hook_id);



gboolean g_signal_has_handler_pending (gpointer instance,
            guint signal_id,
            GQuark detail,
            gboolean may_be_blocked);
gulong g_signal_connect_closure_by_id (gpointer instance,
            guint signal_id,
            GQuark detail,
            GClosure *closure,
            gboolean after);
gulong g_signal_connect_closure (gpointer instance,
            const gchar *detailed_signal,
            GClosure *closure,
            gboolean after);
gulong g_signal_connect_data (gpointer instance,
            const gchar *detailed_signal,
            GCallback c_handler,
            gpointer data,
            GClosureNotify destroy_data,
            GConnectFlags connect_flags);
void g_signal_handler_block (gpointer instance,
            gulong handler_id);
void g_signal_handler_unblock (gpointer instance,
            gulong handler_id);
void g_signal_handler_disconnect (gpointer instance,
            gulong handler_id);
gboolean g_signal_handler_is_connected (gpointer instance,
            gulong handler_id);
gulong g_signal_handler_find (gpointer instance,
            GSignalMatchType mask,
            guint signal_id,
            GQuark detail,
            GClosure *closure,
            gpointer func,
            gpointer data);
guint g_signal_handlers_block_matched (gpointer instance,
            GSignalMatchType mask,
            guint signal_id,
            GQuark detail,
            GClosure *closure,
            gpointer func,
            gpointer data);
guint g_signal_handlers_unblock_matched (gpointer instance,
            GSignalMatchType mask,
            guint signal_id,
            GQuark detail,
            GClosure *closure,
            gpointer func,
            gpointer data);
guint g_signal_handlers_disconnect_matched (gpointer instance,
            GSignalMatchType mask,
            guint signal_id,
            GQuark detail,
            GClosure *closure,
            gpointer func,
            gpointer data);



void g_signal_override_class_closure (guint signal_id,
                                               GType instance_type,
                                               GClosure *class_closure);
void g_signal_override_class_handler (const gchar *signal_name,
                                               GType instance_type,
                                               GCallback class_handler);
void g_signal_chain_from_overridden (const GValue *instance_and_params,
                                               GValue *return_value);
void g_signal_chain_from_overridden_handler (gpointer instance,
                                               ...);
# 498 "/usr/include/glib-2.0/gobject/gsignal.h"
gboolean g_signal_accumulator_true_handled (GSignalInvocationHint *ihint,
         GValue *return_accu,
         const GValue *handler_return,
         gpointer dummy);


void g_signal_handlers_destroy (gpointer instance);
void _g_signals_destroy (GType itype);


# 31 "/usr/include/glib-2.0/gobject/gobject.h" 2


# 184 "/usr/include/glib-2.0/gobject/gobject.h"
typedef struct _GObject GObject;
typedef struct _GObjectClass GObjectClass;
typedef struct _GObject GInitiallyUnowned;
typedef struct _GObjectClass GInitiallyUnownedClass;
typedef struct _GObjectConstructParam GObjectConstructParam;
# 199 "/usr/include/glib-2.0/gobject/gobject.h"
typedef void (*GObjectGetPropertyFunc) (GObject *object,
                                         guint property_id,
                                         GValue *value,
                                         GParamSpec *pspec);
# 213 "/usr/include/glib-2.0/gobject/gobject.h"
typedef void (*GObjectSetPropertyFunc) (GObject *object,
                                         guint property_id,
                                         const GValue *value,
                                         GParamSpec *pspec);






typedef void (*GObjectFinalizeFunc) (GObject *object);
# 234 "/usr/include/glib-2.0/gobject/gobject.h"
typedef void (*GWeakNotify) (gpointer data,
      GObject *where_the_object_was);






struct _GObject
{
  GTypeInstance g_type_instance;


  volatile guint ref_count;
  GData *qdata;
};
# 312 "/usr/include/glib-2.0/gobject/gobject.h"
struct _GObjectClass
{
  GTypeClass g_type_class;


  GSList *construct_properties;



  GObject* (*constructor) (GType type,
                                 guint n_construct_properties,
                                 GObjectConstructParam *construct_properties);

  void (*set_property) (GObject *object,
                                         guint property_id,
                                         const GValue *value,
                                         GParamSpec *pspec);
  void (*get_property) (GObject *object,
                                         guint property_id,
                                         GValue *value,
                                         GParamSpec *pspec);
  void (*dispose) (GObject *object);
  void (*finalize) (GObject *object);

  void (*dispatch_properties_changed) (GObject *object,
          guint n_pspecs,
          GParamSpec **pspecs);

  void (*notify) (GObject *object,
      GParamSpec *pspec);


  void (*constructed) (GObject *object);



  gpointer pdummy[7];
};
# 359 "/usr/include/glib-2.0/gobject/gobject.h"
struct _GObjectConstructParam
{
  GParamSpec *pspec;
  GValue *value;
};
# 380 "/usr/include/glib-2.0/gobject/gobject.h"
GType g_initially_unowned_get_type (void);
void g_object_class_install_property (GObjectClass *oclass,
            guint property_id,
            GParamSpec *pspec);
GParamSpec* g_object_class_find_property (GObjectClass *oclass,
            const gchar *property_name);
GParamSpec**g_object_class_list_properties (GObjectClass *oclass,
            guint *n_properties);
void g_object_class_override_property (GObjectClass *oclass,
            guint property_id,
            const gchar *name);

void g_object_interface_install_property (gpointer g_iface,
       GParamSpec *pspec);
GParamSpec* g_object_interface_find_property (gpointer g_iface,
       const gchar *property_name);
GParamSpec**g_object_interface_list_properties (gpointer g_iface,
       guint *n_properties_p);

GType g_object_get_type (void) __attribute__((__const__));
gpointer g_object_new (GType object_type,
            const gchar *first_property_name,
            ...);
gpointer g_object_newv (GType object_type,
            guint n_parameters,
            GParameter *parameters);
GObject* g_object_new_valist (GType object_type,
            const gchar *first_property_name,
            va_list var_args);
void g_object_set (gpointer object,
            const gchar *first_property_name,
            ...) __attribute__((__sentinel__));
void g_object_get (gpointer object,
            const gchar *first_property_name,
            ...) __attribute__((__sentinel__));
gpointer g_object_connect (gpointer object,
            const gchar *signal_spec,
            ...) __attribute__((__sentinel__));
void g_object_disconnect (gpointer object,
            const gchar *signal_spec,
            ...) __attribute__((__sentinel__));
void g_object_set_valist (GObject *object,
            const gchar *first_property_name,
            va_list var_args);
void g_object_get_valist (GObject *object,
            const gchar *first_property_name,
            va_list var_args);
void g_object_set_property (GObject *object,
            const gchar *property_name,
            const GValue *value);
void g_object_get_property (GObject *object,
            const gchar *property_name,
            GValue *value);
void g_object_freeze_notify (GObject *object);
void g_object_notify (GObject *object,
            const gchar *property_name);
void g_object_thaw_notify (GObject *object);
gboolean g_object_is_floating (gpointer object);
gpointer g_object_ref_sink (gpointer object);
gpointer g_object_ref (gpointer object);
void g_object_unref (gpointer object);
void g_object_weak_ref (GObject *object,
            GWeakNotify notify,
            gpointer data);
void g_object_weak_unref (GObject *object,
            GWeakNotify notify,
            gpointer data);
void g_object_add_weak_pointer (GObject *object,
                                               gpointer *weak_pointer_location);
void g_object_remove_weak_pointer (GObject *object,
                                               gpointer *weak_pointer_location);
# 464 "/usr/include/glib-2.0/gobject/gobject.h"
typedef void (*GToggleNotify) (gpointer data,
          GObject *object,
          gboolean is_last_ref);

void g_object_add_toggle_ref (GObject *object,
     GToggleNotify notify,
     gpointer data);
void g_object_remove_toggle_ref (GObject *object,
     GToggleNotify notify,
     gpointer data);

gpointer g_object_get_qdata (GObject *object,
            GQuark quark);
void g_object_set_qdata (GObject *object,
            GQuark quark,
            gpointer data);
void g_object_set_qdata_full (GObject *object,
            GQuark quark,
            gpointer data,
            GDestroyNotify destroy);
gpointer g_object_steal_qdata (GObject *object,
            GQuark quark);
gpointer g_object_get_data (GObject *object,
            const gchar *key);
void g_object_set_data (GObject *object,
            const gchar *key,
            gpointer data);
void g_object_set_data_full (GObject *object,
            const gchar *key,
            gpointer data,
            GDestroyNotify destroy);
gpointer g_object_steal_data (GObject *object,
            const gchar *key);
void g_object_watch_closure (GObject *object,
            GClosure *closure);
GClosure* g_cclosure_new_object (GCallback callback_func,
            GObject *object);
GClosure* g_cclosure_new_object_swap (GCallback callback_func,
            GObject *object);
GClosure* g_closure_new_object (guint sizeof_closure,
            GObject *object);
void g_value_set_object (GValue *value,
            gpointer v_object);
gpointer g_value_get_object (const GValue *value);
gpointer g_value_dup_object (const GValue *value);
gulong g_signal_connect_object (gpointer instance,
            const gchar *detailed_signal,
            GCallback c_handler,
            gpointer gobject,
            GConnectFlags connect_flags);


void g_object_force_floating (GObject *object);
void g_object_run_dispose (GObject *object);


void g_value_take_object (GValue *value,
            gpointer v_object);

void g_value_set_object_take_ownership (GValue *value,
            gpointer v_object);



gsize g_object_compat_control (gsize what,
            gpointer data);
# 558 "/usr/include/glib-2.0/gobject/gobject.h"

# 28 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gparam.h" 1
# 29 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gparamspecs.h" 1
# 28 "/usr/include/glib-2.0/gobject/gparamspecs.h"
# 1 "/usr/include/glib-2.0/gobject/gvalue.h" 1
# 29 "/usr/include/glib-2.0/gobject/gparamspecs.h" 2
# 1 "/usr/include/glib-2.0/gobject/genums.h" 1
# 30 "/usr/include/glib-2.0/gobject/gparamspecs.h" 2
# 1 "/usr/include/glib-2.0/gobject/gboxed.h" 1
# 31 "/usr/include/glib-2.0/gobject/gparamspecs.h" 2
# 1 "/usr/include/glib-2.0/gobject/gobject.h" 1
# 32 "/usr/include/glib-2.0/gobject/gparamspecs.h" 2


# 554 "/usr/include/glib-2.0/gobject/gparamspecs.h"
typedef struct _GParamSpecChar GParamSpecChar;
typedef struct _GParamSpecUChar GParamSpecUChar;
typedef struct _GParamSpecBoolean GParamSpecBoolean;
typedef struct _GParamSpecInt GParamSpecInt;
typedef struct _GParamSpecUInt GParamSpecUInt;
typedef struct _GParamSpecLong GParamSpecLong;
typedef struct _GParamSpecULong GParamSpecULong;
typedef struct _GParamSpecInt64 GParamSpecInt64;
typedef struct _GParamSpecUInt64 GParamSpecUInt64;
typedef struct _GParamSpecUnichar GParamSpecUnichar;
typedef struct _GParamSpecEnum GParamSpecEnum;
typedef struct _GParamSpecFlags GParamSpecFlags;
typedef struct _GParamSpecFloat GParamSpecFloat;
typedef struct _GParamSpecDouble GParamSpecDouble;
typedef struct _GParamSpecString GParamSpecString;
typedef struct _GParamSpecParam GParamSpecParam;
typedef struct _GParamSpecBoxed GParamSpecBoxed;
typedef struct _GParamSpecPointer GParamSpecPointer;
typedef struct _GParamSpecValueArray GParamSpecValueArray;
typedef struct _GParamSpecObject GParamSpecObject;
typedef struct _GParamSpecOverride GParamSpecOverride;
typedef struct _GParamSpecGType GParamSpecGType;
# 586 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecChar
{
  GParamSpec parent_instance;

  gint8 minimum;
  gint8 maximum;
  gint8 default_value;
};
# 603 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecUChar
{
  GParamSpec parent_instance;

  guint8 minimum;
  guint8 maximum;
  guint8 default_value;
};







struct _GParamSpecBoolean
{
  GParamSpec parent_instance;

  gboolean default_value;
};
# 633 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecInt
{
  GParamSpec parent_instance;

  gint minimum;
  gint maximum;
  gint default_value;
};
# 650 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecUInt
{
  GParamSpec parent_instance;

  guint minimum;
  guint maximum;
  guint default_value;
};
# 667 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecLong
{
  GParamSpec parent_instance;

  glong minimum;
  glong maximum;
  glong default_value;
};
# 684 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecULong
{
  GParamSpec parent_instance;

  gulong minimum;
  gulong maximum;
  gulong default_value;
};
# 701 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecInt64
{
  GParamSpec parent_instance;

  gint64 minimum;
  gint64 maximum;
  gint64 default_value;
};
# 718 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecUInt64
{
  GParamSpec parent_instance;

  guint64 minimum;
  guint64 maximum;
  guint64 default_value;
};







struct _GParamSpecUnichar
{
  GParamSpec parent_instance;

  gunichar default_value;
};
# 748 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecEnum
{
  GParamSpec parent_instance;

  GEnumClass *enum_class;
  gint default_value;
};
# 764 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecFlags
{
  GParamSpec parent_instance;

  GFlagsClass *flags_class;
  guint default_value;
};
# 782 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecFloat
{
  GParamSpec parent_instance;

  gfloat minimum;
  gfloat maximum;
  gfloat default_value;
  gfloat epsilon;
};
# 802 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecDouble
{
  GParamSpec parent_instance;

  gdouble minimum;
  gdouble maximum;
  gdouble default_value;
  gdouble epsilon;
};
# 824 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecString
{
  GParamSpec parent_instance;

  gchar *default_value;
  gchar *cset_first;
  gchar *cset_nth;
  gchar substitutor;
  guint null_fold_if_empty : 1;
  guint ensure_non_null : 1;
};







struct _GParamSpecParam
{
  GParamSpec parent_instance;
};






struct _GParamSpecBoxed
{
  GParamSpec parent_instance;
};






struct _GParamSpecPointer
{
  GParamSpec parent_instance;
};
# 874 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecValueArray
{
  GParamSpec parent_instance;
  GParamSpec *element_spec;
  guint fixed_n_elements;
};






struct _GParamSpecObject
{
  GParamSpec parent_instance;
};
# 904 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecOverride
{

  GParamSpec parent_instance;
  GParamSpec *overridden;
};
# 919 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecGType
{
  GParamSpec parent_instance;
  GType is_a_type;
};


GParamSpec* g_param_spec_char (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gint8 minimum,
       gint8 maximum,
       gint8 default_value,
       GParamFlags flags);
GParamSpec* g_param_spec_uchar (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       guint8 minimum,
       guint8 maximum,
       guint8 default_value,
       GParamFlags flags);
GParamSpec* g_param_spec_boolean (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gboolean default_value,
       GParamFlags flags);
GParamSpec* g_param_spec_int (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gint minimum,
       gint maximum,
       gint default_value,
       GParamFlags flags);
GParamSpec* g_param_spec_uint (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       guint minimum,
       guint maximum,
       guint default_value,
       GParamFlags flags);
GParamSpec* g_param_spec_long (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       glong minimum,
       glong maximum,
       glong default_value,
       GParamFlags flags);
GParamSpec* g_param_spec_ulong (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gulong minimum,
       gulong maximum,
       gulong default_value,
       GParamFlags flags);
GParamSpec* g_param_spec_int64 (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gint64 minimum,
       gint64 maximum,
       gint64 default_value,
       GParamFlags flags);
GParamSpec* g_param_spec_uint64 (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       guint64 minimum,
       guint64 maximum,
       guint64 default_value,
       GParamFlags flags);
GParamSpec* g_param_spec_unichar (const gchar *name,
              const gchar *nick,
              const gchar *blurb,
              gunichar default_value,
              GParamFlags flags);
GParamSpec* g_param_spec_enum (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType enum_type,
       gint default_value,
       GParamFlags flags);
GParamSpec* g_param_spec_flags (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType flags_type,
       guint default_value,
       GParamFlags flags);
GParamSpec* g_param_spec_float (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gfloat minimum,
       gfloat maximum,
       gfloat default_value,
       GParamFlags flags);
GParamSpec* g_param_spec_double (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gdouble minimum,
       gdouble maximum,
       gdouble default_value,
       GParamFlags flags);
GParamSpec* g_param_spec_string (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       const gchar *default_value,
       GParamFlags flags);
GParamSpec* g_param_spec_param (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType param_type,
       GParamFlags flags);
GParamSpec* g_param_spec_boxed (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType boxed_type,
       GParamFlags flags);
GParamSpec* g_param_spec_pointer (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GParamFlags flags);
GParamSpec* g_param_spec_value_array (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GParamSpec *element_spec,
       GParamFlags flags);
GParamSpec* g_param_spec_object (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType object_type,
       GParamFlags flags);
GParamSpec* g_param_spec_override (const gchar *name,
       GParamSpec *overridden);
GParamSpec* g_param_spec_gtype (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType is_a_type,
       GParamFlags flags);
# 1079 "/usr/include/glib-2.0/gobject/gparamspecs.h"
extern GType *g_param_spec_types;


# 30 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gsignal.h" 1
# 31 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gsourceclosure.h" 1
# 26 "/usr/include/glib-2.0/gobject/gsourceclosure.h"
# 1 "/usr/include/glib-2.0/gobject/gclosure.h" 1
# 27 "/usr/include/glib-2.0/gobject/gsourceclosure.h" 2



void g_source_set_closure (GSource *source,
      GClosure *closure);

GType g_io_channel_get_type (void);
GType g_io_condition_get_type (void);
# 49 "/usr/include/glib-2.0/gobject/gsourceclosure.h"

# 32 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gtype.h" 1
# 33 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gtypemodule.h" 1
# 26 "/usr/include/glib-2.0/gobject/gtypemodule.h"
# 1 "/usr/include/glib-2.0/gobject/gobject.h" 1
# 27 "/usr/include/glib-2.0/gobject/gtypemodule.h" 2
# 1 "/usr/include/glib-2.0/gobject/genums.h" 1
# 28 "/usr/include/glib-2.0/gobject/gtypemodule.h" 2



typedef struct _GTypeModule GTypeModule;
typedef struct _GTypeModuleClass GTypeModuleClass;
# 48 "/usr/include/glib-2.0/gobject/gtypemodule.h"
struct _GTypeModule
{
  GObject parent_instance;

  guint use_count;
  GSList *type_infos;
  GSList *interface_infos;


  gchar *name;
};
# 70 "/usr/include/glib-2.0/gobject/gtypemodule.h"
struct _GTypeModuleClass
{
  GObjectClass parent_class;


  gboolean (* load) (GTypeModule *module);
  void (* unload) (GTypeModule *module);



  void (*reserved1) (void);
  void (*reserved2) (void);
  void (*reserved3) (void);
  void (*reserved4) (void);
};
# 219 "/usr/include/glib-2.0/gobject/gtypemodule.h"
GType g_type_module_get_type (void) __attribute__((__const__));
gboolean g_type_module_use (GTypeModule *module);
void g_type_module_unuse (GTypeModule *module);
void g_type_module_set_name (GTypeModule *module,
                                       const gchar *name);
GType g_type_module_register_type (GTypeModule *module,
                                       GType parent_type,
                                       const gchar *type_name,
                                       const GTypeInfo *type_info,
                                       GTypeFlags flags);
void g_type_module_add_interface (GTypeModule *module,
                                       GType instance_type,
                                       GType interface_type,
                                       const GInterfaceInfo *interface_info);
GType g_type_module_register_enum (GTypeModule *module,
                                       const gchar *name,
                                       const GEnumValue *const_static_values);
GType g_type_module_register_flags (GTypeModule *module,
                                       const gchar *name,
                                       const GFlagsValue *const_static_values);


# 34 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gtypeplugin.h" 1
# 26 "/usr/include/glib-2.0/gobject/gtypeplugin.h"
# 1 "/usr/include/glib-2.0/gobject/gtype.h" 1
# 27 "/usr/include/glib-2.0/gobject/gtypeplugin.h" 2


# 40 "/usr/include/glib-2.0/gobject/gtypeplugin.h"
typedef struct _GTypePluginClass GTypePluginClass;







typedef void (*GTypePluginUse) (GTypePlugin *plugin);






typedef void (*GTypePluginUnuse) (GTypePlugin *plugin);
# 65 "/usr/include/glib-2.0/gobject/gtypeplugin.h"
typedef void (*GTypePluginCompleteTypeInfo) (GTypePlugin *plugin,
         GType g_type,
         GTypeInfo *info,
         GTypeValueTable *value_table);
# 79 "/usr/include/glib-2.0/gobject/gtypeplugin.h"
typedef void (*GTypePluginCompleteInterfaceInfo) (GTypePlugin *plugin,
         GType instance_type,
         GType interface_type,
         GInterfaceInfo *info);
# 106 "/usr/include/glib-2.0/gobject/gtypeplugin.h"
struct _GTypePluginClass
{

  GTypeInterface base_iface;


  GTypePluginUse use_plugin;
  GTypePluginUnuse unuse_plugin;
  GTypePluginCompleteTypeInfo complete_type_info;
  GTypePluginCompleteInterfaceInfo complete_interface_info;
};



GType g_type_plugin_get_type (void) __attribute__((__const__));
void g_type_plugin_use (GTypePlugin *plugin);
void g_type_plugin_unuse (GTypePlugin *plugin);
void g_type_plugin_complete_type_info (GTypePlugin *plugin,
       GType g_type,
       GTypeInfo *info,
       GTypeValueTable *value_table);
void g_type_plugin_complete_interface_info (GTypePlugin *plugin,
       GType instance_type,
       GType interface_type,
       GInterfaceInfo *info);


# 35 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gvalue.h" 1
# 36 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gvaluearray.h" 1
# 28 "/usr/include/glib-2.0/gobject/gvaluearray.h"
# 1 "/usr/include/glib-2.0/gobject/gvalue.h" 1
# 29 "/usr/include/glib-2.0/gobject/gvaluearray.h" 2






typedef struct _GValueArray GValueArray;







struct _GValueArray
{
  guint n_values;
  GValue *values;


  guint n_prealloced;
};



GValue* g_value_array_get_nth (GValueArray *value_array,
           guint index_);
GValueArray* g_value_array_new (guint n_prealloced);
void g_value_array_free (GValueArray *value_array);
GValueArray* g_value_array_copy (const GValueArray *value_array);
GValueArray* g_value_array_prepend (GValueArray *value_array,
           const GValue *value);
GValueArray* g_value_array_append (GValueArray *value_array,
           const GValue *value);
GValueArray* g_value_array_insert (GValueArray *value_array,
           guint index_,
           const GValue *value);
GValueArray* g_value_array_remove (GValueArray *value_array,
           guint index_);
GValueArray* g_value_array_sort (GValueArray *value_array,
           GCompareFunc compare_func);
GValueArray* g_value_array_sort_with_data (GValueArray *value_array,
           GCompareDataFunc compare_func,
           gpointer user_data);



# 37 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gvaluetypes.h" 1
# 28 "/usr/include/glib-2.0/gobject/gvaluetypes.h"
# 1 "/usr/include/glib-2.0/gobject/gvalue.h" 1
# 29 "/usr/include/glib-2.0/gobject/gvaluetypes.h" 2


# 169 "/usr/include/glib-2.0/gobject/gvaluetypes.h"
void g_value_set_char (GValue *value,
       gchar v_char);
gchar g_value_get_char (const GValue *value);
void g_value_set_uchar (GValue *value,
       guchar v_uchar);
guchar g_value_get_uchar (const GValue *value);
void g_value_set_boolean (GValue *value,
       gboolean v_boolean);
gboolean g_value_get_boolean (const GValue *value);
void g_value_set_int (GValue *value,
       gint v_int);
gint g_value_get_int (const GValue *value);
void g_value_set_uint (GValue *value,
       guint v_uint);
guint g_value_get_uint (const GValue *value);
void g_value_set_long (GValue *value,
       glong v_long);
glong g_value_get_long (const GValue *value);
void g_value_set_ulong (GValue *value,
       gulong v_ulong);
gulong g_value_get_ulong (const GValue *value);
void g_value_set_int64 (GValue *value,
       gint64 v_int64);
gint64 g_value_get_int64 (const GValue *value);
void g_value_set_uint64 (GValue *value,
       guint64 v_uint64);
guint64 g_value_get_uint64 (const GValue *value);
void g_value_set_float (GValue *value,
       gfloat v_float);
gfloat g_value_get_float (const GValue *value);
void g_value_set_double (GValue *value,
       gdouble v_double);
gdouble g_value_get_double (const GValue *value);
void g_value_set_string (GValue *value,
       const gchar *v_string);
void g_value_set_static_string (GValue *value,
       const gchar *v_string);
const gchar* g_value_get_string (const GValue *value);
gchar* g_value_dup_string (const GValue *value);
void g_value_set_pointer (GValue *value,
       gpointer v_pointer);
gpointer g_value_get_pointer (const GValue *value);
GType g_gtype_get_type (void);
void g_value_set_gtype (GValue *value,
       GType v_gtype);
GType g_value_get_gtype (const GValue *value);



GType g_pointer_type_register_static (const gchar *name);


gchar* g_strdup_value_contents (const GValue *value);


void g_value_take_string (GValue *value,
       gchar *v_string);

void g_value_set_string_take_ownership (GValue *value,
       gchar *v_string);
# 238 "/usr/include/glib-2.0/gobject/gvaluetypes.h"
typedef gchar* gchararray;



# 38 "/usr/include/glib-2.0/glib-object.h" 2
# 31 "/usr/include/glib-2.0/gio/gioenums.h" 2


# 43 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_APP_INFO_CREATE_NONE = 0,
  G_APP_INFO_CREATE_NEEDS_TERMINAL = (1 << 0),
  G_APP_INFO_CREATE_SUPPORTS_URIS = (1 << 1)
} GAppInfoCreateFlags;
# 60 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN,
  G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN,
  G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN
} GDataStreamByteOrder;
# 76 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_DATA_STREAM_NEWLINE_TYPE_LF,
  G_DATA_STREAM_NEWLINE_TYPE_CR,
  G_DATA_STREAM_NEWLINE_TYPE_CR_LF,
  G_DATA_STREAM_NEWLINE_TYPE_ANY
} GDataStreamNewlineType;
# 98 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_ATTRIBUTE_TYPE_INVALID = 0,
  G_FILE_ATTRIBUTE_TYPE_STRING,
  G_FILE_ATTRIBUTE_TYPE_BYTE_STRING,
  G_FILE_ATTRIBUTE_TYPE_BOOLEAN,
  G_FILE_ATTRIBUTE_TYPE_UINT32,
  G_FILE_ATTRIBUTE_TYPE_INT32,
  G_FILE_ATTRIBUTE_TYPE_UINT64,
  G_FILE_ATTRIBUTE_TYPE_INT64,
  G_FILE_ATTRIBUTE_TYPE_OBJECT
} GFileAttributeType;
# 119 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_ATTRIBUTE_INFO_NONE = 0,
  G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE = (1 << 0),
  G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = (1 << 1)
} GFileAttributeInfoFlags;
# 134 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_ATTRIBUTE_STATUS_UNSET = 0,
  G_FILE_ATTRIBUTE_STATUS_SET,
  G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING
} GFileAttributeStatus;
# 148 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_QUERY_INFO_NONE = 0,
  G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = (1 << 0)
} GFileQueryInfoFlags;
# 170 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_CREATE_NONE = 0,
  G_FILE_CREATE_PRIVATE = (1 << 0),
  G_FILE_CREATE_REPLACE_DESTINATION = (1 << 1)
} GFileCreateFlags;
# 183 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_MOUNT_MOUNT_NONE = 0
} GMountMountFlags;
# 196 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_MOUNT_UNMOUNT_NONE = 0,
  G_MOUNT_UNMOUNT_FORCE = (1 << 0)
} GMountUnmountFlags;
# 214 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_COPY_NONE = 0,
  G_FILE_COPY_OVERWRITE = (1 << 0),
  G_FILE_COPY_BACKUP = (1 << 1),
  G_FILE_COPY_NOFOLLOW_SYMLINKS = (1 << 2),
  G_FILE_COPY_ALL_METADATA = (1 << 3),
  G_FILE_COPY_NO_FALLBACK_FOR_MOVE = (1 << 4),
  G_FILE_COPY_TARGET_DEFAULT_PERMS = (1 << 5)
} GFileCopyFlags;
# 232 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_MONITOR_NONE = 0,
  G_FILE_MONITOR_WATCH_MOUNTS = (1 << 0)
} GFileMonitorFlags;
# 252 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_TYPE_UNKNOWN = 0,
  G_FILE_TYPE_REGULAR,
  G_FILE_TYPE_DIRECTORY,
  G_FILE_TYPE_SYMBOLIC_LINK,
  G_FILE_TYPE_SPECIAL,
  G_FILE_TYPE_SHORTCUT,
  G_FILE_TYPE_MOUNTABLE
} GFileType;
# 273 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = 0,
  G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL,
  G_FILESYSTEM_PREVIEW_TYPE_NEVER
} GFilesystemPreviewType;
# 292 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_MONITOR_EVENT_CHANGED,
  G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT,
  G_FILE_MONITOR_EVENT_DELETED,
  G_FILE_MONITOR_EVENT_CREATED,
  G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED,
  G_FILE_MONITOR_EVENT_PRE_UNMOUNT,
  G_FILE_MONITOR_EVENT_UNMOUNTED
} GFileMonitorEvent;
# 349 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_IO_ERROR_FAILED,
  G_IO_ERROR_NOT_FOUND,
  G_IO_ERROR_EXISTS,
  G_IO_ERROR_IS_DIRECTORY,
  G_IO_ERROR_NOT_DIRECTORY,
  G_IO_ERROR_NOT_EMPTY,
  G_IO_ERROR_NOT_REGULAR_FILE,
  G_IO_ERROR_NOT_SYMBOLIC_LINK,
  G_IO_ERROR_NOT_MOUNTABLE_FILE,
  G_IO_ERROR_FILENAME_TOO_LONG,
  G_IO_ERROR_INVALID_FILENAME,
  G_IO_ERROR_TOO_MANY_LINKS,
  G_IO_ERROR_NO_SPACE,
  G_IO_ERROR_INVALID_ARGUMENT,
  G_IO_ERROR_PERMISSION_DENIED,
  G_IO_ERROR_NOT_SUPPORTED,
  G_IO_ERROR_NOT_MOUNTED,
  G_IO_ERROR_ALREADY_MOUNTED,
  G_IO_ERROR_CLOSED,
  G_IO_ERROR_CANCELLED,
  G_IO_ERROR_PENDING,
  G_IO_ERROR_READ_ONLY,
  G_IO_ERROR_CANT_CREATE_BACKUP,
  G_IO_ERROR_WRONG_ETAG,
  G_IO_ERROR_TIMED_OUT,
  G_IO_ERROR_WOULD_RECURSE,
  G_IO_ERROR_BUSY,
  G_IO_ERROR_WOULD_BLOCK,
  G_IO_ERROR_HOST_NOT_FOUND,
  G_IO_ERROR_WOULD_MERGE,
  G_IO_ERROR_FAILED_HANDLED,
  G_IO_ERROR_TOO_MANY_OPEN_FILES
} GIOErrorEnum;
# 397 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_ASK_PASSWORD_NEED_PASSWORD = (1 << 0),
  G_ASK_PASSWORD_NEED_USERNAME = (1 << 1),
  G_ASK_PASSWORD_NEED_DOMAIN = (1 << 2),
  G_ASK_PASSWORD_SAVING_SUPPORTED = (1 << 3),
  G_ASK_PASSWORD_ANONYMOUS_SUPPORTED = (1 << 4)
} GAskPasswordFlags;
# 417 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_PASSWORD_SAVE_NEVER,
  G_PASSWORD_SAVE_FOR_SESSION,
  G_PASSWORD_SAVE_PERMANENTLY
} GPasswordSave;
# 436 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_MOUNT_OPERATION_HANDLED,
  G_MOUNT_OPERATION_ABORTED,
  G_MOUNT_OPERATION_UNHANDLED
} GMountOperationResult;
# 453 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_OUTPUT_STREAM_SPLICE_NONE = 0,
  G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = (1 << 0),
  G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET = (1 << 1)
} GOutputStreamSpliceFlags;
# 472 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_EMBLEM_ORIGIN_UNKNOWN,
  G_EMBLEM_ORIGIN_DEVICE,
  G_EMBLEM_ORIGIN_LIVEMETADATA,
  G_EMBLEM_ORIGIN_TAG
} GEmblemOrigin;



# 31 "/usr/include/glib-2.0/gio/giotypes.h" 2



typedef struct _GAppLaunchContext GAppLaunchContext;
typedef struct _GAppInfo GAppInfo;
typedef struct _GAsyncResult GAsyncResult;
typedef struct _GBufferedInputStream GBufferedInputStream;
typedef struct _GBufferedOutputStream GBufferedOutputStream;
typedef struct _GCancellable GCancellable;
typedef struct _GDataInputStream GDataInputStream;






typedef struct _GDrive GDrive;
typedef struct _GFileEnumerator GFileEnumerator;
typedef struct _GFileMonitor GFileMonitor;
typedef struct _GFilterInputStream GFilterInputStream;
typedef struct _GFilterOutputStream GFilterOutputStream;
# 60 "/usr/include/glib-2.0/gio/giotypes.h"
typedef struct _GFile GFile;
typedef struct _GFileInfo GFileInfo;






typedef struct _GFileAttributeMatcher GFileAttributeMatcher;
typedef struct _GFileAttributeInfo GFileAttributeInfo;
typedef struct _GFileAttributeInfoList GFileAttributeInfoList;
typedef struct _GFileInputStream GFileInputStream;
typedef struct _GFileOutputStream GFileOutputStream;
typedef struct _GFileIcon GFileIcon;
typedef struct _GFilenameCompleter GFilenameCompleter;


typedef struct _GIcon GIcon;
typedef struct _GInputStream GInputStream;
typedef struct _GIOModule GIOModule;
typedef struct _GIOExtensionPoint GIOExtensionPoint;
typedef struct _GIOExtension GIOExtension;






typedef struct _GIOSchedulerJob GIOSchedulerJob;
typedef struct _GLoadableIcon GLoadableIcon;
typedef struct _GMemoryInputStream GMemoryInputStream;
typedef struct _GMemoryOutputStream GMemoryOutputStream;






typedef struct _GMount GMount;
typedef struct _GMountOperation GMountOperation;
typedef struct _GOutputStream GOutputStream;
typedef struct _GSeekable GSeekable;
typedef struct _GSimpleAsyncResult GSimpleAsyncResult;
typedef struct _GThemedIcon GThemedIcon;
typedef struct _GVfs GVfs;






typedef struct _GVolume GVolume;
typedef struct _GVolumeMonitor GVolumeMonitor;
# 123 "/usr/include/glib-2.0/gio/giotypes.h"
typedef void (*GAsyncReadyCallback) (GObject *source_object,
         GAsyncResult *res,
         gpointer user_data);
# 137 "/usr/include/glib-2.0/gio/giotypes.h"
typedef void (*GFileProgressCallback) (goffset current_num_bytes,
                                       goffset total_num_bytes,
                                       gpointer user_data);
# 154 "/usr/include/glib-2.0/gio/giotypes.h"
typedef gboolean (* GFileReadMoreCallback) (const char *file_contents,
                                            goffset file_size,
                                            gpointer callback_data);
# 177 "/usr/include/glib-2.0/gio/giotypes.h"
typedef gboolean (*GIOSchedulerJobFunc) (GIOSchedulerJob *job,
      GCancellable *cancellable,
      gpointer user_data);
# 190 "/usr/include/glib-2.0/gio/giotypes.h"
typedef void (*GSimpleAsyncThreadFunc) (GSimpleAsyncResult *res,
                                        GObject *object,
                                        GCancellable *cancellable);


# 29 "/usr/include/glib-2.0/gio/gio.h" 2

# 1 "/usr/include/glib-2.0/gio/gappinfo.h" 1
# 30 "/usr/include/glib-2.0/gio/gappinfo.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 31 "/usr/include/glib-2.0/gio/gappinfo.h" 2


# 46 "/usr/include/glib-2.0/gio/gappinfo.h"
typedef struct _GAppLaunchContextClass GAppLaunchContextClass;
typedef struct _GAppLaunchContextPrivate GAppLaunchContextPrivate;
# 84 "/usr/include/glib-2.0/gio/gappinfo.h"
typedef struct _GAppInfoIface GAppInfoIface;

struct _GAppInfoIface
{
  GTypeInterface g_iface;



  GAppInfo * (* dup) (GAppInfo *appinfo);
  gboolean (* equal) (GAppInfo *appinfo1,
                                                 GAppInfo *appinfo2);
  const char * (* get_id) (GAppInfo *appinfo);
  const char * (* get_name) (GAppInfo *appinfo);
  const char * (* get_description) (GAppInfo *appinfo);
  const char * (* get_executable) (GAppInfo *appinfo);
  GIcon * (* get_icon) (GAppInfo *appinfo);
  gboolean (* launch) (GAppInfo *appinfo,
                                                 GList *filenames,
                                                 GAppLaunchContext *launch_context,
                                                 GError **error);
  gboolean (* supports_uris) (GAppInfo *appinfo);
  gboolean (* supports_files) (GAppInfo *appinfo);
  gboolean (* launch_uris) (GAppInfo *appinfo,
                                                 GList *uris,
                                                 GAppLaunchContext *launch_context,
                                                 GError **error);
  gboolean (* should_show) (GAppInfo *appinfo);


  gboolean (* set_as_default_for_type) (GAppInfo *appinfo,
                                                 const char *content_type,
                                                 GError **error);
  gboolean (* set_as_default_for_extension) (GAppInfo *appinfo,
                                                 const char *extension,
                                                 GError **error);
  gboolean (* add_supports_type) (GAppInfo *appinfo,
                                                 const char *content_type,
                                                 GError **error);
  gboolean (* can_remove_supports_type) (GAppInfo *appinfo);
  gboolean (* remove_supports_type) (GAppInfo *appinfo,
                                                 const char *content_type,
                                                 GError **error);
  gboolean (* can_delete) (GAppInfo *appinfo);
  gboolean (* do_delete) (GAppInfo *appinfo);
  const char * (* get_commandline) (GAppInfo *appinfo);
};

GType g_app_info_get_type (void) __attribute__((__const__));
GAppInfo * g_app_info_create_from_commandline (const char *commandline,
           const char *application_name,
           GAppInfoCreateFlags flags,
           GError **error);
GAppInfo * g_app_info_dup (GAppInfo *appinfo);
gboolean g_app_info_equal (GAppInfo *appinfo1,
           GAppInfo *appinfo2);
const char *g_app_info_get_id (GAppInfo *appinfo);
const char *g_app_info_get_name (GAppInfo *appinfo);
const char *g_app_info_get_description (GAppInfo *appinfo);
const char *g_app_info_get_executable (GAppInfo *appinfo);
const char *g_app_info_get_commandline (GAppInfo *appinfo);
GIcon * g_app_info_get_icon (GAppInfo *appinfo);
gboolean g_app_info_launch (GAppInfo *appinfo,
           GList *files,
           GAppLaunchContext *launch_context,
           GError **error);
gboolean g_app_info_supports_uris (GAppInfo *appinfo);
gboolean g_app_info_supports_files (GAppInfo *appinfo);
gboolean g_app_info_launch_uris (GAppInfo *appinfo,
           GList *uris,
           GAppLaunchContext *launch_context,
           GError **error);
gboolean g_app_info_should_show (GAppInfo *appinfo);

gboolean g_app_info_set_as_default_for_type (GAppInfo *appinfo,
           const char *content_type,
           GError **error);
gboolean g_app_info_set_as_default_for_extension (GAppInfo *appinfo,
           const char *extension,
           GError **error);
gboolean g_app_info_add_supports_type (GAppInfo *appinfo,
           const char *content_type,
           GError **error);
gboolean g_app_info_can_remove_supports_type (GAppInfo *appinfo);
gboolean g_app_info_remove_supports_type (GAppInfo *appinfo,
           const char *content_type,
           GError **error);
gboolean g_app_info_can_delete (GAppInfo *appinfo);
gboolean g_app_info_delete (GAppInfo *appinfo);

GList * g_app_info_get_all (void);
GList * g_app_info_get_all_for_type (const char *content_type);
void g_app_info_reset_type_associations (const char *content_type);
GAppInfo *g_app_info_get_default_for_type (const char *content_type,
        gboolean must_support_uris);
GAppInfo *g_app_info_get_default_for_uri_scheme (const char *uri_scheme);

gboolean g_app_info_launch_default_for_uri (const char *uri,
               GAppLaunchContext *launch_context,
               GError **error);
# 192 "/usr/include/glib-2.0/gio/gappinfo.h"
struct _GAppLaunchContext
{
  GObject parent_instance;


  GAppLaunchContextPrivate *priv;
};

struct _GAppLaunchContextClass
{
  GObjectClass parent_class;

  char * (* get_display) (GAppLaunchContext *context,
                                    GAppInfo *info,
                                    GList *files);
  char * (* get_startup_notify_id) (GAppLaunchContext *context,
                                    GAppInfo *info,
                                    GList *files);
  void (* launch_failed) (GAppLaunchContext *context,
                                    const char *startup_notify_id);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

GType g_app_launch_context_get_type (void) __attribute__((__const__));
GAppLaunchContext *g_app_launch_context_new (void);
char * g_app_launch_context_get_display (GAppLaunchContext *context,
              GAppInfo *info,
              GList *files);
char * g_app_launch_context_get_startup_notify_id (GAppLaunchContext *context,
              GAppInfo *info,
              GList *files);
void g_app_launch_context_launch_failed (GAppLaunchContext *context,
              const char * startup_notify_id);


# 31 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gasyncresult.h" 1
# 30 "/usr/include/glib-2.0/gio/gasyncresult.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 31 "/usr/include/glib-2.0/gio/gasyncresult.h" 2


# 45 "/usr/include/glib-2.0/gio/gasyncresult.h"
typedef struct _GAsyncResultIface GAsyncResultIface;
# 56 "/usr/include/glib-2.0/gio/gasyncresult.h"
struct _GAsyncResultIface
{
  GTypeInterface g_iface;



  gpointer (* get_user_data) (GAsyncResult *async_result);
  GObject * (* get_source_object) (GAsyncResult *async_result);
};

GType g_async_result_get_type (void) __attribute__((__const__));

gpointer g_async_result_get_user_data (GAsyncResult *res);
GObject *g_async_result_get_source_object (GAsyncResult *res);


# 32 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gbufferedinputstream.h" 1
# 30 "/usr/include/glib-2.0/gio/gbufferedinputstream.h"
# 1 "/usr/include/glib-2.0/gio/gfilterinputstream.h" 1
# 30 "/usr/include/glib-2.0/gio/gfilterinputstream.h"
# 1 "/usr/include/glib-2.0/gio/ginputstream.h" 1
# 30 "/usr/include/glib-2.0/gio/ginputstream.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 31 "/usr/include/glib-2.0/gio/ginputstream.h" 2


# 46 "/usr/include/glib-2.0/gio/ginputstream.h"
typedef struct _GInputStreamClass GInputStreamClass;
typedef struct _GInputStreamPrivate GInputStreamPrivate;

struct _GInputStream
{
  GObject parent_instance;


  GInputStreamPrivate *priv;
};

struct _GInputStreamClass
{
  GObjectClass parent_class;



  gssize (* read_fn) (GInputStream *stream,
                             void *buffer,
                             gsize count,
                             GCancellable *cancellable,
                             GError **error);
  gssize (* skip) (GInputStream *stream,
                             gsize count,
                             GCancellable *cancellable,
                             GError **error);
  gboolean (* close_fn) (GInputStream *stream,
                             GCancellable *cancellable,
                             GError **error);


  void (* read_async) (GInputStream *stream,
                             void *buffer,
                             gsize count,
                             int io_priority,
                             GCancellable *cancellable,
                             GAsyncReadyCallback callback,
                             gpointer user_data);
  gssize (* read_finish) (GInputStream *stream,
                             GAsyncResult *result,
                             GError **error);
  void (* skip_async) (GInputStream *stream,
                             gsize count,
                             int io_priority,
                             GCancellable *cancellable,
                             GAsyncReadyCallback callback,
                             gpointer user_data);
  gssize (* skip_finish) (GInputStream *stream,
                             GAsyncResult *result,
                             GError **error);
  void (* close_async) (GInputStream *stream,
                             int io_priority,
                             GCancellable *cancellable,
                             GAsyncReadyCallback callback,
                             gpointer user_data);
  gboolean (* close_finish) (GInputStream *stream,
                             GAsyncResult *result,
                             GError **error);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

GType g_input_stream_get_type (void) __attribute__((__const__));

gssize g_input_stream_read (GInputStream *stream,
           void *buffer,
           gsize count,
           GCancellable *cancellable,
           GError **error);
gboolean g_input_stream_read_all (GInputStream *stream,
           void *buffer,
           gsize count,
           gsize *bytes_read,
           GCancellable *cancellable,
           GError **error);
gssize g_input_stream_skip (GInputStream *stream,
           gsize count,
           GCancellable *cancellable,
           GError **error);
gboolean g_input_stream_close (GInputStream *stream,
           GCancellable *cancellable,
           GError **error);
void g_input_stream_read_async (GInputStream *stream,
           void *buffer,
           gsize count,
           int io_priority,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
gssize g_input_stream_read_finish (GInputStream *stream,
           GAsyncResult *result,
           GError **error);
void g_input_stream_skip_async (GInputStream *stream,
           gsize count,
           int io_priority,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
gssize g_input_stream_skip_finish (GInputStream *stream,
           GAsyncResult *result,
           GError **error);
void g_input_stream_close_async (GInputStream *stream,
           int io_priority,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
gboolean g_input_stream_close_finish (GInputStream *stream,
           GAsyncResult *result,
           GError **error);



gboolean g_input_stream_is_closed (GInputStream *stream);
gboolean g_input_stream_has_pending (GInputStream *stream);
gboolean g_input_stream_set_pending (GInputStream *stream,
           GError **error);
void g_input_stream_clear_pending (GInputStream *stream);


# 31 "/usr/include/glib-2.0/gio/gfilterinputstream.h" 2


# 46 "/usr/include/glib-2.0/gio/gfilterinputstream.h"
typedef struct _GFilterInputStreamClass GFilterInputStreamClass;

struct _GFilterInputStream
{
  GInputStream parent_instance;


  GInputStream *base_stream;
};

struct _GFilterInputStreamClass
{
  GInputStreamClass parent_class;



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
};


GType g_filter_input_stream_get_type (void) __attribute__((__const__));
GInputStream * g_filter_input_stream_get_base_stream (GFilterInputStream *stream);
gboolean g_filter_input_stream_get_close_base_stream (GFilterInputStream *stream);
void g_filter_input_stream_set_close_base_stream (GFilterInputStream *stream,
                                                            gboolean close_base);


# 31 "/usr/include/glib-2.0/gio/gbufferedinputstream.h" 2


# 46 "/usr/include/glib-2.0/gio/gbufferedinputstream.h"
typedef struct _GBufferedInputStreamClass GBufferedInputStreamClass;
typedef struct _GBufferedInputStreamPrivate GBufferedInputStreamPrivate;

struct _GBufferedInputStream
{
  GFilterInputStream parent_instance;


  GBufferedInputStreamPrivate *priv;
};

struct _GBufferedInputStreamClass
{
  GFilterInputStreamClass parent_class;

  gssize (* fill) (GBufferedInputStream *stream,
       gssize count,
       GCancellable *cancellable,
       GError **error);


  void (* fill_async) (GBufferedInputStream *stream,
       gssize count,
       int io_priority,
       GCancellable *cancellable,
       GAsyncReadyCallback callback,
       gpointer user_data);
  gssize (* fill_finish) (GBufferedInputStream *stream,
       GAsyncResult *result,
       GError **error);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};


GType g_buffered_input_stream_get_type (void) __attribute__((__const__));
GInputStream* g_buffered_input_stream_new (GInputStream *base_stream);
GInputStream* g_buffered_input_stream_new_sized (GInputStream *base_stream,
             gsize size);

gsize g_buffered_input_stream_get_buffer_size (GBufferedInputStream *stream);
void g_buffered_input_stream_set_buffer_size (GBufferedInputStream *stream,
             gsize size);
gsize g_buffered_input_stream_get_available (GBufferedInputStream *stream);
gsize g_buffered_input_stream_peek (GBufferedInputStream *stream,
             void *buffer,
             gsize offset,
             gsize count);
const void* g_buffered_input_stream_peek_buffer (GBufferedInputStream *stream,
             gsize *count);

gssize g_buffered_input_stream_fill (GBufferedInputStream *stream,
             gssize count,
             GCancellable *cancellable,
             GError **error);
void g_buffered_input_stream_fill_async (GBufferedInputStream *stream,
             gssize count,
             int io_priority,
             GCancellable *cancellable,
             GAsyncReadyCallback callback,
             gpointer user_data);
gssize g_buffered_input_stream_fill_finish (GBufferedInputStream *stream,
             GAsyncResult *result,
             GError **error);

int g_buffered_input_stream_read_byte (GBufferedInputStream *stream,
             GCancellable *cancellable,
             GError **error);


# 33 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gbufferedoutputstream.h" 1
# 30 "/usr/include/glib-2.0/gio/gbufferedoutputstream.h"
# 1 "/usr/include/glib-2.0/gio/gfilteroutputstream.h" 1
# 30 "/usr/include/glib-2.0/gio/gfilteroutputstream.h"
# 1 "/usr/include/glib-2.0/gio/goutputstream.h" 1
# 30 "/usr/include/glib-2.0/gio/goutputstream.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 31 "/usr/include/glib-2.0/gio/goutputstream.h" 2


# 50 "/usr/include/glib-2.0/gio/goutputstream.h"
typedef struct _GOutputStreamClass GOutputStreamClass;
typedef struct _GOutputStreamPrivate GOutputStreamPrivate;

struct _GOutputStream
{
  GObject parent_instance;


  GOutputStreamPrivate *priv;
};


struct _GOutputStreamClass
{
  GObjectClass parent_class;



  gssize (* write_fn) (GOutputStream *stream,
                                 const void *buffer,
                                 gsize count,
                                 GCancellable *cancellable,
                                 GError **error);
  gssize (* splice) (GOutputStream *stream,
                                 GInputStream *source,
                                 GOutputStreamSpliceFlags flags,
                                 GCancellable *cancellable,
                                 GError **error);
  gboolean (* flush) (GOutputStream *stream,
                                 GCancellable *cancellable,
                                 GError **error);
  gboolean (* close_fn) (GOutputStream *stream,
                                 GCancellable *cancellable,
                                 GError **error);



  void (* write_async) (GOutputStream *stream,
                                 const void *buffer,
                                 gsize count,
                                 int io_priority,
                                 GCancellable *cancellable,
                                 GAsyncReadyCallback callback,
                                 gpointer user_data);
  gssize (* write_finish) (GOutputStream *stream,
                                 GAsyncResult *result,
                                 GError **error);
  void (* splice_async) (GOutputStream *stream,
                                 GInputStream *source,
                                 GOutputStreamSpliceFlags flags,
                                 int io_priority,
                                 GCancellable *cancellable,
                                 GAsyncReadyCallback callback,
                                 gpointer data);
  gssize (* splice_finish) (GOutputStream *stream,
                                 GAsyncResult *result,
                                 GError **error);
  void (* flush_async) (GOutputStream *stream,
                                 int io_priority,
                                 GCancellable *cancellable,
                                 GAsyncReadyCallback callback,
                                 gpointer user_data);
  gboolean (* flush_finish) (GOutputStream *stream,
                                 GAsyncResult *result,
                                 GError **error);
  void (* close_async) (GOutputStream *stream,
                                 int io_priority,
                                 GCancellable *cancellable,
                                 GAsyncReadyCallback callback,
                                 gpointer user_data);
  gboolean (* close_finish) (GOutputStream *stream,
                                 GAsyncResult *result,
                                 GError **error);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
  void (*_g_reserved8) (void);
};

GType g_output_stream_get_type (void) __attribute__((__const__));

gssize g_output_stream_write (GOutputStream *stream,
     const void *buffer,
     gsize count,
     GCancellable *cancellable,
     GError **error);
gboolean g_output_stream_write_all (GOutputStream *stream,
     const void *buffer,
     gsize count,
     gsize *bytes_written,
     GCancellable *cancellable,
     GError **error);
gssize g_output_stream_splice (GOutputStream *stream,
     GInputStream *source,
     GOutputStreamSpliceFlags flags,
     GCancellable *cancellable,
     GError **error);
gboolean g_output_stream_flush (GOutputStream *stream,
     GCancellable *cancellable,
     GError **error);
gboolean g_output_stream_close (GOutputStream *stream,
     GCancellable *cancellable,
     GError **error);
void g_output_stream_write_async (GOutputStream *stream,
     const void *buffer,
     gsize count,
     int io_priority,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
gssize g_output_stream_write_finish (GOutputStream *stream,
     GAsyncResult *result,
     GError **error);
void g_output_stream_splice_async (GOutputStream *stream,
     GInputStream *source,
     GOutputStreamSpliceFlags flags,
     int io_priority,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
gssize g_output_stream_splice_finish (GOutputStream *stream,
     GAsyncResult *result,
     GError **error);
void g_output_stream_flush_async (GOutputStream *stream,
     int io_priority,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
gboolean g_output_stream_flush_finish (GOutputStream *stream,
     GAsyncResult *result,
     GError **error);
void g_output_stream_close_async (GOutputStream *stream,
     int io_priority,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
gboolean g_output_stream_close_finish (GOutputStream *stream,
     GAsyncResult *result,
     GError **error);

gboolean g_output_stream_is_closed (GOutputStream *stream);
gboolean g_output_stream_has_pending (GOutputStream *stream);
gboolean g_output_stream_set_pending (GOutputStream *stream,
     GError **error);
void g_output_stream_clear_pending (GOutputStream *stream);



# 31 "/usr/include/glib-2.0/gio/gfilteroutputstream.h" 2


# 46 "/usr/include/glib-2.0/gio/gfilteroutputstream.h"
typedef struct _GFilterOutputStreamClass GFilterOutputStreamClass;

struct _GFilterOutputStream
{
  GOutputStream parent_instance;


  GOutputStream *base_stream;
};

struct _GFilterOutputStreamClass
{
  GOutputStreamClass parent_class;



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
};


GType g_filter_output_stream_get_type (void) __attribute__((__const__));
GOutputStream * g_filter_output_stream_get_base_stream (GFilterOutputStream *stream);
gboolean g_filter_output_stream_get_close_base_stream (GFilterOutputStream *stream);
void g_filter_output_stream_set_close_base_stream (GFilterOutputStream *stream,
                                                              gboolean close_base);


# 31 "/usr/include/glib-2.0/gio/gbufferedoutputstream.h" 2


# 47 "/usr/include/glib-2.0/gio/gbufferedoutputstream.h"
typedef struct _GBufferedOutputStreamClass GBufferedOutputStreamClass;
typedef struct _GBufferedOutputStreamPrivate GBufferedOutputStreamPrivate;

struct _GBufferedOutputStream
{
  GFilterOutputStream parent_instance;


  GBufferedOutputStreamPrivate *priv;
};

struct _GBufferedOutputStreamClass
{
  GFilterOutputStreamClass parent_class;



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
};


GType g_buffered_output_stream_get_type (void) __attribute__((__const__));
GOutputStream* g_buffered_output_stream_new (GOutputStream *base_stream);
GOutputStream* g_buffered_output_stream_new_sized (GOutputStream *base_stream,
        gsize size);
gsize g_buffered_output_stream_get_buffer_size (GBufferedOutputStream *stream);
void g_buffered_output_stream_set_buffer_size (GBufferedOutputStream *stream,
        gsize size);
gboolean g_buffered_output_stream_get_auto_grow (GBufferedOutputStream *stream);
void g_buffered_output_stream_set_auto_grow (GBufferedOutputStream *stream,
        gboolean auto_grow);


# 34 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gcancellable.h" 1
# 30 "/usr/include/glib-2.0/gio/gcancellable.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 31 "/usr/include/glib-2.0/gio/gcancellable.h" 2


# 46 "/usr/include/glib-2.0/gio/gcancellable.h"
typedef struct _GCancellableClass GCancellableClass;

struct _GCancellableClass
{
  GObjectClass parent_class;

  void (* cancelled) (GCancellable *cancellable);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

GType g_cancellable_get_type (void) __attribute__((__const__));

GCancellable *g_cancellable_new (void);


gboolean g_cancellable_is_cancelled (GCancellable *cancellable);
gboolean g_cancellable_set_error_if_cancelled (GCancellable *cancellable,
          GError **error);

int g_cancellable_get_fd (GCancellable *cancellable);
void g_cancellable_make_pollfd (GCancellable *cancellable,
          GPollFD *pollfd);

GCancellable *g_cancellable_get_current (void);
void g_cancellable_push_current (GCancellable *cancellable);
void g_cancellable_pop_current (GCancellable *cancellable);
void g_cancellable_reset (GCancellable *cancellable);



void g_cancellable_cancel (GCancellable *cancellable);


# 35 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gcontenttype.h" 1
# 30 "/usr/include/glib-2.0/gio/gcontenttype.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 31 "/usr/include/glib-2.0/gio/gcontenttype.h" 2



gboolean g_content_type_equals (const char *type1,
        const char *type2);
gboolean g_content_type_is_a (const char *type,
        const char *supertype);
gboolean g_content_type_is_unknown (const char *type);
char * g_content_type_get_description (const char *type);
char * g_content_type_get_mime_type (const char *type);
GIcon * g_content_type_get_icon (const char *type);
gboolean g_content_type_can_be_executable (const char *type);

char * g_content_type_from_mime_type (const char *mime_type);

char * g_content_type_guess (const char *filename,
        const guchar *data,
        gsize data_size,
        gboolean *result_uncertain);

char ** g_content_type_guess_for_tree (GFile *root);

GList * g_content_types_get_registered (void);


# 36 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdatainputstream.h" 1
# 30 "/usr/include/glib-2.0/gio/gdatainputstream.h"
# 1 "/usr/include/glib-2.0/gio/gbufferedinputstream.h" 1
# 31 "/usr/include/glib-2.0/gio/gdatainputstream.h" 2


# 48 "/usr/include/glib-2.0/gio/gdatainputstream.h"
typedef struct _GDataInputStreamClass GDataInputStreamClass;
typedef struct _GDataInputStreamPrivate GDataInputStreamPrivate;

struct _GDataInputStream
{
  GBufferedInputStream parent_instance;


  GDataInputStreamPrivate *priv;
};

struct _GDataInputStreamClass
{
  GBufferedInputStreamClass parent_class;



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

GType g_data_input_stream_get_type (void) __attribute__((__const__));
GDataInputStream * g_data_input_stream_new (GInputStream *base_stream);

void g_data_input_stream_set_byte_order (GDataInputStream *stream,
                GDataStreamByteOrder order);
GDataStreamByteOrder g_data_input_stream_get_byte_order (GDataInputStream *stream);
void g_data_input_stream_set_newline_type (GDataInputStream *stream,
                GDataStreamNewlineType type);
GDataStreamNewlineType g_data_input_stream_get_newline_type (GDataInputStream *stream);
guchar g_data_input_stream_read_byte (GDataInputStream *stream,
                GCancellable *cancellable,
                GError **error);
gint16 g_data_input_stream_read_int16 (GDataInputStream *stream,
                GCancellable *cancellable,
                GError **error);
guint16 g_data_input_stream_read_uint16 (GDataInputStream *stream,
                GCancellable *cancellable,
                GError **error);
gint32 g_data_input_stream_read_int32 (GDataInputStream *stream,
                GCancellable *cancellable,
                GError **error);
guint32 g_data_input_stream_read_uint32 (GDataInputStream *stream,
                GCancellable *cancellable,
                GError **error);
gint64 g_data_input_stream_read_int64 (GDataInputStream *stream,
                GCancellable *cancellable,
                GError **error);
guint64 g_data_input_stream_read_uint64 (GDataInputStream *stream,
                GCancellable *cancellable,
                GError **error);
char * g_data_input_stream_read_line (GDataInputStream *stream,
                gsize *length,
                GCancellable *cancellable,
                GError **error);
void g_data_input_stream_read_line_async (GDataInputStream *stream,
                                                                 gint io_priority,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);
char * g_data_input_stream_read_line_finish (GDataInputStream *stream,
                                                                 GAsyncResult *result,
                                                                 gsize *length,
                                                                 GError **error);
char * g_data_input_stream_read_until (GDataInputStream *stream,
                const gchar *stop_chars,
                gsize *length,
                GCancellable *cancellable,
                GError **error);
void g_data_input_stream_read_until_async (GDataInputStream *stream,
                const gchar *stop_chars,
                                                                 gint io_priority,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);
char * g_data_input_stream_read_until_finish (GDataInputStream *stream,
                                                                 GAsyncResult *result,
                                                                 gsize *length,
                                                                 GError **error);


# 37 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdataoutputstream.h" 1
# 30 "/usr/include/glib-2.0/gio/gdataoutputstream.h"
# 1 "/usr/include/glib-2.0/gio/gfilteroutputstream.h" 1
# 31 "/usr/include/glib-2.0/gio/gdataoutputstream.h" 2


# 48 "/usr/include/glib-2.0/gio/gdataoutputstream.h"
typedef struct _GDataOutputStream GDataOutputStream;
typedef struct _GDataOutputStreamClass GDataOutputStreamClass;
typedef struct _GDataOutputStreamPrivate GDataOutputStreamPrivate;

struct _GDataOutputStream
{
  GFilterOutputStream parent_instance;


  GDataOutputStreamPrivate *priv;
};

struct _GDataOutputStreamClass
{
  GFilterOutputStreamClass parent_class;



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};


GType g_data_output_stream_get_type (void) __attribute__((__const__));
GDataOutputStream * g_data_output_stream_new (GOutputStream *base_stream);

void g_data_output_stream_set_byte_order (GDataOutputStream *stream,
         GDataStreamByteOrder order);
GDataStreamByteOrder g_data_output_stream_get_byte_order (GDataOutputStream *stream);

gboolean g_data_output_stream_put_byte (GDataOutputStream *stream,
         guchar data,
         GCancellable *cancellable,
         GError **error);
gboolean g_data_output_stream_put_int16 (GDataOutputStream *stream,
         gint16 data,
         GCancellable *cancellable,
         GError **error);
gboolean g_data_output_stream_put_uint16 (GDataOutputStream *stream,
         guint16 data,
         GCancellable *cancellable,
         GError **error);
gboolean g_data_output_stream_put_int32 (GDataOutputStream *stream,
         gint32 data,
         GCancellable *cancellable,
         GError **error);
gboolean g_data_output_stream_put_uint32 (GDataOutputStream *stream,
         guint32 data,
         GCancellable *cancellable,
         GError **error);
gboolean g_data_output_stream_put_int64 (GDataOutputStream *stream,
         gint64 data,
         GCancellable *cancellable,
         GError **error);
gboolean g_data_output_stream_put_uint64 (GDataOutputStream *stream,
         guint64 data,
         GCancellable *cancellable,
         GError **error);
gboolean g_data_output_stream_put_string (GDataOutputStream *stream,
         const char *str,
         GCancellable *cancellable,
         GError **error);


# 38 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdrive.h" 1
# 31 "/usr/include/glib-2.0/gio/gdrive.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 32 "/usr/include/glib-2.0/gio/gdrive.h" 2


# 66 "/usr/include/glib-2.0/gio/gdrive.h"
typedef struct _GDriveIface GDriveIface;

struct _GDriveIface
{
  GTypeInterface g_iface;


  void (* changed) (GDrive *drive);
  void (* disconnected) (GDrive *drive);
  void (* eject_button) (GDrive *drive);


  char * (* get_name) (GDrive *drive);
  GIcon * (* get_icon) (GDrive *drive);
  gboolean (* has_volumes) (GDrive *drive);
  GList * (* get_volumes) (GDrive *drive);
  gboolean (* is_media_removable) (GDrive *drive);
  gboolean (* has_media) (GDrive *drive);
  gboolean (* is_media_check_automatic) (GDrive *drive);
  gboolean (* can_eject) (GDrive *drive);
  gboolean (* can_poll_for_media) (GDrive *drive);
  void (* eject) (GDrive *drive,
                                         GMountUnmountFlags flags,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* eject_finish) (GDrive *drive,
                                         GAsyncResult *result,
                                         GError **error);
  void (* poll_for_media) (GDrive *drive,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* poll_for_media_finish) (GDrive *drive,
                                         GAsyncResult *result,
                                         GError **error);

  char * (* get_identifier) (GDrive *drive,
                                         const char *kind);
  char ** (* enumerate_identifiers) (GDrive *drive);
};

GType g_drive_get_type (void) __attribute__((__const__));

char * g_drive_get_name (GDrive *drive);
GIcon * g_drive_get_icon (GDrive *drive);
gboolean g_drive_has_volumes (GDrive *drive);
GList * g_drive_get_volumes (GDrive *drive);
gboolean g_drive_is_media_removable (GDrive *drive);
gboolean g_drive_has_media (GDrive *drive);
gboolean g_drive_is_media_check_automatic (GDrive *drive);
gboolean g_drive_can_poll_for_media (GDrive *drive);
gboolean g_drive_can_eject (GDrive *drive);
void g_drive_eject (GDrive *drive,
        GMountUnmountFlags flags,
                                           GCancellable *cancellable,
                                           GAsyncReadyCallback callback,
                                           gpointer user_data);
gboolean g_drive_eject_finish (GDrive *drive,
                                           GAsyncResult *result,
                                           GError **error);
void g_drive_poll_for_media (GDrive *drive,
                                           GCancellable *cancellable,
                                           GAsyncReadyCallback callback,
                                           gpointer user_data);
gboolean g_drive_poll_for_media_finish (GDrive *drive,
                                           GAsyncResult *result,
                                           GError **error);
char * g_drive_get_identifier (GDrive *drive,
        const char *kind);
char ** g_drive_enumerate_identifiers (GDrive *drive);


# 39 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gemblemedicon.h" 1
# 31 "/usr/include/glib-2.0/gio/gemblemedicon.h"
# 1 "/usr/include/glib-2.0/gio/gicon.h" 1
# 30 "/usr/include/glib-2.0/gio/gicon.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 31 "/usr/include/glib-2.0/gio/gicon.h" 2


# 44 "/usr/include/glib-2.0/gio/gicon.h"
typedef struct _GIconIface GIconIface;
# 62 "/usr/include/glib-2.0/gio/gicon.h"
struct _GIconIface
{
  GTypeInterface g_iface;



  guint (* hash) (GIcon *icon);
  gboolean (* equal) (GIcon *icon1,
                               GIcon *icon2);
  gboolean (* to_tokens) (GIcon *icon,
          GPtrArray *tokens,
                               gint *out_version);
  GIcon * (* from_tokens) (gchar **tokens,
                               gint num_tokens,
                               gint version,
                               GError **error);
};

GType g_icon_get_type (void) __attribute__((__const__));

guint g_icon_hash (gconstpointer icon);
gboolean g_icon_equal (GIcon *icon1,
                                 GIcon *icon2);
gchar *g_icon_to_string (GIcon *icon);
GIcon *g_icon_new_for_string (const gchar *str,
                                 GError **error);


# 32 "/usr/include/glib-2.0/gio/gemblemedicon.h" 2
# 1 "/usr/include/glib-2.0/gio/gemblem.h" 1
# 29 "/usr/include/glib-2.0/gio/gemblem.h"
# 1 "/usr/include/glib-2.0/gio/gioenums.h" 1
# 30 "/usr/include/glib-2.0/gio/gemblem.h" 2


# 45 "/usr/include/glib-2.0/gio/gemblem.h"
typedef struct _GEmblem GEmblem;
typedef struct _GEmblemClass GEmblemClass;

GType g_emblem_get_type (void) __attribute__((__const__));

GEmblem *g_emblem_new (GIcon *icon);
GEmblem *g_emblem_new_with_origin (GIcon *icon,
                                         GEmblemOrigin origin);
GIcon *g_emblem_get_icon (GEmblem *emblem);
GEmblemOrigin g_emblem_get_origin (GEmblem *emblem);


# 33 "/usr/include/glib-2.0/gio/gemblemedicon.h" 2


# 48 "/usr/include/glib-2.0/gio/gemblemedicon.h"
typedef struct _GEmblemedIcon GEmblemedIcon;
typedef struct _GEmblemedIconClass GEmblemedIconClass;

GType g_emblemed_icon_get_type (void) __attribute__((__const__));

GIcon *g_emblemed_icon_new (GIcon *icon,
                                    GEmblem *emblem);
GIcon *g_emblemed_icon_get_icon (GEmblemedIcon *emblemed);
GList *g_emblemed_icon_get_emblems (GEmblemedIcon *emblemed);
void g_emblemed_icon_add_emblem (GEmblemedIcon *emblemed,
                                    GEmblem *emblem);


# 40 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfile.h" 1
# 30 "/usr/include/glib-2.0/gio/gfile.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 31 "/usr/include/glib-2.0/gio/gfile.h" 2


# 49 "/usr/include/glib-2.0/gio/gfile.h"
typedef struct _GFileIface GFileIface;
# 138 "/usr/include/glib-2.0/gio/gfile.h"
struct _GFileIface
{
  GTypeInterface g_iface;



  GFile * (* dup) (GFile *file);
  guint (* hash) (GFile *file);
  gboolean (* equal) (GFile *file1,
                                                       GFile *file2);
  gboolean (* is_native) (GFile *file);
  gboolean (* has_uri_scheme) (GFile *file,
                                                       const char *uri_scheme);
  char * (* get_uri_scheme) (GFile *file);
  char * (* get_basename) (GFile *file);
  char * (* get_path) (GFile *file);
  char * (* get_uri) (GFile *file);
  char * (* get_parse_name) (GFile *file);
  GFile * (* get_parent) (GFile *file);
  gboolean (* prefix_matches) (GFile *prefix,
                                                       GFile *file);
  char * (* get_relative_path) (GFile *parent,
                                                       GFile *descendant);
  GFile * (* resolve_relative_path) (GFile *file,
                                                       const char *relative_path);
  GFile * (* get_child_for_display_name) (GFile *file,
                                                       const char *display_name,
                                                       GError **error);

  GFileEnumerator * (* enumerate_children) (GFile *file,
                                                       const char *attributes,
                                                       GFileQueryInfoFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* enumerate_children_async) (GFile *file,
                                                       const char *attributes,
                                                       GFileQueryInfoFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileEnumerator * (* enumerate_children_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  GFileInfo * (* query_info) (GFile *file,
                                                       const char *attributes,
                                                       GFileQueryInfoFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* query_info_async) (GFile *file,
                                                       const char *attributes,
                                                       GFileQueryInfoFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileInfo * (* query_info_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  GFileInfo * (* query_filesystem_info) (GFile *file,
                                                       const char *attributes,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* query_filesystem_info_async) (GFile *file,
                                                       const char *attributes,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileInfo * (* query_filesystem_info_finish)(GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  GMount * (* find_enclosing_mount) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* find_enclosing_mount_async) (GFile *file,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GMount * (* find_enclosing_mount_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  GFile * (* set_display_name) (GFile *file,
                                                       const char *display_name,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* set_display_name_async) (GFile *file,
                                                       const char *display_name,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFile * (* set_display_name_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  GFileAttributeInfoList * (* query_settable_attributes) (GFile *file,
                                                             GCancellable *cancellable,
                                                             GError **error);
  void (* _query_settable_attributes_async) (void);
  void (* _query_settable_attributes_finish) (void);

  GFileAttributeInfoList * (* query_writable_namespaces) (GFile *file,
                                                             GCancellable *cancellable,
                                                             GError **error);
  void (* _query_writable_namespaces_async) (void);
  void (* _query_writable_namespaces_finish) (void);

  gboolean (* set_attribute) (GFile *file,
                                                       const char *attribute,
                                                       GFileAttributeType type,
                                                       gpointer value_p,
                                                       GFileQueryInfoFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  gboolean (* set_attributes_from_info) (GFile *file,
                                                       GFileInfo *info,
                                                       GFileQueryInfoFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* set_attributes_async) (GFile *file,
                                                       GFileInfo *info,
                                                       GFileQueryInfoFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* set_attributes_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GFileInfo **info,
                                                       GError **error);

  GFileInputStream * (* read_fn) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* read_async) (GFile *file,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileInputStream * (* read_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  GFileOutputStream * (* append_to) (GFile *file,
                                                       GFileCreateFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* append_to_async) (GFile *file,
                                                       GFileCreateFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileOutputStream * (* append_to_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  GFileOutputStream * (* create) (GFile *file,
                                                       GFileCreateFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* create_async) (GFile *file,
                                                       GFileCreateFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileOutputStream * (* create_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  GFileOutputStream * (* replace) (GFile *file,
                                                       const char *etag,
                                                       gboolean make_backup,
                                                       GFileCreateFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* replace_async) (GFile *file,
                                                       const char *etag,
                                                       gboolean make_backup,
                                                       GFileCreateFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileOutputStream * (* replace_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  gboolean (* delete_file) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* _delete_file_async) (void);
  void (* _delete_file_finish) (void);

  gboolean (* trash) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* _trash_async) (void);
  void (* _trash_finish) (void);

  gboolean (* make_directory) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* _make_directory_async) (void);
  void (* _make_directory_finish) (void);

  gboolean (* make_symbolic_link) (GFile *file,
                                                       const char *symlink_value,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* _make_symbolic_link_async) (void);
  void (* _make_symbolic_link_finish) (void);

  gboolean (* copy) (GFile *source,
                                                       GFile *destination,
                                                       GFileCopyFlags flags,
                                                       GCancellable *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer progress_callback_data,
                                                       GError **error);
  void (* copy_async) (GFile *source,
                                                       GFile *destination,
                                                       GFileCopyFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer progress_callback_data,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* copy_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  gboolean (* move) (GFile *source,
                                                       GFile *destination,
                                                       GFileCopyFlags flags,
                                                       GCancellable *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer progress_callback_data,
                                                       GError **error);
  void (* _move_async) (void);
  void (* _move_finish) (void);

  void (* mount_mountable) (GFile *file,
                                                       GMountMountFlags flags,
                                                       GMountOperation *mount_operation,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFile * (* mount_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);

  void (* unmount_mountable) (GFile *file,
                                                       GMountUnmountFlags flags,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* unmount_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);

  void (* eject_mountable) (GFile *file,
                                                       GMountUnmountFlags flags,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* eject_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);

  void (* mount_enclosing_volume) (GFile *location,
                                                       GMountMountFlags flags,
                                                       GMountOperation *mount_operation,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* mount_enclosing_volume_finish) (GFile *location,
                                                       GAsyncResult *result,
                                                       GError **error);

  GFileMonitor * (* monitor_dir) (GFile *file,
                                                       GFileMonitorFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  GFileMonitor * (* monitor_file) (GFile *file,
                                                       GFileMonitorFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
};

GType g_file_get_type (void) __attribute__((__const__));

GFile * g_file_new_for_path (const char *path);
GFile * g_file_new_for_uri (const char *uri);
GFile * g_file_new_for_commandline_arg (const char *arg);
GFile * g_file_parse_name (const char *parse_name);
GFile * g_file_dup (GFile *file);
guint g_file_hash (gconstpointer file);
gboolean g_file_equal (GFile *file1,
          GFile *file2);
char * g_file_get_basename (GFile *file);
char * g_file_get_path (GFile *file);
char * g_file_get_uri (GFile *file);
char * g_file_get_parse_name (GFile *file);
GFile * g_file_get_parent (GFile *file);
GFile * g_file_get_child (GFile *file,
          const char *name);
GFile * g_file_get_child_for_display_name (GFile *file,
          const char *display_name,
          GError **error);
gboolean g_file_has_prefix (GFile *file,
          GFile *prefix);
char * g_file_get_relative_path (GFile *parent,
          GFile *descendant);
GFile * g_file_resolve_relative_path (GFile *file,
          const char *relative_path);
gboolean g_file_is_native (GFile *file);
gboolean g_file_has_uri_scheme (GFile *file,
          const char *uri_scheme);
char * g_file_get_uri_scheme (GFile *file);
GFileInputStream * g_file_read (GFile *file,
          GCancellable *cancellable,
          GError **error);
void g_file_read_async (GFile *file,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
GFileInputStream * g_file_read_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
GFileOutputStream * g_file_append_to (GFile *file,
          GFileCreateFlags flags,
          GCancellable *cancellable,
          GError **error);
GFileOutputStream * g_file_create (GFile *file,
          GFileCreateFlags flags,
          GCancellable *cancellable,
          GError **error);
GFileOutputStream * g_file_replace (GFile *file,
          const char *etag,
          gboolean make_backup,
          GFileCreateFlags flags,
          GCancellable *cancellable,
          GError **error);
void g_file_append_to_async (GFile *file,
          GFileCreateFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
GFileOutputStream * g_file_append_to_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
void g_file_create_async (GFile *file,
          GFileCreateFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
GFileOutputStream * g_file_create_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
void g_file_replace_async (GFile *file,
          const char *etag,
          gboolean make_backup,
          GFileCreateFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
GFileOutputStream * g_file_replace_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
gboolean g_file_query_exists (GFile *file,
          GCancellable *cancellable);
GFileType g_file_query_file_type (GFile *file,
                                                           GFileQueryInfoFlags flags,
                                                           GCancellable *cancellable);
GFileInfo * g_file_query_info (GFile *file,
          const char *attributes,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
void g_file_query_info_async (GFile *file,
          const char *attributes,
          GFileQueryInfoFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
GFileInfo * g_file_query_info_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
GFileInfo * g_file_query_filesystem_info (GFile *file,
          const char *attributes,
          GCancellable *cancellable,
          GError **error);
void g_file_query_filesystem_info_async (GFile *file,
          const char *attributes,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
GFileInfo * g_file_query_filesystem_info_finish (GFile *file,
                                                           GAsyncResult *res,
          GError **error);
GMount * g_file_find_enclosing_mount (GFile *file,
                                                           GCancellable *cancellable,
                                                           GError **error);
void g_file_find_enclosing_mount_async (GFile *file,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
GMount * g_file_find_enclosing_mount_finish (GFile *file,
           GAsyncResult *res,
           GError **error);
GFileEnumerator * g_file_enumerate_children (GFile *file,
          const char *attributes,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
void g_file_enumerate_children_async (GFile *file,
          const char *attributes,
          GFileQueryInfoFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
GFileEnumerator * g_file_enumerate_children_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
GFile * g_file_set_display_name (GFile *file,
          const char *display_name,
          GCancellable *cancellable,
          GError **error);
void g_file_set_display_name_async (GFile *file,
          const char *display_name,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
GFile * g_file_set_display_name_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
gboolean g_file_delete (GFile *file,
          GCancellable *cancellable,
          GError **error);
gboolean g_file_trash (GFile *file,
          GCancellable *cancellable,
          GError **error);
gboolean g_file_copy (GFile *source,
          GFile *destination,
          GFileCopyFlags flags,
          GCancellable *cancellable,
          GFileProgressCallback progress_callback,
          gpointer progress_callback_data,
          GError **error);
void g_file_copy_async (GFile *source,
          GFile *destination,
          GFileCopyFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GFileProgressCallback progress_callback,
          gpointer progress_callback_data,
          GAsyncReadyCallback callback,
          gpointer user_data);
gboolean g_file_copy_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
gboolean g_file_move (GFile *source,
          GFile *destination,
          GFileCopyFlags flags,
          GCancellable *cancellable,
          GFileProgressCallback progress_callback,
          gpointer progress_callback_data,
          GError **error);
gboolean g_file_make_directory (GFile *file,
          GCancellable *cancellable,
          GError **error);
gboolean g_file_make_directory_with_parents (GFile *file,
                                             GCancellable *cancellable,
                                             GError **error);
gboolean g_file_make_symbolic_link (GFile *file,
          const char *symlink_value,
          GCancellable *cancellable,
          GError **error);
GFileAttributeInfoList *g_file_query_settable_attributes (GFile *file,
          GCancellable *cancellable,
          GError **error);
GFileAttributeInfoList *g_file_query_writable_namespaces (GFile *file,
          GCancellable *cancellable,
          GError **error);
gboolean g_file_set_attribute (GFile *file,
          const char *attribute,
          GFileAttributeType type,
          gpointer value_p,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
gboolean g_file_set_attributes_from_info (GFile *file,
          GFileInfo *info,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
void g_file_set_attributes_async (GFile *file,
          GFileInfo *info,
          GFileQueryInfoFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
gboolean g_file_set_attributes_finish (GFile *file,
          GAsyncResult *result,
          GFileInfo **info,
          GError **error);
gboolean g_file_set_attribute_string (GFile *file,
          const char *attribute,
          const char *value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
gboolean g_file_set_attribute_byte_string (GFile *file,
          const char *attribute,
          const char *value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
gboolean g_file_set_attribute_uint32 (GFile *file,
          const char *attribute,
          guint32 value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
gboolean g_file_set_attribute_int32 (GFile *file,
          const char *attribute,
          gint32 value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
gboolean g_file_set_attribute_uint64 (GFile *file,
          const char *attribute,
          guint64 value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
gboolean g_file_set_attribute_int64 (GFile *file,
          const char *attribute,
          gint64 value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
void g_file_mount_enclosing_volume (GFile *location,
          GMountMountFlags flags,
          GMountOperation *mount_operation,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
gboolean g_file_mount_enclosing_volume_finish (GFile *location,
          GAsyncResult *result,
          GError **error);
void g_file_mount_mountable (GFile *file,
          GMountMountFlags flags,
          GMountOperation *mount_operation,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
GFile * g_file_mount_mountable_finish (GFile *file,
          GAsyncResult *result,
          GError **error);
void g_file_unmount_mountable (GFile *file,
          GMountUnmountFlags flags,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
gboolean g_file_unmount_mountable_finish (GFile *file,
          GAsyncResult *result,
          GError **error);
void g_file_eject_mountable (GFile *file,
          GMountUnmountFlags flags,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
gboolean g_file_eject_mountable_finish (GFile *file,
          GAsyncResult *result,
          GError **error);

gboolean g_file_copy_attributes (GFile *source,
          GFile *destination,
          GFileCopyFlags flags,
          GCancellable *cancellable,
          GError **error);


GFileMonitor* g_file_monitor_directory (GFile *file,
          GFileMonitorFlags flags,
          GCancellable *cancellable,
          GError **error);
GFileMonitor* g_file_monitor_file (GFile *file,
          GFileMonitorFlags flags,
          GCancellable *cancellable,
          GError **error);
GFileMonitor* g_file_monitor (GFile *file,
          GFileMonitorFlags flags,
          GCancellable *cancellable,
          GError **error);




GAppInfo *g_file_query_default_handler (GFile *file,
           GCancellable *cancellable,
           GError **error);
gboolean g_file_load_contents (GFile *file,
           GCancellable *cancellable,
           char **contents,
           gsize *length,
           char **etag_out,
           GError **error);
void g_file_load_contents_async (GFile *file,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
gboolean g_file_load_contents_finish (GFile *file,
           GAsyncResult *res,
           char **contents,
           gsize *length,
           char **etag_out,
           GError **error);
void g_file_load_partial_contents_async (GFile *file,
           GCancellable *cancellable,
           GFileReadMoreCallback read_more_callback,
           GAsyncReadyCallback callback,
           gpointer user_data);
gboolean g_file_load_partial_contents_finish (GFile *file,
           GAsyncResult *res,
           char **contents,
           gsize *length,
           char **etag_out,
           GError **error);
gboolean g_file_replace_contents (GFile *file,
           const char *contents,
           gsize length,
           const char *etag,
           gboolean make_backup,
           GFileCreateFlags flags,
           char **new_etag,
           GCancellable *cancellable,
           GError **error);
void g_file_replace_contents_async (GFile *file,
           const char *contents,
           gsize length,
           const char *etag,
           gboolean make_backup,
           GFileCreateFlags flags,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
gboolean g_file_replace_contents_finish (GFile *file,
           GAsyncResult *res,
           char **new_etag,
           GError **error);


# 41 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfileattribute.h" 1
# 30 "/usr/include/glib-2.0/gio/gfileattribute.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 31 "/usr/include/glib-2.0/gio/gfileattribute.h" 2


# 42 "/usr/include/glib-2.0/gio/gfileattribute.h"
struct _GFileAttributeInfo
{
  char *name;
  GFileAttributeType type;
  GFileAttributeInfoFlags flags;
};
# 57 "/usr/include/glib-2.0/gio/gfileattribute.h"
struct _GFileAttributeInfoList
{
  GFileAttributeInfo *infos;
  int n_infos;
};

GType g_file_attribute_info_list_get_type (void);
GFileAttributeInfoList * g_file_attribute_info_list_new (void);
GFileAttributeInfoList * g_file_attribute_info_list_ref (GFileAttributeInfoList *list);
void g_file_attribute_info_list_unref (GFileAttributeInfoList *list);
GFileAttributeInfoList * g_file_attribute_info_list_dup (GFileAttributeInfoList *list);
const GFileAttributeInfo *g_file_attribute_info_list_lookup (GFileAttributeInfoList *list,
            const char *name);
void g_file_attribute_info_list_add (GFileAttributeInfoList *list,
            const char *name,
            GFileAttributeType type,
            GFileAttributeInfoFlags flags);


# 42 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfileenumerator.h" 1
# 30 "/usr/include/glib-2.0/gio/gfileenumerator.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 31 "/usr/include/glib-2.0/gio/gfileenumerator.h" 2


# 47 "/usr/include/glib-2.0/gio/gfileenumerator.h"
typedef struct _GFileEnumeratorClass GFileEnumeratorClass;
typedef struct _GFileEnumeratorPrivate GFileEnumeratorPrivate;

struct _GFileEnumerator
{
  GObject parent_instance;


  GFileEnumeratorPrivate *priv;
};

struct _GFileEnumeratorClass
{
  GObjectClass parent_class;



  GFileInfo * (* next_file) (GFileEnumerator *enumerator,
                                     GCancellable *cancellable,
                                     GError **error);
  gboolean (* close_fn) (GFileEnumerator *enumerator,
                                     GCancellable *cancellable,
                                     GError **error);

  void (* next_files_async) (GFileEnumerator *enumerator,
                                     int num_files,
                                     int io_priority,
                                     GCancellable *cancellable,
                                     GAsyncReadyCallback callback,
                                     gpointer user_data);
  GList * (* next_files_finish) (GFileEnumerator *enumerator,
                                     GAsyncResult *res,
                                     GError **error);
  void (* close_async) (GFileEnumerator *enumerator,
                                     int io_priority,
                                     GCancellable *cancellable,
                                     GAsyncReadyCallback callback,
                                     gpointer user_data);
  gboolean (* close_finish) (GFileEnumerator *enumerator,
                                     GAsyncResult *res,
                                     GError **error);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
};

GType g_file_enumerator_get_type (void) __attribute__((__const__));

GFileInfo *g_file_enumerator_next_file (GFileEnumerator *enumerator,
      GCancellable *cancellable,
      GError **error);
gboolean g_file_enumerator_close (GFileEnumerator *enumerator,
      GCancellable *cancellable,
      GError **error);
void g_file_enumerator_next_files_async (GFileEnumerator *enumerator,
      int num_files,
      int io_priority,
      GCancellable *cancellable,
      GAsyncReadyCallback callback,
      gpointer user_data);
GList * g_file_enumerator_next_files_finish (GFileEnumerator *enumerator,
      GAsyncResult *result,
      GError **error);
void g_file_enumerator_close_async (GFileEnumerator *enumerator,
      int io_priority,
      GCancellable *cancellable,
      GAsyncReadyCallback callback,
      gpointer user_data);
gboolean g_file_enumerator_close_finish (GFileEnumerator *enumerator,
      GAsyncResult *result,
      GError **error);
gboolean g_file_enumerator_is_closed (GFileEnumerator *enumerator);
gboolean g_file_enumerator_has_pending (GFileEnumerator *enumerator);
void g_file_enumerator_set_pending (GFileEnumerator *enumerator,
      gboolean pending);
GFile * g_file_enumerator_get_container (GFileEnumerator *enumerator);


# 43 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfileicon.h" 1
# 30 "/usr/include/glib-2.0/gio/gfileicon.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 31 "/usr/include/glib-2.0/gio/gfileicon.h" 2


# 46 "/usr/include/glib-2.0/gio/gfileicon.h"
typedef struct _GFileIconClass GFileIconClass;

GType g_file_icon_get_type (void) __attribute__((__const__));

GIcon * g_file_icon_new (GFile *file);

GFile * g_file_icon_get_file (GFileIcon *icon);


# 44 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfileinfo.h" 1
# 30 "/usr/include/glib-2.0/gio/gfileinfo.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 31 "/usr/include/glib-2.0/gio/gfileinfo.h" 2


# 46 "/usr/include/glib-2.0/gio/gfileinfo.h"
typedef struct _GFileInfoClass GFileInfoClass;
# 713 "/usr/include/glib-2.0/gio/gfileinfo.h"
GType g_file_info_get_type (void) __attribute__((__const__));

GFileInfo * g_file_info_new (void);
GFileInfo * g_file_info_dup (GFileInfo *other);
void g_file_info_copy_into (GFileInfo *src_info,
         GFileInfo *dest_info);
gboolean g_file_info_has_attribute (GFileInfo *info,
         const char *attribute);
char ** g_file_info_list_attributes (GFileInfo *info,
         const char *name_space);
gboolean g_file_info_get_attribute_data (GFileInfo *info,
         const char *attribute,
         GFileAttributeType *type,
         gpointer *value_pp,
         GFileAttributeStatus *status);
GFileAttributeType g_file_info_get_attribute_type (GFileInfo *info,
         const char *attribute);
void g_file_info_remove_attribute (GFileInfo *info,
         const char *attribute);
GFileAttributeStatus g_file_info_get_attribute_status (GFileInfo *info,
         const char *attribute);
char * g_file_info_get_attribute_as_string (GFileInfo *info,
         const char *attribute);
const char * g_file_info_get_attribute_string (GFileInfo *info,
         const char *attribute);
const char * g_file_info_get_attribute_byte_string (GFileInfo *info,
         const char *attribute);
gboolean g_file_info_get_attribute_boolean (GFileInfo *info,
         const char *attribute);
guint32 g_file_info_get_attribute_uint32 (GFileInfo *info,
         const char *attribute);
gint32 g_file_info_get_attribute_int32 (GFileInfo *info,
         const char *attribute);
guint64 g_file_info_get_attribute_uint64 (GFileInfo *info,
         const char *attribute);
gint64 g_file_info_get_attribute_int64 (GFileInfo *info,
         const char *attribute);
GObject * g_file_info_get_attribute_object (GFileInfo *info,
         const char *attribute);

void g_file_info_set_attribute (GFileInfo *info,
         const char *attribute,
         GFileAttributeType type,
         gpointer value_p);
void g_file_info_set_attribute_string (GFileInfo *info,
         const char *attribute,
         const char *attr_value);
void g_file_info_set_attribute_byte_string (GFileInfo *info,
         const char *attribute,
         const char *attr_value);
void g_file_info_set_attribute_boolean (GFileInfo *info,
         const char *attribute,
         gboolean attr_value);
void g_file_info_set_attribute_uint32 (GFileInfo *info,
         const char *attribute,
         guint32 attr_value);
void g_file_info_set_attribute_int32 (GFileInfo *info,
         const char *attribute,
         gint32 attr_value);
void g_file_info_set_attribute_uint64 (GFileInfo *info,
         const char *attribute,
         guint64 attr_value);
void g_file_info_set_attribute_int64 (GFileInfo *info,
         const char *attribute,
         gint64 attr_value);
void g_file_info_set_attribute_object (GFileInfo *info,
         const char *attribute,
         GObject *attr_value);

void g_file_info_clear_status (GFileInfo *info);


GFileType g_file_info_get_file_type (GFileInfo *info);
gboolean g_file_info_get_is_hidden (GFileInfo *info);
gboolean g_file_info_get_is_backup (GFileInfo *info);
gboolean g_file_info_get_is_symlink (GFileInfo *info);
const char * g_file_info_get_name (GFileInfo *info);
const char * g_file_info_get_display_name (GFileInfo *info);
const char * g_file_info_get_edit_name (GFileInfo *info);
GIcon * g_file_info_get_icon (GFileInfo *info);
const char * g_file_info_get_content_type (GFileInfo *info);
goffset g_file_info_get_size (GFileInfo *info);
void g_file_info_get_modification_time (GFileInfo *info,
            GTimeVal *result);
const char * g_file_info_get_symlink_target (GFileInfo *info);
const char * g_file_info_get_etag (GFileInfo *info);
gint32 g_file_info_get_sort_order (GFileInfo *info);

void g_file_info_set_attribute_mask (GFileInfo *info,
            GFileAttributeMatcher *mask);
void g_file_info_unset_attribute_mask (GFileInfo *info);


void g_file_info_set_file_type (GFileInfo *info,
            GFileType type);
void g_file_info_set_is_hidden (GFileInfo *info,
            gboolean is_hidden);
void g_file_info_set_is_symlink (GFileInfo *info,
            gboolean is_symlink);
void g_file_info_set_name (GFileInfo *info,
            const char *name);
void g_file_info_set_display_name (GFileInfo *info,
            const char *display_name);
void g_file_info_set_edit_name (GFileInfo *info,
            const char *edit_name);
void g_file_info_set_icon (GFileInfo *info,
            GIcon *icon);
void g_file_info_set_content_type (GFileInfo *info,
            const char *content_type);
void g_file_info_set_size (GFileInfo *info,
            goffset size);
void g_file_info_set_modification_time (GFileInfo *info,
            GTimeVal *mtime);
void g_file_info_set_symlink_target (GFileInfo *info,
            const char *symlink_target);
void g_file_info_set_sort_order (GFileInfo *info,
            gint32 sort_order);

GFileAttributeMatcher *g_file_attribute_matcher_new (const char *attributes);
GFileAttributeMatcher *g_file_attribute_matcher_ref (GFileAttributeMatcher *matcher);
void g_file_attribute_matcher_unref (GFileAttributeMatcher *matcher);
gboolean g_file_attribute_matcher_matches (GFileAttributeMatcher *matcher,
        const char *attribute);
gboolean g_file_attribute_matcher_matches_only (GFileAttributeMatcher *matcher,
        const char *attribute);
gboolean g_file_attribute_matcher_enumerate_namespace (GFileAttributeMatcher *matcher,
             const char *ns);
const char * g_file_attribute_matcher_enumerate_next (GFileAttributeMatcher *matcher);


# 45 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfileinputstream.h" 1
# 30 "/usr/include/glib-2.0/gio/gfileinputstream.h"
# 1 "/usr/include/glib-2.0/gio/ginputstream.h" 1
# 31 "/usr/include/glib-2.0/gio/gfileinputstream.h" 2


# 49 "/usr/include/glib-2.0/gio/gfileinputstream.h"
typedef struct _GFileInputStreamClass GFileInputStreamClass;
typedef struct _GFileInputStreamPrivate GFileInputStreamPrivate;

struct _GFileInputStream
{
  GInputStream parent_instance;


  GFileInputStreamPrivate *priv;
};

struct _GFileInputStreamClass
{
  GInputStreamClass parent_class;

  goffset (* tell) (GFileInputStream *stream);
  gboolean (* can_seek) (GFileInputStream *stream);
  gboolean (* seek) (GFileInputStream *stream,
                                     goffset offset,
                                     GSeekType type,
                                     GCancellable *cancellable,
                                     GError **error);
  GFileInfo * (* query_info) (GFileInputStream *stream,
                                     const char *attributes,
                                     GCancellable *cancellable,
                                     GError **error);
  void (* query_info_async) (GFileInputStream *stream,
                                     const char *attributes,
                                     int io_priority,
                                     GCancellable *cancellable,
                                     GAsyncReadyCallback callback,
                                     gpointer user_data);
  GFileInfo * (* query_info_finish) (GFileInputStream *stream,
                                     GAsyncResult *res,
                                     GError **error);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

GType g_file_input_stream_get_type (void) __attribute__((__const__));

GFileInfo *g_file_input_stream_query_info (GFileInputStream *stream,
        const char *attributes,
        GCancellable *cancellable,
        GError **error);
void g_file_input_stream_query_info_async (GFileInputStream *stream,
        const char *attributes,
        int io_priority,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
GFileInfo *g_file_input_stream_query_info_finish (GFileInputStream *stream,
        GAsyncResult *result,
        GError **error);


# 46 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfilemonitor.h" 1
# 30 "/usr/include/glib-2.0/gio/gfilemonitor.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 31 "/usr/include/glib-2.0/gio/gfilemonitor.h" 2


# 41 "/usr/include/glib-2.0/gio/gfilemonitor.h"
typedef struct _GFileMonitorClass GFileMonitorClass;
typedef struct _GFileMonitorPrivate GFileMonitorPrivate;






struct _GFileMonitor
{
  GObject parent_instance;


  GFileMonitorPrivate *priv;
};

struct _GFileMonitorClass
{
  GObjectClass parent_class;


  void (* changed) (GFileMonitor *monitor,
                        GFile *file,
                        GFile *other_file,
                        GFileMonitorEvent event_type);


  gboolean (* cancel) (GFileMonitor *monitor);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

GType g_file_monitor_get_type (void) __attribute__((__const__));

gboolean g_file_monitor_cancel (GFileMonitor *monitor);
gboolean g_file_monitor_is_cancelled (GFileMonitor *monitor);
void g_file_monitor_set_rate_limit (GFileMonitor *monitor,
                                        int limit_msecs);



void g_file_monitor_emit_event (GFileMonitor *monitor,
                                        GFile *child,
                                        GFile *other_file,
                                        GFileMonitorEvent event_type);


# 47 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfilenamecompleter.h" 1
# 30 "/usr/include/glib-2.0/gio/gfilenamecompleter.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 31 "/usr/include/glib-2.0/gio/gfilenamecompleter.h" 2


# 46 "/usr/include/glib-2.0/gio/gfilenamecompleter.h"
typedef struct _GFilenameCompleterClass GFilenameCompleterClass;

struct _GFilenameCompleterClass
{
  GObjectClass parent_class;



  void (* got_completion_data) (GFilenameCompleter *filename_completer);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
};

GType g_filename_completer_get_type (void) __attribute__((__const__));

GFilenameCompleter *g_filename_completer_new (void);

char * g_filename_completer_get_completion_suffix (GFilenameCompleter *completer,
                                                                const char *initial_text);
char ** g_filename_completer_get_completions (GFilenameCompleter *completer,
                                                                const char *initial_text);
void g_filename_completer_set_dirs_only (GFilenameCompleter *completer,
                                                                gboolean dirs_only);


# 48 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfileoutputstream.h" 1
# 30 "/usr/include/glib-2.0/gio/gfileoutputstream.h"
# 1 "/usr/include/glib-2.0/gio/goutputstream.h" 1
# 31 "/usr/include/glib-2.0/gio/gfileoutputstream.h" 2


# 49 "/usr/include/glib-2.0/gio/gfileoutputstream.h"
typedef struct _GFileOutputStreamClass GFileOutputStreamClass;
typedef struct _GFileOutputStreamPrivate GFileOutputStreamPrivate;

struct _GFileOutputStream
{
  GOutputStream parent_instance;


  GFileOutputStreamPrivate *priv;
};

struct _GFileOutputStreamClass
{
  GOutputStreamClass parent_class;

  goffset (* tell) (GFileOutputStream *stream);
  gboolean (* can_seek) (GFileOutputStream *stream);
  gboolean (* seek) (GFileOutputStream *stream,
                                     goffset offset,
                                     GSeekType type,
                                     GCancellable *cancellable,
                                     GError **error);
  gboolean (* can_truncate) (GFileOutputStream *stream);
  gboolean (* truncate_fn) (GFileOutputStream *stream,
                                     goffset size,
                                     GCancellable *cancellable,
                                     GError **error);
  GFileInfo * (* query_info) (GFileOutputStream *stream,
                                     const char *attributes,
                                     GCancellable *cancellable,
                                     GError **error);
  void (* query_info_async) (GFileOutputStream *stream,
                                     const char *attributes,
                                     int io_priority,
                                     GCancellable *cancellable,
                                     GAsyncReadyCallback callback,
                                     gpointer user_data);
  GFileInfo * (* query_info_finish) (GFileOutputStream *stream,
                                     GAsyncResult *res,
                                     GError **error);
  char * (* get_etag) (GFileOutputStream *stream);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

GType g_file_output_stream_get_type (void) __attribute__((__const__));


GFileInfo *g_file_output_stream_query_info (GFileOutputStream *stream,
                                                   const char *attributes,
                                                   GCancellable *cancellable,
                                                   GError **error);
void g_file_output_stream_query_info_async (GFileOutputStream *stream,
         const char *attributes,
         int io_priority,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data);
GFileInfo *g_file_output_stream_query_info_finish (GFileOutputStream *stream,
         GAsyncResult *result,
         GError **error);
char * g_file_output_stream_get_etag (GFileOutputStream *stream);


# 49 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfilterinputstream.h" 1
# 50 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfilteroutputstream.h" 1
# 51 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gicon.h" 1
# 52 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/ginputstream.h" 1
# 53 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gioenums.h" 1
# 54 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gioenumtypes.h" 1
# 9 "/usr/include/glib-2.0/gio/gioenumtypes.h"



GType g_app_info_create_flags_get_type (void) __attribute__((__const__));

GType g_data_stream_byte_order_get_type (void) __attribute__((__const__));

GType g_data_stream_newline_type_get_type (void) __attribute__((__const__));

GType g_file_attribute_type_get_type (void) __attribute__((__const__));

GType g_file_attribute_info_flags_get_type (void) __attribute__((__const__));

GType g_file_attribute_status_get_type (void) __attribute__((__const__));

GType g_file_query_info_flags_get_type (void) __attribute__((__const__));

GType g_file_create_flags_get_type (void) __attribute__((__const__));

GType g_mount_mount_flags_get_type (void) __attribute__((__const__));

GType g_mount_unmount_flags_get_type (void) __attribute__((__const__));

GType g_file_copy_flags_get_type (void) __attribute__((__const__));

GType g_file_monitor_flags_get_type (void) __attribute__((__const__));

GType g_file_type_get_type (void) __attribute__((__const__));

GType g_filesystem_preview_type_get_type (void) __attribute__((__const__));

GType g_file_monitor_event_get_type (void) __attribute__((__const__));

GType g_io_error_enum_get_type (void) __attribute__((__const__));

GType g_ask_password_flags_get_type (void) __attribute__((__const__));

GType g_password_save_get_type (void) __attribute__((__const__));

GType g_mount_operation_result_get_type (void) __attribute__((__const__));

GType g_output_stream_splice_flags_get_type (void) __attribute__((__const__));

GType g_emblem_origin_get_type (void) __attribute__((__const__));


# 55 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gioerror.h" 1
# 31 "/usr/include/glib-2.0/gio/gioerror.h"
# 1 "/usr/include/glib-2.0/gio/gioenums.h" 1
# 32 "/usr/include/glib-2.0/gio/gioerror.h" 2


# 43 "/usr/include/glib-2.0/gio/gioerror.h"
GQuark g_io_error_quark (void);
GIOErrorEnum g_io_error_from_errno (gint err_no);


# 56 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/giomodule.h" 1
# 30 "/usr/include/glib-2.0/gio/giomodule.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 31 "/usr/include/glib-2.0/gio/giomodule.h" 2
# 1 "/usr/include/glib-2.0/gmodule.h" 1
# 32 "/usr/include/glib-2.0/gmodule.h"

# 44 "/usr/include/glib-2.0/gmodule.h"
typedef enum
{
  G_MODULE_BIND_LAZY = 1 << 0,
  G_MODULE_BIND_LOCAL = 1 << 1,
  G_MODULE_BIND_MASK = 0x03
} GModuleFlags;

typedef struct _GModule GModule;
typedef const gchar* (*GModuleCheckInit) (GModule *module);
typedef void (*GModuleUnload) (GModule *module);







gboolean g_module_supported (void) __attribute__((__const__));


GModule* g_module_open (const gchar *file_name,
           GModuleFlags flags);


gboolean g_module_close (GModule *module);


void g_module_make_resident (GModule *module);


const gchar* g_module_error (void);


gboolean g_module_symbol (GModule *module,
           const gchar *symbol_name,
           gpointer *symbol);


const gchar* g_module_name (GModule *module);
# 95 "/usr/include/glib-2.0/gmodule.h"
gchar* g_module_build_path (const gchar *directory,
           const gchar *module_name);



# 32 "/usr/include/glib-2.0/gio/giomodule.h" 2


# 47 "/usr/include/glib-2.0/gio/giomodule.h"
typedef struct _GIOModuleClass GIOModuleClass;

GType g_io_module_get_type (void) __attribute__((__const__));
GIOModule *g_io_module_new (const gchar *filename);

GList *g_io_modules_load_all_in_directory (const gchar *dirname);

GIOExtensionPoint *g_io_extension_point_register (const char *name);
GIOExtensionPoint *g_io_extension_point_lookup (const char *name);
void g_io_extension_point_set_required_type (GIOExtensionPoint *extension_point,
              GType type);
GType g_io_extension_point_get_required_type (GIOExtensionPoint *extension_point);
GList *g_io_extension_point_get_extensions (GIOExtensionPoint *extension_point);
GIOExtension * g_io_extension_point_get_extension_by_name (GIOExtensionPoint *extension_point,
              const char *name);
GIOExtension * g_io_extension_point_implement (const char *extension_point_name,
              GType type,
              const char *extension_name,
              gint priority);

GType g_io_extension_get_type (GIOExtension *extension);
const char * g_io_extension_get_name (GIOExtension *extension);
gint g_io_extension_get_priority (GIOExtension *extension);
GTypeClass* g_io_extension_ref_class (GIOExtension *extension);
# 83 "/usr/include/glib-2.0/gio/giomodule.h"
void g_io_module_load (GIOModule *module);
# 93 "/usr/include/glib-2.0/gio/giomodule.h"
void g_io_module_unload (GIOModule *module);


# 57 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gioscheduler.h" 1
# 30 "/usr/include/glib-2.0/gio/gioscheduler.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 31 "/usr/include/glib-2.0/gio/gioscheduler.h" 2




void g_io_scheduler_push_job (GIOSchedulerJobFunc job_func,
          gpointer user_data,
          GDestroyNotify notify,
          gint io_priority,
          GCancellable *cancellable);
void g_io_scheduler_cancel_all_jobs (void);
gboolean g_io_scheduler_job_send_to_mainloop (GIOSchedulerJob *job,
          GSourceFunc func,
          gpointer user_data,
          GDestroyNotify notify);
void g_io_scheduler_job_send_to_mainloop_async (GIOSchedulerJob *job,
          GSourceFunc func,
          gpointer user_data,
          GDestroyNotify notify);


# 58 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gloadableicon.h" 1
# 30 "/usr/include/glib-2.0/gio/gloadableicon.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 31 "/usr/include/glib-2.0/gio/gloadableicon.h" 2


# 45 "/usr/include/glib-2.0/gio/gloadableicon.h"
typedef struct _GLoadableIconIface GLoadableIconIface;
# 56 "/usr/include/glib-2.0/gio/gloadableicon.h"
struct _GLoadableIconIface
{
  GTypeInterface g_iface;



  GInputStream * (* load) (GLoadableIcon *icon,
                                  int size,
                                  char **type,
                                  GCancellable *cancellable,
                                  GError **error);
  void (* load_async) (GLoadableIcon *icon,
                                  int size,
                                  GCancellable *cancellable,
                                  GAsyncReadyCallback callback,
                                  gpointer user_data);
  GInputStream * (* load_finish) (GLoadableIcon *icon,
                                  GAsyncResult *res,
                                  char **type,
                                  GError **error);
};

GType g_loadable_icon_get_type (void) __attribute__((__const__));

GInputStream *g_loadable_icon_load (GLoadableIcon *icon,
        int size,
        char **type,
        GCancellable *cancellable,
        GError **error);
void g_loadable_icon_load_async (GLoadableIcon *icon,
        int size,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
GInputStream *g_loadable_icon_load_finish (GLoadableIcon *icon,
        GAsyncResult *res,
        char **type,
        GError **error);


# 59 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gmemoryinputstream.h" 1
# 30 "/usr/include/glib-2.0/gio/gmemoryinputstream.h"
# 1 "/usr/include/glib-2.0/gio/ginputstream.h" 1
# 31 "/usr/include/glib-2.0/gio/gmemoryinputstream.h" 2


# 46 "/usr/include/glib-2.0/gio/gmemoryinputstream.h"
typedef struct _GMemoryInputStreamClass GMemoryInputStreamClass;
typedef struct _GMemoryInputStreamPrivate GMemoryInputStreamPrivate;

struct _GMemoryInputStream
{
  GInputStream parent_instance;


  GMemoryInputStreamPrivate *priv;
};

struct _GMemoryInputStreamClass
{
  GInputStreamClass parent_class;


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};


GType g_memory_input_stream_get_type (void) __attribute__((__const__));
GInputStream * g_memory_input_stream_new (void);
GInputStream * g_memory_input_stream_new_from_data (const void *data,
                                                    gssize len,
                                                    GDestroyNotify destroy);
void g_memory_input_stream_add_data (GMemoryInputStream *stream,
                                                    const void *data,
                                                    gssize len,
                                                    GDestroyNotify destroy);


# 60 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gmemoryoutputstream.h" 1
# 30 "/usr/include/glib-2.0/gio/gmemoryoutputstream.h"
# 1 "/usr/include/glib-2.0/gio/goutputstream.h" 1
# 31 "/usr/include/glib-2.0/gio/gmemoryoutputstream.h" 2


# 46 "/usr/include/glib-2.0/gio/gmemoryoutputstream.h"
typedef struct _GMemoryOutputStreamClass GMemoryOutputStreamClass;
typedef struct _GMemoryOutputStreamPrivate GMemoryOutputStreamPrivate;

struct _GMemoryOutputStream
{
  GOutputStream parent_instance;


  GMemoryOutputStreamPrivate *priv;
};

struct _GMemoryOutputStreamClass
{
  GOutputStreamClass parent_class;



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
# 82 "/usr/include/glib-2.0/gio/gmemoryoutputstream.h"
typedef gpointer (* GReallocFunc) (gpointer data,
                                   gsize size);

GType g_memory_output_stream_get_type (void) __attribute__((__const__));

GOutputStream *g_memory_output_stream_new (gpointer data,
                                                     gsize len,
                                                     GReallocFunc realloc_fn,
                                                     GDestroyNotify destroy);
gpointer g_memory_output_stream_get_data (GMemoryOutputStream *ostream);
gsize g_memory_output_stream_get_size (GMemoryOutputStream *ostream);
gsize g_memory_output_stream_get_data_size (GMemoryOutputStream *ostream);


# 61 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gmount.h" 1
# 31 "/usr/include/glib-2.0/gio/gmount.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 32 "/usr/include/glib-2.0/gio/gmount.h" 2








typedef struct _GMountIface GMountIface;
# 69 "/usr/include/glib-2.0/gio/gmount.h"
struct _GMountIface
{
  GTypeInterface g_iface;



  void (* changed) (GMount *mount);
  void (* unmounted) (GMount *mount);



  GFile * (* get_root) (GMount *mount);
  char * (* get_name) (GMount *mount);
  GIcon * (* get_icon) (GMount *mount);
  char * (* get_uuid) (GMount *mount);
  GVolume * (* get_volume) (GMount *mount);
  GDrive * (* get_drive) (GMount *mount);
  gboolean (* can_unmount) (GMount *mount);
  gboolean (* can_eject) (GMount *mount);

  void (* unmount) (GMount *mount,
                                             GMountUnmountFlags flags,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* unmount_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);

  void (* eject) (GMount *mount,
                                             GMountUnmountFlags flags,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* eject_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);

  void (* remount) (GMount *mount,
                                             GMountMountFlags flags,
                                             GMountOperation *mount_operation,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* remount_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);

  void (* guess_content_type) (GMount *mount,
                                             gboolean force_rescan,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gchar ** (* guess_content_type_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);
  gchar ** (* guess_content_type_sync) (GMount *mount,
                                             gboolean force_rescan,
                                             GCancellable *cancellable,
                                             GError **error);
};

GType g_mount_get_type (void) __attribute__((__const__));

GFile * g_mount_get_root (GMount *mount);
char * g_mount_get_name (GMount *mount);
GIcon * g_mount_get_icon (GMount *mount);
char * g_mount_get_uuid (GMount *mount);
GVolume * g_mount_get_volume (GMount *mount);
GDrive * g_mount_get_drive (GMount *mount);
gboolean g_mount_can_unmount (GMount *mount);
gboolean g_mount_can_eject (GMount *mount);

void g_mount_unmount (GMount *mount,
                                               GMountUnmountFlags flags,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
gboolean g_mount_unmount_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);

void g_mount_eject (GMount *mount,
                                               GMountUnmountFlags flags,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
gboolean g_mount_eject_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);

void g_mount_remount (GMount *mount,
                                               GMountMountFlags flags,
                                               GMountOperation *mount_operation,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
gboolean g_mount_remount_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);

void g_mount_guess_content_type (GMount *mount,
                                               gboolean force_rescan,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
gchar ** g_mount_guess_content_type_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);
gchar ** g_mount_guess_content_type_sync (GMount *mount,
                                               gboolean force_rescan,
                                               GCancellable *cancellable,
                                               GError **error);

gboolean g_mount_is_shadowed (GMount *mount);
void g_mount_shadow (GMount *mount);
void g_mount_unshadow (GMount *mount);


# 62 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gmountoperation.h" 1
# 30 "/usr/include/glib-2.0/gio/gmountoperation.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 31 "/usr/include/glib-2.0/gio/gmountoperation.h" 2


# 47 "/usr/include/glib-2.0/gio/gmountoperation.h"
typedef struct _GMountOperationClass GMountOperationClass;
typedef struct _GMountOperationPrivate GMountOperationPrivate;

struct _GMountOperation
{
  GObject parent_instance;

  GMountOperationPrivate *priv;
};

struct _GMountOperationClass
{
  GObjectClass parent_class;



  void (* ask_password) (GMountOperation *op,
    const char *message,
    const char *default_user,
    const char *default_domain,
    GAskPasswordFlags flags);

  void (* ask_question) (GMountOperation *op,
    const char *message,
    const char *choices[]);

  void (* reply) (GMountOperation *op,
    GMountOperationResult result);

  void (* aborted) (GMountOperation *op);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
  void (*_g_reserved8) (void);
  void (*_g_reserved9) (void);
  void (*_g_reserved10) (void);
  void (*_g_reserved11) (void);
};

GType g_mount_operation_get_type (void) __attribute__((__const__));
GMountOperation * g_mount_operation_new (void);

const char * g_mount_operation_get_username (GMountOperation *op);
void g_mount_operation_set_username (GMountOperation *op,
         const char *username);
const char * g_mount_operation_get_password (GMountOperation *op);
void g_mount_operation_set_password (GMountOperation *op,
         const char *password);
gboolean g_mount_operation_get_anonymous (GMountOperation *op);
void g_mount_operation_set_anonymous (GMountOperation *op,
         gboolean anonymous);
const char * g_mount_operation_get_domain (GMountOperation *op);
void g_mount_operation_set_domain (GMountOperation *op,
         const char *domain);
GPasswordSave g_mount_operation_get_password_save (GMountOperation *op);
void g_mount_operation_set_password_save (GMountOperation *op,
         GPasswordSave save);
int g_mount_operation_get_choice (GMountOperation *op);
void g_mount_operation_set_choice (GMountOperation *op,
         int choice);
void g_mount_operation_reply (GMountOperation *op,
         GMountOperationResult result);


# 63 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gnativevolumemonitor.h" 1



# 1 "/usr/include/glib-2.0/gio/gvolumemonitor.h" 1
# 33 "/usr/include/glib-2.0/gio/gvolumemonitor.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 34 "/usr/include/glib-2.0/gio/gvolumemonitor.h" 2


# 58 "/usr/include/glib-2.0/gio/gvolumemonitor.h"
typedef struct _GVolumeMonitorClass GVolumeMonitorClass;

struct _GVolumeMonitor
{
  GObject parent_instance;


  gpointer priv;
};

struct _GVolumeMonitorClass
{
  GObjectClass parent_class;



  void (* volume_added) (GVolumeMonitor *volume_monitor,
                                      GVolume *volume);
  void (* volume_removed) (GVolumeMonitor *volume_monitor,
                                      GVolume *volume);
  void (* volume_changed) (GVolumeMonitor *volume_monitor,
                                      GVolume *volume);

  void (* mount_added) (GVolumeMonitor *volume_monitor,
                                      GMount *mount);
  void (* mount_removed) (GVolumeMonitor *volume_monitor,
                                      GMount *mount);
  void (* mount_pre_unmount) (GVolumeMonitor *volume_monitor,
                                      GMount *mount);
  void (* mount_changed) (GVolumeMonitor *volume_monitor,
                                      GMount *mount);

  void (* drive_connected) (GVolumeMonitor *volume_monitor,
                                      GDrive *drive);
  void (* drive_disconnected) (GVolumeMonitor *volume_monitor,
                                      GDrive *drive);
  void (* drive_changed) (GVolumeMonitor *volume_monitor,
                                      GDrive *drive);



  gboolean (* is_supported) (void);

  GList * (* get_connected_drives) (GVolumeMonitor *volume_monitor);
  GList * (* get_volumes) (GVolumeMonitor *volume_monitor);
  GList * (* get_mounts) (GVolumeMonitor *volume_monitor);

  GVolume * (* get_volume_for_uuid) (GVolumeMonitor *volume_monitor,
                                      const char *uuid);

  GMount * (* get_mount_for_uuid) (GVolumeMonitor *volume_monitor,
                                      const char *uuid);



  GVolume * (* adopt_orphan_mount) (GMount *mount,
                                      GVolumeMonitor *volume_monitor);


  void (* drive_eject_button) (GVolumeMonitor *volume_monitor,
                                      GDrive *drive);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
};

GType g_volume_monitor_get_type (void) __attribute__((__const__));

GVolumeMonitor *g_volume_monitor_get (void);
GList * g_volume_monitor_get_connected_drives (GVolumeMonitor *volume_monitor);
GList * g_volume_monitor_get_volumes (GVolumeMonitor *volume_monitor);
GList * g_volume_monitor_get_mounts (GVolumeMonitor *volume_monitor);
GVolume * g_volume_monitor_get_volume_for_uuid (GVolumeMonitor *volume_monitor,
                                                       const char *uuid);
GMount * g_volume_monitor_get_mount_for_uuid (GVolumeMonitor *volume_monitor,
                                                       const char *uuid);


GVolume * g_volume_monitor_adopt_orphan_mount (GMount *mount);



# 5 "/usr/include/glib-2.0/gio/gnativevolumemonitor.h" 2


# 16 "/usr/include/glib-2.0/gio/gnativevolumemonitor.h"
typedef struct _GNativeVolumeMonitor GNativeVolumeMonitor;
typedef struct _GNativeVolumeMonitorClass GNativeVolumeMonitorClass;

struct _GNativeVolumeMonitor
{
  GVolumeMonitor parent_instance;
};

struct _GNativeVolumeMonitorClass
{
  GVolumeMonitorClass parent_class;

  GMount * (* get_mount_for_mount_path) (const char *mount_path,
                                         GCancellable *cancellable);
};

GType g_native_volume_monitor_get_type (void) __attribute__((__const__));


# 64 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/goutputstream.h" 1
# 65 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gseekable.h" 1
# 30 "/usr/include/glib-2.0/gio/gseekable.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 31 "/usr/include/glib-2.0/gio/gseekable.h" 2


# 44 "/usr/include/glib-2.0/gio/gseekable.h"
typedef struct _GSeekableIface GSeekableIface;
# 57 "/usr/include/glib-2.0/gio/gseekable.h"
struct _GSeekableIface
{
  GTypeInterface g_iface;



  goffset (* tell) (GSeekable *seekable);

  gboolean (* can_seek) (GSeekable *seekable);
  gboolean (* seek) (GSeekable *seekable,
      goffset offset,
      GSeekType type,
      GCancellable *cancellable,
      GError **error);

  gboolean (* can_truncate) (GSeekable *seekable);
  gboolean (* truncate_fn) (GSeekable *seekable,
      goffset offset,
      GCancellable *cancellable,
      GError **error);


};

GType g_seekable_get_type (void) __attribute__((__const__));

goffset g_seekable_tell (GSeekable *seekable);
gboolean g_seekable_can_seek (GSeekable *seekable);
gboolean g_seekable_seek (GSeekable *seekable,
      goffset offset,
      GSeekType type,
      GCancellable *cancellable,
      GError **error);
gboolean g_seekable_can_truncate (GSeekable *seekable);
gboolean g_seekable_truncate (GSeekable *seekable,
      goffset offset,
      GCancellable *cancellable,
      GError **error);


# 66 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsimpleasyncresult.h" 1
# 30 "/usr/include/glib-2.0/gio/gsimpleasyncresult.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 31 "/usr/include/glib-2.0/gio/gsimpleasyncresult.h" 2


# 46 "/usr/include/glib-2.0/gio/gsimpleasyncresult.h"
typedef struct _GSimpleAsyncResultClass GSimpleAsyncResultClass;


GType g_simple_async_result_get_type (void) __attribute__((__const__));

GSimpleAsyncResult *g_simple_async_result_new (GObject *source_object,
           GAsyncReadyCallback callback,
           gpointer user_data,
           gpointer source_tag);
GSimpleAsyncResult *g_simple_async_result_new_error (GObject *source_object,
           GAsyncReadyCallback callback,
           gpointer user_data,
           GQuark domain,
           gint code,
           const char *format,
           ...) __attribute__((__format__ (__printf__, 6, 7)));
GSimpleAsyncResult *g_simple_async_result_new_from_error (GObject *source_object,
           GAsyncReadyCallback callback,
           gpointer user_data,
           GError *error);

void g_simple_async_result_set_op_res_gpointer (GSimpleAsyncResult *simple,
                                                               gpointer op_res,
                                                               GDestroyNotify destroy_op_res);
gpointer g_simple_async_result_get_op_res_gpointer (GSimpleAsyncResult *simple);

void g_simple_async_result_set_op_res_gssize (GSimpleAsyncResult *simple,
                                                               gssize op_res);
gssize g_simple_async_result_get_op_res_gssize (GSimpleAsyncResult *simple);

void g_simple_async_result_set_op_res_gboolean (GSimpleAsyncResult *simple,
                                                               gboolean op_res);
gboolean g_simple_async_result_get_op_res_gboolean (GSimpleAsyncResult *simple);



gpointer g_simple_async_result_get_source_tag (GSimpleAsyncResult *simple);
void g_simple_async_result_set_handle_cancellation (GSimpleAsyncResult *simple,
           gboolean handle_cancellation);
void g_simple_async_result_complete (GSimpleAsyncResult *simple);
void g_simple_async_result_complete_in_idle (GSimpleAsyncResult *simple);
void g_simple_async_result_run_in_thread (GSimpleAsyncResult *simple,
           GSimpleAsyncThreadFunc func,
           int io_priority,
           GCancellable *cancellable);
void g_simple_async_result_set_from_error (GSimpleAsyncResult *simple,
           GError *error);
gboolean g_simple_async_result_propagate_error (GSimpleAsyncResult *simple,
           GError **dest);
void g_simple_async_result_set_error (GSimpleAsyncResult *simple,
           GQuark domain,
           gint code,
           const char *format,
           ...) __attribute__((__format__ (__printf__, 4, 5)));
void g_simple_async_result_set_error_va (GSimpleAsyncResult *simple,
           GQuark domain,
           gint code,
           const char *format,
           va_list args);
gboolean g_simple_async_result_is_valid (GAsyncResult *result,
                                                            GObject *source,
                                                            gpointer source_tag);

void g_simple_async_report_error_in_idle (GObject *object,
        GAsyncReadyCallback callback,
        gpointer user_data,
        GQuark domain,
        gint code,
        const char *format,
        ...);
void g_simple_async_report_gerror_in_idle (GObject *object,
        GAsyncReadyCallback callback,
        gpointer user_data,
        GError *error);


# 67 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gthemedicon.h" 1
# 30 "/usr/include/glib-2.0/gio/gthemedicon.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 31 "/usr/include/glib-2.0/gio/gthemedicon.h" 2


# 46 "/usr/include/glib-2.0/gio/gthemedicon.h"
typedef struct _GThemedIconClass GThemedIconClass;

GType g_themed_icon_get_type (void) __attribute__((__const__));

GIcon *g_themed_icon_new (const char *iconname);
GIcon *g_themed_icon_new_with_default_fallbacks (const char *iconname);
GIcon *g_themed_icon_new_from_names (char **iconnames,
                                                 int len);
void g_themed_icon_prepend_name (GThemedIcon *icon,
                                                 const char *iconname);
void g_themed_icon_append_name (GThemedIcon *icon,
                                                 const char *iconname);

const char * const *g_themed_icon_get_names (GThemedIcon *icon);


# 68 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gvfs.h" 1
# 30 "/usr/include/glib-2.0/gio/gvfs.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 31 "/usr/include/glib-2.0/gio/gvfs.h" 2


# 54 "/usr/include/glib-2.0/gio/gvfs.h"
typedef struct _GVfsClass GVfsClass;

struct _GVfs
{
  GObject parent_instance;
};

struct _GVfsClass
{
  GObjectClass parent_class;



  gboolean (* is_active) (GVfs *vfs);
  GFile * (* get_file_for_path) (GVfs *vfs,
                                                       const char *path);
  GFile * (* get_file_for_uri) (GVfs *vfs,
                                                       const char *uri);
  const gchar * const * (* get_supported_uri_schemes) (GVfs *vfs);
  GFile * (* parse_name) (GVfs *vfs,
                                                       const char *parse_name);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
  void (*_g_reserved8) (void);
  void (*_g_reserved9) (void);
  void (*_g_reserved10) (void);
  void (*_g_reserved11) (void);
  void (*_g_reserved12) (void);
};

GType g_vfs_get_type (void) __attribute__((__const__));

gboolean g_vfs_is_active (GVfs *vfs);
GFile * g_vfs_get_file_for_path (GVfs *vfs,
                                                       const char *path);
GFile * g_vfs_get_file_for_uri (GVfs *vfs,
                                                       const char *uri);
const gchar* const * g_vfs_get_supported_uri_schemes (GVfs *vfs);

GFile * g_vfs_parse_name (GVfs *vfs,
                                                       const char *parse_name);

GVfs * g_vfs_get_default (void);
GVfs * g_vfs_get_local (void);


# 69 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gvolume.h" 1
# 31 "/usr/include/glib-2.0/gio/gvolume.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 32 "/usr/include/glib-2.0/gio/gvolume.h" 2


# 105 "/usr/include/glib-2.0/gio/gvolume.h"
typedef struct _GVolumeIface GVolumeIface;

struct _GVolumeIface
{
  GTypeInterface g_iface;



  void (* changed) (GVolume *volume);
  void (* removed) (GVolume *volume);



  char * (* get_name) (GVolume *volume);
  GIcon * (* get_icon) (GVolume *volume);
  char * (* get_uuid) (GVolume *volume);
  GDrive * (* get_drive) (GVolume *volume);
  GMount * (* get_mount) (GVolume *volume);
  gboolean (* can_mount) (GVolume *volume);
  gboolean (* can_eject) (GVolume *volume);
  void (* mount_fn) (GVolume *volume,
                                         GMountMountFlags flags,
                                         GMountOperation *mount_operation,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* mount_finish) (GVolume *volume,
                                         GAsyncResult *result,
                                         GError **error);
  void (* eject) (GVolume *volume,
                                         GMountUnmountFlags flags,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* eject_finish) (GVolume *volume,
                                         GAsyncResult *result,
                                         GError **error);

  char * (* get_identifier) (GVolume *volume,
                                         const char *kind);
  char ** (* enumerate_identifiers) (GVolume *volume);

  gboolean (* should_automount) (GVolume *volume);

  GFile * (* get_activation_root) (GVolume *volume);

};

GType g_volume_get_type (void) __attribute__((__const__));

char * g_volume_get_name (GVolume *volume);
GIcon * g_volume_get_icon (GVolume *volume);
char * g_volume_get_uuid (GVolume *volume);
GDrive * g_volume_get_drive (GVolume *volume);
GMount * g_volume_get_mount (GVolume *volume);
gboolean g_volume_can_mount (GVolume *volume);
gboolean g_volume_can_eject (GVolume *volume);
gboolean g_volume_should_automount (GVolume *volume);
void g_volume_mount (GVolume *volume,
      GMountMountFlags flags,
      GMountOperation *mount_operation,
      GCancellable *cancellable,
      GAsyncReadyCallback callback,
      gpointer user_data);
gboolean g_volume_mount_finish (GVolume *volume,
      GAsyncResult *result,
      GError **error);
void g_volume_eject (GVolume *volume,
      GMountUnmountFlags flags,
      GCancellable *cancellable,
      GAsyncReadyCallback callback,
      gpointer user_data);
gboolean g_volume_eject_finish (GVolume *volume,
      GAsyncResult *result,
      GError **error);
char * g_volume_get_identifier (GVolume *volume,
      const char *kind);
char ** g_volume_enumerate_identifiers (GVolume *volume);

GFile * g_volume_get_activation_root (GVolume *volume);


# 70 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gvolumemonitor.h" 1
# 71 "/usr/include/glib-2.0/gio/gio.h" 2
# 31 "/usr/include/gtk-2.0/gdk/gdkapplaunchcontext.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkscreen.h" 1
# 31 "/usr/include/gtk-2.0/gdk/gdkscreen.h"
# 1 "/usr/include/cairo/cairo.h" 1
# 41 "/usr/include/cairo/cairo.h"
# 1 "/usr/include/cairo/cairo-version.h" 1
# 42 "/usr/include/cairo/cairo.h" 2
# 1 "/usr/include/cairo/cairo-features.h" 1
# 43 "/usr/include/cairo/cairo.h" 2
# 1 "/usr/include/cairo/cairo-deprecated.h" 1
# 44 "/usr/include/cairo/cairo.h" 2
# 61 "/usr/include/cairo/cairo.h"

# 85 "/usr/include/cairo/cairo.h"
 int
cairo_version (void);

 const char*
cairo_version_string (void);
# 105 "/usr/include/cairo/cairo.h"
typedef int cairo_bool_t;
# 120 "/usr/include/cairo/cairo.h"
typedef struct _cairo cairo_t;
# 138 "/usr/include/cairo/cairo.h"
typedef struct _cairo_surface cairo_surface_t;
# 157 "/usr/include/cairo/cairo.h"
typedef struct _cairo_matrix {
    double xx; double yx;
    double xy; double yy;
    double x0; double y0;
} cairo_matrix_t;
# 182 "/usr/include/cairo/cairo.h"
typedef struct _cairo_pattern cairo_pattern_t;
# 192 "/usr/include/cairo/cairo.h"
typedef void (*cairo_destroy_func_t) (void *data);
# 204 "/usr/include/cairo/cairo.h"
typedef struct _cairo_user_data_key {
    int unused;
} cairo_user_data_key_t;
# 251 "/usr/include/cairo/cairo.h"
typedef enum _cairo_status {
    CAIRO_STATUS_SUCCESS = 0,
    CAIRO_STATUS_NO_MEMORY,
    CAIRO_STATUS_INVALID_RESTORE,
    CAIRO_STATUS_INVALID_POP_GROUP,
    CAIRO_STATUS_NO_CURRENT_POINT,
    CAIRO_STATUS_INVALID_MATRIX,
    CAIRO_STATUS_INVALID_STATUS,
    CAIRO_STATUS_NULL_POINTER,
    CAIRO_STATUS_INVALID_STRING,
    CAIRO_STATUS_INVALID_PATH_DATA,
    CAIRO_STATUS_READ_ERROR,
    CAIRO_STATUS_WRITE_ERROR,
    CAIRO_STATUS_SURFACE_FINISHED,
    CAIRO_STATUS_SURFACE_TYPE_MISMATCH,
    CAIRO_STATUS_PATTERN_TYPE_MISMATCH,
    CAIRO_STATUS_INVALID_CONTENT,
    CAIRO_STATUS_INVALID_FORMAT,
    CAIRO_STATUS_INVALID_VISUAL,
    CAIRO_STATUS_FILE_NOT_FOUND,
    CAIRO_STATUS_INVALID_DASH,
    CAIRO_STATUS_INVALID_DSC_COMMENT,
    CAIRO_STATUS_INVALID_INDEX,
    CAIRO_STATUS_CLIP_NOT_REPRESENTABLE,
    CAIRO_STATUS_TEMP_FILE_ERROR,
    CAIRO_STATUS_INVALID_STRIDE,
    CAIRO_STATUS_FONT_TYPE_MISMATCH,
    CAIRO_STATUS_USER_FONT_IMMUTABLE,
    CAIRO_STATUS_USER_FONT_ERROR,
    CAIRO_STATUS_NEGATIVE_COUNT,
    CAIRO_STATUS_INVALID_CLUSTERS,
    CAIRO_STATUS_INVALID_SLANT,
    CAIRO_STATUS_INVALID_WEIGHT

} cairo_status_t;
# 301 "/usr/include/cairo/cairo.h"
typedef enum _cairo_content {
    CAIRO_CONTENT_COLOR = 0x1000,
    CAIRO_CONTENT_ALPHA = 0x2000,
    CAIRO_CONTENT_COLOR_ALPHA = 0x3000
} cairo_content_t;
# 323 "/usr/include/cairo/cairo.h"
typedef cairo_status_t (*cairo_write_func_t) (void *closure,
           const unsigned char *data,
           unsigned int length);
# 343 "/usr/include/cairo/cairo.h"
typedef cairo_status_t (*cairo_read_func_t) (void *closure,
          unsigned char *data,
          unsigned int length);


 cairo_t *
cairo_create (cairo_surface_t *target);

 cairo_t *
cairo_reference (cairo_t *cr);

 void
cairo_destroy (cairo_t *cr);

 unsigned int
cairo_get_reference_count (cairo_t *cr);

 void *
cairo_get_user_data (cairo_t *cr,
       const cairo_user_data_key_t *key);

 cairo_status_t
cairo_set_user_data (cairo_t *cr,
       const cairo_user_data_key_t *key,
       void *user_data,
       cairo_destroy_func_t destroy);

 void
cairo_save (cairo_t *cr);

 void
cairo_restore (cairo_t *cr);

 void
cairo_push_group (cairo_t *cr);

 void
cairo_push_group_with_content (cairo_t *cr, cairo_content_t content);

 cairo_pattern_t *
cairo_pop_group (cairo_t *cr);

 void
cairo_pop_group_to_source (cairo_t *cr);
# 434 "/usr/include/cairo/cairo.h"
typedef enum _cairo_operator {
    CAIRO_OPERATOR_CLEAR,

    CAIRO_OPERATOR_SOURCE,
    CAIRO_OPERATOR_OVER,
    CAIRO_OPERATOR_IN,
    CAIRO_OPERATOR_OUT,
    CAIRO_OPERATOR_ATOP,

    CAIRO_OPERATOR_DEST,
    CAIRO_OPERATOR_DEST_OVER,
    CAIRO_OPERATOR_DEST_IN,
    CAIRO_OPERATOR_DEST_OUT,
    CAIRO_OPERATOR_DEST_ATOP,

    CAIRO_OPERATOR_XOR,
    CAIRO_OPERATOR_ADD,
    CAIRO_OPERATOR_SATURATE
} cairo_operator_t;

 void
cairo_set_operator (cairo_t *cr, cairo_operator_t op);

 void
cairo_set_source (cairo_t *cr, cairo_pattern_t *source);

 void
cairo_set_source_rgb (cairo_t *cr, double red, double green, double blue);

 void
cairo_set_source_rgba (cairo_t *cr,
         double red, double green, double blue,
         double alpha);

 void
cairo_set_source_surface (cairo_t *cr,
     cairo_surface_t *surface,
     double x,
     double y);

 void
cairo_set_tolerance (cairo_t *cr, double tolerance);
# 490 "/usr/include/cairo/cairo.h"
typedef enum _cairo_antialias {
    CAIRO_ANTIALIAS_DEFAULT,
    CAIRO_ANTIALIAS_NONE,
    CAIRO_ANTIALIAS_GRAY,
    CAIRO_ANTIALIAS_SUBPIXEL
} cairo_antialias_t;

 void
cairo_set_antialias (cairo_t *cr, cairo_antialias_t antialias);
# 525 "/usr/include/cairo/cairo.h"
typedef enum _cairo_fill_rule {
    CAIRO_FILL_RULE_WINDING,
    CAIRO_FILL_RULE_EVEN_ODD
} cairo_fill_rule_t;

 void
cairo_set_fill_rule (cairo_t *cr, cairo_fill_rule_t fill_rule);

 void
cairo_set_line_width (cairo_t *cr, double width);
# 546 "/usr/include/cairo/cairo.h"
typedef enum _cairo_line_cap {
    CAIRO_LINE_CAP_BUTT,
    CAIRO_LINE_CAP_ROUND,
    CAIRO_LINE_CAP_SQUARE
} cairo_line_cap_t;

 void
cairo_set_line_cap (cairo_t *cr, cairo_line_cap_t line_cap);
# 568 "/usr/include/cairo/cairo.h"
typedef enum _cairo_line_join {
    CAIRO_LINE_JOIN_MITER,
    CAIRO_LINE_JOIN_ROUND,
    CAIRO_LINE_JOIN_BEVEL
} cairo_line_join_t;

 void
cairo_set_line_join (cairo_t *cr, cairo_line_join_t line_join);

 void
cairo_set_dash (cairo_t *cr,
  const double *dashes,
  int num_dashes,
  double offset);

 void
cairo_set_miter_limit (cairo_t *cr, double limit);

 void
cairo_translate (cairo_t *cr, double tx, double ty);

 void
cairo_scale (cairo_t *cr, double sx, double sy);

 void
cairo_rotate (cairo_t *cr, double angle);

 void
cairo_transform (cairo_t *cr,
   const cairo_matrix_t *matrix);

 void
cairo_set_matrix (cairo_t *cr,
    const cairo_matrix_t *matrix);

 void
cairo_identity_matrix (cairo_t *cr);

 void
cairo_user_to_device (cairo_t *cr, double *x, double *y);

 void
cairo_user_to_device_distance (cairo_t *cr, double *dx, double *dy);

 void
cairo_device_to_user (cairo_t *cr, double *x, double *y);

 void
cairo_device_to_user_distance (cairo_t *cr, double *dx, double *dy);


 void
cairo_new_path (cairo_t *cr);

 void
cairo_move_to (cairo_t *cr, double x, double y);

 void
cairo_new_sub_path (cairo_t *cr);

 void
cairo_line_to (cairo_t *cr, double x, double y);

 void
cairo_curve_to (cairo_t *cr,
  double x1, double y1,
  double x2, double y2,
  double x3, double y3);

 void
cairo_arc (cairo_t *cr,
    double xc, double yc,
    double radius,
    double angle1, double angle2);

 void
cairo_arc_negative (cairo_t *cr,
      double xc, double yc,
      double radius,
      double angle1, double angle2);
# 657 "/usr/include/cairo/cairo.h"
 void
cairo_rel_move_to (cairo_t *cr, double dx, double dy);

 void
cairo_rel_line_to (cairo_t *cr, double dx, double dy);

 void
cairo_rel_curve_to (cairo_t *cr,
      double dx1, double dy1,
      double dx2, double dy2,
      double dx3, double dy3);

 void
cairo_rectangle (cairo_t *cr,
   double x, double y,
   double width, double height);






 void
cairo_close_path (cairo_t *cr);

 void
cairo_path_extents (cairo_t *cr,
      double *x1, double *y1,
      double *x2, double *y2);


 void
cairo_paint (cairo_t *cr);

 void
cairo_paint_with_alpha (cairo_t *cr,
   double alpha);

 void
cairo_mask (cairo_t *cr,
     cairo_pattern_t *pattern);

 void
cairo_mask_surface (cairo_t *cr,
      cairo_surface_t *surface,
      double surface_x,
      double surface_y);

 void
cairo_stroke (cairo_t *cr);

 void
cairo_stroke_preserve (cairo_t *cr);

 void
cairo_fill (cairo_t *cr);

 void
cairo_fill_preserve (cairo_t *cr);

 void
cairo_copy_page (cairo_t *cr);

 void
cairo_show_page (cairo_t *cr);


 cairo_bool_t
cairo_in_stroke (cairo_t *cr, double x, double y);

 cairo_bool_t
cairo_in_fill (cairo_t *cr, double x, double y);


 void
cairo_stroke_extents (cairo_t *cr,
        double *x1, double *y1,
        double *x2, double *y2);

 void
cairo_fill_extents (cairo_t *cr,
      double *x1, double *y1,
      double *x2, double *y2);


 void
cairo_reset_clip (cairo_t *cr);

 void
cairo_clip (cairo_t *cr);

 void
cairo_clip_preserve (cairo_t *cr);

 void
cairo_clip_extents (cairo_t *cr,
      double *x1, double *y1,
      double *x2, double *y2);
# 767 "/usr/include/cairo/cairo.h"
typedef struct _cairo_rectangle {
    double x, y, width, height;
} cairo_rectangle_t;
# 782 "/usr/include/cairo/cairo.h"
typedef struct _cairo_rectangle_list {
    cairo_status_t status;
    cairo_rectangle_t *rectangles;
    int num_rectangles;
} cairo_rectangle_list_t;

 cairo_rectangle_list_t *
cairo_copy_clip_rectangle_list (cairo_t *cr);

 void
cairo_rectangle_list_destroy (cairo_rectangle_list_t *rectangle_list);
# 811 "/usr/include/cairo/cairo.h"
typedef struct _cairo_scaled_font cairo_scaled_font_t;
# 830 "/usr/include/cairo/cairo.h"
typedef struct _cairo_font_face cairo_font_face_t;
# 856 "/usr/include/cairo/cairo.h"
typedef struct {
    unsigned long index;
    double x;
    double y;
} cairo_glyph_t;

 cairo_glyph_t *
cairo_glyph_allocate (int num_glyphs);

 void
cairo_glyph_free (cairo_glyph_t *glyphs);
# 888 "/usr/include/cairo/cairo.h"
typedef struct {
    int num_bytes;
    int num_glyphs;
} cairo_text_cluster_t;

 cairo_text_cluster_t *
cairo_text_cluster_allocate (int num_clusters);

 void
cairo_text_cluster_free (cairo_text_cluster_t *clusters);
# 908 "/usr/include/cairo/cairo.h"
typedef enum _cairo_text_cluster_flags {
    CAIRO_TEXT_CLUSTER_FLAG_BACKWARD = 0x00000001
} cairo_text_cluster_flags_t;
# 939 "/usr/include/cairo/cairo.h"
typedef struct {
    double x_bearing;
    double y_bearing;
    double width;
    double height;
    double x_advance;
    double y_advance;
} cairo_text_extents_t;
# 989 "/usr/include/cairo/cairo.h"
typedef struct {
    double ascent;
    double descent;
    double height;
    double max_x_advance;
    double max_y_advance;
} cairo_font_extents_t;
# 1005 "/usr/include/cairo/cairo.h"
typedef enum _cairo_font_slant {
    CAIRO_FONT_SLANT_NORMAL,
    CAIRO_FONT_SLANT_ITALIC,
    CAIRO_FONT_SLANT_OBLIQUE
} cairo_font_slant_t;
# 1018 "/usr/include/cairo/cairo.h"
typedef enum _cairo_font_weight {
    CAIRO_FONT_WEIGHT_NORMAL,
    CAIRO_FONT_WEIGHT_BOLD
} cairo_font_weight_t;
# 1040 "/usr/include/cairo/cairo.h"
typedef enum _cairo_subpixel_order {
    CAIRO_SUBPIXEL_ORDER_DEFAULT,
    CAIRO_SUBPIXEL_ORDER_RGB,
    CAIRO_SUBPIXEL_ORDER_BGR,
    CAIRO_SUBPIXEL_ORDER_VRGB,
    CAIRO_SUBPIXEL_ORDER_VBGR
} cairo_subpixel_order_t;
# 1070 "/usr/include/cairo/cairo.h"
typedef enum _cairo_hint_style {
    CAIRO_HINT_STYLE_DEFAULT,
    CAIRO_HINT_STYLE_NONE,
    CAIRO_HINT_STYLE_SLIGHT,
    CAIRO_HINT_STYLE_MEDIUM,
    CAIRO_HINT_STYLE_FULL
} cairo_hint_style_t;
# 1091 "/usr/include/cairo/cairo.h"
typedef enum _cairo_hint_metrics {
    CAIRO_HINT_METRICS_DEFAULT,
    CAIRO_HINT_METRICS_OFF,
    CAIRO_HINT_METRICS_ON
} cairo_hint_metrics_t;
# 1117 "/usr/include/cairo/cairo.h"
typedef struct _cairo_font_options cairo_font_options_t;

 cairo_font_options_t *
cairo_font_options_create (void);

 cairo_font_options_t *
cairo_font_options_copy (const cairo_font_options_t *original);

 void
cairo_font_options_destroy (cairo_font_options_t *options);

 cairo_status_t
cairo_font_options_status (cairo_font_options_t *options);

 void
cairo_font_options_merge (cairo_font_options_t *options,
     const cairo_font_options_t *other);
 cairo_bool_t
cairo_font_options_equal (const cairo_font_options_t *options,
     const cairo_font_options_t *other);

 unsigned long
cairo_font_options_hash (const cairo_font_options_t *options);

 void
cairo_font_options_set_antialias (cairo_font_options_t *options,
      cairo_antialias_t antialias);
 cairo_antialias_t
cairo_font_options_get_antialias (const cairo_font_options_t *options);

 void
cairo_font_options_set_subpixel_order (cairo_font_options_t *options,
           cairo_subpixel_order_t subpixel_order);
 cairo_subpixel_order_t
cairo_font_options_get_subpixel_order (const cairo_font_options_t *options);

 void
cairo_font_options_set_hint_style (cairo_font_options_t *options,
       cairo_hint_style_t hint_style);
 cairo_hint_style_t
cairo_font_options_get_hint_style (const cairo_font_options_t *options);

 void
cairo_font_options_set_hint_metrics (cairo_font_options_t *options,
         cairo_hint_metrics_t hint_metrics);
 cairo_hint_metrics_t
cairo_font_options_get_hint_metrics (const cairo_font_options_t *options);




 void
cairo_select_font_face (cairo_t *cr,
   const char *family,
   cairo_font_slant_t slant,
   cairo_font_weight_t weight);

 void
cairo_set_font_size (cairo_t *cr, double size);

 void
cairo_set_font_matrix (cairo_t *cr,
         const cairo_matrix_t *matrix);

 void
cairo_get_font_matrix (cairo_t *cr,
         cairo_matrix_t *matrix);

 void
cairo_set_font_options (cairo_t *cr,
   const cairo_font_options_t *options);

 void
cairo_get_font_options (cairo_t *cr,
   cairo_font_options_t *options);

 void
cairo_set_font_face (cairo_t *cr, cairo_font_face_t *font_face);

 cairo_font_face_t *
cairo_get_font_face (cairo_t *cr);

 void
cairo_set_scaled_font (cairo_t *cr,
         const cairo_scaled_font_t *scaled_font);

 cairo_scaled_font_t *
cairo_get_scaled_font (cairo_t *cr);

 void
cairo_show_text (cairo_t *cr, const char *utf8);

 void
cairo_show_glyphs (cairo_t *cr, const cairo_glyph_t *glyphs, int num_glyphs);

 void
cairo_show_text_glyphs (cairo_t *cr,
   const char *utf8,
   int utf8_len,
   const cairo_glyph_t *glyphs,
   int num_glyphs,
   const cairo_text_cluster_t *clusters,
   int num_clusters,
   cairo_text_cluster_flags_t cluster_flags);

 void
cairo_text_path (cairo_t *cr, const char *utf8);

 void
cairo_glyph_path (cairo_t *cr, const cairo_glyph_t *glyphs, int num_glyphs);

 void
cairo_text_extents (cairo_t *cr,
      const char *utf8,
      cairo_text_extents_t *extents);

 void
cairo_glyph_extents (cairo_t *cr,
       const cairo_glyph_t *glyphs,
       int num_glyphs,
       cairo_text_extents_t *extents);

 void
cairo_font_extents (cairo_t *cr,
      cairo_font_extents_t *extents);



 cairo_font_face_t *
cairo_font_face_reference (cairo_font_face_t *font_face);

 void
cairo_font_face_destroy (cairo_font_face_t *font_face);

 unsigned int
cairo_font_face_get_reference_count (cairo_font_face_t *font_face);

 cairo_status_t
cairo_font_face_status (cairo_font_face_t *font_face);
# 1295 "/usr/include/cairo/cairo.h"
typedef enum _cairo_font_type {
    CAIRO_FONT_TYPE_TOY,
    CAIRO_FONT_TYPE_FT,
    CAIRO_FONT_TYPE_WIN32,
    CAIRO_FONT_TYPE_QUARTZ,
    CAIRO_FONT_TYPE_USER
} cairo_font_type_t;

 cairo_font_type_t
cairo_font_face_get_type (cairo_font_face_t *font_face);

 void *
cairo_font_face_get_user_data (cairo_font_face_t *font_face,
          const cairo_user_data_key_t *key);

 cairo_status_t
cairo_font_face_set_user_data (cairo_font_face_t *font_face,
          const cairo_user_data_key_t *key,
          void *user_data,
          cairo_destroy_func_t destroy);



 cairo_scaled_font_t *
cairo_scaled_font_create (cairo_font_face_t *font_face,
     const cairo_matrix_t *font_matrix,
     const cairo_matrix_t *ctm,
     const cairo_font_options_t *options);

 cairo_scaled_font_t *
cairo_scaled_font_reference (cairo_scaled_font_t *scaled_font);

 void
cairo_scaled_font_destroy (cairo_scaled_font_t *scaled_font);

 unsigned int
cairo_scaled_font_get_reference_count (cairo_scaled_font_t *scaled_font);

 cairo_status_t
cairo_scaled_font_status (cairo_scaled_font_t *scaled_font);

 cairo_font_type_t
cairo_scaled_font_get_type (cairo_scaled_font_t *scaled_font);

 void *
cairo_scaled_font_get_user_data (cairo_scaled_font_t *scaled_font,
     const cairo_user_data_key_t *key);

 cairo_status_t
cairo_scaled_font_set_user_data (cairo_scaled_font_t *scaled_font,
     const cairo_user_data_key_t *key,
     void *user_data,
     cairo_destroy_func_t destroy);

 void
cairo_scaled_font_extents (cairo_scaled_font_t *scaled_font,
      cairo_font_extents_t *extents);

 void
cairo_scaled_font_text_extents (cairo_scaled_font_t *scaled_font,
    const char *utf8,
    cairo_text_extents_t *extents);

 void
cairo_scaled_font_glyph_extents (cairo_scaled_font_t *scaled_font,
     const cairo_glyph_t *glyphs,
     int num_glyphs,
     cairo_text_extents_t *extents);

 cairo_status_t
cairo_scaled_font_text_to_glyphs (cairo_scaled_font_t *scaled_font,
      double x,
      double y,
      const char *utf8,
      int utf8_len,
      cairo_glyph_t **glyphs,
      int *num_glyphs,
      cairo_text_cluster_t **clusters,
      int *num_clusters,
      cairo_text_cluster_flags_t *cluster_flags);

 cairo_font_face_t *
cairo_scaled_font_get_font_face (cairo_scaled_font_t *scaled_font);

 void
cairo_scaled_font_get_font_matrix (cairo_scaled_font_t *scaled_font,
       cairo_matrix_t *font_matrix);

 void
cairo_scaled_font_get_ctm (cairo_scaled_font_t *scaled_font,
      cairo_matrix_t *ctm);

 void
cairo_scaled_font_get_scale_matrix (cairo_scaled_font_t *scaled_font,
        cairo_matrix_t *scale_matrix);

 void
cairo_scaled_font_get_font_options (cairo_scaled_font_t *scaled_font,
        cairo_font_options_t *options);




 cairo_font_face_t *
cairo_toy_font_face_create (const char *family,
       cairo_font_slant_t slant,
       cairo_font_weight_t weight);

 const char *
cairo_toy_font_face_get_family (cairo_font_face_t *font_face);

 cairo_font_slant_t
cairo_toy_font_face_get_slant (cairo_font_face_t *font_face);

 cairo_font_weight_t
cairo_toy_font_face_get_weight (cairo_font_face_t *font_face);




 cairo_font_face_t *
cairo_user_font_face_create (void);
# 1453 "/usr/include/cairo/cairo.h"
typedef cairo_status_t (*cairo_user_scaled_font_init_func_t) (cairo_scaled_font_t *scaled_font,
             cairo_t *cr,
             cairo_font_extents_t *extents);
# 1500 "/usr/include/cairo/cairo.h"
typedef cairo_status_t (*cairo_user_scaled_font_render_glyph_func_t) (cairo_scaled_font_t *scaled_font,
              unsigned long glyph,
              cairo_t *cr,
              cairo_text_extents_t *extents);
# 1566 "/usr/include/cairo/cairo.h"
typedef cairo_status_t (*cairo_user_scaled_font_text_to_glyphs_func_t) (cairo_scaled_font_t *scaled_font,
         const char *utf8,
         int utf8_len,
         cairo_glyph_t **glyphs,
         int *num_glyphs,
         cairo_text_cluster_t **clusters,
         int *num_clusters,
         cairo_text_cluster_flags_t *cluster_flags);
# 1611 "/usr/include/cairo/cairo.h"
typedef cairo_status_t (*cairo_user_scaled_font_unicode_to_glyph_func_t) (cairo_scaled_font_t *scaled_font,
           unsigned long unicode,
           unsigned long *glyph_index);



 void
cairo_user_font_face_set_init_func (cairo_font_face_t *font_face,
        cairo_user_scaled_font_init_func_t init_func);

 void
cairo_user_font_face_set_render_glyph_func (cairo_font_face_t *font_face,
         cairo_user_scaled_font_render_glyph_func_t render_glyph_func);

 void
cairo_user_font_face_set_text_to_glyphs_func (cairo_font_face_t *font_face,
           cairo_user_scaled_font_text_to_glyphs_func_t text_to_glyphs_func);

 void
cairo_user_font_face_set_unicode_to_glyph_func (cairo_font_face_t *font_face,
             cairo_user_scaled_font_unicode_to_glyph_func_t unicode_to_glyph_func);



 cairo_user_scaled_font_init_func_t
cairo_user_font_face_get_init_func (cairo_font_face_t *font_face);

 cairo_user_scaled_font_render_glyph_func_t
cairo_user_font_face_get_render_glyph_func (cairo_font_face_t *font_face);

 cairo_user_scaled_font_text_to_glyphs_func_t
cairo_user_font_face_get_text_to_glyphs_func (cairo_font_face_t *font_face);

 cairo_user_scaled_font_unicode_to_glyph_func_t
cairo_user_font_face_get_unicode_to_glyph_func (cairo_font_face_t *font_face);




 cairo_operator_t
cairo_get_operator (cairo_t *cr);

 cairo_pattern_t *
cairo_get_source (cairo_t *cr);

 double
cairo_get_tolerance (cairo_t *cr);

 cairo_antialias_t
cairo_get_antialias (cairo_t *cr);

 cairo_bool_t
cairo_has_current_point (cairo_t *cr);

 void
cairo_get_current_point (cairo_t *cr, double *x, double *y);

 cairo_fill_rule_t
cairo_get_fill_rule (cairo_t *cr);

 double
cairo_get_line_width (cairo_t *cr);

 cairo_line_cap_t
cairo_get_line_cap (cairo_t *cr);

 cairo_line_join_t
cairo_get_line_join (cairo_t *cr);

 double
cairo_get_miter_limit (cairo_t *cr);

 int
cairo_get_dash_count (cairo_t *cr);

 void
cairo_get_dash (cairo_t *cr, double *dashes, double *offset);

 void
cairo_get_matrix (cairo_t *cr, cairo_matrix_t *matrix);

 cairo_surface_t *
cairo_get_target (cairo_t *cr);

 cairo_surface_t *
cairo_get_group_target (cairo_t *cr);
# 1709 "/usr/include/cairo/cairo.h"
typedef enum _cairo_path_data_type {
    CAIRO_PATH_MOVE_TO,
    CAIRO_PATH_LINE_TO,
    CAIRO_PATH_CURVE_TO,
    CAIRO_PATH_CLOSE_PATH
} cairo_path_data_type_t;
# 1782 "/usr/include/cairo/cairo.h"
typedef union _cairo_path_data_t cairo_path_data_t;
union _cairo_path_data_t {
    struct {
 cairo_path_data_type_t type;
 int length;
    } header;
    struct {
 double x, y;
    } point;
};
# 1812 "/usr/include/cairo/cairo.h"
typedef struct cairo_path {
    cairo_status_t status;
    cairo_path_data_t *data;
    int num_data;
} cairo_path_t;

 cairo_path_t *
cairo_copy_path (cairo_t *cr);

 cairo_path_t *
cairo_copy_path_flat (cairo_t *cr);

 void
cairo_append_path (cairo_t *cr,
     const cairo_path_t *path);

 void
cairo_path_destroy (cairo_path_t *path);



 cairo_status_t
cairo_status (cairo_t *cr);

 const char *
cairo_status_to_string (cairo_status_t status);



 cairo_surface_t *
cairo_surface_create_similar (cairo_surface_t *other,
         cairo_content_t content,
         int width,
         int height);

 cairo_surface_t *
cairo_surface_reference (cairo_surface_t *surface);

 void
cairo_surface_finish (cairo_surface_t *surface);

 void
cairo_surface_destroy (cairo_surface_t *surface);

 unsigned int
cairo_surface_get_reference_count (cairo_surface_t *surface);

 cairo_status_t
cairo_surface_status (cairo_surface_t *surface);
# 1902 "/usr/include/cairo/cairo.h"
typedef enum _cairo_surface_type {
    CAIRO_SURFACE_TYPE_IMAGE,
    CAIRO_SURFACE_TYPE_PDF,
    CAIRO_SURFACE_TYPE_PS,
    CAIRO_SURFACE_TYPE_XLIB,
    CAIRO_SURFACE_TYPE_XCB,
    CAIRO_SURFACE_TYPE_GLITZ,
    CAIRO_SURFACE_TYPE_QUARTZ,
    CAIRO_SURFACE_TYPE_WIN32,
    CAIRO_SURFACE_TYPE_BEOS,
    CAIRO_SURFACE_TYPE_DIRECTFB,
    CAIRO_SURFACE_TYPE_SVG,
    CAIRO_SURFACE_TYPE_OS2,
    CAIRO_SURFACE_TYPE_WIN32_PRINTING,
    CAIRO_SURFACE_TYPE_QUARTZ_IMAGE
} cairo_surface_type_t;

 cairo_surface_type_t
cairo_surface_get_type (cairo_surface_t *surface);

 cairo_content_t
cairo_surface_get_content (cairo_surface_t *surface);



 cairo_status_t
cairo_surface_write_to_png (cairo_surface_t *surface,
       const char *filename);

 cairo_status_t
cairo_surface_write_to_png_stream (cairo_surface_t *surface,
       cairo_write_func_t write_func,
       void *closure);



 void *
cairo_surface_get_user_data (cairo_surface_t *surface,
        const cairo_user_data_key_t *key);

 cairo_status_t
cairo_surface_set_user_data (cairo_surface_t *surface,
        const cairo_user_data_key_t *key,
        void *user_data,
        cairo_destroy_func_t destroy);

 void
cairo_surface_get_font_options (cairo_surface_t *surface,
    cairo_font_options_t *options);

 void
cairo_surface_flush (cairo_surface_t *surface);

 void
cairo_surface_mark_dirty (cairo_surface_t *surface);

 void
cairo_surface_mark_dirty_rectangle (cairo_surface_t *surface,
        int x,
        int y,
        int width,
        int height);

 void
cairo_surface_set_device_offset (cairo_surface_t *surface,
     double x_offset,
     double y_offset);

 void
cairo_surface_get_device_offset (cairo_surface_t *surface,
     double *x_offset,
     double *y_offset);

 void
cairo_surface_set_fallback_resolution (cairo_surface_t *surface,
           double x_pixels_per_inch,
           double y_pixels_per_inch);

 void
cairo_surface_get_fallback_resolution (cairo_surface_t *surface,
           double *x_pixels_per_inch,
           double *y_pixels_per_inch);

 void
cairo_surface_copy_page (cairo_surface_t *surface);

 void
cairo_surface_show_page (cairo_surface_t *surface);

 cairo_bool_t
cairo_surface_has_show_text_glyphs (cairo_surface_t *surface);
# 2023 "/usr/include/cairo/cairo.h"
typedef enum _cairo_format {
    CAIRO_FORMAT_ARGB32,
    CAIRO_FORMAT_RGB24,
    CAIRO_FORMAT_A8,
    CAIRO_FORMAT_A1




} cairo_format_t;

 cairo_surface_t *
cairo_image_surface_create (cairo_format_t format,
       int width,
       int height);

 int
cairo_format_stride_for_width (cairo_format_t format,
          int width);

 cairo_surface_t *
cairo_image_surface_create_for_data (unsigned char *data,
         cairo_format_t format,
         int width,
         int height,
         int stride);

 unsigned char *
cairo_image_surface_get_data (cairo_surface_t *surface);

 cairo_format_t
cairo_image_surface_get_format (cairo_surface_t *surface);

 int
cairo_image_surface_get_width (cairo_surface_t *surface);

 int
cairo_image_surface_get_height (cairo_surface_t *surface);

 int
cairo_image_surface_get_stride (cairo_surface_t *surface);



 cairo_surface_t *
cairo_image_surface_create_from_png (const char *filename);

 cairo_surface_t *
cairo_image_surface_create_from_png_stream (cairo_read_func_t read_func,
         void *closure);





 cairo_pattern_t *
cairo_pattern_create_rgb (double red, double green, double blue);

 cairo_pattern_t *
cairo_pattern_create_rgba (double red, double green, double blue,
      double alpha);

 cairo_pattern_t *
cairo_pattern_create_for_surface (cairo_surface_t *surface);

 cairo_pattern_t *
cairo_pattern_create_linear (double x0, double y0,
        double x1, double y1);

 cairo_pattern_t *
cairo_pattern_create_radial (double cx0, double cy0, double radius0,
        double cx1, double cy1, double radius1);

 cairo_pattern_t *
cairo_pattern_reference (cairo_pattern_t *pattern);

 void
cairo_pattern_destroy (cairo_pattern_t *pattern);

 unsigned int
cairo_pattern_get_reference_count (cairo_pattern_t *pattern);

 cairo_status_t
cairo_pattern_status (cairo_pattern_t *pattern);

 void *
cairo_pattern_get_user_data (cairo_pattern_t *pattern,
        const cairo_user_data_key_t *key);

 cairo_status_t
cairo_pattern_set_user_data (cairo_pattern_t *pattern,
        const cairo_user_data_key_t *key,
        void *user_data,
        cairo_destroy_func_t destroy);
# 2148 "/usr/include/cairo/cairo.h"
typedef enum _cairo_pattern_type {
    CAIRO_PATTERN_TYPE_SOLID,
    CAIRO_PATTERN_TYPE_SURFACE,
    CAIRO_PATTERN_TYPE_LINEAR,
    CAIRO_PATTERN_TYPE_RADIAL
} cairo_pattern_type_t;

 cairo_pattern_type_t
cairo_pattern_get_type (cairo_pattern_t *pattern);

 void
cairo_pattern_add_color_stop_rgb (cairo_pattern_t *pattern,
      double offset,
      double red, double green, double blue);

 void
cairo_pattern_add_color_stop_rgba (cairo_pattern_t *pattern,
       double offset,
       double red, double green, double blue,
       double alpha);

 void
cairo_pattern_set_matrix (cairo_pattern_t *pattern,
     const cairo_matrix_t *matrix);

 void
cairo_pattern_get_matrix (cairo_pattern_t *pattern,
     cairo_matrix_t *matrix);
# 2198 "/usr/include/cairo/cairo.h"
typedef enum _cairo_extend {
    CAIRO_EXTEND_NONE,
    CAIRO_EXTEND_REPEAT,
    CAIRO_EXTEND_REFLECT,
    CAIRO_EXTEND_PAD
} cairo_extend_t;

 void
cairo_pattern_set_extend (cairo_pattern_t *pattern, cairo_extend_t extend);

 cairo_extend_t
cairo_pattern_get_extend (cairo_pattern_t *pattern);
# 2229 "/usr/include/cairo/cairo.h"
typedef enum _cairo_filter {
    CAIRO_FILTER_FAST,
    CAIRO_FILTER_GOOD,
    CAIRO_FILTER_BEST,
    CAIRO_FILTER_NEAREST,
    CAIRO_FILTER_BILINEAR,
    CAIRO_FILTER_GAUSSIAN
} cairo_filter_t;

 void
cairo_pattern_set_filter (cairo_pattern_t *pattern, cairo_filter_t filter);

 cairo_filter_t
cairo_pattern_get_filter (cairo_pattern_t *pattern);

 cairo_status_t
cairo_pattern_get_rgba (cairo_pattern_t *pattern,
   double *red, double *green,
   double *blue, double *alpha);

 cairo_status_t
cairo_pattern_get_surface (cairo_pattern_t *pattern,
      cairo_surface_t **surface);


 cairo_status_t
cairo_pattern_get_color_stop_rgba (cairo_pattern_t *pattern,
       int index, double *offset,
       double *red, double *green,
       double *blue, double *alpha);

 cairo_status_t
cairo_pattern_get_color_stop_count (cairo_pattern_t *pattern,
        int *count);

 cairo_status_t
cairo_pattern_get_linear_points (cairo_pattern_t *pattern,
     double *x0, double *y0,
     double *x1, double *y1);

 cairo_status_t
cairo_pattern_get_radial_circles (cairo_pattern_t *pattern,
      double *x0, double *y0, double *r0,
      double *x1, double *y1, double *r1);



 void
cairo_matrix_init (cairo_matrix_t *matrix,
     double xx, double yx,
     double xy, double yy,
     double x0, double y0);

 void
cairo_matrix_init_identity (cairo_matrix_t *matrix);

 void
cairo_matrix_init_translate (cairo_matrix_t *matrix,
        double tx, double ty);

 void
cairo_matrix_init_scale (cairo_matrix_t *matrix,
    double sx, double sy);

 void
cairo_matrix_init_rotate (cairo_matrix_t *matrix,
     double radians);

 void
cairo_matrix_translate (cairo_matrix_t *matrix, double tx, double ty);

 void
cairo_matrix_scale (cairo_matrix_t *matrix, double sx, double sy);

 void
cairo_matrix_rotate (cairo_matrix_t *matrix, double radians);

 cairo_status_t
cairo_matrix_invert (cairo_matrix_t *matrix);

 void
cairo_matrix_multiply (cairo_matrix_t *result,
         const cairo_matrix_t *a,
         const cairo_matrix_t *b);

 void
cairo_matrix_transform_distance (const cairo_matrix_t *matrix,
     double *dx, double *dy);

 void
cairo_matrix_transform_point (const cairo_matrix_t *matrix,
         double *x, double *y);


 void
cairo_debug_reset_static_data (void);


# 32 "/usr/include/gtk-2.0/gdk/gdkscreen.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdktypes.h" 1
# 37 "/usr/include/gtk-2.0/gdk/gdktypes.h"
# 1 "/usr/include/pango-1.0/pango/pango.h" 1
# 25 "/usr/include/pango-1.0/pango/pango.h"
# 1 "/usr/include/pango-1.0/pango/pango-attributes.h" 1
# 25 "/usr/include/pango-1.0/pango/pango-attributes.h"
# 1 "/usr/include/pango-1.0/pango/pango-font.h" 1
# 25 "/usr/include/pango-1.0/pango/pango-font.h"
# 1 "/usr/include/pango-1.0/pango/pango-coverage.h" 1
# 27 "/usr/include/pango-1.0/pango/pango-coverage.h"


typedef struct _PangoCoverage PangoCoverage;

typedef enum {
  PANGO_COVERAGE_NONE,
  PANGO_COVERAGE_FALLBACK,
  PANGO_COVERAGE_APPROXIMATE,
  PANGO_COVERAGE_EXACT
} PangoCoverageLevel;

PangoCoverage * pango_coverage_new (void);
PangoCoverage * pango_coverage_ref (PangoCoverage *coverage);
void pango_coverage_unref (PangoCoverage *coverage);
PangoCoverage * pango_coverage_copy (PangoCoverage *coverage);
PangoCoverageLevel pango_coverage_get (PangoCoverage *coverage,
        int index_);
void pango_coverage_set (PangoCoverage *coverage,
        int index_,
        PangoCoverageLevel level);
void pango_coverage_max (PangoCoverage *coverage,
        PangoCoverage *other);

void pango_coverage_to_bytes (PangoCoverage *coverage,
       guchar **bytes,
       int *n_bytes);
PangoCoverage *pango_coverage_from_bytes (guchar *bytes,
       int n_bytes);


# 26 "/usr/include/pango-1.0/pango/pango-font.h" 2
# 1 "/usr/include/pango-1.0/pango/pango-types.h" 1
# 28 "/usr/include/pango-1.0/pango/pango-types.h"


typedef struct _PangoLogAttr PangoLogAttr;

typedef struct _PangoEngineLang PangoEngineLang;
typedef struct _PangoEngineShape PangoEngineShape;

typedef struct _PangoFont PangoFont;
typedef struct _PangoFontMap PangoFontMap;

typedef struct _PangoRectangle PangoRectangle;




typedef guint32 PangoGlyph;
# 64 "/usr/include/pango-1.0/pango/pango-types.h"
int pango_units_from_double (double d) __attribute__((__const__));
double pango_units_to_double (int i) __attribute__((__const__));






struct _PangoRectangle
{
  int x;
  int y;
  int width;
  int height;
};
# 87 "/usr/include/pango-1.0/pango/pango-types.h"
void pango_extents_to_pixels (PangoRectangle *inclusive,
         PangoRectangle *nearest);


# 1 "/usr/include/pango-1.0/pango/pango-gravity.h" 1
# 27 "/usr/include/pango-1.0/pango/pango-gravity.h"

# 50 "/usr/include/pango-1.0/pango/pango-gravity.h"
typedef enum {
  PANGO_GRAVITY_SOUTH,
  PANGO_GRAVITY_EAST,
  PANGO_GRAVITY_NORTH,
  PANGO_GRAVITY_WEST,
  PANGO_GRAVITY_AUTO
} PangoGravity;
# 77 "/usr/include/pango-1.0/pango/pango-gravity.h"
typedef enum {
  PANGO_GRAVITY_HINT_NATURAL,
  PANGO_GRAVITY_HINT_STRONG,
  PANGO_GRAVITY_HINT_LINE
} PangoGravityHint;
# 97 "/usr/include/pango-1.0/pango/pango-gravity.h"
# 1 "/usr/include/pango-1.0/pango/pango-matrix.h" 1
# 28 "/usr/include/pango-1.0/pango/pango-matrix.h"


typedef struct _PangoMatrix PangoMatrix;
# 52 "/usr/include/pango-1.0/pango/pango-matrix.h"
struct _PangoMatrix
{
  double xx;
  double xy;
  double yx;
  double yy;
  double x0;
  double y0;
};
# 85 "/usr/include/pango-1.0/pango/pango-matrix.h"
# 1 "/usr/include/pango-1.0/pango/pango-types.h" 1
# 86 "/usr/include/pango-1.0/pango/pango-matrix.h" 2

GType pango_matrix_get_type (void) __attribute__((__const__));

PangoMatrix *pango_matrix_copy (const PangoMatrix *matrix);
void pango_matrix_free (PangoMatrix *matrix);

void pango_matrix_translate (PangoMatrix *matrix,
        double tx,
        double ty);
void pango_matrix_scale (PangoMatrix *matrix,
        double scale_x,
        double scale_y);
void pango_matrix_rotate (PangoMatrix *matrix,
        double degrees);
void pango_matrix_concat (PangoMatrix *matrix,
        const PangoMatrix *new_matrix);
void pango_matrix_transform_point (const PangoMatrix *matrix,
          double *x,
          double *y);
void pango_matrix_transform_distance (const PangoMatrix *matrix,
          double *dx,
          double *dy);
void pango_matrix_transform_rectangle (const PangoMatrix *matrix,
           PangoRectangle *rect);
void pango_matrix_transform_pixel_rectangle (const PangoMatrix *matrix,
          PangoRectangle *rect);
double pango_matrix_get_font_scale_factor (const PangoMatrix *matrix) __attribute__((__pure__));



# 98 "/usr/include/pango-1.0/pango/pango-gravity.h" 2
# 1 "/usr/include/pango-1.0/pango/pango-script.h" 1
# 27 "/usr/include/pango-1.0/pango/pango-script.h"








typedef struct _PangoScriptIter PangoScriptIter;

typedef enum {
      PANGO_SCRIPT_INVALID_CODE = -1,
      PANGO_SCRIPT_COMMON = 0,
      PANGO_SCRIPT_INHERITED,
      PANGO_SCRIPT_ARABIC,
      PANGO_SCRIPT_ARMENIAN,
      PANGO_SCRIPT_BENGALI,
      PANGO_SCRIPT_BOPOMOFO,
      PANGO_SCRIPT_CHEROKEE,
      PANGO_SCRIPT_COPTIC,
      PANGO_SCRIPT_CYRILLIC,
      PANGO_SCRIPT_DESERET,
      PANGO_SCRIPT_DEVANAGARI,
      PANGO_SCRIPT_ETHIOPIC,
      PANGO_SCRIPT_GEORGIAN,
      PANGO_SCRIPT_GOTHIC,
      PANGO_SCRIPT_GREEK,
      PANGO_SCRIPT_GUJARATI,
      PANGO_SCRIPT_GURMUKHI,
      PANGO_SCRIPT_HAN,
      PANGO_SCRIPT_HANGUL,
      PANGO_SCRIPT_HEBREW,
      PANGO_SCRIPT_HIRAGANA,
      PANGO_SCRIPT_KANNADA,
      PANGO_SCRIPT_KATAKANA,
      PANGO_SCRIPT_KHMER,
      PANGO_SCRIPT_LAO,
      PANGO_SCRIPT_LATIN,
      PANGO_SCRIPT_MALAYALAM,
      PANGO_SCRIPT_MONGOLIAN,
      PANGO_SCRIPT_MYANMAR,
      PANGO_SCRIPT_OGHAM,
      PANGO_SCRIPT_OLD_ITALIC,
      PANGO_SCRIPT_ORIYA,
      PANGO_SCRIPT_RUNIC,
      PANGO_SCRIPT_SINHALA,
      PANGO_SCRIPT_SYRIAC,
      PANGO_SCRIPT_TAMIL,
      PANGO_SCRIPT_TELUGU,
      PANGO_SCRIPT_THAANA,
      PANGO_SCRIPT_THAI,
      PANGO_SCRIPT_TIBETAN,
      PANGO_SCRIPT_CANADIAN_ABORIGINAL,
      PANGO_SCRIPT_YI,
      PANGO_SCRIPT_TAGALOG,
      PANGO_SCRIPT_HANUNOO,
      PANGO_SCRIPT_BUHID,
      PANGO_SCRIPT_TAGBANWA,


      PANGO_SCRIPT_BRAILLE,
      PANGO_SCRIPT_CYPRIOT,
      PANGO_SCRIPT_LIMBU,
      PANGO_SCRIPT_OSMANYA,
      PANGO_SCRIPT_SHAVIAN,
      PANGO_SCRIPT_LINEAR_B,
      PANGO_SCRIPT_TAI_LE,
      PANGO_SCRIPT_UGARITIC,


      PANGO_SCRIPT_NEW_TAI_LUE,
      PANGO_SCRIPT_BUGINESE,
      PANGO_SCRIPT_GLAGOLITIC,
      PANGO_SCRIPT_TIFINAGH,
      PANGO_SCRIPT_SYLOTI_NAGRI,
      PANGO_SCRIPT_OLD_PERSIAN,
      PANGO_SCRIPT_KHAROSHTHI,


      PANGO_SCRIPT_UNKNOWN,
      PANGO_SCRIPT_BALINESE,
      PANGO_SCRIPT_CUNEIFORM,
      PANGO_SCRIPT_PHOENICIAN,
      PANGO_SCRIPT_PHAGS_PA,
      PANGO_SCRIPT_NKO,


      PANGO_SCRIPT_KAYAH_LI,
      PANGO_SCRIPT_LEPCHA,
      PANGO_SCRIPT_REJANG,
      PANGO_SCRIPT_SUNDANESE,
      PANGO_SCRIPT_SAURASHTRA,
      PANGO_SCRIPT_CHAM,
      PANGO_SCRIPT_OL_CHIKI,
      PANGO_SCRIPT_VAI,
      PANGO_SCRIPT_CARIAN,
      PANGO_SCRIPT_LYCIAN,
      PANGO_SCRIPT_LYDIAN
} PangoScript;

PangoScript pango_script_for_unichar (gunichar ch) __attribute__((__const__));

PangoScriptIter *pango_script_iter_new (const char *text,
           int length);
void pango_script_iter_get_range (PangoScriptIter *iter,
           const char **start,
           const char **end,
           PangoScript *script);
gboolean pango_script_iter_next (PangoScriptIter *iter);
void pango_script_iter_free (PangoScriptIter *iter);

# 1 "/usr/include/pango-1.0/pango/pango-language.h" 1
# 28 "/usr/include/pango-1.0/pango/pango-language.h"


typedef struct _PangoLanguage PangoLanguage;



GType pango_language_get_type (void) __attribute__((__const__));
PangoLanguage *pango_language_from_string (const char *language);

const char *pango_language_to_string (PangoLanguage *language) __attribute__((__const__));



const char *pango_language_get_sample_string (PangoLanguage *language) __attribute__((__const__));
PangoLanguage *pango_language_get_default (void) __attribute__((__const__));

gboolean pango_language_matches (PangoLanguage *language,
           const char *range_list) __attribute__((__pure__));

# 1 "/usr/include/pango-1.0/pango/pango-script.h" 1
# 48 "/usr/include/pango-1.0/pango/pango-language.h" 2

gboolean pango_language_includes_script (PangoLanguage *language,
           PangoScript script) __attribute__((__pure__));
const PangoScript *pango_language_get_scripts (PangoLanguage *language,
           int *num_scripts);


# 139 "/usr/include/pango-1.0/pango/pango-script.h" 2

PangoLanguage *pango_script_get_sample_language (PangoScript script) __attribute__((__pure__));


# 99 "/usr/include/pango-1.0/pango/pango-gravity.h" 2

double pango_gravity_to_rotation (PangoGravity gravity) __attribute__((__const__));
PangoGravity pango_gravity_get_for_matrix (const PangoMatrix *matrix) __attribute__((__pure__));
PangoGravity pango_gravity_get_for_script (PangoScript script,
        PangoGravity base_gravity,
        PangoGravityHint hint) __attribute__((__const__));



# 92 "/usr/include/pango-1.0/pango/pango-types.h" 2



# 1 "/usr/include/pango-1.0/pango/pango-bidi-type.h" 1
# 27 "/usr/include/pango-1.0/pango/pango-bidi-type.h"

# 57 "/usr/include/pango-1.0/pango/pango-bidi-type.h"
typedef enum {

  PANGO_BIDI_TYPE_L,
  PANGO_BIDI_TYPE_LRE,
  PANGO_BIDI_TYPE_LRO,
  PANGO_BIDI_TYPE_R,
  PANGO_BIDI_TYPE_AL,
  PANGO_BIDI_TYPE_RLE,
  PANGO_BIDI_TYPE_RLO,


  PANGO_BIDI_TYPE_PDF,
  PANGO_BIDI_TYPE_EN,
  PANGO_BIDI_TYPE_ES,
  PANGO_BIDI_TYPE_ET,
  PANGO_BIDI_TYPE_AN,
  PANGO_BIDI_TYPE_CS,
  PANGO_BIDI_TYPE_NSM,
  PANGO_BIDI_TYPE_BN,


  PANGO_BIDI_TYPE_B,
  PANGO_BIDI_TYPE_S,
  PANGO_BIDI_TYPE_WS,
  PANGO_BIDI_TYPE_ON
} PangoBidiType;

PangoBidiType pango_bidi_type_for_unichar (gunichar ch) __attribute__((__const__));
# 114 "/usr/include/pango-1.0/pango/pango-bidi-type.h"
typedef enum {
  PANGO_DIRECTION_LTR,
  PANGO_DIRECTION_RTL,
  PANGO_DIRECTION_TTB_LTR,
  PANGO_DIRECTION_TTB_RTL,
  PANGO_DIRECTION_WEAK_LTR,
  PANGO_DIRECTION_WEAK_RTL,
  PANGO_DIRECTION_NEUTRAL
} PangoDirection;

PangoDirection pango_unichar_direction (gunichar ch) __attribute__((__const__));
PangoDirection pango_find_base_dir (const gchar *text,
          gint length);


gboolean pango_get_mirror_char (gunichar ch,
          gunichar *mirrored_ch);



# 96 "/usr/include/pango-1.0/pango/pango-types.h" 2



# 27 "/usr/include/pango-1.0/pango/pango-font.h" 2





typedef struct _PangoFontDescription PangoFontDescription;
typedef struct _PangoFontMetrics PangoFontMetrics;
# 43 "/usr/include/pango-1.0/pango/pango-font.h"
typedef enum {
  PANGO_STYLE_NORMAL,
  PANGO_STYLE_OBLIQUE,
  PANGO_STYLE_ITALIC
} PangoStyle;

typedef enum {
  PANGO_VARIANT_NORMAL,
  PANGO_VARIANT_SMALL_CAPS
} PangoVariant;

typedef enum {
  PANGO_WEIGHT_THIN = 100,
  PANGO_WEIGHT_ULTRALIGHT = 200,
  PANGO_WEIGHT_LIGHT = 300,
  PANGO_WEIGHT_BOOK = 380,
  PANGO_WEIGHT_NORMAL = 400,
  PANGO_WEIGHT_MEDIUM = 500,
  PANGO_WEIGHT_SEMIBOLD = 600,
  PANGO_WEIGHT_BOLD = 700,
  PANGO_WEIGHT_ULTRABOLD = 800,
  PANGO_WEIGHT_HEAVY = 900,
  PANGO_WEIGHT_ULTRAHEAVY = 1000
} PangoWeight;

typedef enum {
  PANGO_STRETCH_ULTRA_CONDENSED,
  PANGO_STRETCH_EXTRA_CONDENSED,
  PANGO_STRETCH_CONDENSED,
  PANGO_STRETCH_SEMI_CONDENSED,
  PANGO_STRETCH_NORMAL,
  PANGO_STRETCH_SEMI_EXPANDED,
  PANGO_STRETCH_EXPANDED,
  PANGO_STRETCH_EXTRA_EXPANDED,
  PANGO_STRETCH_ULTRA_EXPANDED
} PangoStretch;

typedef enum {
  PANGO_FONT_MASK_FAMILY = 1 << 0,
  PANGO_FONT_MASK_STYLE = 1 << 1,
  PANGO_FONT_MASK_VARIANT = 1 << 2,
  PANGO_FONT_MASK_WEIGHT = 1 << 3,
  PANGO_FONT_MASK_STRETCH = 1 << 4,
  PANGO_FONT_MASK_SIZE = 1 << 5,
  PANGO_FONT_MASK_GRAVITY = 1 << 6
} PangoFontMask;
# 105 "/usr/include/pango-1.0/pango/pango-font.h"
GType pango_font_description_get_type (void) __attribute__((__const__));
PangoFontDescription *pango_font_description_new (void);
PangoFontDescription *pango_font_description_copy (const PangoFontDescription *desc);
PangoFontDescription *pango_font_description_copy_static (const PangoFontDescription *desc);
guint pango_font_description_hash (const PangoFontDescription *desc) __attribute__((__pure__));
gboolean pango_font_description_equal (const PangoFontDescription *desc1,
         const PangoFontDescription *desc2) __attribute__((__pure__));
void pango_font_description_free (PangoFontDescription *desc);
void pango_font_descriptions_free (PangoFontDescription **descs,
         int n_descs);

void pango_font_description_set_family (PangoFontDescription *desc,
              const char *family);
void pango_font_description_set_family_static (PangoFontDescription *desc,
              const char *family);
const char *pango_font_description_get_family (const PangoFontDescription *desc) __attribute__((__pure__));
void pango_font_description_set_style (PangoFontDescription *desc,
              PangoStyle style);
PangoStyle pango_font_description_get_style (const PangoFontDescription *desc) __attribute__((__pure__));
void pango_font_description_set_variant (PangoFontDescription *desc,
              PangoVariant variant);
PangoVariant pango_font_description_get_variant (const PangoFontDescription *desc) __attribute__((__pure__));
void pango_font_description_set_weight (PangoFontDescription *desc,
              PangoWeight weight);
PangoWeight pango_font_description_get_weight (const PangoFontDescription *desc) __attribute__((__pure__));
void pango_font_description_set_stretch (PangoFontDescription *desc,
              PangoStretch stretch);
PangoStretch pango_font_description_get_stretch (const PangoFontDescription *desc) __attribute__((__pure__));
void pango_font_description_set_size (PangoFontDescription *desc,
              gint size);
gint pango_font_description_get_size (const PangoFontDescription *desc) __attribute__((__pure__));
void pango_font_description_set_absolute_size (PangoFontDescription *desc,
              double size);
gboolean pango_font_description_get_size_is_absolute (const PangoFontDescription *desc) __attribute__((__pure__));
void pango_font_description_set_gravity (PangoFontDescription *desc,
              PangoGravity gravity);
PangoGravity pango_font_description_get_gravity (const PangoFontDescription *desc) __attribute__((__pure__));

PangoFontMask pango_font_description_get_set_fields (const PangoFontDescription *desc) __attribute__((__pure__));
void pango_font_description_unset_fields (PangoFontDescription *desc,
           PangoFontMask to_unset);

void pango_font_description_merge (PangoFontDescription *desc,
       const PangoFontDescription *desc_to_merge,
       gboolean replace_existing);
void pango_font_description_merge_static (PangoFontDescription *desc,
       const PangoFontDescription *desc_to_merge,
       gboolean replace_existing);

gboolean pango_font_description_better_match (const PangoFontDescription *desc,
           const PangoFontDescription *old_match,
           const PangoFontDescription *new_match) __attribute__((__pure__));

PangoFontDescription *pango_font_description_from_string (const char *str);
char * pango_font_description_to_string (const PangoFontDescription *desc);
char * pango_font_description_to_filename (const PangoFontDescription *desc);






GType pango_font_metrics_get_type (void) __attribute__((__const__));
PangoFontMetrics *pango_font_metrics_ref (PangoFontMetrics *metrics);
void pango_font_metrics_unref (PangoFontMetrics *metrics);
int pango_font_metrics_get_ascent (PangoFontMetrics *metrics) __attribute__((__pure__));
int pango_font_metrics_get_descent (PangoFontMetrics *metrics) __attribute__((__pure__));
int pango_font_metrics_get_approximate_char_width (PangoFontMetrics *metrics) __attribute__((__pure__));
int pango_font_metrics_get_approximate_digit_width (PangoFontMetrics *metrics) __attribute__((__pure__));
int pango_font_metrics_get_underline_position (PangoFontMetrics *metrics) __attribute__((__pure__));
int pango_font_metrics_get_underline_thickness (PangoFontMetrics *metrics) __attribute__((__pure__));
int pango_font_metrics_get_strikethrough_position (PangoFontMetrics *metrics) __attribute__((__pure__));
int pango_font_metrics_get_strikethrough_thickness (PangoFontMetrics *metrics) __attribute__((__pure__));
# 207 "/usr/include/pango-1.0/pango/pango-font.h"
typedef struct _PangoFontFamily PangoFontFamily;
typedef struct _PangoFontFace PangoFontFace;

GType pango_font_family_get_type (void) __attribute__((__const__));

void pango_font_family_list_faces (PangoFontFamily *family,
         PangoFontFace ***faces,
         int *n_faces);
const char *pango_font_family_get_name (PangoFontFamily *family) __attribute__((__pure__));
gboolean pango_font_family_is_monospace (PangoFontFamily *family) __attribute__((__pure__));
# 261 "/usr/include/pango-1.0/pango/pango-font.h"
GType pango_font_face_get_type (void) __attribute__((__const__));

PangoFontDescription *pango_font_face_describe (PangoFontFace *face);
const char *pango_font_face_get_face_name (PangoFontFace *face) __attribute__((__pure__));
void pango_font_face_list_sizes (PangoFontFace *face,
            int **sizes,
            int *n_sizes);
gboolean pango_font_face_is_synthesized (PangoFontFace *face) __attribute__((__pure__));
# 313 "/usr/include/pango-1.0/pango/pango-font.h"
GType pango_font_get_type (void) __attribute__((__const__));

PangoFontDescription *pango_font_describe (PangoFont *font);
PangoFontDescription *pango_font_describe_with_absolute_size (PangoFont *font);
PangoCoverage * pango_font_get_coverage (PangoFont *font,
          PangoLanguage *language);
PangoEngineShape * pango_font_find_shaper (PangoFont *font,
          PangoLanguage *language,
          guint32 ch);
PangoFontMetrics * pango_font_get_metrics (PangoFont *font,
          PangoLanguage *language);
void pango_font_get_glyph_extents (PangoFont *font,
          PangoGlyph glyph,
          PangoRectangle *ink_rect,
          PangoRectangle *logical_rect);
PangoFontMap *pango_font_get_font_map (PangoFont *font);
# 384 "/usr/include/pango-1.0/pango/pango-font.h"

# 26 "/usr/include/pango-1.0/pango/pango-attributes.h" 2






typedef struct _PangoColor PangoColor;

struct _PangoColor
{
  guint16 red;
  guint16 green;
  guint16 blue;
};


GType pango_color_get_type (void) __attribute__((__const__));

PangoColor *pango_color_copy (const PangoColor *src);
void pango_color_free (PangoColor *color);
gboolean pango_color_parse (PangoColor *color,
      const char *spec);
gchar *pango_color_to_string(const PangoColor *color);




typedef struct _PangoAttribute PangoAttribute;
typedef struct _PangoAttrClass PangoAttrClass;

typedef struct _PangoAttrString PangoAttrString;
typedef struct _PangoAttrLanguage PangoAttrLanguage;
typedef struct _PangoAttrInt PangoAttrInt;
typedef struct _PangoAttrSize PangoAttrSize;
typedef struct _PangoAttrFloat PangoAttrFloat;
typedef struct _PangoAttrColor PangoAttrColor;
typedef struct _PangoAttrFontDesc PangoAttrFontDesc;
typedef struct _PangoAttrShape PangoAttrShape;


typedef struct _PangoAttrList PangoAttrList;
typedef struct _PangoAttrIterator PangoAttrIterator;

typedef enum
{
  PANGO_ATTR_INVALID,
  PANGO_ATTR_LANGUAGE,
  PANGO_ATTR_FAMILY,
  PANGO_ATTR_STYLE,
  PANGO_ATTR_WEIGHT,
  PANGO_ATTR_VARIANT,
  PANGO_ATTR_STRETCH,
  PANGO_ATTR_SIZE,
  PANGO_ATTR_FONT_DESC,
  PANGO_ATTR_FOREGROUND,
  PANGO_ATTR_BACKGROUND,
  PANGO_ATTR_UNDERLINE,
  PANGO_ATTR_STRIKETHROUGH,
  PANGO_ATTR_RISE,
  PANGO_ATTR_SHAPE,
  PANGO_ATTR_SCALE,
  PANGO_ATTR_FALLBACK,
  PANGO_ATTR_LETTER_SPACING,
  PANGO_ATTR_UNDERLINE_COLOR,
  PANGO_ATTR_STRIKETHROUGH_COLOR,
  PANGO_ATTR_ABSOLUTE_SIZE,
  PANGO_ATTR_GRAVITY,
  PANGO_ATTR_GRAVITY_HINT
} PangoAttrType;

typedef enum {
  PANGO_UNDERLINE_NONE,
  PANGO_UNDERLINE_SINGLE,
  PANGO_UNDERLINE_DOUBLE,
  PANGO_UNDERLINE_LOW,
  PANGO_UNDERLINE_ERROR
} PangoUnderline;




struct _PangoAttribute
{
  const PangoAttrClass *klass;
  guint start_index;
  guint end_index;
};

typedef gboolean (*PangoAttrFilterFunc) (PangoAttribute *attribute,
      gpointer data);

typedef gpointer (*PangoAttrDataCopyFunc) (gconstpointer data);

struct _PangoAttrClass
{

  PangoAttrType type;
  PangoAttribute * (*copy) (const PangoAttribute *attr);
  void (*destroy) (PangoAttribute *attr);
  gboolean (*equal) (const PangoAttribute *attr1, const PangoAttribute *attr2);
};

struct _PangoAttrString
{
  PangoAttribute attr;
  char *value;
};

struct _PangoAttrLanguage
{
  PangoAttribute attr;
  PangoLanguage *value;
};

struct _PangoAttrInt
{
  PangoAttribute attr;
  int value;
};

struct _PangoAttrFloat
{
  PangoAttribute attr;
  double value;
};

struct _PangoAttrColor
{
  PangoAttribute attr;
  PangoColor color;
};

struct _PangoAttrSize
{
  PangoAttribute attr;
  int size;
  guint absolute : 1;
};

struct _PangoAttrShape
{
  PangoAttribute attr;
  PangoRectangle ink_rect;
  PangoRectangle logical_rect;

  gpointer data;
  PangoAttrDataCopyFunc copy_func;
  GDestroyNotify destroy_func;
};

struct _PangoAttrFontDesc
{
  PangoAttribute attr;
  PangoFontDescription *desc;
};

PangoAttrType pango_attr_type_register (const gchar *name);
const char * pango_attr_type_get_name (PangoAttrType type) __attribute__((__const__));

void pango_attribute_init (PangoAttribute *attr,
           const PangoAttrClass *klass);
PangoAttribute * pango_attribute_copy (const PangoAttribute *attr);
void pango_attribute_destroy (PangoAttribute *attr);
gboolean pango_attribute_equal (const PangoAttribute *attr1,
           const PangoAttribute *attr2) __attribute__((__pure__));

PangoAttribute *pango_attr_language_new (PangoLanguage *language);
PangoAttribute *pango_attr_family_new (const char *family);
PangoAttribute *pango_attr_foreground_new (guint16 red,
           guint16 green,
           guint16 blue);
PangoAttribute *pango_attr_background_new (guint16 red,
           guint16 green,
           guint16 blue);
PangoAttribute *pango_attr_size_new (int size);
PangoAttribute *pango_attr_size_new_absolute (int size);
PangoAttribute *pango_attr_style_new (PangoStyle style);
PangoAttribute *pango_attr_weight_new (PangoWeight weight);
PangoAttribute *pango_attr_variant_new (PangoVariant variant);
PangoAttribute *pango_attr_stretch_new (PangoStretch stretch);
PangoAttribute *pango_attr_font_desc_new (const PangoFontDescription *desc);

PangoAttribute *pango_attr_underline_new (PangoUnderline underline);
PangoAttribute *pango_attr_underline_color_new (guint16 red,
          guint16 green,
          guint16 blue);
PangoAttribute *pango_attr_strikethrough_new (gboolean strikethrough);
PangoAttribute *pango_attr_strikethrough_color_new (guint16 red,
          guint16 green,
          guint16 blue);

PangoAttribute *pango_attr_rise_new (int rise);
PangoAttribute *pango_attr_scale_new (double scale_factor);
PangoAttribute *pango_attr_fallback_new (gboolean enable_fallback);
PangoAttribute *pango_attr_letter_spacing_new (int letter_spacing);

PangoAttribute *pango_attr_shape_new (const PangoRectangle *ink_rect,
      const PangoRectangle *logical_rect);
PangoAttribute *pango_attr_shape_new_with_data (const PangoRectangle *ink_rect,
      const PangoRectangle *logical_rect,
      gpointer data,
      PangoAttrDataCopyFunc copy_func,
      GDestroyNotify destroy_func);

PangoAttribute *pango_attr_gravity_new (PangoGravity gravity);
PangoAttribute *pango_attr_gravity_hint_new (PangoGravityHint hint);

GType pango_attr_list_get_type (void) __attribute__((__const__));
PangoAttrList * pango_attr_list_new (void);
PangoAttrList * pango_attr_list_ref (PangoAttrList *list);
void pango_attr_list_unref (PangoAttrList *list);
PangoAttrList * pango_attr_list_copy (PangoAttrList *list);
void pango_attr_list_insert (PangoAttrList *list,
        PangoAttribute *attr);
void pango_attr_list_insert_before (PangoAttrList *list,
        PangoAttribute *attr);
void pango_attr_list_change (PangoAttrList *list,
        PangoAttribute *attr);
void pango_attr_list_splice (PangoAttrList *list,
        PangoAttrList *other,
        gint pos,
        gint len);

PangoAttrList *pango_attr_list_filter (PangoAttrList *list,
           PangoAttrFilterFunc func,
           gpointer data);

PangoAttrIterator *pango_attr_list_get_iterator (PangoAttrList *list);

void pango_attr_iterator_range (PangoAttrIterator *iterator,
       gint *start,
       gint *end);
gboolean pango_attr_iterator_next (PangoAttrIterator *iterator);
PangoAttrIterator *pango_attr_iterator_copy (PangoAttrIterator *iterator);
void pango_attr_iterator_destroy (PangoAttrIterator *iterator);
PangoAttribute * pango_attr_iterator_get (PangoAttrIterator *iterator,
       PangoAttrType type);
void pango_attr_iterator_get_font (PangoAttrIterator *iterator,
       PangoFontDescription *desc,
       PangoLanguage **language,
       GSList **extra_attrs);
GSList * pango_attr_iterator_get_attrs (PangoAttrIterator *iterator);


gboolean pango_parse_markup (const char *markup_text,
        int length,
        gunichar accel_marker,
        PangoAttrList **attr_list,
        char **text,
        gunichar *accel_char,
        GError **error);


# 26 "/usr/include/pango-1.0/pango/pango.h" 2

# 1 "/usr/include/pango-1.0/pango/pango-break.h" 1
# 27 "/usr/include/pango-1.0/pango/pango-break.h"


# 1 "/usr/include/pango-1.0/pango/pango-item.h" 1
# 27 "/usr/include/pango-1.0/pango/pango-item.h"


typedef struct _PangoAnalysis PangoAnalysis;
typedef struct _PangoItem PangoItem;




struct _PangoAnalysis
{
  PangoEngineShape *shape_engine;
  PangoEngineLang *lang_engine;
  PangoFont *font;

  guint8 level;
  guint8 gravity;
  guint8 flags;

  guint8 script;
  PangoLanguage *language;

  GSList *extra_attrs;
};

struct _PangoItem
{
  gint offset;
  gint length;
  gint num_chars;
  PangoAnalysis analysis;
};



GType pango_item_get_type (void) __attribute__((__const__));

PangoItem *pango_item_new (void);
PangoItem *pango_item_copy (PangoItem *item);
void pango_item_free (PangoItem *item);
PangoItem *pango_item_split (PangoItem *orig,
        int split_index,
        int split_offset);


# 30 "/usr/include/pango-1.0/pango/pango-break.h" 2



struct _PangoLogAttr
{
  guint is_line_break : 1;

  guint is_mandatory_break : 1;

  guint is_char_break : 1;

  guint is_white : 1;




  guint is_cursor_position : 1;






  guint is_word_start : 1;
  guint is_word_end : 1;
# 64 "/usr/include/pango-1.0/pango/pango-break.h"
  guint is_sentence_boundary : 1;
  guint is_sentence_start : 1;
  guint is_sentence_end : 1;




  guint backspace_deletes_character : 1;




  guint is_expandable_space : 1;


  guint is_word_boundary : 1;
};




void pango_break (const gchar *text,
    int length,
    PangoAnalysis *analysis,
    PangoLogAttr *attrs,
    int attrs_len);

void pango_find_paragraph_boundary (const gchar *text,
        gint length,
        gint *paragraph_delimiter_index,
        gint *next_paragraph_start);

void pango_get_log_attrs (const char *text,
     int length,
     int level,
     PangoLanguage *language,
     PangoLogAttr *log_attrs,
     int attrs_len);
# 118 "/usr/include/pango-1.0/pango/pango-break.h"

# 28 "/usr/include/pango-1.0/pango/pango.h" 2
# 1 "/usr/include/pango-1.0/pango/pango-context.h" 1
# 26 "/usr/include/pango-1.0/pango/pango-context.h"
# 1 "/usr/include/pango-1.0/pango/pango-fontmap.h" 1
# 26 "/usr/include/pango-1.0/pango/pango-fontmap.h"
# 1 "/usr/include/pango-1.0/pango/pango-fontset.h" 1
# 30 "/usr/include/pango-1.0/pango/pango-fontset.h"

# 40 "/usr/include/pango-1.0/pango/pango-fontset.h"
GType pango_fontset_get_type (void) __attribute__((__const__));

typedef struct _PangoFontset PangoFontset;
# 57 "/usr/include/pango-1.0/pango/pango-fontset.h"
typedef gboolean (*PangoFontsetForeachFunc) (PangoFontset *fontset,
          PangoFont *font,
          gpointer data);

PangoFont * pango_fontset_get_font (PangoFontset *fontset,
          guint wc);
PangoFontMetrics *pango_fontset_get_metrics (PangoFontset *fontset);
void pango_fontset_foreach (PangoFontset *fontset,
          PangoFontsetForeachFunc func,
          gpointer data);
# 125 "/usr/include/pango-1.0/pango/pango-fontset.h"

# 27 "/usr/include/pango-1.0/pango/pango-fontmap.h" 2







typedef struct _PangoContext PangoContext;

GType pango_font_map_get_type (void) __attribute__((__const__));
PangoContext * pango_font_map_create_context (PangoFontMap *fontmap);
PangoFont * pango_font_map_load_font (PangoFontMap *fontmap,
         PangoContext *context,
         const PangoFontDescription *desc);
PangoFontset *pango_font_map_load_fontset (PangoFontMap *fontmap,
         PangoContext *context,
         const PangoFontDescription *desc,
         PangoLanguage *language);
void pango_font_map_list_families (PangoFontMap *fontmap,
         PangoFontFamily ***families,
         int *n_families);
# 94 "/usr/include/pango-1.0/pango/pango-fontmap.h"

# 27 "/usr/include/pango-1.0/pango/pango-context.h" 2









typedef struct _PangoContextClass PangoContextClass;
# 50 "/usr/include/pango-1.0/pango/pango-context.h"
GType pango_context_get_type (void) __attribute__((__const__));

PangoContext *pango_context_new (void);
void pango_context_set_font_map (PangoContext *context,
        PangoFontMap *font_map);
PangoFontMap *pango_context_get_font_map (PangoContext *context);

void pango_context_list_families (PangoContext *context,
        PangoFontFamily ***families,
        int *n_families);
PangoFont * pango_context_load_font (PangoContext *context,
        const PangoFontDescription *desc);
PangoFontset *pango_context_load_fontset (PangoContext *context,
        const PangoFontDescription *desc,
        PangoLanguage *language);

PangoFontMetrics *pango_context_get_metrics (PangoContext *context,
            const PangoFontDescription *desc,
            PangoLanguage *language);

void pango_context_set_font_description (PangoContext *context,
             const PangoFontDescription *desc);
PangoFontDescription * pango_context_get_font_description (PangoContext *context);
PangoLanguage *pango_context_get_language (PangoContext *context);
void pango_context_set_language (PangoContext *context,
             PangoLanguage *language);
void pango_context_set_base_dir (PangoContext *context,
             PangoDirection direction);
PangoDirection pango_context_get_base_dir (PangoContext *context);
void pango_context_set_base_gravity (PangoContext *context,
             PangoGravity gravity);
PangoGravity pango_context_get_base_gravity (PangoContext *context);
PangoGravity pango_context_get_gravity (PangoContext *context);
void pango_context_set_gravity_hint (PangoContext *context,
             PangoGravityHint hint);
PangoGravityHint pango_context_get_gravity_hint (PangoContext *context);

void pango_context_set_matrix (PangoContext *context,
            const PangoMatrix *matrix);
const PangoMatrix *pango_context_get_matrix (PangoContext *context);





GList *pango_itemize (PangoContext *context,
         const char *text,
         int start_index,
         int length,
         PangoAttrList *attrs,
         PangoAttrIterator *cached_iter);
GList *pango_itemize_with_base_dir (PangoContext *context,
         PangoDirection base_dir,
         const char *text,
         int start_index,
         int length,
         PangoAttrList *attrs,
         PangoAttrIterator *cached_iter);


# 29 "/usr/include/pango-1.0/pango/pango.h" 2

# 1 "/usr/include/pango-1.0/pango/pango-engine.h" 1
# 28 "/usr/include/pango-1.0/pango/pango-engine.h"
# 1 "/usr/include/pango-1.0/pango/pango-glyph.h" 1
# 28 "/usr/include/pango-1.0/pango/pango-glyph.h"


typedef struct _PangoGlyphGeometry PangoGlyphGeometry;
typedef struct _PangoGlyphVisAttr PangoGlyphVisAttr;
typedef struct _PangoGlyphInfo PangoGlyphInfo;
typedef struct _PangoGlyphString PangoGlyphString;


typedef gint32 PangoGlyphUnit;



struct _PangoGlyphGeometry
{
  PangoGlyphUnit width;
  PangoGlyphUnit x_offset;
  PangoGlyphUnit y_offset;
};



struct _PangoGlyphVisAttr
{
  guint is_cluster_start : 1;
};



struct _PangoGlyphInfo
{
  PangoGlyph glyph;
  PangoGlyphGeometry geometry;
  PangoGlyphVisAttr attr;
};




struct _PangoGlyphString {
  gint num_glyphs;

  PangoGlyphInfo *glyphs;






  gint *log_clusters;


  gint space;
};



PangoGlyphString *pango_glyph_string_new (void);
void pango_glyph_string_set_size (PangoGlyphString *string,
            gint new_len);
GType pango_glyph_string_get_type (void) __attribute__((__const__));
PangoGlyphString *pango_glyph_string_copy (PangoGlyphString *string);
void pango_glyph_string_free (PangoGlyphString *string);
void pango_glyph_string_extents (PangoGlyphString *glyphs,
            PangoFont *font,
            PangoRectangle *ink_rect,
            PangoRectangle *logical_rect);
int pango_glyph_string_get_width(PangoGlyphString *glyphs) __attribute__((__pure__));

void pango_glyph_string_extents_range (PangoGlyphString *glyphs,
           int start,
           int end,
           PangoFont *font,
           PangoRectangle *ink_rect,
           PangoRectangle *logical_rect);

void pango_glyph_string_get_logical_widths (PangoGlyphString *glyphs,
         const char *text,
         int length,
         int embedding_level,
         int *logical_widths);

void pango_glyph_string_index_to_x (PangoGlyphString *glyphs,
        char *text,
        int length,
        PangoAnalysis *analysis,
        int index_,
        gboolean trailing,
        int *x_pos);
void pango_glyph_string_x_to_index (PangoGlyphString *glyphs,
        char *text,
        int length,
        PangoAnalysis *analysis,
        int x_pos,
        int *index_,
        int *trailing);



void pango_shape (const gchar *text,
    gint length,
    const PangoAnalysis *analysis,
    PangoGlyphString *glyphs);

GList *pango_reorder_items (GList *logical_items);


# 29 "/usr/include/pango-1.0/pango/pango-engine.h" 2



# 379 "/usr/include/pango-1.0/pango/pango-engine.h"

# 31 "/usr/include/pango-1.0/pango/pango.h" 2
# 1 "/usr/include/pango-1.0/pango/pango-enum-types.h" 1
# 9 "/usr/include/pango-1.0/pango/pango-enum-types.h"


GType pango_attr_type_get_type (void);

GType pango_underline_get_type (void);


GType pango_bidi_type_get_type (void);

GType pango_direction_get_type (void);


GType pango_coverage_level_get_type (void);


GType pango_style_get_type (void);

GType pango_variant_get_type (void);

GType pango_weight_get_type (void);

GType pango_stretch_get_type (void);

GType pango_font_mask_get_type (void);


GType pango_gravity_get_type (void);

GType pango_gravity_hint_get_type (void);


GType pango_alignment_get_type (void);

GType pango_wrap_mode_get_type (void);

GType pango_ellipsize_mode_get_type (void);


GType pango_render_part_get_type (void);


GType pango_script_get_type (void);


GType pango_tab_align_get_type (void);


# 32 "/usr/include/pango-1.0/pango/pango.h" 2
# 1 "/usr/include/pango-1.0/pango/pango-features.h" 1
# 33 "/usr/include/pango-1.0/pango/pango.h" 2




# 1 "/usr/include/pango-1.0/pango/pango-glyph-item.h" 1
# 30 "/usr/include/pango-1.0/pango/pango-glyph-item.h"


typedef struct _PangoGlyphItem PangoGlyphItem;

struct _PangoGlyphItem
{
  PangoItem *item;
  PangoGlyphString *glyphs;
};



GType pango_glyph_item_get_type (void) __attribute__((__const__));

PangoGlyphItem *pango_glyph_item_split (PangoGlyphItem *orig,
            const char *text,
            int split_index);
PangoGlyphItem *pango_glyph_item_copy (PangoGlyphItem *orig);
void pango_glyph_item_free (PangoGlyphItem *glyph_item);
GSList * pango_glyph_item_apply_attrs (PangoGlyphItem *glyph_item,
            const char *text,
            PangoAttrList *list);
void pango_glyph_item_letter_space (PangoGlyphItem *glyph_item,
            const char *text,
            PangoLogAttr *log_attrs,
            int letter_spacing);


typedef struct _PangoGlyphItemIter PangoGlyphItemIter;

struct _PangoGlyphItemIter
{
  PangoGlyphItem *glyph_item;
  const gchar *text;

  int start_glyph;
  int start_index;
  int start_char;

  int end_glyph;
  int end_index;
  int end_char;
};



GType pango_glyph_item_iter_get_type (void) __attribute__((__const__));
PangoGlyphItemIter *pango_glyph_item_iter_copy (PangoGlyphItemIter *orig);
void pango_glyph_item_iter_free (PangoGlyphItemIter *iter);

gboolean pango_glyph_item_iter_init_start (PangoGlyphItemIter *iter,
          PangoGlyphItem *glyph_item,
          const char *text);
gboolean pango_glyph_item_iter_init_end (PangoGlyphItemIter *iter,
          PangoGlyphItem *glyph_item,
          const char *text);
gboolean pango_glyph_item_iter_next_cluster (PangoGlyphItemIter *iter);
gboolean pango_glyph_item_iter_prev_cluster (PangoGlyphItemIter *iter);


# 38 "/usr/include/pango-1.0/pango/pango.h" 2


# 1 "/usr/include/pango-1.0/pango/pango-layout.h" 1
# 28 "/usr/include/pango-1.0/pango/pango-layout.h"
# 1 "/usr/include/pango-1.0/pango/pango-tabs.h" 1
# 27 "/usr/include/pango-1.0/pango/pango-tabs.h"


typedef struct _PangoTabArray PangoTabArray;

typedef enum
{
  PANGO_TAB_LEFT
# 42 "/usr/include/pango-1.0/pango/pango-tabs.h"
} PangoTabAlign;



PangoTabArray *pango_tab_array_new (gint initial_size,
           gboolean positions_in_pixels);
PangoTabArray *pango_tab_array_new_with_positions (gint size,
           gboolean positions_in_pixels,
           PangoTabAlign first_alignment,
           gint first_position,
           ...);
GType pango_tab_array_get_type (void) __attribute__((__const__));
PangoTabArray *pango_tab_array_copy (PangoTabArray *src);
void pango_tab_array_free (PangoTabArray *tab_array);
gint pango_tab_array_get_size (PangoTabArray *tab_array);
void pango_tab_array_resize (PangoTabArray *tab_array,
           gint new_size);
void pango_tab_array_set_tab (PangoTabArray *tab_array,
           gint tab_index,
           PangoTabAlign alignment,
           gint location);
void pango_tab_array_get_tab (PangoTabArray *tab_array,
           gint tab_index,
           PangoTabAlign *alignment,
           gint *location);
void pango_tab_array_get_tabs (PangoTabArray *tab_array,
           PangoTabAlign **alignments,
           gint **locations);

gboolean pango_tab_array_get_positions_in_pixels (PangoTabArray *tab_array);



# 29 "/usr/include/pango-1.0/pango/pango-layout.h" 2



typedef struct _PangoLayout PangoLayout;
typedef struct _PangoLayoutClass PangoLayoutClass;
typedef struct _PangoLayoutLine PangoLayoutLine;

typedef PangoGlyphItem PangoLayoutRun;

typedef enum {
  PANGO_ALIGN_LEFT,
  PANGO_ALIGN_CENTER,
  PANGO_ALIGN_RIGHT
} PangoAlignment;

typedef enum {
  PANGO_WRAP_WORD,
  PANGO_WRAP_CHAR,
  PANGO_WRAP_WORD_CHAR
} PangoWrapMode;
# 63 "/usr/include/pango-1.0/pango/pango-layout.h"
typedef enum {
  PANGO_ELLIPSIZE_NONE,
  PANGO_ELLIPSIZE_START,
  PANGO_ELLIPSIZE_MIDDLE,
  PANGO_ELLIPSIZE_END
} PangoEllipsizeMode;

struct _PangoLayoutLine
{
  PangoLayout *layout;
  gint start_index;
  gint length;
  GSList *runs;
  guint is_paragraph_start : 1;
  guint resolved_dir : 3;
};
# 91 "/usr/include/pango-1.0/pango/pango-layout.h"
GType pango_layout_get_type (void) __attribute__((__const__));
PangoLayout *pango_layout_new (PangoContext *context);
PangoLayout *pango_layout_copy (PangoLayout *src);

PangoContext *pango_layout_get_context (PangoLayout *layout);

void pango_layout_set_attributes (PangoLayout *layout,
         PangoAttrList *attrs);
PangoAttrList *pango_layout_get_attributes (PangoLayout *layout);

void pango_layout_set_text (PangoLayout *layout,
         const char *text,
         int length);
const char *pango_layout_get_text (PangoLayout *layout);

void pango_layout_set_markup (PangoLayout *layout,
         const char *markup,
         int length);

void pango_layout_set_markup_with_accel (PangoLayout *layout,
         const char *markup,
         int length,
         gunichar accel_marker,
         gunichar *accel_char);

void pango_layout_set_font_description (PangoLayout *layout,
        const PangoFontDescription *desc);

const PangoFontDescription *pango_layout_get_font_description (PangoLayout *layout);

void pango_layout_set_width (PangoLayout *layout,
        int width);
int pango_layout_get_width (PangoLayout *layout);
void pango_layout_set_height (PangoLayout *layout,
        int height);
int pango_layout_get_height (PangoLayout *layout);
void pango_layout_set_wrap (PangoLayout *layout,
        PangoWrapMode wrap);
PangoWrapMode pango_layout_get_wrap (PangoLayout *layout);
gboolean pango_layout_is_wrapped (PangoLayout *layout);
void pango_layout_set_indent (PangoLayout *layout,
        int indent);
int pango_layout_get_indent (PangoLayout *layout);
void pango_layout_set_spacing (PangoLayout *layout,
        int spacing);
int pango_layout_get_spacing (PangoLayout *layout);
void pango_layout_set_justify (PangoLayout *layout,
        gboolean justify);
gboolean pango_layout_get_justify (PangoLayout *layout);
void pango_layout_set_auto_dir (PangoLayout *layout,
        gboolean auto_dir);
gboolean pango_layout_get_auto_dir (PangoLayout *layout);
void pango_layout_set_alignment (PangoLayout *layout,
        PangoAlignment alignment);
PangoAlignment pango_layout_get_alignment (PangoLayout *layout);

void pango_layout_set_tabs (PangoLayout *layout,
        PangoTabArray *tabs);

PangoTabArray* pango_layout_get_tabs (PangoLayout *layout);

void pango_layout_set_single_paragraph_mode (PangoLayout *layout,
             gboolean setting);
gboolean pango_layout_get_single_paragraph_mode (PangoLayout *layout);

void pango_layout_set_ellipsize (PangoLayout *layout,
            PangoEllipsizeMode ellipsize);
PangoEllipsizeMode pango_layout_get_ellipsize (PangoLayout *layout);
gboolean pango_layout_is_ellipsized (PangoLayout *layout);

int pango_layout_get_unknown_glyphs_count (PangoLayout *layout);

void pango_layout_context_changed (PangoLayout *layout);

void pango_layout_get_log_attrs (PangoLayout *layout,
         PangoLogAttr **attrs,
         gint *n_attrs);

void pango_layout_index_to_pos (PangoLayout *layout,
         int index_,
         PangoRectangle *pos);
void pango_layout_index_to_line_x (PangoLayout *layout,
         int index_,
         gboolean trailing,
         int *line,
         int *x_pos);
void pango_layout_get_cursor_pos (PangoLayout *layout,
         int index_,
         PangoRectangle *strong_pos,
         PangoRectangle *weak_pos);
void pango_layout_move_cursor_visually (PangoLayout *layout,
         gboolean strong,
         int old_index,
         int old_trailing,
         int direction,
         int *new_index,
         int *new_trailing);
gboolean pango_layout_xy_to_index (PangoLayout *layout,
         int x,
         int y,
         int *index_,
         int *trailing);
void pango_layout_get_extents (PangoLayout *layout,
         PangoRectangle *ink_rect,
         PangoRectangle *logical_rect);
void pango_layout_get_pixel_extents (PangoLayout *layout,
         PangoRectangle *ink_rect,
         PangoRectangle *logical_rect);
void pango_layout_get_size (PangoLayout *layout,
         int *width,
         int *height);
void pango_layout_get_pixel_size (PangoLayout *layout,
         int *width,
         int *height);
int pango_layout_get_baseline (PangoLayout *layout);

int pango_layout_get_line_count (PangoLayout *layout);
PangoLayoutLine *pango_layout_get_line (PangoLayout *layout,
          int line);
PangoLayoutLine *pango_layout_get_line_readonly (PangoLayout *layout,
          int line);
GSList * pango_layout_get_lines (PangoLayout *layout);
GSList * pango_layout_get_lines_readonly (PangoLayout *layout);




GType pango_layout_line_get_type (void) __attribute__((__const__));

PangoLayoutLine *pango_layout_line_ref (PangoLayoutLine *line);
void pango_layout_line_unref (PangoLayoutLine *line);

gboolean pango_layout_line_x_to_index (PangoLayoutLine *line,
      int x_pos,
      int *index_,
      int *trailing);
void pango_layout_line_index_to_x (PangoLayoutLine *line,
      int index_,
      gboolean trailing,
      int *x_pos);
void pango_layout_line_get_x_ranges (PangoLayoutLine *line,
      int start_index,
      int end_index,
      int **ranges,
      int *n_ranges);
void pango_layout_line_get_extents (PangoLayoutLine *line,
      PangoRectangle *ink_rect,
      PangoRectangle *logical_rect);
void pango_layout_line_get_pixel_extents (PangoLayoutLine *layout_line,
           PangoRectangle *ink_rect,
           PangoRectangle *logical_rect);

typedef struct _PangoLayoutIter PangoLayoutIter;



GType pango_layout_iter_get_type (void) __attribute__((__const__));

PangoLayoutIter *pango_layout_get_iter (PangoLayout *layout);
PangoLayoutIter *pango_layout_iter_copy (PangoLayoutIter *iter);
void pango_layout_iter_free (PangoLayoutIter *iter);

int pango_layout_iter_get_index (PangoLayoutIter *iter);
PangoLayoutRun *pango_layout_iter_get_run (PangoLayoutIter *iter);
PangoLayoutRun *pango_layout_iter_get_run_readonly (PangoLayoutIter *iter);
PangoLayoutLine *pango_layout_iter_get_line (PangoLayoutIter *iter);
PangoLayoutLine *pango_layout_iter_get_line_readonly (PangoLayoutIter *iter);
gboolean pango_layout_iter_at_last_line (PangoLayoutIter *iter);
PangoLayout *pango_layout_iter_get_layout (PangoLayoutIter *iter);

gboolean pango_layout_iter_next_char (PangoLayoutIter *iter);
gboolean pango_layout_iter_next_cluster (PangoLayoutIter *iter);
gboolean pango_layout_iter_next_run (PangoLayoutIter *iter);
gboolean pango_layout_iter_next_line (PangoLayoutIter *iter);

void pango_layout_iter_get_char_extents (PangoLayoutIter *iter,
         PangoRectangle *logical_rect);
void pango_layout_iter_get_cluster_extents (PangoLayoutIter *iter,
         PangoRectangle *ink_rect,
         PangoRectangle *logical_rect);
void pango_layout_iter_get_run_extents (PangoLayoutIter *iter,
         PangoRectangle *ink_rect,
         PangoRectangle *logical_rect);
void pango_layout_iter_get_line_extents (PangoLayoutIter *iter,
         PangoRectangle *ink_rect,
         PangoRectangle *logical_rect);



void pango_layout_iter_get_line_yrange (PangoLayoutIter *iter,
         int *y0_,
         int *y1_);
void pango_layout_iter_get_layout_extents (PangoLayoutIter *iter,
         PangoRectangle *ink_rect,
         PangoRectangle *logical_rect);
int pango_layout_iter_get_baseline (PangoLayoutIter *iter);


# 41 "/usr/include/pango-1.0/pango/pango.h" 2

# 1 "/usr/include/pango-1.0/pango/pango-renderer.h" 1
# 26 "/usr/include/pango-1.0/pango/pango-renderer.h"

# 35 "/usr/include/pango-1.0/pango/pango-renderer.h"
typedef struct _PangoRenderer PangoRenderer;
typedef struct _PangoRendererClass PangoRendererClass;
typedef struct _PangoRendererPrivate PangoRendererPrivate;
# 52 "/usr/include/pango-1.0/pango/pango-renderer.h"
typedef enum
{
  PANGO_RENDER_PART_FOREGROUND,
  PANGO_RENDER_PART_BACKGROUND,
  PANGO_RENDER_PART_UNDERLINE,
  PANGO_RENDER_PART_STRIKETHROUGH
} PangoRenderPart;
# 71 "/usr/include/pango-1.0/pango/pango-renderer.h"
struct _PangoRenderer
{

  GObject parent_instance;

  PangoUnderline underline;
  gboolean strikethrough;
  int active_count;


  PangoMatrix *matrix;


  PangoRendererPrivate *priv;
};
# 110 "/usr/include/pango-1.0/pango/pango-renderer.h"
struct _PangoRendererClass
{

  GObjectClass parent_class;







  void (*draw_glyphs) (PangoRenderer *renderer,
         PangoFont *font,
         PangoGlyphString *glyphs,
         int x,
         int y);
  void (*draw_rectangle) (PangoRenderer *renderer,
     PangoRenderPart part,
     int x,
     int y,
     int width,
     int height);
  void (*draw_error_underline) (PangoRenderer *renderer,
    int x,
    int y,
    int width,
    int height);


  void (*draw_shape) (PangoRenderer *renderer,
        PangoAttrShape *attr,
        int x,
        int y);




  void (*draw_trapezoid) (PangoRenderer *renderer,
     PangoRenderPart part,
     double y1_,
     double x11,
     double x21,
     double y2,
     double x12,
     double x22);
  void (*draw_glyph) (PangoRenderer *renderer,
        PangoFont *font,
        PangoGlyph glyph,
        double x,
        double y);



  void (*part_changed) (PangoRenderer *renderer,
   PangoRenderPart part);



  void (*begin) (PangoRenderer *renderer);
  void (*end) (PangoRenderer *renderer);



  void (*prepare_run) (PangoRenderer *renderer,
         PangoLayoutRun *run);




  void (*draw_glyph_item) (PangoRenderer *renderer,
      const char *text,
      PangoGlyphItem *glyph_item,
      int x,
      int y);




  void (*_pango_reserved2) (void);
  void (*_pango_reserved3) (void);
  void (*_pango_reserved4) (void);
};

GType pango_renderer_get_type (void) __attribute__((__const__));

void pango_renderer_draw_layout (PangoRenderer *renderer,
       PangoLayout *layout,
       int x,
       int y);
void pango_renderer_draw_layout_line (PangoRenderer *renderer,
       PangoLayoutLine *line,
       int x,
       int y);
void pango_renderer_draw_glyphs (PangoRenderer *renderer,
       PangoFont *font,
       PangoGlyphString *glyphs,
       int x,
       int y);
void pango_renderer_draw_glyph_item (PangoRenderer *renderer,
       const char *text,
       PangoGlyphItem *glyph_item,
       int x,
       int y);
void pango_renderer_draw_rectangle (PangoRenderer *renderer,
       PangoRenderPart part,
       int x,
       int y,
       int width,
       int height);
void pango_renderer_draw_error_underline (PangoRenderer *renderer,
       int x,
       int y,
       int width,
       int height);
void pango_renderer_draw_trapezoid (PangoRenderer *renderer,
       PangoRenderPart part,
       double y1_,
       double x11,
       double x21,
       double y2,
       double x12,
       double x22);
void pango_renderer_draw_glyph (PangoRenderer *renderer,
       PangoFont *font,
       PangoGlyph glyph,
       double x,
       double y);

void pango_renderer_activate (PangoRenderer *renderer);
void pango_renderer_deactivate (PangoRenderer *renderer);

void pango_renderer_part_changed (PangoRenderer *renderer,
      PangoRenderPart part);

void pango_renderer_set_color (PangoRenderer *renderer,
          PangoRenderPart part,
          const PangoColor *color);
PangoColor *pango_renderer_get_color (PangoRenderer *renderer,
          PangoRenderPart part);

void pango_renderer_set_matrix (PangoRenderer *renderer,
             const PangoMatrix *matrix);
const PangoMatrix *pango_renderer_get_matrix (PangoRenderer *renderer);

PangoLayout *pango_renderer_get_layout (PangoRenderer *renderer);
PangoLayoutLine *pango_renderer_get_layout_line (PangoRenderer *renderer);


# 43 "/usr/include/pango-1.0/pango/pango.h" 2



# 1 "/usr/include/pango-1.0/pango/pango-utils.h" 1
# 25 "/usr/include/pango-1.0/pango/pango-utils.h"
# 1 "/usr/include/stdio.h" 1 3 4
# 30 "/usr/include/stdio.h" 3 4




# 1 "/usr/lib64/gcc/x86_64-suse-linux/4.3/include/stddef.h" 1 3 4
# 35 "/usr/include/stdio.h" 2 3 4
# 45 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 65 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 75 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 32 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib64/gcc/x86_64-suse-linux/4.3/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 78 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4

typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 53 "/usr/include/_G_config.h" 3 4
typedef int _G_int16_t __attribute__ ((__mode__ (__HI__)));
typedef int _G_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int _G_uint16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));
# 33 "/usr/include/libio.h" 2 3 4
# 170 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 180 "/usr/include/libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 203 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 271 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 319 "/usr/include/libio.h" 3 4
  __off64_t _offset;
# 328 "/usr/include/libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 364 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, __const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);
# 416 "/usr/include/libio.h" 3 4
extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 458 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__));

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__));
# 488 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__));
# 76 "/usr/include/stdio.h" 2 3 4
# 89 "/usr/include/stdio.h" 3 4


typedef _G_fpos_t fpos_t;




# 141 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 142 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;









extern int remove (__const char *__filename) __attribute__ ((__nothrow__));

extern int rename (__const char *__old, __const char *__new) __attribute__ ((__nothrow__));














extern FILE *tmpfile (void) ;
# 188 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char *__s) __attribute__ ((__nothrow__)) ;

# 206 "/usr/include/stdio.h" 3 4
extern char *tempnam (__const char *__dir, __const char *__pfx)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 245 "/usr/include/stdio.h" 3 4






extern FILE *fopen (__const char *__restrict __filename,
      __const char *__restrict __modes) ;




extern FILE *freopen (__const char *__restrict __filename,
        __const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 274 "/usr/include/stdio.h" 3 4

# 285 "/usr/include/stdio.h" 3 4
extern FILE *fdopen (int __fd, __const char *__modes) __attribute__ ((__nothrow__)) ;
# 306 "/usr/include/stdio.h" 3 4



extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__));

# 328 "/usr/include/stdio.h" 3 4





extern int fprintf (FILE *__restrict __stream,
      __const char *__restrict __format, ...);




extern int printf (__const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      __const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (__const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));





extern int snprintf (char *__restrict __s, size_t __maxlen,
       __const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        __const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));

# 400 "/usr/include/stdio.h" 3 4





extern int fscanf (FILE *__restrict __stream,
     __const char *__restrict __format, ...) ;




extern int scanf (__const char *__restrict __format, ...) ;

extern int sscanf (__const char *__restrict __s,
     __const char *__restrict __format, ...) __attribute__ ((__nothrow__));
# 443 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (__const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (__const char *__restrict __s,
      __const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 502 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 530 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 545 "/usr/include/stdio.h" 3 4








extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 582 "/usr/include/stdio.h" 3 4
extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;






extern char *gets (char *__s) ;

# 655 "/usr/include/stdio.h" 3 4





extern int fputs (__const char *__restrict __s, FILE *__restrict __stream);





extern int puts (__const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (__const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s) ;

# 715 "/usr/include/stdio.h" 3 4





extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 763 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, __const fpos_t *__pos);
# 786 "/usr/include/stdio.h" 3 4

# 795 "/usr/include/stdio.h" 3 4


extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__)) ;

# 812 "/usr/include/stdio.h" 3 4





extern void perror (__const char *__s);






# 1 "/usr/include/bits/sys_errlist.h" 1 3 4
# 825 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__)) ;
# 844 "/usr/include/stdio.h" 3 4
extern FILE *popen (__const char *__command, __const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__));





extern char *cuserid (char *__s);
# 884 "/usr/include/stdio.h" 3 4
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__));







# 1 "/usr/include/getopt.h" 1 3 4
# 59 "/usr/include/getopt.h" 3 4
extern char *optarg;
# 73 "/usr/include/getopt.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 152 "/usr/include/getopt.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       __attribute__ ((__nothrow__));
# 900 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/include/bits/stdio.h" 1 3 4
# 36 "/usr/include/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
vprintf (__const char *__restrict __fmt, __gnuc_va_list __arg)
{
  return vfprintf (stdout, __fmt, __arg);
}



extern __inline __attribute__ ((__gnu_inline__)) int
getchar (void)
{
  return _IO_getc (stdin);
}
# 63 "/usr/include/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline __attribute__ ((__gnu_inline__)) int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline __attribute__ ((__gnu_inline__)) int
putchar (int __c)
{
  return _IO_putc (__c, stdout);
}
# 98 "/usr/include/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline __attribute__ ((__gnu_inline__)) int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}
# 906 "/usr/include/stdio.h" 2 3 4
# 914 "/usr/include/stdio.h" 3 4

# 26 "/usr/include/pango-1.0/pango/pango-utils.h" 2





char ** pango_split_file_list (const char *str);

char *pango_trim_string (const char *str);
gint pango_read_line (FILE *stream,
          GString *str);
gboolean pango_skip_space (const char **pos);
gboolean pango_scan_word (const char **pos,
          GString *out);
gboolean pango_scan_string (const char **pos,
          GString *out);
gboolean pango_scan_int (const char **pos,
          int *out);
# 51 "/usr/include/pango-1.0/pango/pango-utils.h"
gboolean pango_parse_enum (GType type,
          const char *str,
          int *value,
          gboolean warn,
          char **possible_values);
# 64 "/usr/include/pango-1.0/pango/pango-utils.h"
gboolean pango_parse_style (const char *str,
         PangoStyle *style,
         gboolean warn);
gboolean pango_parse_variant (const char *str,
         PangoVariant *variant,
         gboolean warn);
gboolean pango_parse_weight (const char *str,
         PangoWeight *weight,
         gboolean warn);
gboolean pango_parse_stretch (const char *str,
         PangoStretch *stretch,
         gboolean warn);
# 97 "/usr/include/pango-1.0/pango/pango-utils.h"
void pango_quantize_line_geometry (int *thickness,
       int *position);



guint8 * pango_log2vis_get_embedding_levels (const gchar *text,
          int length,
          PangoDirection *pbase_dir);




gboolean pango_is_zero_width (gunichar ch) __attribute__((__const__));
# 131 "/usr/include/pango-1.0/pango/pango-utils.h"
int pango_version (void) __attribute__((__const__));


const char * pango_version_string (void) __attribute__((__const__));


const char * pango_version_check (int required_major,
        int required_minor,
        int required_micro) __attribute__((__const__));


# 47 "/usr/include/pango-1.0/pango/pango.h" 2
# 38 "/usr/include/gtk-2.0/gdk/gdktypes.h" 2
# 55 "/usr/include/gtk-2.0/gdk/gdktypes.h"
# 1 "/usr/lib64/gtk-2.0/include/gdkconfig.h" 1
# 56 "/usr/include/gtk-2.0/gdk/gdktypes.h" 2












typedef struct _GdkPoint GdkPoint;
typedef struct _GdkRectangle GdkRectangle;
typedef struct _GdkSegment GdkSegment;
typedef struct _GdkSpan GdkSpan;






typedef guint32 GdkWChar;

typedef struct _GdkAtom *GdkAtom;
# 91 "/usr/include/gtk-2.0/gdk/gdktypes.h"
typedef guint32 GdkNativeWindow;




typedef struct _GdkColor GdkColor;
typedef struct _GdkColormap GdkColormap;
typedef struct _GdkCursor GdkCursor;
typedef struct _GdkFont GdkFont;
typedef struct _GdkGC GdkGC;
typedef struct _GdkImage GdkImage;
typedef struct _GdkRegion GdkRegion;
typedef struct _GdkVisual GdkVisual;

typedef struct _GdkDrawable GdkDrawable;
typedef struct _GdkDrawable GdkBitmap;
typedef struct _GdkDrawable GdkPixmap;
typedef struct _GdkDrawable GdkWindow;
typedef struct _GdkDisplay GdkDisplay;
typedef struct _GdkScreen GdkScreen;

typedef enum
{
  GDK_LSB_FIRST,
  GDK_MSB_FIRST
} GdkByteOrder;



typedef enum
{
  GDK_SHIFT_MASK = 1 << 0,
  GDK_LOCK_MASK = 1 << 1,
  GDK_CONTROL_MASK = 1 << 2,
  GDK_MOD1_MASK = 1 << 3,
  GDK_MOD2_MASK = 1 << 4,
  GDK_MOD3_MASK = 1 << 5,
  GDK_MOD4_MASK = 1 << 6,
  GDK_MOD5_MASK = 1 << 7,
  GDK_BUTTON1_MASK = 1 << 8,
  GDK_BUTTON2_MASK = 1 << 9,
  GDK_BUTTON3_MASK = 1 << 10,
  GDK_BUTTON4_MASK = 1 << 11,
  GDK_BUTTON5_MASK = 1 << 12,





  GDK_SUPER_MASK = 1 << 26,
  GDK_HYPER_MASK = 1 << 27,
  GDK_META_MASK = 1 << 28,

  GDK_RELEASE_MASK = 1 << 30,

  GDK_MODIFIER_MASK = 0x5c001fff
} GdkModifierType;

typedef enum
{
  GDK_INPUT_READ = 1 << 0,
  GDK_INPUT_WRITE = 1 << 1,
  GDK_INPUT_EXCEPTION = 1 << 2
} GdkInputCondition;

typedef enum
{
  GDK_OK = 0,
  GDK_ERROR = -1,
  GDK_ERROR_PARAM = -2,
  GDK_ERROR_FILE = -3,
  GDK_ERROR_MEM = -4
} GdkStatus;





typedef enum
{
  GDK_GRAB_SUCCESS = 0,
  GDK_GRAB_ALREADY_GRABBED = 1,
  GDK_GRAB_INVALID_TIME = 2,
  GDK_GRAB_NOT_VIEWABLE = 3,
  GDK_GRAB_FROZEN = 4
} GdkGrabStatus;

typedef void (*GdkInputFunction) (gpointer data,
      gint source,
      GdkInputCondition condition);



typedef void (*GdkDestroyNotify) (gpointer data);



struct _GdkPoint
{
  gint x;
  gint y;
};

struct _GdkRectangle
{
  gint x;
  gint y;
  gint width;
  gint height;
};

struct _GdkSegment
{
  gint x1;
  gint y1;
  gint x2;
  gint y2;
};

struct _GdkSpan
{
  gint x;
  gint y;
  gint width;
};


# 33 "/usr/include/gtk-2.0/gdk/gdkscreen.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkdisplay.h" 1
# 31 "/usr/include/gtk-2.0/gdk/gdkdisplay.h"
# 1 "/usr/include/gtk-2.0/gdk/gdktypes.h" 1
# 32 "/usr/include/gtk-2.0/gdk/gdkdisplay.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkevents.h" 1
# 34 "/usr/include/gtk-2.0/gdk/gdkevents.h"
# 1 "/usr/include/gtk-2.0/gdk/gdkcolor.h" 1
# 35 "/usr/include/gtk-2.0/gdk/gdkcolor.h"
# 1 "/usr/include/gtk-2.0/gdk/gdktypes.h" 1
# 36 "/usr/include/gtk-2.0/gdk/gdkcolor.h" 2


# 46 "/usr/include/gtk-2.0/gdk/gdkcolor.h"
struct _GdkColor
{
  guint32 pixel;
  guint16 red;
  guint16 green;
  guint16 blue;
};




typedef struct _GdkColormapClass GdkColormapClass;
# 68 "/usr/include/gtk-2.0/gdk/gdkcolor.h"
struct _GdkColormap
{

  GObject parent_instance;


  gint size;
  GdkColor *colors;


  GdkVisual *visual;

  gpointer windowing_data;
};

struct _GdkColormapClass
{
  GObjectClass parent_class;

};

GType gdk_colormap_get_type (void) __attribute__((__const__));

GdkColormap* gdk_colormap_new (GdkVisual *visual,
       gboolean allocate);


GdkColormap* gdk_colormap_ref (GdkColormap *cmap);
void gdk_colormap_unref (GdkColormap *cmap);



GdkColormap* gdk_colormap_get_system (void);


GdkScreen *gdk_colormap_get_screen (GdkColormap *cmap);


gint gdk_colormap_get_system_size (void);




void gdk_colormap_change (GdkColormap *colormap,
     gint ncolors);


gint gdk_colormap_alloc_colors (GdkColormap *colormap,
       GdkColor *colors,
       gint n_colors,
       gboolean writeable,
       gboolean best_match,
       gboolean *success);
gboolean gdk_colormap_alloc_color (GdkColormap *colormap,
       GdkColor *color,
       gboolean writeable,
       gboolean best_match);
void gdk_colormap_free_colors (GdkColormap *colormap,
       const GdkColor *colors,
       gint n_colors);
void gdk_colormap_query_color (GdkColormap *colormap,
       gulong pixel,
       GdkColor *result);

GdkVisual *gdk_colormap_get_visual (GdkColormap *colormap);

GdkColor *gdk_color_copy (const GdkColor *color);
void gdk_color_free (GdkColor *color);
gboolean gdk_color_parse (const gchar *spec,
          GdkColor *color);
guint gdk_color_hash (const GdkColor *colora);
gboolean gdk_color_equal (const GdkColor *colora,
          const GdkColor *colorb);
gchar * gdk_color_to_string (const GdkColor *color);

GType gdk_color_get_type (void) __attribute__((__const__));



void gdk_colors_store (GdkColormap *colormap,
     GdkColor *colors,
     gint ncolors);
gint gdk_color_white (GdkColormap *colormap,
     GdkColor *color);
gint gdk_color_black (GdkColormap *colormap,
     GdkColor *color);
gint gdk_color_alloc (GdkColormap *colormap,
     GdkColor *color);
gint gdk_color_change (GdkColormap *colormap,
     GdkColor *color);




gint gdk_colors_alloc (GdkColormap *colormap,
     gboolean contiguous,
     gulong *planes,
     gint nplanes,
     gulong *pixels,
     gint npixels);
void gdk_colors_free (GdkColormap *colormap,
     gulong *pixels,
     gint npixels,
     gulong planes);



# 35 "/usr/include/gtk-2.0/gdk/gdkevents.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdktypes.h" 1
# 36 "/usr/include/gtk-2.0/gdk/gdkevents.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkdnd.h" 1
# 34 "/usr/include/gtk-2.0/gdk/gdkdnd.h"
# 1 "/usr/include/gtk-2.0/gdk/gdktypes.h" 1
# 35 "/usr/include/gtk-2.0/gdk/gdkdnd.h" 2



typedef struct _GdkDragContext GdkDragContext;

typedef enum
{
  GDK_ACTION_DEFAULT = 1 << 0,
  GDK_ACTION_COPY = 1 << 1,
  GDK_ACTION_MOVE = 1 << 2,
  GDK_ACTION_LINK = 1 << 3,
  GDK_ACTION_PRIVATE = 1 << 4,
  GDK_ACTION_ASK = 1 << 5
} GdkDragAction;

typedef enum
{
  GDK_DRAG_PROTO_MOTIF,
  GDK_DRAG_PROTO_XDND,
  GDK_DRAG_PROTO_ROOTWIN,

  GDK_DRAG_PROTO_NONE,
  GDK_DRAG_PROTO_WIN32_DROPFILES,
  GDK_DRAG_PROTO_OLE2,
  GDK_DRAG_PROTO_LOCAL
} GdkDragProtocol;





typedef struct _GdkDragContextClass GdkDragContextClass;
# 75 "/usr/include/gtk-2.0/gdk/gdkdnd.h"
struct _GdkDragContext {
  GObject parent_instance;



  GdkDragProtocol protocol;

  gboolean is_source;

  GdkWindow *source_window;
  GdkWindow *dest_window;

  GList *targets;
  GdkDragAction actions;
  GdkDragAction suggested_action;
  GdkDragAction action;

  guint32 start_time;



  gpointer windowing_data;
};

struct _GdkDragContextClass {
  GObjectClass parent_class;


};



GType gdk_drag_context_get_type (void) __attribute__((__const__));
GdkDragContext * gdk_drag_context_new (void);


void gdk_drag_context_ref (GdkDragContext *context);
void gdk_drag_context_unref (GdkDragContext *context);




void gdk_drag_status (GdkDragContext *context,
             GdkDragAction action,
      guint32 time_);
void gdk_drop_reply (GdkDragContext *context,
      gboolean ok,
      guint32 time_);
void gdk_drop_finish (GdkDragContext *context,
      gboolean success,
      guint32 time_);
GdkAtom gdk_drag_get_selection (GdkDragContext *context);



GdkDragContext * gdk_drag_begin (GdkWindow *window,
          GList *targets);

GdkNativeWindow gdk_drag_get_protocol_for_display (GdkDisplay *display,
         GdkNativeWindow xid,
         GdkDragProtocol *protocol);

void gdk_drag_find_window_for_screen (GdkDragContext *context,
        GdkWindow *drag_window,
        GdkScreen *screen,
        gint x_root,
        gint y_root,
        GdkWindow **dest_window,
        GdkDragProtocol *protocol);


GdkNativeWindow gdk_drag_get_protocol (GdkNativeWindow xid,
           GdkDragProtocol *protocol);

void gdk_drag_find_window (GdkDragContext *context,
          GdkWindow *drag_window,
          gint x_root,
          gint y_root,
          GdkWindow **dest_window,
          GdkDragProtocol *protocol);


gboolean gdk_drag_motion (GdkDragContext *context,
          GdkWindow *dest_window,
          GdkDragProtocol protocol,
          gint x_root,
          gint y_root,
          GdkDragAction suggested_action,
          GdkDragAction possible_actions,
          guint32 time_);
void gdk_drag_drop (GdkDragContext *context,
          guint32 time_);
void gdk_drag_abort (GdkDragContext *context,
          guint32 time_);
gboolean gdk_drag_drop_succeeded (GdkDragContext *context);


# 37 "/usr/include/gtk-2.0/gdk/gdkevents.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkinput.h" 1
# 34 "/usr/include/gtk-2.0/gdk/gdkinput.h"
# 1 "/usr/include/gtk-2.0/gdk/gdktypes.h" 1
# 35 "/usr/include/gtk-2.0/gdk/gdkinput.h" 2


# 45 "/usr/include/gtk-2.0/gdk/gdkinput.h"
typedef struct _GdkDeviceKey GdkDeviceKey;
typedef struct _GdkDeviceAxis GdkDeviceAxis;
typedef struct _GdkDevice GdkDevice;
typedef struct _GdkDeviceClass GdkDeviceClass;
typedef struct _GdkTimeCoord GdkTimeCoord;

typedef enum
{
  GDK_EXTENSION_EVENTS_NONE,
  GDK_EXTENSION_EVENTS_ALL,
  GDK_EXTENSION_EVENTS_CURSOR
} GdkExtensionMode;

typedef enum
{
  GDK_SOURCE_MOUSE,
  GDK_SOURCE_PEN,
  GDK_SOURCE_ERASER,
  GDK_SOURCE_CURSOR
} GdkInputSource;

typedef enum
{
  GDK_MODE_DISABLED,
  GDK_MODE_SCREEN,
  GDK_MODE_WINDOW
} GdkInputMode;

typedef enum
{
  GDK_AXIS_IGNORE,
  GDK_AXIS_X,
  GDK_AXIS_Y,
  GDK_AXIS_PRESSURE,
  GDK_AXIS_XTILT,
  GDK_AXIS_YTILT,
  GDK_AXIS_WHEEL,
  GDK_AXIS_LAST
} GdkAxisUse;

struct _GdkDeviceKey
{
  guint keyval;
  GdkModifierType modifiers;
};

struct _GdkDeviceAxis
{
  GdkAxisUse use;
  gdouble min;
  gdouble max;
};

struct _GdkDevice
{
  GObject parent_instance;


  gchar *name;
  GdkInputSource source;
  GdkInputMode mode;
  gboolean has_cursor;

  gint num_axes;
  GdkDeviceAxis *axes;

  gint num_keys;
  GdkDeviceKey *keys;
};






struct _GdkTimeCoord
{
  guint32 time;
  gdouble axes[128];
};

GType gdk_device_get_type (void) __attribute__((__const__));



GList * gdk_devices_list (void);



void gdk_device_set_source (GdkDevice *device,
      GdkInputSource source);

gboolean gdk_device_set_mode (GdkDevice *device,
      GdkInputMode mode);

void gdk_device_set_key (GdkDevice *device,
      guint index_,
      guint keyval,
      GdkModifierType modifiers);

void gdk_device_set_axis_use (GdkDevice *device,
      guint index_,
      GdkAxisUse use);
void gdk_device_get_state (GdkDevice *device,
      GdkWindow *window,
      gdouble *axes,
      GdkModifierType *mask);
gboolean gdk_device_get_history (GdkDevice *device,
      GdkWindow *window,
      guint32 start,
      guint32 stop,
      GdkTimeCoord ***events,
      gint *n_events);
void gdk_device_free_history (GdkTimeCoord **events,
      gint n_events);
gboolean gdk_device_get_axis (GdkDevice *device,
      gdouble *axes,
      GdkAxisUse use,
      gdouble *value);

void gdk_input_set_extension_events (GdkWindow *window,
         gint mask,
         GdkExtensionMode mode);


GdkDevice *gdk_device_get_core_pointer (void);



# 38 "/usr/include/gtk-2.0/gdk/gdkevents.h" 2









typedef struct _GdkEventAny GdkEventAny;
typedef struct _GdkEventExpose GdkEventExpose;
typedef struct _GdkEventNoExpose GdkEventNoExpose;
typedef struct _GdkEventVisibility GdkEventVisibility;
typedef struct _GdkEventMotion GdkEventMotion;
typedef struct _GdkEventButton GdkEventButton;
typedef struct _GdkEventScroll GdkEventScroll;
typedef struct _GdkEventKey GdkEventKey;
typedef struct _GdkEventFocus GdkEventFocus;
typedef struct _GdkEventCrossing GdkEventCrossing;
typedef struct _GdkEventConfigure GdkEventConfigure;
typedef struct _GdkEventProperty GdkEventProperty;
typedef struct _GdkEventSelection GdkEventSelection;
typedef struct _GdkEventOwnerChange GdkEventOwnerChange;
typedef struct _GdkEventProximity GdkEventProximity;
typedef struct _GdkEventClient GdkEventClient;
typedef struct _GdkEventDND GdkEventDND;
typedef struct _GdkEventWindowState GdkEventWindowState;
typedef struct _GdkEventSetting GdkEventSetting;
typedef struct _GdkEventGrabBroken GdkEventGrabBroken;

typedef union _GdkEvent GdkEvent;

typedef void (*GdkEventFunc) (GdkEvent *event,
         gpointer data);



typedef void GdkXEvent;



typedef enum {
  GDK_FILTER_CONTINUE,
  GDK_FILTER_TRANSLATE,


  GDK_FILTER_REMOVE
} GdkFilterReturn;

typedef GdkFilterReturn (*GdkFilterFunc) (GdkXEvent *xevent,
       GdkEvent *event,
       gpointer data);
# 115 "/usr/include/gtk-2.0/gdk/gdkevents.h"
typedef enum
{
  GDK_NOTHING = -1,
  GDK_DELETE = 0,
  GDK_DESTROY = 1,
  GDK_EXPOSE = 2,
  GDK_MOTION_NOTIFY = 3,
  GDK_BUTTON_PRESS = 4,
  GDK_2BUTTON_PRESS = 5,
  GDK_3BUTTON_PRESS = 6,
  GDK_BUTTON_RELEASE = 7,
  GDK_KEY_PRESS = 8,
  GDK_KEY_RELEASE = 9,
  GDK_ENTER_NOTIFY = 10,
  GDK_LEAVE_NOTIFY = 11,
  GDK_FOCUS_CHANGE = 12,
  GDK_CONFIGURE = 13,
  GDK_MAP = 14,
  GDK_UNMAP = 15,
  GDK_PROPERTY_NOTIFY = 16,
  GDK_SELECTION_CLEAR = 17,
  GDK_SELECTION_REQUEST = 18,
  GDK_SELECTION_NOTIFY = 19,
  GDK_PROXIMITY_IN = 20,
  GDK_PROXIMITY_OUT = 21,
  GDK_DRAG_ENTER = 22,
  GDK_DRAG_LEAVE = 23,
  GDK_DRAG_MOTION = 24,
  GDK_DRAG_STATUS = 25,
  GDK_DROP_START = 26,
  GDK_DROP_FINISHED = 27,
  GDK_CLIENT_EVENT = 28,
  GDK_VISIBILITY_NOTIFY = 29,
  GDK_NO_EXPOSE = 30,
  GDK_SCROLL = 31,
  GDK_WINDOW_STATE = 32,
  GDK_SETTING = 33,
  GDK_OWNER_CHANGE = 34,
  GDK_GRAB_BROKEN = 35,
  GDK_DAMAGE = 36
} GdkEventType;




typedef enum
{
  GDK_EXPOSURE_MASK = 1 << 1,
  GDK_POINTER_MOTION_MASK = 1 << 2,
  GDK_POINTER_MOTION_HINT_MASK = 1 << 3,
  GDK_BUTTON_MOTION_MASK = 1 << 4,
  GDK_BUTTON1_MOTION_MASK = 1 << 5,
  GDK_BUTTON2_MOTION_MASK = 1 << 6,
  GDK_BUTTON3_MOTION_MASK = 1 << 7,
  GDK_BUTTON_PRESS_MASK = 1 << 8,
  GDK_BUTTON_RELEASE_MASK = 1 << 9,
  GDK_KEY_PRESS_MASK = 1 << 10,
  GDK_KEY_RELEASE_MASK = 1 << 11,
  GDK_ENTER_NOTIFY_MASK = 1 << 12,
  GDK_LEAVE_NOTIFY_MASK = 1 << 13,
  GDK_FOCUS_CHANGE_MASK = 1 << 14,
  GDK_STRUCTURE_MASK = 1 << 15,
  GDK_PROPERTY_CHANGE_MASK = 1 << 16,
  GDK_VISIBILITY_NOTIFY_MASK = 1 << 17,
  GDK_PROXIMITY_IN_MASK = 1 << 18,
  GDK_PROXIMITY_OUT_MASK = 1 << 19,
  GDK_SUBSTRUCTURE_MASK = 1 << 20,
  GDK_SCROLL_MASK = 1 << 21,
  GDK_ALL_EVENTS_MASK = 0x3FFFFE
} GdkEventMask;

typedef enum
{
  GDK_VISIBILITY_UNOBSCURED,
  GDK_VISIBILITY_PARTIAL,
  GDK_VISIBILITY_FULLY_OBSCURED
} GdkVisibilityState;

typedef enum
{
  GDK_SCROLL_UP,
  GDK_SCROLL_DOWN,
  GDK_SCROLL_LEFT,
  GDK_SCROLL_RIGHT
} GdkScrollDirection;
# 209 "/usr/include/gtk-2.0/gdk/gdkevents.h"
typedef enum
{
  GDK_NOTIFY_ANCESTOR = 0,
  GDK_NOTIFY_VIRTUAL = 1,
  GDK_NOTIFY_INFERIOR = 2,
  GDK_NOTIFY_NONLINEAR = 3,
  GDK_NOTIFY_NONLINEAR_VIRTUAL = 4,
  GDK_NOTIFY_UNKNOWN = 5
} GdkNotifyType;






typedef enum
{
  GDK_CROSSING_NORMAL,
  GDK_CROSSING_GRAB,
  GDK_CROSSING_UNGRAB,
  GDK_CROSSING_GTK_GRAB,
  GDK_CROSSING_GTK_UNGRAB,
  GDK_CROSSING_STATE_CHANGED
} GdkCrossingMode;

typedef enum
{
  GDK_PROPERTY_NEW_VALUE,
  GDK_PROPERTY_DELETE
} GdkPropertyState;

typedef enum
{
  GDK_WINDOW_STATE_WITHDRAWN = 1 << 0,
  GDK_WINDOW_STATE_ICONIFIED = 1 << 1,
  GDK_WINDOW_STATE_MAXIMIZED = 1 << 2,
  GDK_WINDOW_STATE_STICKY = 1 << 3,
  GDK_WINDOW_STATE_FULLSCREEN = 1 << 4,
  GDK_WINDOW_STATE_ABOVE = 1 << 5,
  GDK_WINDOW_STATE_BELOW = 1 << 6
} GdkWindowState;

typedef enum
{
  GDK_SETTING_ACTION_NEW,
  GDK_SETTING_ACTION_CHANGED,
  GDK_SETTING_ACTION_DELETED
} GdkSettingAction;

typedef enum
{
  GDK_OWNER_CHANGE_NEW_OWNER,
  GDK_OWNER_CHANGE_DESTROY,
  GDK_OWNER_CHANGE_CLOSE
} GdkOwnerChange;

struct _GdkEventAny
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
};

struct _GdkEventExpose
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkRectangle area;
  GdkRegion *region;
  gint count;
};

struct _GdkEventNoExpose
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
};

struct _GdkEventVisibility
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkVisibilityState state;
};

struct _GdkEventMotion
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  gdouble x;
  gdouble y;
  gdouble *axes;
  guint state;
  gint16 is_hint;
  GdkDevice *device;
  gdouble x_root, y_root;
};

struct _GdkEventButton
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  gdouble x;
  gdouble y;
  gdouble *axes;
  guint state;
  guint button;
  GdkDevice *device;
  gdouble x_root, y_root;
};

struct _GdkEventScroll
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  gdouble x;
  gdouble y;
  guint state;
  GdkScrollDirection direction;
  GdkDevice *device;
  gdouble x_root, y_root;
};

struct _GdkEventKey
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  guint state;
  guint keyval;
  gint length;
  gchar *string;
  guint16 hardware_keycode;
  guint8 group;
  guint is_modifier : 1;
};

struct _GdkEventCrossing
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkWindow *subwindow;
  guint32 time;
  gdouble x;
  gdouble y;
  gdouble x_root;
  gdouble y_root;
  GdkCrossingMode mode;
  GdkNotifyType detail;
  gboolean focus;
  guint state;
};

struct _GdkEventFocus
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  gint16 in;
};

struct _GdkEventConfigure
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  gint x, y;
  gint width;
  gint height;
};

struct _GdkEventProperty
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkAtom atom;
  guint32 time;
  guint state;
};

struct _GdkEventSelection
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkAtom selection;
  GdkAtom target;
  GdkAtom property;
  guint32 time;
  GdkNativeWindow requestor;
};

struct _GdkEventOwnerChange
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkNativeWindow owner;
  GdkOwnerChange reason;
  GdkAtom selection;
  guint32 time;
  guint32 selection_time;
};




struct _GdkEventProximity
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  GdkDevice *device;
};

struct _GdkEventClient
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkAtom message_type;
  gushort data_format;
  union {
    char b[20];
    short s[10];
    long l[5];
  } data;
};

struct _GdkEventSetting
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkSettingAction action;
  char *name;
};

struct _GdkEventWindowState
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkWindowState changed_mask;
  GdkWindowState new_window_state;
};

struct _GdkEventGrabBroken {
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  gboolean keyboard;
  gboolean implicit;
  GdkWindow *grab_window;
};



struct _GdkEventDND {
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkDragContext *context;

  guint32 time;
  gshort x_root, y_root;
};

union _GdkEvent
{
  GdkEventType type;
  GdkEventAny any;
  GdkEventExpose expose;
  GdkEventNoExpose no_expose;
  GdkEventVisibility visibility;
  GdkEventMotion motion;
  GdkEventButton button;
  GdkEventScroll scroll;
  GdkEventKey key;
  GdkEventCrossing crossing;
  GdkEventFocus focus_change;
  GdkEventConfigure configure;
  GdkEventProperty property;
  GdkEventSelection selection;
  GdkEventOwnerChange owner_change;
  GdkEventProximity proximity;
  GdkEventClient client;
  GdkEventDND dnd;
  GdkEventWindowState window_state;
  GdkEventSetting setting;
  GdkEventGrabBroken grab_broken;
};

GType gdk_event_get_type (void) __attribute__((__const__));

gboolean gdk_events_pending (void);
GdkEvent* gdk_event_get (void);

GdkEvent* gdk_event_peek (void);
GdkEvent* gdk_event_get_graphics_expose (GdkWindow *window);
void gdk_event_put (const GdkEvent *event);

GdkEvent* gdk_event_new (GdkEventType type);
GdkEvent* gdk_event_copy (const GdkEvent *event);
void gdk_event_free (GdkEvent *event);

guint32 gdk_event_get_time (const GdkEvent *event);
gboolean gdk_event_get_state (const GdkEvent *event,
                                         GdkModifierType *state);
gboolean gdk_event_get_coords (const GdkEvent *event,
      gdouble *x_win,
      gdouble *y_win);
gboolean gdk_event_get_root_coords (const GdkEvent *event,
      gdouble *x_root,
      gdouble *y_root);
gboolean gdk_event_get_axis (const GdkEvent *event,
                                         GdkAxisUse axis_use,
                                         gdouble *value);
void gdk_event_request_motions (const GdkEventMotion *event);
void gdk_event_handler_set (GdkEventFunc func,
      gpointer data,
      GDestroyNotify notify);

void gdk_event_set_screen (GdkEvent *event,
                                         GdkScreen *screen);
GdkScreen *gdk_event_get_screen (const GdkEvent *event);

void gdk_set_show_events (gboolean show_events);
gboolean gdk_get_show_events (void);


void gdk_add_client_message_filter (GdkAtom message_type,
        GdkFilterFunc func,
        gpointer data);

gboolean gdk_setting_get (const gchar *name,
     GValue *value);



# 33 "/usr/include/gtk-2.0/gdk/gdkdisplay.h" 2



typedef struct _GdkDisplayClass GdkDisplayClass;
typedef struct _GdkDisplayPointerHooks GdkDisplayPointerHooks;
# 46 "/usr/include/gtk-2.0/gdk/gdkdisplay.h"
struct _GdkDisplay
{
  GObject parent_instance;


  GList *queued_events;
  GList *queued_tail;




  guint32 button_click_time[2];
  GdkWindow *button_window[2];
  gint button_number[2];

  guint double_click_time;
  GdkDevice *core_pointer;

  const GdkDisplayPointerHooks *pointer_hooks;

  guint closed : 1;

  guint double_click_distance;
  gint button_x[2];
  gint button_y[2];
};

struct _GdkDisplayClass
{
  GObjectClass parent_class;

  const gchar * (*get_display_name) (GdkDisplay *display);
  gint (*get_n_screens) (GdkDisplay *display);
  GdkScreen * (*get_screen) (GdkDisplay *display,
          gint screen_num);
  GdkScreen * (*get_default_screen) (GdkDisplay *display);



  void (*closed) (GdkDisplay *display,
    gboolean is_error);
};

struct _GdkDisplayPointerHooks
{
  void (*get_pointer) (GdkDisplay *display,
        GdkScreen **screen,
        gint *x,
        gint *y,
        GdkModifierType *mask);
  GdkWindow* (*window_get_pointer) (GdkDisplay *display,
        GdkWindow *window,
        gint *x,
        gint *y,
        GdkModifierType *mask);
  GdkWindow* (*window_at_pointer) (GdkDisplay *display,
        gint *win_x,
        gint *win_y);
};

GType gdk_display_get_type (void) __attribute__((__const__));
GdkDisplay *gdk_display_open (const gchar *display_name);

const gchar * gdk_display_get_name (GdkDisplay *display);

gint gdk_display_get_n_screens (GdkDisplay *display);
GdkScreen * gdk_display_get_screen (GdkDisplay *display,
         gint screen_num);
GdkScreen * gdk_display_get_default_screen (GdkDisplay *display);
void gdk_display_pointer_ungrab (GdkDisplay *display,
         guint32 time_);
void gdk_display_keyboard_ungrab (GdkDisplay *display,
         guint32 time_);
gboolean gdk_display_pointer_is_grabbed (GdkDisplay *display);
void gdk_display_beep (GdkDisplay *display);
void gdk_display_sync (GdkDisplay *display);
void gdk_display_flush (GdkDisplay *display);

void gdk_display_close (GdkDisplay *display);

GList * gdk_display_list_devices (GdkDisplay *display);

GdkEvent* gdk_display_get_event (GdkDisplay *display);
GdkEvent* gdk_display_peek_event (GdkDisplay *display);
void gdk_display_put_event (GdkDisplay *display,
      const GdkEvent *event);

void gdk_display_add_client_message_filter (GdkDisplay *display,
         GdkAtom message_type,
         GdkFilterFunc func,
         gpointer data);

void gdk_display_set_double_click_time (GdkDisplay *display,
         guint msec);
void gdk_display_set_double_click_distance (GdkDisplay *display,
         guint distance);

GdkDisplay *gdk_display_get_default (void);

GdkDevice *gdk_display_get_core_pointer (GdkDisplay *display);

void gdk_display_get_pointer (GdkDisplay *display,
          GdkScreen **screen,
          gint *x,
          gint *y,
          GdkModifierType *mask);
GdkWindow * gdk_display_get_window_at_pointer (GdkDisplay *display,
          gint *win_x,
          gint *win_y);
void gdk_display_warp_pointer (GdkDisplay *display,
          GdkScreen *screen,
          gint x,
          gint y);

GdkDisplayPointerHooks *gdk_display_set_pointer_hooks (GdkDisplay *display,
             const GdkDisplayPointerHooks *new_hooks);

GdkDisplay *gdk_display_open_default_libgtk_only (void);

gboolean gdk_display_supports_cursor_alpha (GdkDisplay *display);
gboolean gdk_display_supports_cursor_color (GdkDisplay *display);
guint gdk_display_get_default_cursor_size (GdkDisplay *display);
void gdk_display_get_maximal_cursor_size (GdkDisplay *display,
      guint *width,
      guint *height);

GdkWindow *gdk_display_get_default_group (GdkDisplay *display);

gboolean gdk_display_supports_selection_notification (GdkDisplay *display);
gboolean gdk_display_request_selection_notification (GdkDisplay *display,
            GdkAtom selection);

gboolean gdk_display_supports_clipboard_persistence (GdkDisplay *display);
void gdk_display_store_clipboard (GdkDisplay *display,
           GdkWindow *clipboard_window,
           guint32 time_,
           const GdkAtom *targets,
           gint n_targets);

gboolean gdk_display_supports_shapes (GdkDisplay *display);
gboolean gdk_display_supports_input_shapes (GdkDisplay *display);
gboolean gdk_display_supports_composite (GdkDisplay *display);


# 34 "/usr/include/gtk-2.0/gdk/gdkscreen.h" 2



typedef struct _GdkScreenClass GdkScreenClass;
# 46 "/usr/include/gtk-2.0/gdk/gdkscreen.h"
struct _GdkScreen
{
  GObject parent_instance;

  guint closed : 1;

  GdkGC *normal_gcs[32];
  GdkGC *exposure_gcs[32];

  cairo_font_options_t *font_options;
  double resolution;
};

struct _GdkScreenClass
{
  GObjectClass parent_class;

  void (*size_changed) (GdkScreen *screen);
  void (*composited_changed) (GdkScreen *screen);
  void (*monitors_changed) (GdkScreen *screen);
};

GType gdk_screen_get_type (void) __attribute__((__const__));
GdkColormap *gdk_screen_get_default_colormap (GdkScreen *screen);
void gdk_screen_set_default_colormap (GdkScreen *screen,
            GdkColormap *colormap);
GdkColormap* gdk_screen_get_system_colormap (GdkScreen *screen);
GdkVisual* gdk_screen_get_system_visual (GdkScreen *screen);
GdkColormap *gdk_screen_get_rgb_colormap (GdkScreen *screen);
GdkVisual * gdk_screen_get_rgb_visual (GdkScreen *screen);
GdkColormap *gdk_screen_get_rgba_colormap (GdkScreen *screen);
GdkVisual * gdk_screen_get_rgba_visual (GdkScreen *screen);
gboolean gdk_screen_is_composited (GdkScreen *screen);

GdkWindow * gdk_screen_get_root_window (GdkScreen *screen);
GdkDisplay * gdk_screen_get_display (GdkScreen *screen);
gint gdk_screen_get_number (GdkScreen *screen);
gint gdk_screen_get_width (GdkScreen *screen);
gint gdk_screen_get_height (GdkScreen *screen);
gint gdk_screen_get_width_mm (GdkScreen *screen);
gint gdk_screen_get_height_mm (GdkScreen *screen);

GList * gdk_screen_list_visuals (GdkScreen *screen);
GList * gdk_screen_get_toplevel_windows (GdkScreen *screen);
gchar * gdk_screen_make_display_name (GdkScreen *screen);

gint gdk_screen_get_n_monitors (GdkScreen *screen);
void gdk_screen_get_monitor_geometry (GdkScreen *screen,
      gint monitor_num,
      GdkRectangle *dest);
gint gdk_screen_get_monitor_at_point (GdkScreen *screen,
      gint x,
      gint y);
gint gdk_screen_get_monitor_at_window (GdkScreen *screen,
      GdkWindow *window);
gint gdk_screen_get_monitor_width_mm (GdkScreen *screen,
                                                gint monitor_num);
gint gdk_screen_get_monitor_height_mm (GdkScreen *screen,
                                                gint monitor_num);
gchar * gdk_screen_get_monitor_plug_name (GdkScreen *screen,
                                                gint monitor_num);

void gdk_screen_broadcast_client_message (GdkScreen *screen,
          GdkEvent *event);

GdkScreen *gdk_screen_get_default (void);

gboolean gdk_screen_get_setting (GdkScreen *screen,
       const gchar *name,
       GValue *value);

void gdk_screen_set_font_options (GdkScreen *screen,
        const cairo_font_options_t *options);
const cairo_font_options_t *gdk_screen_get_font_options (GdkScreen *screen);

void gdk_screen_set_resolution (GdkScreen *screen,
       gdouble dpi);
gdouble gdk_screen_get_resolution (GdkScreen *screen);

GdkWindow *gdk_screen_get_active_window (GdkScreen *screen);
GList *gdk_screen_get_window_stack (GdkScreen *screen);


# 32 "/usr/include/gtk-2.0/gdk/gdkapplaunchcontext.h" 2


# 42 "/usr/include/gtk-2.0/gdk/gdkapplaunchcontext.h"
typedef struct GdkAppLaunchContext GdkAppLaunchContext;
typedef struct GdkAppLaunchContextClass GdkAppLaunchContextClass;
typedef struct GdkAppLaunchContextPrivate GdkAppLaunchContextPrivate;

struct GdkAppLaunchContext
{
  GAppLaunchContext parent_instance;

  GdkAppLaunchContextPrivate *priv;
};

struct GdkAppLaunchContextClass
{
  GAppLaunchContextClass parent_class;
};

GType gdk_app_launch_context_get_type (void);

GdkAppLaunchContext *gdk_app_launch_context_new (void);
void gdk_app_launch_context_set_display (GdkAppLaunchContext *context,
          GdkDisplay *display);
void gdk_app_launch_context_set_screen (GdkAppLaunchContext *context,
          GdkScreen *screen);
void gdk_app_launch_context_set_desktop (GdkAppLaunchContext *context,
          gint desktop);
void gdk_app_launch_context_set_timestamp (GdkAppLaunchContext *context,
          guint32 timestamp);
void gdk_app_launch_context_set_icon (GdkAppLaunchContext *context,
          GIcon *icon);
void gdk_app_launch_context_set_icon_name (GdkAppLaunchContext *context,
          const char *icon_name);


# 33 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkcairo.h" 1
# 27 "/usr/include/gtk-2.0/gdk/gdkcairo.h"
# 1 "/usr/include/gtk-2.0/gdk/gdkcolor.h" 1
# 28 "/usr/include/gtk-2.0/gdk/gdkcairo.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkpixbuf.h" 1
# 35 "/usr/include/gtk-2.0/gdk/gdkpixbuf.h"
# 1 "/usr/include/gtk-2.0/gdk/gdktypes.h" 1
# 36 "/usr/include/gtk-2.0/gdk/gdkpixbuf.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkrgb.h" 1
# 34 "/usr/include/gtk-2.0/gdk/gdkrgb.h"
# 1 "/usr/include/gtk-2.0/gdk/gdktypes.h" 1
# 35 "/usr/include/gtk-2.0/gdk/gdkrgb.h" 2



typedef struct _GdkRgbCmap GdkRgbCmap;

struct _GdkRgbCmap {
  guint32 colors[256];
  gint n_colors;


  GSList *info_list;
};


void gdk_rgb_init (void);

gulong gdk_rgb_xpixel_from_rgb (guint32 rgb) __attribute__((__const__));
void gdk_rgb_gc_set_foreground (GdkGC *gc,
      guint32 rgb);
void gdk_rgb_gc_set_background (GdkGC *gc,
      guint32 rgb);



void gdk_rgb_find_color (GdkColormap *colormap,
      GdkColor *color);

typedef enum
{
  GDK_RGB_DITHER_NONE,
  GDK_RGB_DITHER_NORMAL,
  GDK_RGB_DITHER_MAX
} GdkRgbDither;

void gdk_draw_rgb_image (GdkDrawable *drawable,
          GdkGC *gc,
          gint x,
          gint y,
          gint width,
          gint height,
          GdkRgbDither dith,
          const guchar *rgb_buf,
          gint rowstride);
void gdk_draw_rgb_image_dithalign (GdkDrawable *drawable,
          GdkGC *gc,
          gint x,
          gint y,
          gint width,
          gint height,
          GdkRgbDither dith,
          const guchar *rgb_buf,
          gint rowstride,
          gint xdith,
          gint ydith);
void gdk_draw_rgb_32_image (GdkDrawable *drawable,
          GdkGC *gc,
          gint x,
          gint y,
          gint width,
          gint height,
          GdkRgbDither dith,
          const guchar *buf,
          gint rowstride);
void gdk_draw_rgb_32_image_dithalign (GdkDrawable *drawable,
          GdkGC *gc,
          gint x,
          gint y,
          gint width,
          gint height,
          GdkRgbDither dith,
          const guchar *buf,
          gint rowstride,
          gint xdith,
          gint ydith);
void gdk_draw_gray_image (GdkDrawable *drawable,
          GdkGC *gc,
          gint x,
          gint y,
          gint width,
          gint height,
          GdkRgbDither dith,
          const guchar *buf,
          gint rowstride);
void gdk_draw_indexed_image (GdkDrawable *drawable,
          GdkGC *gc,
          gint x,
          gint y,
          gint width,
          gint height,
          GdkRgbDither dith,
          const guchar *buf,
          gint rowstride,
          GdkRgbCmap *cmap);
GdkRgbCmap *gdk_rgb_cmap_new (guint32 *colors,
          gint n_colors);
void gdk_rgb_cmap_free (GdkRgbCmap *cmap);

void gdk_rgb_set_verbose (gboolean verbose);


void gdk_rgb_set_install (gboolean install);
void gdk_rgb_set_min_colors (gint min_colors);


GdkColormap *gdk_rgb_get_colormap (void);
GdkVisual * gdk_rgb_get_visual (void);
gboolean gdk_rgb_ditherable (void);
gboolean gdk_rgb_colormap_ditherable (GdkColormap *cmap);



# 37 "/usr/include/gtk-2.0/gdk/gdkpixbuf.h" 2
# 1 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h" 1
# 32 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h"
# 1 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-features.h" 1
# 34 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-features.h"
extern const guint gdk_pixbuf_major_version;
extern const guint gdk_pixbuf_minor_version;
extern const guint gdk_pixbuf_micro_version;
extern const char *gdk_pixbuf_version;
# 33 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h" 2


# 1 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-core.h" 1
# 37 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-core.h"



typedef enum
{
        GDK_PIXBUF_ALPHA_BILEVEL,
        GDK_PIXBUF_ALPHA_FULL
} GdkPixbufAlphaMode;





typedef enum {
 GDK_COLORSPACE_RGB
} GdkColorspace;


typedef struct _GdkPixbuf GdkPixbuf;







typedef void (* GdkPixbufDestroyNotify) (guchar *pixels, gpointer data);



typedef enum {

        GDK_PIXBUF_ERROR_CORRUPT_IMAGE,

        GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY,

        GDK_PIXBUF_ERROR_BAD_OPTION,

        GDK_PIXBUF_ERROR_UNKNOWN_TYPE,

        GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION,
        GDK_PIXBUF_ERROR_FAILED
} GdkPixbufError;

GQuark gdk_pixbuf_error_quark (void);



GType gdk_pixbuf_get_type (void) __attribute__((__const__));




GdkPixbuf *gdk_pixbuf_ref (GdkPixbuf *pixbuf);
void gdk_pixbuf_unref (GdkPixbuf *pixbuf);




GdkColorspace gdk_pixbuf_get_colorspace (const GdkPixbuf *pixbuf);
int gdk_pixbuf_get_n_channels (const GdkPixbuf *pixbuf);
gboolean gdk_pixbuf_get_has_alpha (const GdkPixbuf *pixbuf);
int gdk_pixbuf_get_bits_per_sample (const GdkPixbuf *pixbuf);
guchar *gdk_pixbuf_get_pixels (const GdkPixbuf *pixbuf);
int gdk_pixbuf_get_width (const GdkPixbuf *pixbuf);
int gdk_pixbuf_get_height (const GdkPixbuf *pixbuf);
int gdk_pixbuf_get_rowstride (const GdkPixbuf *pixbuf);




GdkPixbuf *gdk_pixbuf_new (GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample,
      int width, int height);



GdkPixbuf *gdk_pixbuf_copy (const GdkPixbuf *pixbuf);


GdkPixbuf *gdk_pixbuf_new_subpixbuf (GdkPixbuf *src_pixbuf,
                                     int src_x,
                                     int src_y,
                                     int width,
                                     int height);
# 131 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-core.h"
GdkPixbuf *gdk_pixbuf_new_from_file (const char *filename,
                                     GError **error);
GdkPixbuf *gdk_pixbuf_new_from_file_at_size (const char *filename,
          int width,
          int height,
          GError **error);
GdkPixbuf *gdk_pixbuf_new_from_file_at_scale (const char *filename,
           int width,
           int height,
           gboolean preserve_aspect_ratio,
           GError **error);

GdkPixbuf *gdk_pixbuf_new_from_data (const guchar *data,
         GdkColorspace colorspace,
         gboolean has_alpha,
         int bits_per_sample,
         int width, int height,
         int rowstride,
         GdkPixbufDestroyNotify destroy_fn,
         gpointer destroy_fn_data);

GdkPixbuf *gdk_pixbuf_new_from_xpm_data (const char **data);
GdkPixbuf* gdk_pixbuf_new_from_inline (gint data_length,
      const guint8 *data,
      gboolean copy_pixels,
      GError **error);


void gdk_pixbuf_fill (GdkPixbuf *pixbuf,
                                         guint32 pixel);
# 170 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-core.h"
gboolean gdk_pixbuf_save (GdkPixbuf *pixbuf,
                                    const char *filename,
                                    const char *type,
                                    GError **error,
                                    ...) __attribute__((__sentinel__));

gboolean gdk_pixbuf_savev (GdkPixbuf *pixbuf,
                                    const char *filename,
                                    const char *type,
                                    char **option_keys,
                                    char **option_values,
                                    GError **error);



typedef gboolean (*GdkPixbufSaveFunc) (const gchar *buf,
      gsize count,
      GError **error,
      gpointer data);

gboolean gdk_pixbuf_save_to_callback (GdkPixbuf *pixbuf,
      GdkPixbufSaveFunc save_func,
      gpointer user_data,
      const char *type,
      GError **error,
      ...) __attribute__((__sentinel__));

gboolean gdk_pixbuf_save_to_callbackv (GdkPixbuf *pixbuf,
      GdkPixbufSaveFunc save_func,
      gpointer user_data,
      const char *type,
      char **option_keys,
      char **option_values,
      GError **error);



gboolean gdk_pixbuf_save_to_buffer (GdkPixbuf *pixbuf,
      gchar **buffer,
      gsize *buffer_size,
      const char *type,
      GError **error,
      ...) __attribute__((__sentinel__));

gboolean gdk_pixbuf_save_to_bufferv (GdkPixbuf *pixbuf,
      gchar **buffer,
      gsize *buffer_size,
      const char *type,
      char **option_keys,
      char **option_values,
      GError **error);

GdkPixbuf *gdk_pixbuf_new_from_stream (GInputStream *stream,
      GCancellable *cancellable,
                                         GError **error);

GdkPixbuf *gdk_pixbuf_new_from_stream_at_scale (GInputStream *stream,
                                                  gint width,
                                                  gint height,
                                                  gboolean preserve_aspect_ratio,
        GCancellable *cancellable,
                                                  GError **error);

gboolean gdk_pixbuf_save_to_stream (GdkPixbuf *pixbuf,
                                         GOutputStream *stream,
                                         const char *type,
      GCancellable *cancellable,
                                         GError **error,
                                         ...);


GdkPixbuf *gdk_pixbuf_add_alpha (const GdkPixbuf *pixbuf, gboolean substitute_color,
     guchar r, guchar g, guchar b);


void gdk_pixbuf_copy_area (const GdkPixbuf *src_pixbuf,
      int src_x, int src_y,
      int width, int height,
      GdkPixbuf *dest_pixbuf,
      int dest_x, int dest_y);


void gdk_pixbuf_saturate_and_pixelate (const GdkPixbuf *src,
                                       GdkPixbuf *dest,
                                       gfloat saturation,
                                       gboolean pixelate);


GdkPixbuf *gdk_pixbuf_apply_embedded_orientation (GdkPixbuf *src);

const gchar * gdk_pixbuf_get_option (GdkPixbuf *pixbuf,
                                              const gchar *key);



# 36 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h" 2
# 1 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-transform.h" 1
# 34 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-transform.h"
# 1 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-core.h" 1
# 35 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-transform.h" 2







typedef enum {
 GDK_INTERP_NEAREST,
 GDK_INTERP_TILES,
 GDK_INTERP_BILINEAR,
 GDK_INTERP_HYPER
} GdkInterpType;

typedef enum {
 GDK_PIXBUF_ROTATE_NONE = 0,
 GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE = 90,
 GDK_PIXBUF_ROTATE_UPSIDEDOWN = 180,
 GDK_PIXBUF_ROTATE_CLOCKWISE = 270
} GdkPixbufRotation;

void gdk_pixbuf_scale (const GdkPixbuf *src,
     GdkPixbuf *dest,
     int dest_x,
     int dest_y,
     int dest_width,
     int dest_height,
     double offset_x,
     double offset_y,
     double scale_x,
     double scale_y,
     GdkInterpType interp_type);
void gdk_pixbuf_composite (const GdkPixbuf *src,
     GdkPixbuf *dest,
     int dest_x,
     int dest_y,
     int dest_width,
     int dest_height,
     double offset_x,
     double offset_y,
     double scale_x,
     double scale_y,
     GdkInterpType interp_type,
     int overall_alpha);
void gdk_pixbuf_composite_color (const GdkPixbuf *src,
     GdkPixbuf *dest,
     int dest_x,
     int dest_y,
     int dest_width,
     int dest_height,
     double offset_x,
     double offset_y,
     double scale_x,
     double scale_y,
     GdkInterpType interp_type,
     int overall_alpha,
     int check_x,
     int check_y,
     int check_size,
     guint32 color1,
     guint32 color2);

GdkPixbuf *gdk_pixbuf_scale_simple (const GdkPixbuf *src,
           int dest_width,
           int dest_height,
           GdkInterpType interp_type);

GdkPixbuf *gdk_pixbuf_composite_color_simple (const GdkPixbuf *src,
           int dest_width,
           int dest_height,
           GdkInterpType interp_type,
           int overall_alpha,
           int check_size,
           guint32 color1,
           guint32 color2);

GdkPixbuf *gdk_pixbuf_rotate_simple (const GdkPixbuf *src,
                  GdkPixbufRotation angle);
GdkPixbuf *gdk_pixbuf_flip (const GdkPixbuf *src,
                  gboolean horizontal);


# 37 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h" 2
# 1 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-animation.h" 1
# 35 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-animation.h"
# 1 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-core.h" 1
# 36 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-animation.h" 2





typedef struct _GdkPixbufAnimation GdkPixbufAnimation;
typedef struct _GdkPixbufAnimationIter GdkPixbufAnimationIter;
# 52 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-animation.h"
GType gdk_pixbuf_animation_get_type (void) __attribute__((__const__));





GdkPixbufAnimation *gdk_pixbuf_animation_new_from_file (const char *filename,
                                                          GError **error);


GdkPixbufAnimation *gdk_pixbuf_animation_ref (GdkPixbufAnimation *animation);
void gdk_pixbuf_animation_unref (GdkPixbufAnimation *animation);


int gdk_pixbuf_animation_get_width (GdkPixbufAnimation *animation);
int gdk_pixbuf_animation_get_height (GdkPixbufAnimation *animation);
gboolean gdk_pixbuf_animation_is_static_image (GdkPixbufAnimation *animation);
GdkPixbuf *gdk_pixbuf_animation_get_static_image (GdkPixbufAnimation *animation);

GdkPixbufAnimationIter *gdk_pixbuf_animation_get_iter (GdkPixbufAnimation *animation,
                                                                              const GTimeVal *start_time);
GType gdk_pixbuf_animation_iter_get_type (void) __attribute__((__const__));
int gdk_pixbuf_animation_iter_get_delay_time (GdkPixbufAnimationIter *iter);
GdkPixbuf *gdk_pixbuf_animation_iter_get_pixbuf (GdkPixbufAnimationIter *iter);
gboolean gdk_pixbuf_animation_iter_on_currently_loading_frame (GdkPixbufAnimationIter *iter);
gboolean gdk_pixbuf_animation_iter_advance (GdkPixbufAnimationIter *iter,
                                                                              const GTimeVal *current_time);
# 149 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-animation.h"

# 38 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h" 2
# 1 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h" 1
# 31 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h"
# 1 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-animation.h" 1
# 32 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h" 2



typedef struct _GdkPixbufSimpleAnim GdkPixbufSimpleAnim;
typedef struct _GdkPixbufSimpleAnimClass GdkPixbufSimpleAnimClass;
# 46 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h"
GType gdk_pixbuf_simple_anim_get_type (void) __attribute__((__const__));
GType gdk_pixbuf_simple_anim_iter_get_type (void) __attribute__((__const__));

GdkPixbufSimpleAnim *gdk_pixbuf_simple_anim_new (gint width,
                                                           gint height,
                                                           gfloat rate);
void gdk_pixbuf_simple_anim_add_frame (GdkPixbufSimpleAnim *animation,
                                                           GdkPixbuf *pixbuf);


# 39 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h" 2
# 1 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-io.h" 1
# 39 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-io.h"
# 1 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-core.h" 1
# 40 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-io.h" 2
# 1 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-animation.h" 1
# 41 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-io.h" 2



typedef struct _GdkPixbufFormat GdkPixbufFormat;

GSList *gdk_pixbuf_get_formats (void);
gchar *gdk_pixbuf_format_get_name (GdkPixbufFormat *format);
gchar *gdk_pixbuf_format_get_description (GdkPixbufFormat *format);
gchar **gdk_pixbuf_format_get_mime_types (GdkPixbufFormat *format);
gchar **gdk_pixbuf_format_get_extensions (GdkPixbufFormat *format);
gboolean gdk_pixbuf_format_is_writable (GdkPixbufFormat *format);
gboolean gdk_pixbuf_format_is_scalable (GdkPixbufFormat *format);
gboolean gdk_pixbuf_format_is_disabled (GdkPixbufFormat *format);
void gdk_pixbuf_format_set_disabled (GdkPixbufFormat *format,
           gboolean disabled);
gchar *gdk_pixbuf_format_get_license (GdkPixbufFormat *format);

GdkPixbufFormat *gdk_pixbuf_get_file_info (const gchar *filename,
           gint *width,
           gint *height);
# 170 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-io.h"

# 40 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h" 2
# 1 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-loader.h" 1
# 35 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-loader.h"
# 1 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-core.h" 1
# 36 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-loader.h" 2
# 1 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-animation.h" 1
# 37 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-loader.h" 2
# 1 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-io.h" 1
# 38 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-loader.h" 2


# 49 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-loader.h"
typedef struct _GdkPixbufLoader GdkPixbufLoader;
struct _GdkPixbufLoader
{
  GObject parent_instance;


  gpointer priv;
};

typedef struct _GdkPixbufLoaderClass GdkPixbufLoaderClass;
struct _GdkPixbufLoaderClass
{
  GObjectClass parent_class;

  void (*size_prepared) (GdkPixbufLoader *loader,
         int width,
         int height);

  void (*area_prepared) (GdkPixbufLoader *loader);


  void (*area_updated) (GdkPixbufLoader *loader,
                              int x,
                              int y,
         int width,
         int height);

  void (*closed) (GdkPixbufLoader *loader);
};

GType gdk_pixbuf_loader_get_type (void) __attribute__((__const__));
GdkPixbufLoader * gdk_pixbuf_loader_new (void);
GdkPixbufLoader * gdk_pixbuf_loader_new_with_type (const char *image_type,
                                                      GError **error);
GdkPixbufLoader * gdk_pixbuf_loader_new_with_mime_type (const char *mime_type,
          GError **error);
void gdk_pixbuf_loader_set_size (GdkPixbufLoader *loader,
                                                 int width,
       int height);
gboolean gdk_pixbuf_loader_write (GdkPixbufLoader *loader,
            const guchar *buf,
            gsize count,
                                                      GError **error);
GdkPixbuf * gdk_pixbuf_loader_get_pixbuf (GdkPixbufLoader *loader);
GdkPixbufAnimation * gdk_pixbuf_loader_get_animation (GdkPixbufLoader *loader);
gboolean gdk_pixbuf_loader_close (GdkPixbufLoader *loader,
                                                      GError **error);
GdkPixbufFormat *gdk_pixbuf_loader_get_format (GdkPixbufLoader *loader);


# 41 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h" 2
# 1 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-enum-types.h" 1
# 13 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-enum-types.h"



GType gdk_pixbuf_alpha_mode_get_type (void) __attribute__((__const__));

GType gdk_colorspace_get_type (void) __attribute__((__const__));

GType gdk_pixbuf_error_get_type (void) __attribute__((__const__));



GType gdk_interp_type_get_type (void) __attribute__((__const__));

GType gdk_pixbuf_rotation_get_type (void) __attribute__((__const__));


# 42 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h" 2
# 38 "/usr/include/gtk-2.0/gdk/gdkpixbuf.h" 2





void gdk_pixbuf_render_threshold_alpha (GdkPixbuf *pixbuf,
       GdkBitmap *bitmap,
       int src_x,
       int src_y,
       int dest_x,
       int dest_y,
       int width,
       int height,
       int alpha_threshold);

void gdk_pixbuf_render_to_drawable (GdkPixbuf *pixbuf,
       GdkDrawable *drawable,
       GdkGC *gc,
       int src_x,
       int src_y,
       int dest_x,
       int dest_y,
       int width,
       int height,
       GdkRgbDither dither,
       int x_dither,
       int y_dither);
void gdk_pixbuf_render_to_drawable_alpha (GdkPixbuf *pixbuf,
       GdkDrawable *drawable,
       int src_x,
       int src_y,
       int dest_x,
       int dest_y,
       int width,
       int height,
       GdkPixbufAlphaMode alpha_mode,
       int alpha_threshold,
       GdkRgbDither dither,
       int x_dither,
       int y_dither);

void gdk_pixbuf_render_pixmap_and_mask_for_colormap (GdkPixbuf *pixbuf,
           GdkColormap *colormap,
           GdkPixmap **pixmap_return,
           GdkBitmap **mask_return,
           int alpha_threshold);

void gdk_pixbuf_render_pixmap_and_mask (GdkPixbuf *pixbuf,
           GdkPixmap **pixmap_return,
           GdkBitmap **mask_return,
           int alpha_threshold);




GdkPixbuf *gdk_pixbuf_get_from_drawable (GdkPixbuf *dest,
      GdkDrawable *src,
      GdkColormap *cmap,
      int src_x,
      int src_y,
      int dest_x,
      int dest_y,
      int width,
      int height);

GdkPixbuf *gdk_pixbuf_get_from_image (GdkPixbuf *dest,
                                         GdkImage *src,
                                         GdkColormap *cmap,
                                         int src_x,
                                         int src_y,
                                         int dest_x,
                                         int dest_y,
                                         int width,
                                         int height);


# 29 "/usr/include/gtk-2.0/gdk/gdkcairo.h" 2
# 1 "/usr/include/pango-1.0/pango/pangocairo.h" 1
# 28 "/usr/include/pango-1.0/pango/pangocairo.h"

# 39 "/usr/include/pango-1.0/pango/pangocairo.h"
typedef struct _PangoCairoFont PangoCairoFont;
# 53 "/usr/include/pango-1.0/pango/pangocairo.h"
typedef struct _PangoCairoFontMap PangoCairoFontMap;




typedef void (* PangoCairoShapeRendererFunc) (cairo_t *cr,
           PangoAttrShape *attr,
           gboolean do_path,
           gpointer data);




GType pango_cairo_font_map_get_type (void) __attribute__((__const__));

PangoFontMap *pango_cairo_font_map_new (void);
PangoFontMap *pango_cairo_font_map_new_for_font_type (cairo_font_type_t fonttype);
PangoFontMap *pango_cairo_font_map_get_default (void);
void pango_cairo_font_map_set_default (PangoCairoFontMap *fontmap);
cairo_font_type_t pango_cairo_font_map_get_font_type (PangoCairoFontMap *fontmap);

void pango_cairo_font_map_set_resolution (PangoCairoFontMap *fontmap,
         double dpi);
double pango_cairo_font_map_get_resolution (PangoCairoFontMap *fontmap);

PangoContext *pango_cairo_font_map_create_context (PangoCairoFontMap *fontmap);





GType pango_cairo_font_get_type (void) __attribute__((__const__));

cairo_scaled_font_t *pango_cairo_font_get_scaled_font (PangoCairoFont *font);



void pango_cairo_update_context (cairo_t *cr,
      PangoContext *context);

void pango_cairo_context_set_font_options (PangoContext *context,
          const cairo_font_options_t *options);
const cairo_font_options_t *pango_cairo_context_get_font_options (PangoContext *context);

void pango_cairo_context_set_resolution (PangoContext *context,
          double dpi);
double pango_cairo_context_get_resolution (PangoContext *context);

void pango_cairo_context_set_shape_renderer (PangoContext *context,
            PangoCairoShapeRendererFunc func,
            gpointer data,
            GDestroyNotify dnotify);
PangoCairoShapeRendererFunc pango_cairo_context_get_shape_renderer (PangoContext *context,
            gpointer *data);



PangoContext *pango_cairo_create_context (cairo_t *cr);
PangoLayout *pango_cairo_create_layout (cairo_t *cr);
void pango_cairo_update_layout (cairo_t *cr,
     PangoLayout *layout);




void pango_cairo_show_glyph_string (cairo_t *cr,
        PangoFont *font,
        PangoGlyphString *glyphs);
void pango_cairo_show_glyph_item (cairo_t *cr,
        const char *text,
        PangoGlyphItem *glyph_item);
void pango_cairo_show_layout_line (cairo_t *cr,
        PangoLayoutLine *line);
void pango_cairo_show_layout (cairo_t *cr,
        PangoLayout *layout);

void pango_cairo_show_error_underline (cairo_t *cr,
           double x,
           double y,
           double width,
           double height);




void pango_cairo_glyph_string_path (cairo_t *cr,
        PangoFont *font,
        PangoGlyphString *glyphs);
void pango_cairo_layout_line_path (cairo_t *cr,
        PangoLayoutLine *line);
void pango_cairo_layout_path (cairo_t *cr,
        PangoLayout *layout);

void pango_cairo_error_underline_path (cairo_t *cr,
           double x,
           double y,
           double width,
           double height);


# 30 "/usr/include/gtk-2.0/gdk/gdkcairo.h" 2



cairo_t *gdk_cairo_create (GdkDrawable *drawable);

void gdk_cairo_set_source_color (cairo_t *cr,
                                      const GdkColor *color);
void gdk_cairo_set_source_pixbuf (cairo_t *cr,
                                      const GdkPixbuf *pixbuf,
                                      double pixbuf_x,
                                      double pixbuf_y);
void gdk_cairo_set_source_pixmap (cairo_t *cr,
                                      GdkPixmap *pixmap,
                                      double pixmap_x,
                                      double pixmap_y);

void gdk_cairo_rectangle (cairo_t *cr,
                                      const GdkRectangle *rectangle);
void gdk_cairo_region (cairo_t *cr,
                                      const GdkRegion *region);


# 34 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkcolor.h" 1
# 35 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkcursor.h" 1
# 34 "/usr/include/gtk-2.0/gdk/gdkcursor.h"
# 1 "/usr/include/gtk-2.0/gdk/gdktypes.h" 1
# 35 "/usr/include/gtk-2.0/gdk/gdkcursor.h" 2








typedef enum
{
  GDK_X_CURSOR = 0,
  GDK_ARROW = 2,
  GDK_BASED_ARROW_DOWN = 4,
  GDK_BASED_ARROW_UP = 6,
  GDK_BOAT = 8,
  GDK_BOGOSITY = 10,
  GDK_BOTTOM_LEFT_CORNER = 12,
  GDK_BOTTOM_RIGHT_CORNER = 14,
  GDK_BOTTOM_SIDE = 16,
  GDK_BOTTOM_TEE = 18,
  GDK_BOX_SPIRAL = 20,
  GDK_CENTER_PTR = 22,
  GDK_CIRCLE = 24,
  GDK_CLOCK = 26,
  GDK_COFFEE_MUG = 28,
  GDK_CROSS = 30,
  GDK_CROSS_REVERSE = 32,
  GDK_CROSSHAIR = 34,
  GDK_DIAMOND_CROSS = 36,
  GDK_DOT = 38,
  GDK_DOTBOX = 40,
  GDK_DOUBLE_ARROW = 42,
  GDK_DRAFT_LARGE = 44,
  GDK_DRAFT_SMALL = 46,
  GDK_DRAPED_BOX = 48,
  GDK_EXCHANGE = 50,
  GDK_FLEUR = 52,
  GDK_GOBBLER = 54,
  GDK_GUMBY = 56,
  GDK_HAND1 = 58,
  GDK_HAND2 = 60,
  GDK_HEART = 62,
  GDK_ICON = 64,
  GDK_IRON_CROSS = 66,
  GDK_LEFT_PTR = 68,
  GDK_LEFT_SIDE = 70,
  GDK_LEFT_TEE = 72,
  GDK_LEFTBUTTON = 74,
  GDK_LL_ANGLE = 76,
  GDK_LR_ANGLE = 78,
  GDK_MAN = 80,
  GDK_MIDDLEBUTTON = 82,
  GDK_MOUSE = 84,
  GDK_PENCIL = 86,
  GDK_PIRATE = 88,
  GDK_PLUS = 90,
  GDK_QUESTION_ARROW = 92,
  GDK_RIGHT_PTR = 94,
  GDK_RIGHT_SIDE = 96,
  GDK_RIGHT_TEE = 98,
  GDK_RIGHTBUTTON = 100,
  GDK_RTL_LOGO = 102,
  GDK_SAILBOAT = 104,
  GDK_SB_DOWN_ARROW = 106,
  GDK_SB_H_DOUBLE_ARROW = 108,
  GDK_SB_LEFT_ARROW = 110,
  GDK_SB_RIGHT_ARROW = 112,
  GDK_SB_UP_ARROW = 114,
  GDK_SB_V_DOUBLE_ARROW = 116,
  GDK_SHUTTLE = 118,
  GDK_SIZING = 120,
  GDK_SPIDER = 122,
  GDK_SPRAYCAN = 124,
  GDK_STAR = 126,
  GDK_TARGET = 128,
  GDK_TCROSS = 130,
  GDK_TOP_LEFT_ARROW = 132,
  GDK_TOP_LEFT_CORNER = 134,
  GDK_TOP_RIGHT_CORNER = 136,
  GDK_TOP_SIDE = 138,
  GDK_TOP_TEE = 140,
  GDK_TREK = 142,
  GDK_UL_ANGLE = 144,
  GDK_UMBRELLA = 146,
  GDK_UR_ANGLE = 148,
  GDK_WATCH = 150,
  GDK_XTERM = 152,
  GDK_LAST_CURSOR,
  GDK_BLANK_CURSOR = -2,
  GDK_CURSOR_IS_PIXMAP = -1
} GdkCursorType;

struct _GdkCursor
{
  GdkCursorType type;

  guint ref_count;
};




GType gdk_cursor_get_type (void) __attribute__((__const__));

GdkCursor* gdk_cursor_new_for_display (GdkDisplay *display,
       GdkCursorType cursor_type);

GdkCursor* gdk_cursor_new (GdkCursorType cursor_type);

GdkCursor* gdk_cursor_new_from_pixmap (GdkPixmap *source,
       GdkPixmap *mask,
       const GdkColor *fg,
       const GdkColor *bg,
       gint x,
       gint y);
GdkCursor* gdk_cursor_new_from_pixbuf (GdkDisplay *display,
       GdkPixbuf *pixbuf,
       gint x,
       gint y);
GdkDisplay* gdk_cursor_get_display (GdkCursor *cursor);
GdkCursor* gdk_cursor_ref (GdkCursor *cursor);
void gdk_cursor_unref (GdkCursor *cursor);
GdkCursor* gdk_cursor_new_from_name (GdkDisplay *display,
       const gchar *name);
GdkPixbuf* gdk_cursor_get_image (GdkCursor *cursor);






# 36 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkdisplay.h" 1
# 37 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkdisplaymanager.h" 1
# 34 "/usr/include/gtk-2.0/gdk/gdkdisplaymanager.h"
# 1 "/usr/include/gtk-2.0/gdk/gdktypes.h" 1
# 35 "/usr/include/gtk-2.0/gdk/gdkdisplaymanager.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkdisplay.h" 1
# 36 "/usr/include/gtk-2.0/gdk/gdkdisplaymanager.h" 2



typedef struct _GdkDisplayManager GdkDisplayManager;
typedef struct _GdkDisplayManagerClass GdkDisplayManagerClass;
# 49 "/usr/include/gtk-2.0/gdk/gdkdisplaymanager.h"
struct _GdkDisplayManagerClass
{
  GObjectClass parent_class;

  void (*display_opened) (GdkDisplayManager *display_manager,
     GdkDisplay *display);
};

GType gdk_display_manager_get_type (void) __attribute__((__const__));

GdkDisplayManager *gdk_display_manager_get (void);
GdkDisplay * gdk_display_manager_get_default_display (GdkDisplayManager *display_manager);
void gdk_display_manager_set_default_display (GdkDisplayManager *display_manager,
           GdkDisplay *display);
GSList * gdk_display_manager_list_displays (GdkDisplayManager *display_manager);


# 38 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkdnd.h" 1
# 39 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkdrawable.h" 1
# 34 "/usr/include/gtk-2.0/gdk/gdkdrawable.h"
# 1 "/usr/include/gtk-2.0/gdk/gdktypes.h" 1
# 35 "/usr/include/gtk-2.0/gdk/gdkdrawable.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkgc.h" 1
# 34 "/usr/include/gtk-2.0/gdk/gdkgc.h"
# 1 "/usr/include/gtk-2.0/gdk/gdkcolor.h" 1
# 35 "/usr/include/gtk-2.0/gdk/gdkgc.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdktypes.h" 1
# 36 "/usr/include/gtk-2.0/gdk/gdkgc.h" 2



typedef struct _GdkGCValues GdkGCValues;
typedef struct _GdkGCClass GdkGCClass;







typedef enum
{
  GDK_CAP_NOT_LAST,
  GDK_CAP_BUTT,
  GDK_CAP_ROUND,
  GDK_CAP_PROJECTING
} GdkCapStyle;







typedef enum
{
  GDK_SOLID,
  GDK_TILED,
  GDK_STIPPLED,
  GDK_OPAQUE_STIPPLED
} GdkFill;
# 88 "/usr/include/gtk-2.0/gdk/gdkgc.h"
typedef enum
{
  GDK_COPY,
  GDK_INVERT,
  GDK_XOR,
  GDK_CLEAR,
  GDK_AND,
  GDK_AND_REVERSE,
  GDK_AND_INVERT,
  GDK_NOOP,
  GDK_OR,
  GDK_EQUIV,
  GDK_OR_REVERSE,
  GDK_COPY_INVERT,
  GDK_OR_INVERT,
  GDK_NAND,
  GDK_NOR,
  GDK_SET
} GdkFunction;






typedef enum
{
  GDK_JOIN_MITER,
  GDK_JOIN_ROUND,
  GDK_JOIN_BEVEL
} GdkJoinStyle;






typedef enum
{
  GDK_LINE_SOLID,
  GDK_LINE_ON_OFF_DASH,
  GDK_LINE_DOUBLE_DASH
} GdkLineStyle;

typedef enum
{
  GDK_CLIP_BY_CHILDREN = 0,
  GDK_INCLUDE_INFERIORS = 1
} GdkSubwindowMode;

typedef enum
{
  GDK_GC_FOREGROUND = 1 << 0,
  GDK_GC_BACKGROUND = 1 << 1,
  GDK_GC_FONT = 1 << 2,
  GDK_GC_FUNCTION = 1 << 3,
  GDK_GC_FILL = 1 << 4,
  GDK_GC_TILE = 1 << 5,
  GDK_GC_STIPPLE = 1 << 6,
  GDK_GC_CLIP_MASK = 1 << 7,
  GDK_GC_SUBWINDOW = 1 << 8,
  GDK_GC_TS_X_ORIGIN = 1 << 9,
  GDK_GC_TS_Y_ORIGIN = 1 << 10,
  GDK_GC_CLIP_X_ORIGIN = 1 << 11,
  GDK_GC_CLIP_Y_ORIGIN = 1 << 12,
  GDK_GC_EXPOSURES = 1 << 13,
  GDK_GC_LINE_WIDTH = 1 << 14,
  GDK_GC_LINE_STYLE = 1 << 15,
  GDK_GC_CAP_STYLE = 1 << 16,
  GDK_GC_JOIN_STYLE = 1 << 17
} GdkGCValuesMask;

struct _GdkGCValues
{
  GdkColor foreground;
  GdkColor background;
  GdkFont *font;
  GdkFunction function;
  GdkFill fill;
  GdkPixmap *tile;
  GdkPixmap *stipple;
  GdkPixmap *clip_mask;
  GdkSubwindowMode subwindow_mode;
  gint ts_x_origin;
  gint ts_y_origin;
  gint clip_x_origin;
  gint clip_y_origin;
  gint graphics_exposures;
  gint line_width;
  GdkLineStyle line_style;
  GdkCapStyle cap_style;
  GdkJoinStyle join_style;
};
# 189 "/usr/include/gtk-2.0/gdk/gdkgc.h"
struct _GdkGC
{
  GObject parent_instance;

  gint clip_x_origin;
  gint clip_y_origin;
  gint ts_x_origin;
  gint ts_y_origin;

  GdkColormap *colormap;
};

struct _GdkGCClass
{
  GObjectClass parent_class;

  void (*get_values) (GdkGC *gc,
     GdkGCValues *values);
  void (*set_values) (GdkGC *gc,
     GdkGCValues *values,
     GdkGCValuesMask mask);
  void (*set_dashes) (GdkGC *gc,
     gint dash_offset,
     gint8 dash_list[],
     gint n);


  void (*_gdk_reserved1) (void);
  void (*_gdk_reserved2) (void);
  void (*_gdk_reserved3) (void);
  void (*_gdk_reserved4) (void);
};


GType gdk_gc_get_type (void) __attribute__((__const__));
GdkGC *gdk_gc_new (GdkDrawable *drawable);
GdkGC *gdk_gc_new_with_values (GdkDrawable *drawable,
       GdkGCValues *values,
       GdkGCValuesMask values_mask);


GdkGC *gdk_gc_ref (GdkGC *gc);
void gdk_gc_unref (GdkGC *gc);


void gdk_gc_get_values (GdkGC *gc,
       GdkGCValues *values);
void gdk_gc_set_values (GdkGC *gc,
                                   GdkGCValues *values,
                                   GdkGCValuesMask values_mask);
void gdk_gc_set_foreground (GdkGC *gc,
       const GdkColor *color);
void gdk_gc_set_background (GdkGC *gc,
       const GdkColor *color);

void gdk_gc_set_font (GdkGC *gc,
       GdkFont *font);

void gdk_gc_set_function (GdkGC *gc,
       GdkFunction function);
void gdk_gc_set_fill (GdkGC *gc,
       GdkFill fill);
void gdk_gc_set_tile (GdkGC *gc,
       GdkPixmap *tile);
void gdk_gc_set_stipple (GdkGC *gc,
       GdkPixmap *stipple);
void gdk_gc_set_ts_origin (GdkGC *gc,
       gint x,
       gint y);
void gdk_gc_set_clip_origin (GdkGC *gc,
       gint x,
       gint y);
void gdk_gc_set_clip_mask (GdkGC *gc,
       GdkBitmap *mask);
void gdk_gc_set_clip_rectangle (GdkGC *gc,
       const GdkRectangle *rectangle);
void gdk_gc_set_clip_region (GdkGC *gc,
       const GdkRegion *region);
void gdk_gc_set_subwindow (GdkGC *gc,
       GdkSubwindowMode mode);
void gdk_gc_set_exposures (GdkGC *gc,
       gboolean exposures);
void gdk_gc_set_line_attributes (GdkGC *gc,
       gint line_width,
       GdkLineStyle line_style,
       GdkCapStyle cap_style,
       GdkJoinStyle join_style);
void gdk_gc_set_dashes (GdkGC *gc,
       gint dash_offset,
       gint8 dash_list[],
       gint n);
void gdk_gc_offset (GdkGC *gc,
       gint x_offset,
       gint y_offset);
void gdk_gc_copy (GdkGC *dst_gc,
       GdkGC *src_gc);


void gdk_gc_set_colormap (GdkGC *gc,
          GdkColormap *colormap);
GdkColormap *gdk_gc_get_colormap (GdkGC *gc);
void gdk_gc_set_rgb_fg_color (GdkGC *gc,
          const GdkColor *color);
void gdk_gc_set_rgb_bg_color (GdkGC *gc,
          const GdkColor *color);
GdkScreen * gdk_gc_get_screen (GdkGC *gc);






# 36 "/usr/include/gtk-2.0/gdk/gdkdrawable.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkrgb.h" 1
# 37 "/usr/include/gtk-2.0/gdk/gdkdrawable.h" 2






typedef struct _GdkDrawableClass GdkDrawableClass;
typedef struct _GdkTrapezoid GdkTrapezoid;
# 53 "/usr/include/gtk-2.0/gdk/gdkdrawable.h"
struct _GdkDrawable
{
  GObject parent_instance;
};

struct _GdkDrawableClass
{
  GObjectClass parent_class;

  GdkGC *(*create_gc) (GdkDrawable *drawable,
            GdkGCValues *values,
            GdkGCValuesMask mask);
  void (*draw_rectangle) (GdkDrawable *drawable,
     GdkGC *gc,
     gboolean filled,
     gint x,
     gint y,
     gint width,
     gint height);
  void (*draw_arc) (GdkDrawable *drawable,
     GdkGC *gc,
     gboolean filled,
     gint x,
     gint y,
     gint width,
     gint height,
     gint angle1,
     gint angle2);
  void (*draw_polygon) (GdkDrawable *drawable,
     GdkGC *gc,
     gboolean filled,
     GdkPoint *points,
     gint npoints);
  void (*draw_text) (GdkDrawable *drawable,
     GdkFont *font,
     GdkGC *gc,
     gint x,
     gint y,
     const gchar *text,
     gint text_length);
  void (*draw_text_wc) (GdkDrawable *drawable,
     GdkFont *font,
     GdkGC *gc,
     gint x,
     gint y,
     const GdkWChar *text,
     gint text_length);
  void (*draw_drawable) (GdkDrawable *drawable,
     GdkGC *gc,
     GdkDrawable *src,
     gint xsrc,
     gint ysrc,
     gint xdest,
     gint ydest,
     gint width,
     gint height);
  void (*draw_points) (GdkDrawable *drawable,
     GdkGC *gc,
     GdkPoint *points,
     gint npoints);
  void (*draw_segments) (GdkDrawable *drawable,
     GdkGC *gc,
     GdkSegment *segs,
     gint nsegs);
  void (*draw_lines) (GdkDrawable *drawable,
     GdkGC *gc,
     GdkPoint *points,
     gint npoints);

  void (*draw_glyphs) (GdkDrawable *drawable,
     GdkGC *gc,
     PangoFont *font,
     gint x,
     gint y,
     PangoGlyphString *glyphs);

  void (*draw_image) (GdkDrawable *drawable,
                          GdkGC *gc,
                          GdkImage *image,
                          gint xsrc,
                          gint ysrc,
                          gint xdest,
                          gint ydest,
                          gint width,
                          gint height);

  gint (*get_depth) (GdkDrawable *drawable);
  void (*get_size) (GdkDrawable *drawable,
                          gint *width,
                          gint *height);

  void (*set_colormap) (GdkDrawable *drawable,
                          GdkColormap *cmap);

  GdkColormap* (*get_colormap) (GdkDrawable *drawable);
  GdkVisual* (*get_visual) (GdkDrawable *drawable);
  GdkScreen* (*get_screen) (GdkDrawable *drawable);

  GdkImage* (*get_image) (GdkDrawable *drawable,
                              gint x,
                              gint y,
                              gint width,
                              gint height);

  GdkRegion* (*get_clip_region) (GdkDrawable *drawable);
  GdkRegion* (*get_visible_region) (GdkDrawable *drawable);

  GdkDrawable* (*get_composite_drawable) (GdkDrawable *drawable,
                                          gint x,
                                          gint y,
                                          gint width,
                                          gint height,
                                          gint *composite_x_offset,
                                          gint *composite_y_offset);

  void (*draw_pixbuf) (GdkDrawable *drawable,
          GdkGC *gc,
          GdkPixbuf *pixbuf,
          gint src_x,
          gint src_y,
          gint dest_x,
          gint dest_y,
          gint width,
          gint height,
          GdkRgbDither dither,
          gint x_dither,
          gint y_dither);
  GdkImage* (*_copy_to_image) (GdkDrawable *drawable,
      GdkImage *image,
      gint src_x,
      gint src_y,
      gint dest_x,
      gint dest_y,
      gint width,
      gint height);

  void (*draw_glyphs_transformed) (GdkDrawable *drawable,
       GdkGC *gc,
       PangoMatrix *matrix,
       PangoFont *font,
       gint x,
       gint y,
       PangoGlyphString *glyphs);
  void (*draw_trapezoids) (GdkDrawable *drawable,
       GdkGC *gc,
       GdkTrapezoid *trapezoids,
       gint n_trapezoids);

  cairo_surface_t *(*ref_cairo_surface) (GdkDrawable *drawable);


  void (*_gdk_reserved4) (void);
  void (*_gdk_reserved5) (void);
  void (*_gdk_reserved6) (void);
  void (*_gdk_reserved7) (void);
  void (*_gdk_reserved9) (void);
  void (*_gdk_reserved10) (void);
  void (*_gdk_reserved11) (void);
  void (*_gdk_reserved12) (void);
  void (*_gdk_reserved13) (void);
  void (*_gdk_reserved14) (void);
  void (*_gdk_reserved15) (void);
  void (*_gdk_reserved16) (void);
};

struct _GdkTrapezoid
{
  double y1, x11, x21, y2, x12, x22;
};

GType gdk_drawable_get_type (void) __attribute__((__const__));





void gdk_drawable_set_data (GdkDrawable *drawable,
        const gchar *key,
        gpointer data,
        GDestroyNotify destroy_func);
gpointer gdk_drawable_get_data (GdkDrawable *drawable,
        const gchar *key);


void gdk_drawable_get_size (GdkDrawable *drawable,
        gint *width,
        gint *height);
void gdk_drawable_set_colormap (GdkDrawable *drawable,
        GdkColormap *colormap);
GdkColormap* gdk_drawable_get_colormap (GdkDrawable *drawable);
GdkVisual* gdk_drawable_get_visual (GdkDrawable *drawable);
gint gdk_drawable_get_depth (GdkDrawable *drawable);
GdkScreen* gdk_drawable_get_screen (GdkDrawable *drawable);
GdkDisplay* gdk_drawable_get_display (GdkDrawable *drawable);


GdkDrawable* gdk_drawable_ref (GdkDrawable *drawable);
void gdk_drawable_unref (GdkDrawable *drawable);




void gdk_draw_point (GdkDrawable *drawable,
    GdkGC *gc,
    gint x,
    gint y);
void gdk_draw_line (GdkDrawable *drawable,
    GdkGC *gc,
    gint x1_,
    gint y1_,
    gint x2_,
    gint y2_);
void gdk_draw_rectangle (GdkDrawable *drawable,
    GdkGC *gc,
    gboolean filled,
    gint x,
    gint y,
    gint width,
    gint height);
void gdk_draw_arc (GdkDrawable *drawable,
    GdkGC *gc,
    gboolean filled,
    gint x,
    gint y,
    gint width,
    gint height,
    gint angle1,
    gint angle2);
void gdk_draw_polygon (GdkDrawable *drawable,
    GdkGC *gc,
    gboolean filled,
    const GdkPoint *points,
    gint n_points);


void gdk_draw_string (GdkDrawable *drawable,
    GdkFont *font,
    GdkGC *gc,
    gint x,
    gint y,
    const gchar *string);



void gdk_draw_text (GdkDrawable *drawable,
    GdkFont *font,
    GdkGC *gc,
    gint x,
    gint y,
    const gchar *text,
    gint text_length);

void gdk_draw_text_wc (GdkDrawable *drawable,
    GdkFont *font,
    GdkGC *gc,
    gint x,
    gint y,
    const GdkWChar *text,
    gint text_length);

void gdk_draw_drawable (GdkDrawable *drawable,
    GdkGC *gc,
    GdkDrawable *src,
    gint xsrc,
    gint ysrc,
    gint xdest,
    gint ydest,
    gint width,
    gint height);
void gdk_draw_image (GdkDrawable *drawable,
    GdkGC *gc,
    GdkImage *image,
    gint xsrc,
    gint ysrc,
    gint xdest,
    gint ydest,
    gint width,
    gint height);
void gdk_draw_points (GdkDrawable *drawable,
    GdkGC *gc,
    const GdkPoint *points,
    gint n_points);
void gdk_draw_segments (GdkDrawable *drawable,
    GdkGC *gc,
    const GdkSegment *segs,
    gint n_segs);
void gdk_draw_lines (GdkDrawable *drawable,
    GdkGC *gc,
    const GdkPoint *points,
    gint n_points);
void gdk_draw_pixbuf (GdkDrawable *drawable,
    GdkGC *gc,
    const GdkPixbuf *pixbuf,
    gint src_x,
    gint src_y,
    gint dest_x,
    gint dest_y,
    gint width,
    gint height,
    GdkRgbDither dither,
    gint x_dither,
    gint y_dither);

void gdk_draw_glyphs (GdkDrawable *drawable,
      GdkGC *gc,
      PangoFont *font,
      gint x,
      gint y,
      PangoGlyphString *glyphs);
void gdk_draw_layout_line (GdkDrawable *drawable,
      GdkGC *gc,
      gint x,
      gint y,
      PangoLayoutLine *line);
void gdk_draw_layout (GdkDrawable *drawable,
      GdkGC *gc,
      gint x,
      gint y,
      PangoLayout *layout);

void gdk_draw_layout_line_with_colors (GdkDrawable *drawable,
                                       GdkGC *gc,
                                       gint x,
                                       gint y,
                                       PangoLayoutLine *line,
                                       const GdkColor *foreground,
                                       const GdkColor *background);
void gdk_draw_layout_with_colors (GdkDrawable *drawable,
                                       GdkGC *gc,
                                       gint x,
                                       gint y,
                                       PangoLayout *layout,
                                       const GdkColor *foreground,
                                       const GdkColor *background);

void gdk_draw_glyphs_transformed (GdkDrawable *drawable,
      GdkGC *gc,
      const PangoMatrix *matrix,
      PangoFont *font,
      gint x,
      gint y,
      PangoGlyphString *glyphs);
void gdk_draw_trapezoids (GdkDrawable *drawable,
      GdkGC *gc,
      const GdkTrapezoid *trapezoids,
      gint n_trapezoids);






GdkImage* gdk_drawable_get_image (GdkDrawable *drawable,
                                       gint x,
                                       gint y,
                                       gint width,
                                       gint height);
GdkImage *gdk_drawable_copy_to_image (GdkDrawable *drawable,
          GdkImage *image,
          gint src_x,
          gint src_y,
          gint dest_x,
          gint dest_y,
          gint width,
          gint height);

GdkRegion *gdk_drawable_get_clip_region (GdkDrawable *drawable);
GdkRegion *gdk_drawable_get_visible_region (GdkDrawable *drawable);


# 40 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkenumtypes.h" 1
# 13 "/usr/include/gtk-2.0/gdk/gdkenumtypes.h"



GType gdk_cursor_type_get_type (void) __attribute__((__const__));



GType gdk_drag_action_get_type (void) __attribute__((__const__));

GType gdk_drag_protocol_get_type (void) __attribute__((__const__));



GType gdk_filter_return_get_type (void) __attribute__((__const__));

GType gdk_event_type_get_type (void) __attribute__((__const__));

GType gdk_event_mask_get_type (void) __attribute__((__const__));

GType gdk_visibility_state_get_type (void) __attribute__((__const__));

GType gdk_scroll_direction_get_type (void) __attribute__((__const__));

GType gdk_notify_type_get_type (void) __attribute__((__const__));

GType gdk_crossing_mode_get_type (void) __attribute__((__const__));

GType gdk_property_state_get_type (void) __attribute__((__const__));

GType gdk_window_state_get_type (void) __attribute__((__const__));

GType gdk_setting_action_get_type (void) __attribute__((__const__));

GType gdk_owner_change_get_type (void) __attribute__((__const__));



GType gdk_font_type_get_type (void) __attribute__((__const__));



GType gdk_cap_style_get_type (void) __attribute__((__const__));

GType gdk_fill_get_type (void) __attribute__((__const__));

GType gdk_function_get_type (void) __attribute__((__const__));

GType gdk_join_style_get_type (void) __attribute__((__const__));

GType gdk_line_style_get_type (void) __attribute__((__const__));

GType gdk_subwindow_mode_get_type (void) __attribute__((__const__));

GType gdk_gc_values_mask_get_type (void) __attribute__((__const__));



GType gdk_image_type_get_type (void) __attribute__((__const__));



GType gdk_extension_mode_get_type (void) __attribute__((__const__));

GType gdk_input_source_get_type (void) __attribute__((__const__));

GType gdk_input_mode_get_type (void) __attribute__((__const__));

GType gdk_axis_use_get_type (void) __attribute__((__const__));



GType gdk_prop_mode_get_type (void) __attribute__((__const__));



GType gdk_fill_rule_get_type (void) __attribute__((__const__));

GType gdk_overlap_type_get_type (void) __attribute__((__const__));



GType gdk_rgb_dither_get_type (void) __attribute__((__const__));



GType gdk_byte_order_get_type (void) __attribute__((__const__));

GType gdk_modifier_type_get_type (void) __attribute__((__const__));

GType gdk_input_condition_get_type (void) __attribute__((__const__));

GType gdk_status_get_type (void) __attribute__((__const__));

GType gdk_grab_status_get_type (void) __attribute__((__const__));



GType gdk_visual_type_get_type (void) __attribute__((__const__));



GType gdk_window_class_get_type (void) __attribute__((__const__));

GType gdk_window_type_get_type (void) __attribute__((__const__));

GType gdk_window_attributes_type_get_type (void) __attribute__((__const__));

GType gdk_window_hints_get_type (void) __attribute__((__const__));

GType gdk_window_type_hint_get_type (void) __attribute__((__const__));

GType gdk_wm_decoration_get_type (void) __attribute__((__const__));

GType gdk_wm_function_get_type (void) __attribute__((__const__));

GType gdk_gravity_get_type (void) __attribute__((__const__));

GType gdk_window_edge_get_type (void) __attribute__((__const__));


# 41 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkevents.h" 1
# 42 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkfont.h" 1
# 32 "/usr/include/gtk-2.0/gdk/gdkfont.h"
# 1 "/usr/include/gtk-2.0/gdk/gdktypes.h" 1
# 33 "/usr/include/gtk-2.0/gdk/gdkfont.h" 2










typedef enum
{
  GDK_FONT_FONT,
  GDK_FONT_FONTSET
} GdkFontType;

struct _GdkFont
{
  GdkFontType type;
  gint ascent;
  gint descent;
};

GType gdk_font_get_type (void) __attribute__((__const__));

GdkFont* gdk_font_ref (GdkFont *font);
void gdk_font_unref (GdkFont *font);
gint gdk_font_id (const GdkFont *font);
gboolean gdk_font_equal (const GdkFont *fonta,
        const GdkFont *fontb);

GdkFont *gdk_font_load_for_display (GdkDisplay *display,
      const gchar *font_name);
GdkFont *gdk_fontset_load_for_display (GdkDisplay *display,
      const gchar *fontset_name);
GdkFont *gdk_font_from_description_for_display (GdkDisplay *display,
      PangoFontDescription *font_desc);




GdkFont* gdk_font_load (const gchar *font_name);
GdkFont* gdk_fontset_load (const gchar *fontset_name);
GdkFont* gdk_font_from_description (PangoFontDescription *font_desc);


gint gdk_string_width (GdkFont *font,
        const gchar *string);
gint gdk_text_width (GdkFont *font,
        const gchar *text,
        gint text_length);
gint gdk_text_width_wc (GdkFont *font,
        const GdkWChar *text,
        gint text_length);
gint gdk_char_width (GdkFont *font,
        gchar character);
gint gdk_char_width_wc (GdkFont *font,
        GdkWChar character);
gint gdk_string_measure (GdkFont *font,
        const gchar *string);
gint gdk_text_measure (GdkFont *font,
        const gchar *text,
        gint text_length);
gint gdk_char_measure (GdkFont *font,
        gchar character);
gint gdk_string_height (GdkFont *font,
        const gchar *string);
gint gdk_text_height (GdkFont *font,
        const gchar *text,
        gint text_length);
gint gdk_char_height (GdkFont *font,
        gchar character);

void gdk_text_extents (GdkFont *font,
        const gchar *text,
        gint text_length,
        gint *lbearing,
        gint *rbearing,
        gint *width,
        gint *ascent,
        gint *descent);
void gdk_text_extents_wc (GdkFont *font,
        const GdkWChar *text,
        gint text_length,
        gint *lbearing,
        gint *rbearing,
        gint *width,
        gint *ascent,
        gint *descent);
void gdk_string_extents (GdkFont *font,
        const gchar *string,
        gint *lbearing,
        gint *rbearing,
        gint *width,
        gint *ascent,
        gint *descent);

GdkDisplay * gdk_font_get_display (GdkFont *font);




# 43 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkgc.h" 1
# 44 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkimage.h" 1
# 34 "/usr/include/gtk-2.0/gdk/gdkimage.h"
# 1 "/usr/include/gtk-2.0/gdk/gdktypes.h" 1
# 35 "/usr/include/gtk-2.0/gdk/gdkimage.h" 2


# 49 "/usr/include/gtk-2.0/gdk/gdkimage.h"
typedef enum
{
  GDK_IMAGE_NORMAL,
  GDK_IMAGE_SHARED,
  GDK_IMAGE_FASTEST
} GdkImageType;

typedef struct _GdkImageClass GdkImageClass;
# 65 "/usr/include/gtk-2.0/gdk/gdkimage.h"
struct _GdkImage
{
  GObject parent_instance;



  GdkImageType type;
  GdkVisual *visual;
  GdkByteOrder byte_order;
  gint width;
  gint height;
  guint16 depth;
  guint16 bpp;
  guint16 bpl;
  guint16 bits_per_pixel;
  gpointer mem;

  GdkColormap *colormap;


  gpointer windowing_data;
};

struct _GdkImageClass
{
  GObjectClass parent_class;
};

GType gdk_image_get_type (void) __attribute__((__const__));

GdkImage* gdk_image_new (GdkImageType type,
    GdkVisual *visual,
    gint width,
    gint height);


GdkImage* gdk_image_get (GdkDrawable *drawable,
    gint x,
    gint y,
    gint width,
    gint height);

GdkImage * gdk_image_ref (GdkImage *image);
void gdk_image_unref (GdkImage *image);


void gdk_image_put_pixel (GdkImage *image,
    gint x,
    gint y,
    guint32 pixel);
guint32 gdk_image_get_pixel (GdkImage *image,
    gint x,
    gint y);

void gdk_image_set_colormap (GdkImage *image,
                                   GdkColormap *colormap);
GdkColormap* gdk_image_get_colormap (GdkImage *image);
# 135 "/usr/include/gtk-2.0/gdk/gdkimage.h"

# 45 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkinput.h" 1
# 46 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkkeys.h" 1
# 34 "/usr/include/gtk-2.0/gdk/gdkkeys.h"
# 1 "/usr/include/gtk-2.0/gdk/gdktypes.h" 1
# 35 "/usr/include/gtk-2.0/gdk/gdkkeys.h" 2



typedef struct _GdkKeymapKey GdkKeymapKey;


struct _GdkKeymapKey
{
  guint keycode;
  gint group;
  gint level;
};
# 56 "/usr/include/gtk-2.0/gdk/gdkkeys.h"
typedef struct _GdkKeymap GdkKeymap;
typedef struct _GdkKeymapClass GdkKeymapClass;
# 66 "/usr/include/gtk-2.0/gdk/gdkkeys.h"
struct _GdkKeymap
{
  GObject parent_instance;
  GdkDisplay *display;
};

struct _GdkKeymapClass
{
  GObjectClass parent_class;

  void (*direction_changed) (GdkKeymap *keymap);
  void (*keys_changed) (GdkKeymap *keymap);
  void (*state_changed) (GdkKeymap *keymap);
};

GType gdk_keymap_get_type (void) __attribute__((__const__));


GdkKeymap* gdk_keymap_get_default (void);

GdkKeymap* gdk_keymap_get_for_display (GdkDisplay *display);


guint gdk_keymap_lookup_key (GdkKeymap *keymap,
          const GdkKeymapKey *key);
gboolean gdk_keymap_translate_keyboard_state (GdkKeymap *keymap,
          guint hardware_keycode,
          GdkModifierType state,
          gint group,
          guint *keyval,
          gint *effective_group,
          gint *level,
          GdkModifierType *consumed_modifiers);
gboolean gdk_keymap_get_entries_for_keyval (GdkKeymap *keymap,
          guint keyval,
          GdkKeymapKey **keys,
          gint *n_keys);
gboolean gdk_keymap_get_entries_for_keycode (GdkKeymap *keymap,
          guint hardware_keycode,
          GdkKeymapKey **keys,
          guint **keyvals,
          gint *n_entries);
PangoDirection gdk_keymap_get_direction (GdkKeymap *keymap);
gboolean gdk_keymap_have_bidi_layouts (GdkKeymap *keymap);
gboolean gdk_keymap_get_caps_lock_state (GdkKeymap *keymap);



gchar* gdk_keyval_name (guint keyval) __attribute__((__const__));
guint gdk_keyval_from_name (const gchar *keyval_name);
void gdk_keyval_convert_case (guint symbol,
      guint *lower,
      guint *upper);
guint gdk_keyval_to_upper (guint keyval) __attribute__((__const__));
guint gdk_keyval_to_lower (guint keyval) __attribute__((__const__));
gboolean gdk_keyval_is_upper (guint keyval) __attribute__((__const__));
gboolean gdk_keyval_is_lower (guint keyval) __attribute__((__const__));

guint32 gdk_keyval_to_unicode (guint keyval) __attribute__((__const__));
guint gdk_unicode_to_keyval (guint32 wc) __attribute__((__const__));



# 47 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkpango.h" 1
# 27 "/usr/include/gtk-2.0/gdk/gdkpango.h"
# 1 "/usr/include/gtk-2.0/gdk/gdktypes.h" 1
# 28 "/usr/include/gtk-2.0/gdk/gdkpango.h" 2





typedef struct _GdkPangoRenderer GdkPangoRenderer;
typedef struct _GdkPangoRendererClass GdkPangoRendererClass;
typedef struct _GdkPangoRendererPrivate GdkPangoRendererPrivate;
# 68 "/usr/include/gtk-2.0/gdk/gdkpango.h"
struct _GdkPangoRenderer
{

  PangoRenderer parent_instance;

  GdkPangoRendererPrivate *priv;
};
# 83 "/usr/include/gtk-2.0/gdk/gdkpango.h"
struct _GdkPangoRendererClass
{

  PangoRendererClass parent_class;
};

GType gdk_pango_renderer_get_type (void) __attribute__((__const__));

PangoRenderer *gdk_pango_renderer_new (GdkScreen *screen);
PangoRenderer *gdk_pango_renderer_get_default (GdkScreen *screen);

void gdk_pango_renderer_set_drawable (GdkPangoRenderer *gdk_renderer,
         GdkDrawable *drawable);
void gdk_pango_renderer_set_gc (GdkPangoRenderer *gdk_renderer,
         GdkGC *gc);
void gdk_pango_renderer_set_stipple (GdkPangoRenderer *gdk_renderer,
         PangoRenderPart part,
         GdkBitmap *stipple);
void gdk_pango_renderer_set_override_color (GdkPangoRenderer *gdk_renderer,
         PangoRenderPart part,
         const GdkColor *color);



PangoContext *gdk_pango_context_get_for_screen (GdkScreen *screen);

PangoContext *gdk_pango_context_get (void);


void gdk_pango_context_set_colormap (PangoContext *context,
                                                GdkColormap *colormap);
# 123 "/usr/include/gtk-2.0/gdk/gdkpango.h"
GdkRegion *gdk_pango_layout_line_get_clip_region (PangoLayoutLine *line,
                                                     gint x_origin,
                                                     gint y_origin,
                                                     const gint *index_ranges,
                                                     gint n_ranges);
GdkRegion *gdk_pango_layout_get_clip_region (PangoLayout *layout,
                                                     gint x_origin,
                                                     gint y_origin,
                                                     const gint *index_ranges,
                                                     gint n_ranges);





typedef struct _GdkPangoAttrStipple GdkPangoAttrStipple;
typedef struct _GdkPangoAttrEmbossed GdkPangoAttrEmbossed;
typedef struct _GdkPangoAttrEmbossColor GdkPangoAttrEmbossColor;

struct _GdkPangoAttrStipple
{
  PangoAttribute attr;
  GdkBitmap *stipple;
};

struct _GdkPangoAttrEmbossed
{
  PangoAttribute attr;
  gboolean embossed;
};

struct _GdkPangoAttrEmbossColor
{
  PangoAttribute attr;
  PangoColor color;
};

PangoAttribute *gdk_pango_attr_stipple_new (GdkBitmap *stipple);
PangoAttribute *gdk_pango_attr_embossed_new (gboolean embossed);
PangoAttribute *gdk_pango_attr_emboss_color_new (const GdkColor *color);


# 48 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkpixbuf.h" 1
# 49 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkpixmap.h" 1
# 34 "/usr/include/gtk-2.0/gdk/gdkpixmap.h"
# 1 "/usr/include/gtk-2.0/gdk/gdktypes.h" 1
# 35 "/usr/include/gtk-2.0/gdk/gdkpixmap.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkdrawable.h" 1
# 36 "/usr/include/gtk-2.0/gdk/gdkpixmap.h" 2



typedef struct _GdkPixmapObject GdkPixmapObject;
typedef struct _GdkPixmapObjectClass GdkPixmapObjectClass;
# 50 "/usr/include/gtk-2.0/gdk/gdkpixmap.h"
struct _GdkPixmapObject
{
  GdkDrawable parent_instance;

  GdkDrawable *impl;

  gint depth;
};

struct _GdkPixmapObjectClass
{
  GdkDrawableClass parent_class;

};

GType gdk_pixmap_get_type (void) __attribute__((__const__));



GdkPixmap* gdk_pixmap_new (GdkDrawable *drawable,
      gint width,
      gint height,
      gint depth);
GdkBitmap* gdk_bitmap_create_from_data (GdkDrawable *drawable,
      const gchar *data,
      gint width,
      gint height);
GdkPixmap* gdk_pixmap_create_from_data (GdkDrawable *drawable,
      const gchar *data,
      gint width,
      gint height,
      gint depth,
      const GdkColor *fg,
      const GdkColor *bg);

GdkPixmap* gdk_pixmap_create_from_xpm (GdkDrawable *drawable,
        GdkBitmap **mask,
        const GdkColor *transparent_color,
        const gchar *filename);
GdkPixmap* gdk_pixmap_colormap_create_from_xpm (GdkDrawable *drawable,
        GdkColormap *colormap,
        GdkBitmap **mask,
        const GdkColor *transparent_color,
        const gchar *filename);
GdkPixmap* gdk_pixmap_create_from_xpm_d (GdkDrawable *drawable,
        GdkBitmap **mask,
        const GdkColor *transparent_color,
        gchar **data);
GdkPixmap* gdk_pixmap_colormap_create_from_xpm_d (GdkDrawable *drawable,
        GdkColormap *colormap,
        GdkBitmap **mask,
        const GdkColor *transparent_color,
        gchar **data);




GdkPixmap* gdk_pixmap_foreign_new (GdkNativeWindow anid);
GdkPixmap* gdk_pixmap_lookup (GdkNativeWindow anid);


GdkPixmap* gdk_pixmap_foreign_new_for_display (GdkDisplay *display,
        GdkNativeWindow anid);
GdkPixmap* gdk_pixmap_lookup_for_display (GdkDisplay *display,
        GdkNativeWindow anid);
GdkPixmap* gdk_pixmap_foreign_new_for_screen (GdkScreen *screen,
        GdkNativeWindow anid,
        gint width,
                                                  gint height,
                                                  gint depth);
# 128 "/usr/include/gtk-2.0/gdk/gdkpixmap.h"

# 50 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkproperty.h" 1
# 34 "/usr/include/gtk-2.0/gdk/gdkproperty.h"
# 1 "/usr/include/gtk-2.0/gdk/gdktypes.h" 1
# 35 "/usr/include/gtk-2.0/gdk/gdkproperty.h" 2



typedef enum
{
  GDK_PROP_MODE_REPLACE,
  GDK_PROP_MODE_PREPEND,
  GDK_PROP_MODE_APPEND
} GdkPropMode;

GdkAtom gdk_atom_intern (const gchar *atom_name,
    gboolean only_if_exists);
GdkAtom gdk_atom_intern_static_string (const gchar *atom_name);
gchar* gdk_atom_name (GdkAtom atom);

gboolean gdk_property_get (GdkWindow *window,
         GdkAtom property,
         GdkAtom type,
         gulong offset,
         gulong length,
         gint pdelete,
         GdkAtom *actual_property_type,
         gint *actual_format,
         gint *actual_length,
         guchar **data);
void gdk_property_change (GdkWindow *window,
         GdkAtom property,
         GdkAtom type,
         gint format,
         GdkPropMode mode,
         const guchar *data,
         gint nelements);
void gdk_property_delete (GdkWindow *window,
         GdkAtom property);

gint gdk_text_property_to_text_list (GdkAtom encoding,
         gint format,
         const guchar *text,
         gint length,
         gchar ***list);
gint gdk_text_property_to_utf8_list (GdkAtom encoding,
         gint format,
         const guchar *text,
         gint length,
         gchar ***list);
gboolean gdk_utf8_to_compound_text (const gchar *str,
        GdkAtom *encoding,
        gint *format,
        guchar **ctext,
        gint *length);
gint gdk_string_to_compound_text (const gchar *str,
         GdkAtom *encoding,
         gint *format,
         guchar **ctext,
         gint *length);


gint gdk_text_property_to_text_list_for_display (GdkDisplay *display,
       GdkAtom encoding,
       gint format,
       const guchar *text,
       gint length,
       gchar ***list);
gint gdk_text_property_to_utf8_list_for_display (GdkDisplay *display,
       GdkAtom encoding,
       gint format,
       const guchar *text,
       gint length,
       gchar ***list);

gchar *gdk_utf8_to_string_target (const gchar *str);
gint gdk_string_to_compound_text_for_display (GdkDisplay *display,
        const gchar *str,
        GdkAtom *encoding,
        gint *format,
        guchar **ctext,
        gint *length);
gboolean gdk_utf8_to_compound_text_for_display (GdkDisplay *display,
        const gchar *str,
        GdkAtom *encoding,
        gint *format,
        guchar **ctext,
        gint *length);

void gdk_free_text_list (gchar **list);
void gdk_free_compound_text (guchar *ctext);


# 51 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkregion.h" 1
# 34 "/usr/include/gtk-2.0/gdk/gdkregion.h"
# 1 "/usr/include/gtk-2.0/gdk/gdktypes.h" 1
# 35 "/usr/include/gtk-2.0/gdk/gdkregion.h" 2







typedef enum
{
  GDK_EVEN_ODD_RULE,
  GDK_WINDING_RULE
} GdkFillRule;






typedef enum
{
  GDK_OVERLAP_RECTANGLE_IN,
  GDK_OVERLAP_RECTANGLE_OUT,
  GDK_OVERLAP_RECTANGLE_PART
} GdkOverlapType;

typedef void (* GdkSpanFunc) (GdkSpan *span,
                              gpointer data);

GdkRegion * gdk_region_new (void);
GdkRegion * gdk_region_polygon (const GdkPoint *points,
                                           gint n_points,
                                           GdkFillRule fill_rule);
GdkRegion * gdk_region_copy (const GdkRegion *region);
GdkRegion * gdk_region_rectangle (const GdkRectangle *rectangle);
void gdk_region_destroy (GdkRegion *region);

void gdk_region_get_clipbox (const GdkRegion *region,
                                           GdkRectangle *rectangle);
void gdk_region_get_rectangles (const GdkRegion *region,
                                           GdkRectangle **rectangles,
                                           gint *n_rectangles);

gboolean gdk_region_empty (const GdkRegion *region);
gboolean gdk_region_equal (const GdkRegion *region1,
                                           const GdkRegion *region2);
gboolean gdk_region_point_in (const GdkRegion *region,
                                           int x,
                                           int y);
GdkOverlapType gdk_region_rect_in (const GdkRegion *region,
                                           const GdkRectangle *rectangle);

void gdk_region_offset (GdkRegion *region,
                                           gint dx,
                                           gint dy);
void gdk_region_shrink (GdkRegion *region,
                                           gint dx,
                                           gint dy);
void gdk_region_union_with_rect (GdkRegion *region,
                                           const GdkRectangle *rect);
void gdk_region_intersect (GdkRegion *source1,
                                           const GdkRegion *source2);
void gdk_region_union (GdkRegion *source1,
                                           const GdkRegion *source2);
void gdk_region_subtract (GdkRegion *source1,
                                           const GdkRegion *source2);
void gdk_region_xor (GdkRegion *source1,
                                           const GdkRegion *source2);

void gdk_region_spans_intersect_foreach (GdkRegion *region,
                                           const GdkSpan *spans,
                                           int n_spans,
                                           gboolean sorted,
                                           GdkSpanFunc function,
                                           gpointer data);


# 52 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkrgb.h" 1
# 53 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkscreen.h" 1
# 54 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkselection.h" 1
# 34 "/usr/include/gtk-2.0/gdk/gdkselection.h"
# 1 "/usr/include/gtk-2.0/gdk/gdktypes.h" 1
# 35 "/usr/include/gtk-2.0/gdk/gdkselection.h" 2


# 60 "/usr/include/gtk-2.0/gdk/gdkselection.h"
typedef GdkAtom GdkSelection;
typedef GdkAtom GdkTarget;
typedef GdkAtom GdkSelectionType;







gboolean gdk_selection_owner_set (GdkWindow *owner,
        GdkAtom selection,
        guint32 time_,
        gboolean send_event);
GdkWindow* gdk_selection_owner_get (GdkAtom selection);


gboolean gdk_selection_owner_set_for_display (GdkDisplay *display,
      GdkWindow *owner,
      GdkAtom selection,
      guint32 time_,
      gboolean send_event);
GdkWindow *gdk_selection_owner_get_for_display (GdkDisplay *display,
      GdkAtom selection);

void gdk_selection_convert (GdkWindow *requestor,
        GdkAtom selection,
        GdkAtom target,
        guint32 time_);
gboolean gdk_selection_property_get (GdkWindow *requestor,
           guchar **data,
           GdkAtom *prop_type,
           gint *prop_format);


void gdk_selection_send_notify (GdkNativeWindow requestor,
          GdkAtom selection,
          GdkAtom target,
          GdkAtom property,
          guint32 time_);


void gdk_selection_send_notify_for_display (GdkDisplay *display,
        GdkNativeWindow requestor,
        GdkAtom selection,
        GdkAtom target,
        GdkAtom property,
        guint32 time_);


# 55 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkspawn.h" 1
# 29 "/usr/include/gtk-2.0/gdk/gdkspawn.h"
# 1 "/usr/include/gtk-2.0/gdk/gdkscreen.h" 1
# 30 "/usr/include/gtk-2.0/gdk/gdkspawn.h" 2



gboolean gdk_spawn_on_screen (GdkScreen *screen,
        const gchar *working_directory,
        gchar **argv,
        gchar **envp,
        GSpawnFlags flags,
        GSpawnChildSetupFunc child_setup,
        gpointer user_data,
        gint *child_pid,
        GError **error);

gboolean gdk_spawn_on_screen_with_pipes (GdkScreen *screen,
        const gchar *working_directory,
        gchar **argv,
        gchar **envp,
        GSpawnFlags flags,
        GSpawnChildSetupFunc child_setup,
        gpointer user_data,
        gint *child_pid,
        gint *standard_input,
        gint *standard_output,
        gint *standard_error,
        GError **error);

gboolean gdk_spawn_command_line_on_screen (GdkScreen *screen,
        const gchar *command_line,
        GError **error);


# 56 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdktestutils.h" 1
# 28 "/usr/include/gtk-2.0/gdk/gdktestutils.h"
# 1 "/usr/include/gtk-2.0/gdk/gdkwindow.h" 1
# 34 "/usr/include/gtk-2.0/gdk/gdkwindow.h"
# 1 "/usr/include/gtk-2.0/gdk/gdkdrawable.h" 1
# 35 "/usr/include/gtk-2.0/gdk/gdkwindow.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdktypes.h" 1
# 36 "/usr/include/gtk-2.0/gdk/gdkwindow.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkevents.h" 1
# 37 "/usr/include/gtk-2.0/gdk/gdkwindow.h" 2



typedef struct _GdkGeometry GdkGeometry;
typedef struct _GdkWindowAttr GdkWindowAttr;
typedef struct _GdkPointerHooks GdkPointerHooks;
typedef struct _GdkWindowRedirect GdkWindowRedirect;
# 54 "/usr/include/gtk-2.0/gdk/gdkwindow.h"
typedef enum
{
  GDK_INPUT_OUTPUT,
  GDK_INPUT_ONLY
} GdkWindowClass;
# 73 "/usr/include/gtk-2.0/gdk/gdkwindow.h"
typedef enum
{
  GDK_WINDOW_ROOT,
  GDK_WINDOW_TOPLEVEL,
  GDK_WINDOW_CHILD,
  GDK_WINDOW_DIALOG,
  GDK_WINDOW_TEMP,
  GDK_WINDOW_FOREIGN
} GdkWindowType;
# 91 "/usr/include/gtk-2.0/gdk/gdkwindow.h"
typedef enum
{
  GDK_WA_TITLE = 1 << 1,
  GDK_WA_X = 1 << 2,
  GDK_WA_Y = 1 << 3,
  GDK_WA_CURSOR = 1 << 4,
  GDK_WA_COLORMAP = 1 << 5,
  GDK_WA_VISUAL = 1 << 6,
  GDK_WA_WMCLASS = 1 << 7,
  GDK_WA_NOREDIR = 1 << 8,
  GDK_WA_TYPE_HINT = 1 << 9
} GdkWindowAttributesType;



typedef enum
{
  GDK_HINT_POS = 1 << 0,
  GDK_HINT_MIN_SIZE = 1 << 1,
  GDK_HINT_MAX_SIZE = 1 << 2,
  GDK_HINT_BASE_SIZE = 1 << 3,
  GDK_HINT_ASPECT = 1 << 4,
  GDK_HINT_RESIZE_INC = 1 << 5,
  GDK_HINT_WIN_GRAVITY = 1 << 6,
  GDK_HINT_USER_POS = 1 << 7,
  GDK_HINT_USER_SIZE = 1 << 8
} GdkWindowHints;
# 132 "/usr/include/gtk-2.0/gdk/gdkwindow.h"
typedef enum
{
  GDK_WINDOW_TYPE_HINT_NORMAL,
  GDK_WINDOW_TYPE_HINT_DIALOG,
  GDK_WINDOW_TYPE_HINT_MENU,
  GDK_WINDOW_TYPE_HINT_TOOLBAR,
  GDK_WINDOW_TYPE_HINT_SPLASHSCREEN,
  GDK_WINDOW_TYPE_HINT_UTILITY,
  GDK_WINDOW_TYPE_HINT_DOCK,
  GDK_WINDOW_TYPE_HINT_DESKTOP,
  GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU,
  GDK_WINDOW_TYPE_HINT_POPUP_MENU,
  GDK_WINDOW_TYPE_HINT_TOOLTIP,
  GDK_WINDOW_TYPE_HINT_NOTIFICATION,
  GDK_WINDOW_TYPE_HINT_COMBO,
  GDK_WINDOW_TYPE_HINT_DND
} GdkWindowTypeHint;






typedef enum
{
  GDK_DECOR_ALL = 1 << 0,
  GDK_DECOR_BORDER = 1 << 1,
  GDK_DECOR_RESIZEH = 1 << 2,
  GDK_DECOR_TITLE = 1 << 3,
  GDK_DECOR_MENU = 1 << 4,
  GDK_DECOR_MINIMIZE = 1 << 5,
  GDK_DECOR_MAXIMIZE = 1 << 6
} GdkWMDecoration;

typedef enum
{
  GDK_FUNC_ALL = 1 << 0,
  GDK_FUNC_RESIZE = 1 << 1,
  GDK_FUNC_MOVE = 1 << 2,
  GDK_FUNC_MINIMIZE = 1 << 3,
  GDK_FUNC_MAXIMIZE = 1 << 4,
  GDK_FUNC_CLOSE = 1 << 5
} GdkWMFunction;





typedef enum
{
  GDK_GRAVITY_NORTH_WEST = 1,
  GDK_GRAVITY_NORTH,
  GDK_GRAVITY_NORTH_EAST,
  GDK_GRAVITY_WEST,
  GDK_GRAVITY_CENTER,
  GDK_GRAVITY_EAST,
  GDK_GRAVITY_SOUTH_WEST,
  GDK_GRAVITY_SOUTH,
  GDK_GRAVITY_SOUTH_EAST,
  GDK_GRAVITY_STATIC
} GdkGravity;


typedef enum
{
  GDK_WINDOW_EDGE_NORTH_WEST,
  GDK_WINDOW_EDGE_NORTH,
  GDK_WINDOW_EDGE_NORTH_EAST,
  GDK_WINDOW_EDGE_WEST,
  GDK_WINDOW_EDGE_EAST,
  GDK_WINDOW_EDGE_SOUTH_WEST,
  GDK_WINDOW_EDGE_SOUTH,
  GDK_WINDOW_EDGE_SOUTH_EAST
} GdkWindowEdge;

struct _GdkWindowAttr
{
  gchar *title;
  gint event_mask;
  gint x, y;
  gint width;
  gint height;
  GdkWindowClass wclass;
  GdkVisual *visual;
  GdkColormap *colormap;
  GdkWindowType window_type;
  GdkCursor *cursor;
  gchar *wmclass_name;
  gchar *wmclass_class;
  gboolean override_redirect;
  GdkWindowTypeHint type_hint;
};

struct _GdkGeometry
{
  gint min_width;
  gint min_height;
  gint max_width;
  gint max_height;
  gint base_width;
  gint base_height;
  gint width_inc;
  gint height_inc;
  gdouble min_aspect;
  gdouble max_aspect;
  GdkGravity win_gravity;
};

struct _GdkPointerHooks
{
  GdkWindow* (*get_pointer) (GdkWindow *window,
              gint *x,
              gint *y,
              GdkModifierType *mask);
  GdkWindow* (*window_at_pointer) (GdkScreen *screen,
                                   gint *win_x,
                                   gint *win_y);
};

typedef struct _GdkWindowObject GdkWindowObject;
typedef struct _GdkWindowObjectClass GdkWindowObjectClass;
# 262 "/usr/include/gtk-2.0/gdk/gdkwindow.h"
struct _GdkWindowObject
{
  GdkDrawable parent_instance;

  GdkDrawable *impl;

  GdkWindowObject *parent;

  gpointer user_data;

  gint x;
  gint y;

  gint extension_events;

  GList *filters;
  GList *children;

  GdkColor bg_color;
  GdkPixmap *bg_pixmap;

  GSList *paint_stack;

  GdkRegion *update_area;
  guint update_freeze_count;

  guint8 window_type;
  guint8 depth;
  guint8 resize_count;

  GdkWindowState state;

  guint guffaw_gravity : 1;
  guint input_only : 1;
  guint modal_hint : 1;
  guint composited : 1;

  guint destroyed : 2;

  guint accept_focus : 1;
  guint focus_on_map : 1;
  guint shaped : 1;

  GdkEventMask event_mask;

  guint update_and_descendants_freeze_count;

  GdkWindowRedirect *redirect;
};

struct _GdkWindowObjectClass
{
  GdkDrawableClass parent_class;
};



GType gdk_window_object_get_type (void) __attribute__((__const__));
GdkWindow* gdk_window_new (GdkWindow *parent,
                                                GdkWindowAttr *attributes,
                                                gint attributes_mask);
void gdk_window_destroy (GdkWindow *window);
GdkWindowType gdk_window_get_window_type (GdkWindow *window);
GdkWindow* gdk_window_at_pointer (gint *win_x,
                                                gint *win_y);
void gdk_window_show (GdkWindow *window);
void gdk_window_hide (GdkWindow *window);
void gdk_window_withdraw (GdkWindow *window);
void gdk_window_show_unraised (GdkWindow *window);
void gdk_window_move (GdkWindow *window,
                                                gint x,
                                                gint y);
void gdk_window_resize (GdkWindow *window,
                                                gint width,
                                                gint height);
void gdk_window_move_resize (GdkWindow *window,
                                                gint x,
                                                gint y,
                                                gint width,
                                                gint height);
void gdk_window_reparent (GdkWindow *window,
                                                GdkWindow *new_parent,
                                                gint x,
                                                gint y);
void gdk_window_clear (GdkWindow *window);
void gdk_window_clear_area (GdkWindow *window,
                                                gint x,
                                                gint y,
                                                gint width,
                                                gint height);
void gdk_window_clear_area_e (GdkWindow *window,
                                                gint x,
                                                gint y,
                                                gint width,
                                                gint height);
void gdk_window_raise (GdkWindow *window);
void gdk_window_lower (GdkWindow *window);
void gdk_window_focus (GdkWindow *window,
                                                guint32 timestamp);
void gdk_window_set_user_data (GdkWindow *window,
                                                gpointer user_data);
void gdk_window_set_override_redirect (GdkWindow *window,
                                                gboolean override_redirect);
void gdk_window_set_accept_focus (GdkWindow *window,
             gboolean accept_focus);
void gdk_window_set_focus_on_map (GdkWindow *window,
             gboolean focus_on_map);
void gdk_window_add_filter (GdkWindow *window,
                                                GdkFilterFunc function,
                                                gpointer data);
void gdk_window_remove_filter (GdkWindow *window,
                                                GdkFilterFunc function,
                                                gpointer data);
void gdk_window_scroll (GdkWindow *window,
                                                gint dx,
                                                gint dy);
void gdk_window_move_region (GdkWindow *window,
      const GdkRegion *region,
      gint dx,
      gint dy);







void gdk_window_shape_combine_mask (GdkWindow *window,
                                     GdkBitmap *mask,
                                     gint x,
                                     gint y);
void gdk_window_shape_combine_region (GdkWindow *window,
                                      const GdkRegion *shape_region,
                                      gint offset_x,
                                      gint offset_y);
# 405 "/usr/include/gtk-2.0/gdk/gdkwindow.h"
void gdk_window_set_child_shapes (GdkWindow *window);

void gdk_window_set_composited (GdkWindow *window,
                                  gboolean composited);
# 417 "/usr/include/gtk-2.0/gdk/gdkwindow.h"
void gdk_window_merge_child_shapes (GdkWindow *window);

void gdk_window_input_shape_combine_mask (GdkWindow *window,
         GdkBitmap *mask,
         gint x,
         gint y);
void gdk_window_input_shape_combine_region (GdkWindow *window,
                                            const GdkRegion *shape_region,
                                            gint offset_x,
                                            gint offset_y);
void gdk_window_set_child_input_shapes (GdkWindow *window);
void gdk_window_merge_child_input_shapes (GdkWindow *window);
# 437 "/usr/include/gtk-2.0/gdk/gdkwindow.h"
gboolean gdk_window_is_visible (GdkWindow *window);
gboolean gdk_window_is_viewable (GdkWindow *window);

GdkWindowState gdk_window_get_state (GdkWindow *window);




gboolean gdk_window_set_static_gravities (GdkWindow *window,
       gboolean use_static);



GdkWindow* gdk_window_foreign_new (GdkNativeWindow anid);
GdkWindow* gdk_window_lookup (GdkNativeWindow anid);

GdkWindow *gdk_window_foreign_new_for_display (GdkDisplay *display,
        GdkNativeWindow anid);
GdkWindow* gdk_window_lookup_for_display (GdkDisplay *display,
          GdkNativeWindow anid);





void gdk_window_set_hints (GdkWindow *window,
       gint x,
       gint y,
       gint min_width,
       gint min_height,
       gint max_width,
       gint max_height,
       gint flags);

void gdk_window_set_type_hint (GdkWindow *window,
                                            GdkWindowTypeHint hint);
GdkWindowTypeHint gdk_window_get_type_hint (GdkWindow *window);

void gdk_window_set_modal_hint (GdkWindow *window,
                                           gboolean modal);

void gdk_window_set_skip_taskbar_hint (GdkWindow *window,
                                       gboolean skips_taskbar);
void gdk_window_set_skip_pager_hint (GdkWindow *window,
                                       gboolean skips_pager);
void gdk_window_set_urgency_hint (GdkWindow *window,
           gboolean urgent);

void gdk_window_set_geometry_hints (GdkWindow *window,
          const GdkGeometry *geometry,
          GdkWindowHints geom_mask);
void gdk_set_sm_client_id (const gchar *sm_client_id);

void gdk_window_begin_paint_rect (GdkWindow *window,
          const GdkRectangle *rectangle);
void gdk_window_begin_paint_region (GdkWindow *window,
          const GdkRegion *region);
void gdk_window_end_paint (GdkWindow *window);

void gdk_window_set_title (GdkWindow *window,
         const gchar *title);
void gdk_window_set_role (GdkWindow *window,
         const gchar *role);
void gdk_window_set_startup_id (GdkWindow *window,
         const gchar *startup_id);
void gdk_window_set_transient_for (GdkWindow *window,
         GdkWindow *parent);
void gdk_window_set_background (GdkWindow *window,
       const GdkColor *color);
void gdk_window_set_back_pixmap (GdkWindow *window,
       GdkPixmap *pixmap,
       gboolean parent_relative);
void gdk_window_set_cursor (GdkWindow *window,
       GdkCursor *cursor);
void gdk_window_get_user_data (GdkWindow *window,
       gpointer *data);
void gdk_window_get_geometry (GdkWindow *window,
       gint *x,
       gint *y,
       gint *width,
       gint *height,
       gint *depth);
void gdk_window_get_position (GdkWindow *window,
       gint *x,
       gint *y);
gint gdk_window_get_origin (GdkWindow *window,
       gint *x,
       gint *y);



gboolean gdk_window_get_deskrelative_origin (GdkWindow *window,
       gint *x,
       gint *y);


void gdk_window_get_root_origin (GdkWindow *window,
       gint *x,
       gint *y);
void gdk_window_get_frame_extents (GdkWindow *window,
                                            GdkRectangle *rect);
GdkWindow* gdk_window_get_pointer (GdkWindow *window,
       gint *x,
       gint *y,
       GdkModifierType *mask);
GdkWindow * gdk_window_get_parent (GdkWindow *window);
GdkWindow * gdk_window_get_toplevel (GdkWindow *window);

GList * gdk_window_get_children (GdkWindow *window);
GList * gdk_window_peek_children (GdkWindow *window);
GdkEventMask gdk_window_get_events (GdkWindow *window);
void gdk_window_set_events (GdkWindow *window,
       GdkEventMask event_mask);

void gdk_window_set_icon_list (GdkWindow *window,
       GList *pixbufs);
void gdk_window_set_icon (GdkWindow *window,
       GdkWindow *icon_window,
       GdkPixmap *pixmap,
       GdkBitmap *mask);
void gdk_window_set_icon_name (GdkWindow *window,
       const gchar *name);
void gdk_window_set_group (GdkWindow *window,
       GdkWindow *leader);
GdkWindow* gdk_window_get_group (GdkWindow *window);
void gdk_window_set_decorations (GdkWindow *window,
       GdkWMDecoration decorations);
gboolean gdk_window_get_decorations (GdkWindow *window,
       GdkWMDecoration *decorations);
void gdk_window_set_functions (GdkWindow *window,
       GdkWMFunction functions);

GList * gdk_window_get_toplevels (void);


void gdk_window_beep (GdkWindow *window);
void gdk_window_iconify (GdkWindow *window);
void gdk_window_deiconify (GdkWindow *window);
void gdk_window_stick (GdkWindow *window);
void gdk_window_unstick (GdkWindow *window);
void gdk_window_maximize (GdkWindow *window);
void gdk_window_unmaximize (GdkWindow *window);
void gdk_window_fullscreen (GdkWindow *window);
void gdk_window_unfullscreen (GdkWindow *window);
void gdk_window_set_keep_above (GdkWindow *window,
                                          gboolean setting);
void gdk_window_set_keep_below (GdkWindow *window,
                                          gboolean setting);
void gdk_window_set_opacity (GdkWindow *window,
                                          gdouble opacity);
void gdk_window_register_dnd (GdkWindow *window);

void gdk_window_begin_resize_drag (GdkWindow *window,
                                   GdkWindowEdge edge,
                                   gint button,
                                   gint root_x,
                                   gint root_y,
                                   guint32 timestamp);
void gdk_window_begin_move_drag (GdkWindow *window,
                                   gint button,
                                   gint root_x,
                                   gint root_y,
                                   guint32 timestamp);


void gdk_window_invalidate_rect (GdkWindow *window,
              const GdkRectangle *rect,
              gboolean invalidate_children);
void gdk_window_invalidate_region (GdkWindow *window,
              const GdkRegion *region,
              gboolean invalidate_children);
void gdk_window_invalidate_maybe_recurse (GdkWindow *window,
       const GdkRegion *region,
       gboolean (*child_func) (GdkWindow *, gpointer),
       gpointer user_data);
GdkRegion *gdk_window_get_update_area (GdkWindow *window);

void gdk_window_freeze_updates (GdkWindow *window);
void gdk_window_thaw_updates (GdkWindow *window);

void gdk_window_freeze_toplevel_updates_libgtk_only (GdkWindow *window);
void gdk_window_thaw_toplevel_updates_libgtk_only (GdkWindow *window);

void gdk_window_process_all_updates (void);
void gdk_window_process_updates (GdkWindow *window,
        gboolean update_children);


void gdk_window_set_debug_updates (gboolean setting);

void gdk_window_constrain_size (GdkGeometry *geometry,
                                           guint flags,
                                           gint width,
                                           gint height,
                                           gint *new_width,
                                           gint *new_height);

void gdk_window_get_internal_paint_info (GdkWindow *window,
      GdkDrawable **real_drawable,
      gint *x_offset,
      gint *y_offset);

void gdk_window_enable_synchronized_configure (GdkWindow *window);
void gdk_window_configure_finished (GdkWindow *window);


GdkPointerHooks *gdk_set_pointer_hooks (const GdkPointerHooks *new_hooks);


GdkWindow *gdk_get_default_root_window (void);

void gdk_window_redirect_to_drawable (GdkWindow *window,
          GdkDrawable *drawable,
          gint src_x, gint src_y,
          gint dest_x, gint dest_y,
          gint width, gint height);
void gdk_window_remove_redirection (GdkWindow *window);
# 669 "/usr/include/gtk-2.0/gdk/gdkwindow.h"

# 29 "/usr/include/gtk-2.0/gdk/gdktestutils.h" 2




void gdk_test_render_sync (GdkWindow *window);
gboolean gdk_test_simulate_key (GdkWindow *window,
                                                 gint x,
                                                 gint y,
                                                 guint keyval,
                                                 GdkModifierType modifiers,
                                                 GdkEventType key_pressrelease);
gboolean gdk_test_simulate_button (GdkWindow *window,
                                                 gint x,
                                                 gint y,
                                                 guint button,
                                                 GdkModifierType modifiers,
                                                 GdkEventType button_pressrelease);


# 57 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdktypes.h" 1
# 58 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkvisual.h" 1
# 34 "/usr/include/gtk-2.0/gdk/gdkvisual.h"
# 1 "/usr/include/gtk-2.0/gdk/gdktypes.h" 1
# 35 "/usr/include/gtk-2.0/gdk/gdkvisual.h" 2


# 45 "/usr/include/gtk-2.0/gdk/gdkvisual.h"
typedef struct _GdkVisualClass GdkVisualClass;
# 55 "/usr/include/gtk-2.0/gdk/gdkvisual.h"
typedef enum
{
  GDK_VISUAL_STATIC_GRAY,
  GDK_VISUAL_GRAYSCALE,
  GDK_VISUAL_STATIC_COLOR,
  GDK_VISUAL_PSEUDO_COLOR,
  GDK_VISUAL_TRUE_COLOR,
  GDK_VISUAL_DIRECT_COLOR
} GdkVisualType;
# 77 "/usr/include/gtk-2.0/gdk/gdkvisual.h"
struct _GdkVisual
{
  GObject parent_instance;

  GdkVisualType type;
  gint depth;
  GdkByteOrder byte_order;
  gint colormap_size;
  gint bits_per_rgb;

  guint32 red_mask;
  gint red_shift;
  gint red_prec;

  guint32 green_mask;
  gint green_shift;
  gint green_prec;

  guint32 blue_mask;
  gint blue_shift;
  gint blue_prec;
};

GType gdk_visual_get_type (void) __attribute__((__const__));


gint gdk_visual_get_best_depth (void);
GdkVisualType gdk_visual_get_best_type (void);
GdkVisual* gdk_visual_get_system (void);
GdkVisual* gdk_visual_get_best (void);
GdkVisual* gdk_visual_get_best_with_depth (gint depth);
GdkVisual* gdk_visual_get_best_with_type (GdkVisualType visual_type);
GdkVisual* gdk_visual_get_best_with_both (gint depth,
           GdkVisualType visual_type);

void gdk_query_depths (gint **depths,
        gint *count);
void gdk_query_visual_types (GdkVisualType **visual_types,
        gint *count);

GList* gdk_list_visuals (void);


GdkScreen *gdk_visual_get_screen (GdkVisual *visual);







# 59 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkwindow.h" 1
# 60 "/usr/include/gtk-2.0/gdk/gdk.h" 2









void gdk_parse_args (gint *argc,
      gchar ***argv);
void gdk_init (gint *argc,
      gchar ***argv);
gboolean gdk_init_check (gint *argc,
      gchar ***argv);
void gdk_add_option_entries_libgtk_only (GOptionGroup *group);
void gdk_pre_parse_libgtk_only (void);


void gdk_exit (gint error_code);

gchar* gdk_set_locale (void);

const char *gdk_get_program_class (void);
void gdk_set_program_class (const char *program_class);



void gdk_error_trap_push (void);
gint gdk_error_trap_pop (void);


void gdk_set_use_xshm (gboolean use_xshm);
gboolean gdk_get_use_xshm (void);


gchar* gdk_get_display (void);
const gchar* gdk_get_display_arg_name (void);



gint gdk_input_add_full (gint source,
      GdkInputCondition condition,
      GdkInputFunction function,
      gpointer data,
      GDestroyNotify destroy);


gint gdk_input_add (gint source,
      GdkInputCondition condition,
      GdkInputFunction function,
      gpointer data);
void gdk_input_remove (gint tag);


GdkGrabStatus gdk_pointer_grab (GdkWindow *window,
          gboolean owner_events,
          GdkEventMask event_mask,
          GdkWindow *confine_to,
          GdkCursor *cursor,
          guint32 time_);
GdkGrabStatus gdk_keyboard_grab (GdkWindow *window,
          gboolean owner_events,
          guint32 time_);

gboolean gdk_pointer_grab_info_libgtk_only (GdkDisplay *display,
         GdkWindow **grab_window,
         gboolean *owner_events);
gboolean gdk_keyboard_grab_info_libgtk_only (GdkDisplay *display,
          GdkWindow **grab_window,
          gboolean *owner_events);


void gdk_pointer_ungrab (guint32 time_);
void gdk_keyboard_ungrab (guint32 time_);
gboolean gdk_pointer_is_grabbed (void);

gint gdk_screen_width (void) __attribute__((__const__));
gint gdk_screen_height (void) __attribute__((__const__));

gint gdk_screen_width_mm (void) __attribute__((__const__));
gint gdk_screen_height_mm (void) __attribute__((__const__));

void gdk_beep (void);


void gdk_flush (void);


void gdk_set_double_click_time (guint msec);




gboolean gdk_rectangle_intersect (const GdkRectangle *src1,
      const GdkRectangle *src2,
      GdkRectangle *dest);
void gdk_rectangle_union (const GdkRectangle *src1,
      const GdkRectangle *src2,
      GdkRectangle *dest);

GType gdk_rectangle_get_type (void) __attribute__((__const__));






gchar *gdk_wcstombs (const GdkWChar *src);
gint gdk_mbstowcs (GdkWChar *dest,
      const gchar *src,
      gint dest_max);




gboolean gdk_event_send_client_message (GdkEvent *event,
          GdkNativeWindow winid);
void gdk_event_send_clientmessage_toall (GdkEvent *event);

gboolean gdk_event_send_client_message_for_display (GdkDisplay *display,
          GdkEvent *event,
          GdkNativeWindow winid);

void gdk_notify_startup_complete (void);

void gdk_notify_startup_complete_with_id (const gchar* startup_id);





extern GMutex *gdk_threads_mutex;


extern GCallback gdk_threads_lock;
extern GCallback gdk_threads_unlock;

void gdk_threads_enter (void);
void gdk_threads_leave (void);
void gdk_threads_init (void);
void gdk_threads_set_lock_functions (GCallback enter_fn,
            GCallback leave_fn);

guint gdk_threads_add_idle_full (gint priority,
                                 GSourceFunc function,
                                 gpointer data,
                                 GDestroyNotify notify);
guint gdk_threads_add_idle (GSourceFunc function,
                                 gpointer data);
guint gdk_threads_add_timeout_full (gint priority,
                                               guint interval,
                                               GSourceFunc function,
                                               gpointer data,
                                               GDestroyNotify notify);
guint gdk_threads_add_timeout (guint interval,
                                               GSourceFunc function,
                                               gpointer data);
guint gdk_threads_add_timeout_seconds_full (gint priority,
                                               guint interval,
                                               GSourceFunc function,
                                               gpointer data,
                                               GDestroyNotify notify);
guint gdk_threads_add_timeout_seconds (guint interval,
                                               GSourceFunc function,
                                               gpointer data);
# 241 "/usr/include/gtk-2.0/gdk/gdk.h"

# 33 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkaboutdialog.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtkaboutdialog.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkdialog.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkdialog.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkwindow.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkwindow.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkaccelgroup.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkaccelgroup.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkenums.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkenums.h"



typedef enum
{
  GTK_ANCHOR_CENTER,
  GTK_ANCHOR_NORTH,
  GTK_ANCHOR_NORTH_WEST,
  GTK_ANCHOR_NORTH_EAST,
  GTK_ANCHOR_SOUTH,
  GTK_ANCHOR_SOUTH_WEST,
  GTK_ANCHOR_SOUTH_EAST,
  GTK_ANCHOR_WEST,
  GTK_ANCHOR_EAST,
  GTK_ANCHOR_N = GTK_ANCHOR_NORTH,
  GTK_ANCHOR_NW = GTK_ANCHOR_NORTH_WEST,
  GTK_ANCHOR_NE = GTK_ANCHOR_NORTH_EAST,
  GTK_ANCHOR_S = GTK_ANCHOR_SOUTH,
  GTK_ANCHOR_SW = GTK_ANCHOR_SOUTH_WEST,
  GTK_ANCHOR_SE = GTK_ANCHOR_SOUTH_EAST,
  GTK_ANCHOR_W = GTK_ANCHOR_WEST,
  GTK_ANCHOR_E = GTK_ANCHOR_EAST
} GtkAnchorType;


typedef enum
{
  GTK_ARROWS_BOTH,
  GTK_ARROWS_START,
  GTK_ARROWS_END
} GtkArrowPlacement;


typedef enum
{
  GTK_ARROW_UP,
  GTK_ARROW_DOWN,
  GTK_ARROW_LEFT,
  GTK_ARROW_RIGHT,
  GTK_ARROW_NONE
} GtkArrowType;


typedef enum
{
  GTK_EXPAND = 1 << 0,
  GTK_SHRINK = 1 << 1,
  GTK_FILL = 1 << 2
} GtkAttachOptions;


typedef enum
{
  GTK_BUTTONBOX_DEFAULT_STYLE,
  GTK_BUTTONBOX_SPREAD,
  GTK_BUTTONBOX_EDGE,
  GTK_BUTTONBOX_START,
  GTK_BUTTONBOX_END,
  GTK_BUTTONBOX_CENTER
} GtkButtonBoxStyle;


typedef enum
{
  GTK_CURVE_TYPE_LINEAR,
  GTK_CURVE_TYPE_SPLINE,
  GTK_CURVE_TYPE_FREE
} GtkCurveType;

typedef enum
{
  GTK_DELETE_CHARS,
  GTK_DELETE_WORD_ENDS,


  GTK_DELETE_WORDS,
  GTK_DELETE_DISPLAY_LINES,
  GTK_DELETE_DISPLAY_LINE_ENDS,
  GTK_DELETE_PARAGRAPH_ENDS,
  GTK_DELETE_PARAGRAPHS,
  GTK_DELETE_WHITESPACE
} GtkDeleteType;


typedef enum
{
  GTK_DIR_TAB_FORWARD,
  GTK_DIR_TAB_BACKWARD,
  GTK_DIR_UP,
  GTK_DIR_DOWN,
  GTK_DIR_LEFT,
  GTK_DIR_RIGHT
} GtkDirectionType;


typedef enum
{
  GTK_EXPANDER_COLLAPSED,
  GTK_EXPANDER_SEMI_COLLAPSED,
  GTK_EXPANDER_SEMI_EXPANDED,
  GTK_EXPANDER_EXPANDED
} GtkExpanderStyle;


typedef enum
{
  GTK_ICON_SIZE_INVALID,
  GTK_ICON_SIZE_MENU,
  GTK_ICON_SIZE_SMALL_TOOLBAR,
  GTK_ICON_SIZE_LARGE_TOOLBAR,
  GTK_ICON_SIZE_BUTTON,
  GTK_ICON_SIZE_DND,
  GTK_ICON_SIZE_DIALOG
} GtkIconSize;


typedef enum
{
  GTK_SENSITIVITY_AUTO,
  GTK_SENSITIVITY_ON,
  GTK_SENSITIVITY_OFF
} GtkSensitivityType;



typedef enum
{
  GTK_SIDE_TOP,
  GTK_SIDE_BOTTOM,
  GTK_SIDE_LEFT,
  GTK_SIDE_RIGHT
} GtkSideType;



typedef enum
{
  GTK_TEXT_DIR_NONE,
  GTK_TEXT_DIR_LTR,
  GTK_TEXT_DIR_RTL
} GtkTextDirection;


typedef enum
{
  GTK_JUSTIFY_LEFT,
  GTK_JUSTIFY_RIGHT,
  GTK_JUSTIFY_CENTER,
  GTK_JUSTIFY_FILL
} GtkJustification;



typedef enum
{
  GTK_MATCH_ALL,
  GTK_MATCH_ALL_TAIL,
  GTK_MATCH_HEAD,
  GTK_MATCH_TAIL,
  GTK_MATCH_EXACT,
  GTK_MATCH_LAST
} GtkMatchType;



typedef enum
{
  GTK_MENU_DIR_PARENT,
  GTK_MENU_DIR_CHILD,
  GTK_MENU_DIR_NEXT,
  GTK_MENU_DIR_PREV
} GtkMenuDirectionType;

typedef enum
{
  GTK_PIXELS,
  GTK_INCHES,
  GTK_CENTIMETERS
} GtkMetricType;

typedef enum
{
  GTK_MOVEMENT_LOGICAL_POSITIONS,
  GTK_MOVEMENT_VISUAL_POSITIONS,
  GTK_MOVEMENT_WORDS,
  GTK_MOVEMENT_DISPLAY_LINES,
  GTK_MOVEMENT_DISPLAY_LINE_ENDS,
  GTK_MOVEMENT_PARAGRAPHS,
  GTK_MOVEMENT_PARAGRAPH_ENDS,
  GTK_MOVEMENT_PAGES,
  GTK_MOVEMENT_BUFFER_ENDS,
  GTK_MOVEMENT_HORIZONTAL_PAGES
} GtkMovementStep;

typedef enum
{
  GTK_SCROLL_STEPS,
  GTK_SCROLL_PAGES,
  GTK_SCROLL_ENDS,
  GTK_SCROLL_HORIZONTAL_STEPS,
  GTK_SCROLL_HORIZONTAL_PAGES,
  GTK_SCROLL_HORIZONTAL_ENDS
} GtkScrollStep;


typedef enum
{
  GTK_ORIENTATION_HORIZONTAL,
  GTK_ORIENTATION_VERTICAL
} GtkOrientation;


typedef enum
{
  GTK_CORNER_TOP_LEFT,
  GTK_CORNER_BOTTOM_LEFT,
  GTK_CORNER_TOP_RIGHT,
  GTK_CORNER_BOTTOM_RIGHT
} GtkCornerType;


typedef enum
{
  GTK_PACK_START,
  GTK_PACK_END
} GtkPackType;


typedef enum
{
  GTK_PATH_PRIO_LOWEST = 0,
  GTK_PATH_PRIO_GTK = 4,
  GTK_PATH_PRIO_APPLICATION = 8,
  GTK_PATH_PRIO_THEME = 10,
  GTK_PATH_PRIO_RC = 12,
  GTK_PATH_PRIO_HIGHEST = 15
} GtkPathPriorityType;



typedef enum
{
  GTK_PATH_WIDGET,
  GTK_PATH_WIDGET_CLASS,
  GTK_PATH_CLASS
} GtkPathType;


typedef enum
{
  GTK_POLICY_ALWAYS,
  GTK_POLICY_AUTOMATIC,
  GTK_POLICY_NEVER
} GtkPolicyType;

typedef enum
{
  GTK_POS_LEFT,
  GTK_POS_RIGHT,
  GTK_POS_TOP,
  GTK_POS_BOTTOM
} GtkPositionType;


typedef enum
{
  GTK_PREVIEW_COLOR,
  GTK_PREVIEW_GRAYSCALE
} GtkPreviewType;



typedef enum
{
  GTK_RELIEF_NORMAL,
  GTK_RELIEF_HALF,
  GTK_RELIEF_NONE
} GtkReliefStyle;


typedef enum
{
  GTK_RESIZE_PARENT,
  GTK_RESIZE_QUEUE,
  GTK_RESIZE_IMMEDIATE
} GtkResizeMode;



typedef enum
{
  GTK_RUN_FIRST = G_SIGNAL_RUN_FIRST,
  GTK_RUN_LAST = G_SIGNAL_RUN_LAST,
  GTK_RUN_BOTH = (GTK_RUN_FIRST | GTK_RUN_LAST),
  GTK_RUN_NO_RECURSE = G_SIGNAL_NO_RECURSE,
  GTK_RUN_ACTION = G_SIGNAL_ACTION,
  GTK_RUN_NO_HOOKS = G_SIGNAL_NO_HOOKS
} GtkSignalRunType;



typedef enum
{
  GTK_SCROLL_NONE,
  GTK_SCROLL_JUMP,
  GTK_SCROLL_STEP_BACKWARD,
  GTK_SCROLL_STEP_FORWARD,
  GTK_SCROLL_PAGE_BACKWARD,
  GTK_SCROLL_PAGE_FORWARD,
  GTK_SCROLL_STEP_UP,
  GTK_SCROLL_STEP_DOWN,
  GTK_SCROLL_PAGE_UP,
  GTK_SCROLL_PAGE_DOWN,
  GTK_SCROLL_STEP_LEFT,
  GTK_SCROLL_STEP_RIGHT,
  GTK_SCROLL_PAGE_LEFT,
  GTK_SCROLL_PAGE_RIGHT,
  GTK_SCROLL_START,
  GTK_SCROLL_END
} GtkScrollType;


typedef enum
{
  GTK_SELECTION_NONE,
  GTK_SELECTION_SINGLE,
  GTK_SELECTION_BROWSE,
  GTK_SELECTION_MULTIPLE,
  GTK_SELECTION_EXTENDED = GTK_SELECTION_MULTIPLE
} GtkSelectionMode;


typedef enum
{
  GTK_SHADOW_NONE,
  GTK_SHADOW_IN,
  GTK_SHADOW_OUT,
  GTK_SHADOW_ETCHED_IN,
  GTK_SHADOW_ETCHED_OUT
} GtkShadowType;


typedef enum
{
  GTK_STATE_NORMAL,
  GTK_STATE_ACTIVE,
  GTK_STATE_PRELIGHT,
  GTK_STATE_SELECTED,
  GTK_STATE_INSENSITIVE
} GtkStateType;



typedef enum
{
  GTK_DIRECTION_LEFT,
  GTK_DIRECTION_RIGHT
} GtkSubmenuDirection;


typedef enum
{
  GTK_TOP_BOTTOM,
  GTK_LEFT_RIGHT
} GtkSubmenuPlacement;



typedef enum
{
  GTK_TOOLBAR_ICONS,
  GTK_TOOLBAR_TEXT,
  GTK_TOOLBAR_BOTH,
  GTK_TOOLBAR_BOTH_HORIZ
} GtkToolbarStyle;


typedef enum
{
  GTK_UPDATE_CONTINUOUS,
  GTK_UPDATE_DISCONTINUOUS,
  GTK_UPDATE_DELAYED
} GtkUpdateType;


typedef enum
{
  GTK_VISIBILITY_NONE,
  GTK_VISIBILITY_PARTIAL,
  GTK_VISIBILITY_FULL
} GtkVisibility;


typedef enum
{
  GTK_WIN_POS_NONE,
  GTK_WIN_POS_CENTER,
  GTK_WIN_POS_MOUSE,
  GTK_WIN_POS_CENTER_ALWAYS,
  GTK_WIN_POS_CENTER_ON_PARENT
} GtkWindowPosition;


typedef enum
{
  GTK_WINDOW_TOPLEVEL,
  GTK_WINDOW_POPUP
} GtkWindowType;


typedef enum
{
  GTK_WRAP_NONE,
  GTK_WRAP_CHAR,
  GTK_WRAP_WORD,
  GTK_WRAP_WORD_CHAR
} GtkWrapMode;


typedef enum
{
  GTK_SORT_ASCENDING,
  GTK_SORT_DESCENDING
} GtkSortType;


typedef enum
{
  GTK_IM_PREEDIT_NOTHING,
  GTK_IM_PREEDIT_CALLBACK,
  GTK_IM_PREEDIT_NONE
} GtkIMPreeditStyle;

typedef enum
{
  GTK_IM_STATUS_NOTHING,
  GTK_IM_STATUS_CALLBACK,
  GTK_IM_STATUS_NONE
} GtkIMStatusStyle;

typedef enum
{
  GTK_PACK_DIRECTION_LTR,
  GTK_PACK_DIRECTION_RTL,
  GTK_PACK_DIRECTION_TTB,
  GTK_PACK_DIRECTION_BTT
} GtkPackDirection;

typedef enum
{
  GTK_PRINT_PAGES_ALL,
  GTK_PRINT_PAGES_CURRENT,
  GTK_PRINT_PAGES_RANGES
} GtkPrintPages;

typedef enum
{
  GTK_PAGE_SET_ALL,
  GTK_PAGE_SET_EVEN,
  GTK_PAGE_SET_ODD
} GtkPageSet;

typedef enum
{
  GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM,
  GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP,
  GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM,
  GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP,
  GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT,
  GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT,
  GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT,
  GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT
} GtkNumberUpLayout;

typedef enum
{
  GTK_PAGE_ORIENTATION_PORTRAIT,
  GTK_PAGE_ORIENTATION_LANDSCAPE,
  GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT,
  GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE
} GtkPageOrientation;

typedef enum
{
  GTK_PRINT_QUALITY_LOW,
  GTK_PRINT_QUALITY_NORMAL,
  GTK_PRINT_QUALITY_HIGH,
  GTK_PRINT_QUALITY_DRAFT
} GtkPrintQuality;

typedef enum
{
  GTK_PRINT_DUPLEX_SIMPLEX,
  GTK_PRINT_DUPLEX_HORIZONTAL,
  GTK_PRINT_DUPLEX_VERTICAL
} GtkPrintDuplex;


typedef enum
{
  GTK_UNIT_PIXEL,
  GTK_UNIT_POINTS,
  GTK_UNIT_INCH,
  GTK_UNIT_MM
} GtkUnit;

typedef enum
{
  GTK_TREE_VIEW_GRID_LINES_NONE,
  GTK_TREE_VIEW_GRID_LINES_HORIZONTAL,
  GTK_TREE_VIEW_GRID_LINES_VERTICAL,
  GTK_TREE_VIEW_GRID_LINES_BOTH
} GtkTreeViewGridLines;

typedef enum
{
  GTK_DRAG_RESULT_SUCCESS,
  GTK_DRAG_RESULT_NO_TARGET,
  GTK_DRAG_RESULT_USER_CANCELLED,
  GTK_DRAG_RESULT_TIMEOUT_EXPIRED,
  GTK_DRAG_RESULT_GRAB_BROKEN,
  GTK_DRAG_RESULT_ERROR
} GtkDragResult;


# 37 "/usr/include/gtk-2.0/gtk/gtkaccelgroup.h" 2


# 51 "/usr/include/gtk-2.0/gtk/gtkaccelgroup.h"
typedef enum
{
  GTK_ACCEL_VISIBLE = 1 << 0,
  GTK_ACCEL_LOCKED = 1 << 1,
  GTK_ACCEL_MASK = 0x07
} GtkAccelFlags;



typedef struct _GtkAccelGroup GtkAccelGroup;
typedef struct _GtkAccelGroupClass GtkAccelGroupClass;
typedef struct _GtkAccelKey GtkAccelKey;
typedef struct _GtkAccelGroupEntry GtkAccelGroupEntry;
typedef gboolean (*GtkAccelGroupActivate) (GtkAccelGroup *accel_group,
        GObject *acceleratable,
        guint keyval,
        GdkModifierType modifier);

typedef gboolean (*GtkAccelGroupFindFunc) (GtkAccelKey *key,
        GClosure *closure,
        gpointer data);

struct _GtkAccelGroup
{
  GObject parent;

  guint lock_count;
  GdkModifierType modifier_mask;
  GSList *acceleratables;
  guint n_accels;
  GtkAccelGroupEntry *priv_accels;
};

struct _GtkAccelGroupClass
{
  GObjectClass parent_class;

  void (*accel_changed) (GtkAccelGroup *accel_group,
     guint keyval,
     GdkModifierType modifier,
     GClosure *accel_closure);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

struct _GtkAccelKey
{
  guint accel_key;
  GdkModifierType accel_mods;
  guint accel_flags : 16;
};



GType gtk_accel_group_get_type (void) __attribute__((__const__));
GtkAccelGroup* gtk_accel_group_new (void);
gboolean gtk_accel_group_get_is_locked (GtkAccelGroup *accel_group);
GdkModifierType
               gtk_accel_group_get_modifier_mask (GtkAccelGroup *accel_group);
void gtk_accel_group_lock (GtkAccelGroup *accel_group);
void gtk_accel_group_unlock (GtkAccelGroup *accel_group);
void gtk_accel_group_connect (GtkAccelGroup *accel_group,
         guint accel_key,
         GdkModifierType accel_mods,
         GtkAccelFlags accel_flags,
         GClosure *closure);
void gtk_accel_group_connect_by_path (GtkAccelGroup *accel_group,
         const gchar *accel_path,
         GClosure *closure);
gboolean gtk_accel_group_disconnect (GtkAccelGroup *accel_group,
         GClosure *closure);
gboolean gtk_accel_group_disconnect_key (GtkAccelGroup *accel_group,
         guint accel_key,
         GdkModifierType accel_mods);
gboolean gtk_accel_group_activate (GtkAccelGroup *accel_group,
                                                   GQuark accel_quark,
                                                   GObject *acceleratable,
                                                   guint accel_key,
                                                   GdkModifierType accel_mods);



void _gtk_accel_group_attach (GtkAccelGroup *accel_group,
       GObject *object);
void _gtk_accel_group_detach (GtkAccelGroup *accel_group,
       GObject *object);
gboolean gtk_accel_groups_activate (GObject *object,
       guint accel_key,
       GdkModifierType accel_mods);
GSList* gtk_accel_groups_from_object (GObject *object);
GtkAccelKey* gtk_accel_group_find (GtkAccelGroup *accel_group,
       GtkAccelGroupFindFunc find_func,
       gpointer data);
GtkAccelGroup* gtk_accel_group_from_accel_closure (GClosure *closure);



gboolean gtk_accelerator_valid (guint keyval,
            GdkModifierType modifiers) __attribute__((__const__));
void gtk_accelerator_parse (const gchar *accelerator,
            guint *accelerator_key,
            GdkModifierType *accelerator_mods);
gchar* gtk_accelerator_name (guint accelerator_key,
            GdkModifierType accelerator_mods);
gchar* gtk_accelerator_get_label (guint accelerator_key,
                                               GdkModifierType accelerator_mods);
void gtk_accelerator_set_default_mod_mask (GdkModifierType default_mod_mask);
guint gtk_accelerator_get_default_mod_mask (void);



GtkAccelGroupEntry* gtk_accel_group_query (GtkAccelGroup *accel_group,
       guint accel_key,
       GdkModifierType accel_mods,
       guint *n_entries);

void _gtk_accel_group_reconnect (GtkAccelGroup *accel_group,
       GQuark accel_path_quark);

struct _GtkAccelGroupEntry
{
  GtkAccelKey key;
  GClosure *closure;
  GQuark accel_path_quark;
};








# 36 "/usr/include/gtk-2.0/gtk/gtkwindow.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkbin.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkbin.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcontainer.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkcontainer.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkwidget.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkaccelgroup.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkobject.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkobject.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkenums.h" 1
# 37 "/usr/include/gtk-2.0/gtk/gtkobject.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktypeutils.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtktypeutils.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktypebuiltins.h" 1
# 13 "/usr/include/gtk-2.0/gtk/gtktypebuiltins.h"



GType gtk_accel_flags_get_type (void) __attribute__((__const__));



GType gtk_assistant_page_type_get_type (void) __attribute__((__const__));



GType gtk_builder_error_get_type (void) __attribute__((__const__));



GType gtk_calendar_display_options_get_type (void) __attribute__((__const__));



GType gtk_cell_renderer_state_get_type (void) __attribute__((__const__));

GType gtk_cell_renderer_mode_get_type (void) __attribute__((__const__));



GType gtk_cell_renderer_accel_mode_get_type (void) __attribute__((__const__));



GType gtk_debug_flag_get_type (void) __attribute__((__const__));



GType gtk_dialog_flags_get_type (void) __attribute__((__const__));

GType gtk_response_type_get_type (void) __attribute__((__const__));



GType gtk_dest_defaults_get_type (void) __attribute__((__const__));

GType gtk_target_flags_get_type (void) __attribute__((__const__));



GType gtk_entry_icon_position_get_type (void) __attribute__((__const__));



GType gtk_anchor_type_get_type (void) __attribute__((__const__));

GType gtk_arrow_placement_get_type (void) __attribute__((__const__));

GType gtk_arrow_type_get_type (void) __attribute__((__const__));

GType gtk_attach_options_get_type (void) __attribute__((__const__));

GType gtk_button_box_style_get_type (void) __attribute__((__const__));

GType gtk_curve_type_get_type (void) __attribute__((__const__));

GType gtk_delete_type_get_type (void) __attribute__((__const__));

GType gtk_direction_type_get_type (void) __attribute__((__const__));

GType gtk_expander_style_get_type (void) __attribute__((__const__));

GType gtk_icon_size_get_type (void) __attribute__((__const__));

GType gtk_sensitivity_type_get_type (void) __attribute__((__const__));

GType gtk_side_type_get_type (void) __attribute__((__const__));

GType gtk_text_direction_get_type (void) __attribute__((__const__));

GType gtk_justification_get_type (void) __attribute__((__const__));

GType gtk_match_type_get_type (void) __attribute__((__const__));

GType gtk_menu_direction_type_get_type (void) __attribute__((__const__));

GType gtk_metric_type_get_type (void) __attribute__((__const__));

GType gtk_movement_step_get_type (void) __attribute__((__const__));

GType gtk_scroll_step_get_type (void) __attribute__((__const__));

GType gtk_orientation_get_type (void) __attribute__((__const__));

GType gtk_corner_type_get_type (void) __attribute__((__const__));

GType gtk_pack_type_get_type (void) __attribute__((__const__));

GType gtk_path_priority_type_get_type (void) __attribute__((__const__));

GType gtk_path_type_get_type (void) __attribute__((__const__));

GType gtk_policy_type_get_type (void) __attribute__((__const__));

GType gtk_position_type_get_type (void) __attribute__((__const__));

GType gtk_preview_type_get_type (void) __attribute__((__const__));

GType gtk_relief_style_get_type (void) __attribute__((__const__));

GType gtk_resize_mode_get_type (void) __attribute__((__const__));

GType gtk_signal_run_type_get_type (void) __attribute__((__const__));

GType gtk_scroll_type_get_type (void) __attribute__((__const__));

GType gtk_selection_mode_get_type (void) __attribute__((__const__));

GType gtk_shadow_type_get_type (void) __attribute__((__const__));

GType gtk_state_type_get_type (void) __attribute__((__const__));

GType gtk_submenu_direction_get_type (void) __attribute__((__const__));

GType gtk_submenu_placement_get_type (void) __attribute__((__const__));

GType gtk_toolbar_style_get_type (void) __attribute__((__const__));

GType gtk_update_type_get_type (void) __attribute__((__const__));

GType gtk_visibility_get_type (void) __attribute__((__const__));

GType gtk_window_position_get_type (void) __attribute__((__const__));

GType gtk_window_type_get_type (void) __attribute__((__const__));

GType gtk_wrap_mode_get_type (void) __attribute__((__const__));

GType gtk_sort_type_get_type (void) __attribute__((__const__));

GType gtk_im_preedit_style_get_type (void) __attribute__((__const__));

GType gtk_im_status_style_get_type (void) __attribute__((__const__));

GType gtk_pack_direction_get_type (void) __attribute__((__const__));

GType gtk_print_pages_get_type (void) __attribute__((__const__));

GType gtk_page_set_get_type (void) __attribute__((__const__));

GType gtk_number_up_layout_get_type (void) __attribute__((__const__));

GType gtk_page_orientation_get_type (void) __attribute__((__const__));

GType gtk_print_quality_get_type (void) __attribute__((__const__));

GType gtk_print_duplex_get_type (void) __attribute__((__const__));

GType gtk_unit_get_type (void) __attribute__((__const__));

GType gtk_tree_view_grid_lines_get_type (void) __attribute__((__const__));

GType gtk_drag_result_get_type (void) __attribute__((__const__));



GType gtk_file_chooser_action_get_type (void) __attribute__((__const__));

GType gtk_file_chooser_confirmation_get_type (void) __attribute__((__const__));

GType gtk_file_chooser_error_get_type (void) __attribute__((__const__));



GType gtk_file_filter_flags_get_type (void) __attribute__((__const__));



GType gtk_icon_lookup_flags_get_type (void) __attribute__((__const__));

GType gtk_icon_theme_error_get_type (void) __attribute__((__const__));



GType gtk_icon_view_drop_position_get_type (void) __attribute__((__const__));



GType gtk_image_type_get_type (void) __attribute__((__const__));



GType gtk_message_type_get_type (void) __attribute__((__const__));

GType gtk_buttons_type_get_type (void) __attribute__((__const__));



GType gtk_notebook_tab_get_type (void) __attribute__((__const__));



GType gtk_object_flags_get_type (void) __attribute__((__const__));

GType gtk_arg_flags_get_type (void) __attribute__((__const__));



GType gtk_print_status_get_type (void) __attribute__((__const__));

GType gtk_print_operation_result_get_type (void) __attribute__((__const__));

GType gtk_print_operation_action_get_type (void) __attribute__((__const__));

GType gtk_print_error_get_type (void) __attribute__((__const__));



GType gtk_private_flags_get_type (void) __attribute__((__const__));



GType gtk_progress_bar_style_get_type (void) __attribute__((__const__));

GType gtk_progress_bar_orientation_get_type (void) __attribute__((__const__));



GType gtk_rc_flags_get_type (void) __attribute__((__const__));

GType gtk_rc_token_type_get_type (void) __attribute__((__const__));



GType gtk_recent_sort_type_get_type (void) __attribute__((__const__));

GType gtk_recent_chooser_error_get_type (void) __attribute__((__const__));



GType gtk_recent_filter_flags_get_type (void) __attribute__((__const__));



GType gtk_recent_manager_error_get_type (void) __attribute__((__const__));



GType gtk_size_group_mode_get_type (void) __attribute__((__const__));



GType gtk_spin_button_update_policy_get_type (void) __attribute__((__const__));

GType gtk_spin_type_get_type (void) __attribute__((__const__));



GType gtk_text_buffer_target_info_get_type (void) __attribute__((__const__));



GType gtk_text_search_flags_get_type (void) __attribute__((__const__));



GType gtk_text_window_type_get_type (void) __attribute__((__const__));



GType gtk_toolbar_child_type_get_type (void) __attribute__((__const__));

GType gtk_toolbar_space_style_get_type (void) __attribute__((__const__));



GType gtk_tree_model_flags_get_type (void) __attribute__((__const__));



GType gtk_tree_view_drop_position_get_type (void) __attribute__((__const__));



GType gtk_tree_view_column_sizing_get_type (void) __attribute__((__const__));



GType gtk_ui_manager_item_type_get_type (void) __attribute__((__const__));



GType gtk_widget_flags_get_type (void) __attribute__((__const__));

GType gtk_widget_help_type_get_type (void) __attribute__((__const__));



GType gtk_tree_view_mode_get_type (void) __attribute__((__const__));



GType gtk_cell_type_get_type (void) __attribute__((__const__));

GType gtk_clist_drag_pos_get_type (void) __attribute__((__const__));

GType gtk_button_action_get_type (void) __attribute__((__const__));



GType gtk_ctree_pos_get_type (void) __attribute__((__const__));

GType gtk_ctree_line_style_get_type (void) __attribute__((__const__));

GType gtk_ctree_expander_style_get_type (void) __attribute__((__const__));

GType gtk_ctree_expansion_type_get_type (void) __attribute__((__const__));


# 37 "/usr/include/gtk-2.0/gtk/gtktypeutils.h" 2





GType gtk_identifier_get_type (void) __attribute__((__const__));





typedef struct _GtkArg GtkArg;
typedef struct _GtkObject GtkObject;
typedef gboolean (*GtkFunction) (gpointer data);
typedef void (*GtkCallbackMarshal) (GtkObject *object,
         gpointer data,
         guint n_args,
         GtkArg *args);




typedef gchar * (*GtkTranslateFunc) (const gchar *path,
         gpointer func_data);
# 92 "/usr/include/gtk-2.0/gtk/gtktypeutils.h"
typedef GType GtkFundamentalType;
# 117 "/usr/include/gtk-2.0/gtk/gtktypeutils.h"
typedef GType GtkType;
typedef GTypeInstance GtkTypeObject;
typedef GTypeClass GtkTypeClass;
typedef GBaseInitFunc GtkClassInitFunc;
typedef GInstanceInitFunc GtkObjectInitFunc;
typedef GSignalCMarshaller GtkSignalMarshaller;

typedef void (*GtkDestroyNotify) (gpointer data);
typedef void (*GtkSignalFunc) (void);
# 136 "/usr/include/gtk-2.0/gtk/gtktypeutils.h"
struct _GtkArg
{
  GType type;
  gchar *name;







  union {

    gchar char_data;
    guchar uchar_data;
    gboolean bool_data;
    gint int_data;
    guint uint_data;
    glong long_data;
    gulong ulong_data;
    gfloat float_data;
    gdouble double_data;
    gchar *string_data;
    GtkObject *object_data;
    gpointer pointer_data;


    struct {
      GCallback f;
      gpointer d;
    } signal_data;
  } d;
};
# 220 "/usr/include/gtk-2.0/gtk/gtktypeutils.h"
typedef struct _GtkTypeInfo GtkTypeInfo;

struct _GtkTypeInfo
{
  gchar *type_name;
  guint object_size;
  guint class_size;
  GtkClassInitFunc class_init_func;
  GtkObjectInitFunc object_init_func;
  gpointer reserved_1;
  gpointer reserved_2;
  GtkClassInitFunc base_class_init_func;
};

void gtk_type_init (GTypeDebugFlags debug_flags);
GtkType gtk_type_unique (GtkType parent_type,
                                 const GtkTypeInfo *gtkinfo);
gpointer gtk_type_class (GtkType type);
gpointer gtk_type_new (GtkType type);
# 249 "/usr/include/gtk-2.0/gtk/gtktypeutils.h"
typedef GEnumValue GtkEnumValue;
typedef GFlagsValue GtkFlagValue;
GtkEnumValue* gtk_type_enum_get_values (GtkType enum_type);
GtkFlagValue* gtk_type_flags_get_values (GtkType flags_type);
GtkEnumValue* gtk_type_enum_find_value (GtkType enum_type,
       const gchar *value_name);
GtkFlagValue* gtk_type_flags_find_value (GtkType flags_type,
       const gchar *value_name);




# 38 "/usr/include/gtk-2.0/gtk/gtkobject.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkdebug.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkdebug.h"


typedef enum {
  GTK_DEBUG_MISC = 1 << 0,
  GTK_DEBUG_PLUGSOCKET = 1 << 1,
  GTK_DEBUG_TEXT = 1 << 2,
  GTK_DEBUG_TREE = 1 << 3,
  GTK_DEBUG_UPDATES = 1 << 4,
  GTK_DEBUG_KEYBINDINGS = 1 << 5,
  GTK_DEBUG_MULTIHEAD = 1 << 6,
  GTK_DEBUG_MODULES = 1 << 7,
  GTK_DEBUG_GEOMETRY = 1 << 8,
  GTK_DEBUG_ICONTHEME = 1 << 9,
  GTK_DEBUG_PRINTING = 1 << 10,
  GTK_DEBUG_BUILDER = 1 << 11
} GtkDebugFlag;
# 75 "/usr/include/gtk-2.0/gtk/gtkdebug.h"
extern guint gtk_debug_flags;


# 39 "/usr/include/gtk-2.0/gtk/gtkobject.h" 2



# 64 "/usr/include/gtk-2.0/gtk/gtkobject.h"
typedef enum
{
  GTK_IN_DESTRUCTION = 1 << 0,

  GTK_FLOATING = 1 << 1,

  GTK_RESERVED_1 = 1 << 2,
  GTK_RESERVED_2 = 1 << 3
} GtkObjectFlags;
# 86 "/usr/include/gtk-2.0/gtk/gtkobject.h"
typedef struct _GtkObjectClass GtkObjectClass;


struct _GtkObject
{
  GInitiallyUnowned parent_instance;






  guint32 flags;
};

struct _GtkObjectClass
{
  GInitiallyUnownedClass parent_class;


  void (*set_arg) (GtkObject *object,
     GtkArg *arg,
     guint arg_id);
  void (*get_arg) (GtkObject *object,
     GtkArg *arg,
     guint arg_id);
# 121 "/usr/include/gtk-2.0/gtk/gtkobject.h"
  void (*destroy) (GtkObject *object);
};





GType gtk_object_get_type (void) __attribute__((__const__));


void gtk_object_sink (GtkObject *object);

void gtk_object_destroy (GtkObject *object);





GtkObject* gtk_object_new (GType type,
        const gchar *first_property_name,
        ...);
GtkObject* gtk_object_ref (GtkObject *object);
void gtk_object_unref (GtkObject *object);
void gtk_object_weakref (GtkObject *object,
      GDestroyNotify notify,
      gpointer data);
void gtk_object_weakunref (GtkObject *object,
      GDestroyNotify notify,
      gpointer data);
# 163 "/usr/include/gtk-2.0/gtk/gtkobject.h"
void gtk_object_set_data (GtkObject *object,
          const gchar *key,
          gpointer data);
void gtk_object_set_data_full (GtkObject *object,
          const gchar *key,
          gpointer data,
          GDestroyNotify destroy);
void gtk_object_remove_data (GtkObject *object,
          const gchar *key);
gpointer gtk_object_get_data (GtkObject *object,
          const gchar *key);
void gtk_object_remove_no_notify (GtkObject *object,
          const gchar *key);






void gtk_object_set_user_data (GtkObject *object,
       gpointer data);
gpointer gtk_object_get_user_data (GtkObject *object);





void gtk_object_set_data_by_id (GtkObject *object,
      GQuark data_id,
      gpointer data);
void gtk_object_set_data_by_id_full (GtkObject *object,
      GQuark data_id,
      gpointer data,
      GDestroyNotify destroy);
gpointer gtk_object_get_data_by_id (GtkObject *object,
      GQuark data_id);
void gtk_object_remove_data_by_id (GtkObject *object,
      GQuark data_id);
void gtk_object_remove_no_notify_by_id (GtkObject *object,
      GQuark key_id);





typedef enum
{
  GTK_ARG_READABLE = G_PARAM_READABLE,
  GTK_ARG_WRITABLE = G_PARAM_WRITABLE,
  GTK_ARG_CONSTRUCT = G_PARAM_CONSTRUCT,
  GTK_ARG_CONSTRUCT_ONLY = G_PARAM_CONSTRUCT_ONLY,
  GTK_ARG_CHILD_ARG = 1 << 4
} GtkArgFlags;

void gtk_object_get (GtkObject *object,
     const gchar *first_property_name,
     ...) __attribute__((__sentinel__));
void gtk_object_set (GtkObject *object,
     const gchar *first_property_name,
     ...) __attribute__((__sentinel__));
void gtk_object_add_arg_type (const gchar *arg_name,
      GType arg_type,
      guint arg_flags,
      guint arg_id);




# 37 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkadjustment.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkadjustment.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkobject.h" 1
# 37 "/usr/include/gtk-2.0/gtk/gtkadjustment.h" 2


# 48 "/usr/include/gtk-2.0/gtk/gtkadjustment.h"
typedef struct _GtkAdjustment GtkAdjustment;
typedef struct _GtkAdjustmentClass GtkAdjustmentClass;

struct _GtkAdjustment
{
  GtkObject parent_instance;

  gdouble lower;
  gdouble upper;
  gdouble value;
  gdouble step_increment;
  gdouble page_increment;
  gdouble page_size;
};

struct _GtkAdjustmentClass
{
  GtkObjectClass parent_class;

  void (* changed) (GtkAdjustment *adjustment);
  void (* value_changed) (GtkAdjustment *adjustment);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_adjustment_get_type (void) __attribute__((__const__));
GtkObject* gtk_adjustment_new (gdouble value,
       gdouble lower,
       gdouble upper,
       gdouble step_increment,
       gdouble page_increment,
       gdouble page_size);

void gtk_adjustment_changed (GtkAdjustment *adjustment);
void gtk_adjustment_value_changed (GtkAdjustment *adjustment);
void gtk_adjustment_clamp_page (GtkAdjustment *adjustment,
       gdouble lower,
       gdouble upper);

gdouble gtk_adjustment_get_value (GtkAdjustment *adjustment);
void gtk_adjustment_set_value (GtkAdjustment *adjustment,
       gdouble value);
gdouble gtk_adjustment_get_lower (GtkAdjustment *adjustment);
void gtk_adjustment_set_lower (GtkAdjustment *adjustment,
                                                 gdouble lower);
gdouble gtk_adjustment_get_upper (GtkAdjustment *adjustment);
void gtk_adjustment_set_upper (GtkAdjustment *adjustment,
                                                 gdouble upper);
gdouble gtk_adjustment_get_step_increment (GtkAdjustment *adjustment);
void gtk_adjustment_set_step_increment (GtkAdjustment *adjustment,
                                                 gdouble step_increment);
gdouble gtk_adjustment_get_page_increment (GtkAdjustment *adjustment);
void gtk_adjustment_set_page_increment (GtkAdjustment *adjustment,
                                                 gdouble page_increment);
gdouble gtk_adjustment_get_page_size (GtkAdjustment *adjustment);
void gtk_adjustment_set_page_size (GtkAdjustment *adjustment,
                                                 gdouble page_size);

void gtk_adjustment_configure (GtkAdjustment *adjustment,
                                                 gdouble value,
       gdouble lower,
       gdouble upper,
       gdouble step_increment,
       gdouble page_increment,
       gdouble page_size);


# 38 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkstyle.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkstyle.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkenums.h" 1
# 37 "/usr/include/gtk-2.0/gtk/gtkstyle.h" 2



# 53 "/usr/include/gtk-2.0/gtk/gtkstyle.h"
typedef struct _GtkBorder GtkBorder;
typedef struct _GtkStyle GtkStyle;
typedef struct _GtkStyleClass GtkStyleClass;
typedef struct _GtkThemeEngine GtkThemeEngine;
typedef struct _GtkRcStyle GtkRcStyle;
typedef struct _GtkIconSet GtkIconSet;
typedef struct _GtkIconSource GtkIconSource;
typedef struct _GtkRcProperty GtkRcProperty;
typedef struct _GtkSettings GtkSettings;
typedef gboolean (*GtkRcPropertyParser) (const GParamSpec *pspec,
      const GString *rc_string,
      GValue *property_value);




typedef struct _GtkWidget GtkWidget;



struct _GtkStyle
{
  GObject parent_instance;



  GdkColor fg[5];
  GdkColor bg[5];
  GdkColor light[5];
  GdkColor dark[5];
  GdkColor mid[5];
  GdkColor text[5];
  GdkColor base[5];
  GdkColor text_aa[5];

  GdkColor black;
  GdkColor white;
  PangoFontDescription *font_desc;

  gint xthickness;
  gint ythickness;

  GdkGC *fg_gc[5];
  GdkGC *bg_gc[5];
  GdkGC *light_gc[5];
  GdkGC *dark_gc[5];
  GdkGC *mid_gc[5];
  GdkGC *text_gc[5];
  GdkGC *base_gc[5];
  GdkGC *text_aa_gc[5];
  GdkGC *black_gc;
  GdkGC *white_gc;

  GdkPixmap *bg_pixmap[5];



  gint attach_count;

  gint depth;
  GdkColormap *colormap;
  GdkFont *private_font;
  PangoFontDescription *private_font_desc;


  GtkRcStyle *rc_style;

  GSList *styles;
  GArray *property_cache;
  GSList *icon_factories;
};

struct _GtkStyleClass
{
  GObjectClass parent_class;





  void (*realize) (GtkStyle *style);




  void (*unrealize) (GtkStyle *style);



  void (*copy) (GtkStyle *style,
     GtkStyle *src);






  GtkStyle *(*clone) (GtkStyle *style);




  void (*init_from_rc) (GtkStyle *style,
     GtkRcStyle *rc_style);

  void (*set_background) (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type);


  GdkPixbuf * (* render_icon) (GtkStyle *style,
                                 const GtkIconSource *source,
                                 GtkTextDirection direction,
                                 GtkStateType state,
                                 GtkIconSize size,
                                 GtkWidget *widget,
                                 const gchar *detail);




  void (*draw_hline) (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GdkRectangle *area,
     GtkWidget *widget,
     const gchar *detail,
     gint x1,
     gint x2,
     gint y);
  void (*draw_vline) (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GdkRectangle *area,
     GtkWidget *widget,
     const gchar *detail,
     gint y1_,
     gint y2_,
     gint x);
  void (*draw_shadow) (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     GdkRectangle *area,
     GtkWidget *widget,
     const gchar *detail,
     gint x,
     gint y,
     gint width,
     gint height);
  void (*draw_polygon) (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     GdkRectangle *area,
     GtkWidget *widget,
     const gchar *detail,
     GdkPoint *point,
     gint npoints,
     gboolean fill);
  void (*draw_arrow) (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     GdkRectangle *area,
     GtkWidget *widget,
     const gchar *detail,
     GtkArrowType arrow_type,
     gboolean fill,
     gint x,
     gint y,
     gint width,
     gint height);
  void (*draw_diamond) (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     GdkRectangle *area,
     GtkWidget *widget,
     const gchar *detail,
     gint x,
     gint y,
     gint width,
     gint height);
  void (*draw_string) (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GdkRectangle *area,
     GtkWidget *widget,
     const gchar *detail,
     gint x,
     gint y,
     const gchar *string);
  void (*draw_box) (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     GdkRectangle *area,
     GtkWidget *widget,
     const gchar *detail,
     gint x,
     gint y,
     gint width,
     gint height);
  void (*draw_flat_box) (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     GdkRectangle *area,
     GtkWidget *widget,
     const gchar *detail,
     gint x,
     gint y,
     gint width,
     gint height);
  void (*draw_check) (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     GdkRectangle *area,
     GtkWidget *widget,
     const gchar *detail,
     gint x,
     gint y,
     gint width,
     gint height);
  void (*draw_option) (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     GdkRectangle *area,
     GtkWidget *widget,
     const gchar *detail,
     gint x,
     gint y,
     gint width,
     gint height);
  void (*draw_tab) (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     GdkRectangle *area,
     GtkWidget *widget,
     const gchar *detail,
     gint x,
     gint y,
     gint width,
     gint height);
  void (*draw_shadow_gap) (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     GdkRectangle *area,
     GtkWidget *widget,
     const gchar *detail,
     gint x,
     gint y,
     gint width,
     gint height,
     GtkPositionType gap_side,
     gint gap_x,
     gint gap_width);
  void (*draw_box_gap) (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     GdkRectangle *area,
     GtkWidget *widget,
     const gchar *detail,
     gint x,
     gint y,
     gint width,
     gint height,
     GtkPositionType gap_side,
     gint gap_x,
     gint gap_width);
  void (*draw_extension) (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     GdkRectangle *area,
     GtkWidget *widget,
     const gchar *detail,
     gint x,
     gint y,
     gint width,
     gint height,
     GtkPositionType gap_side);
  void (*draw_focus) (GtkStyle *style,
     GdkWindow *window,
                                 GtkStateType state_type,
     GdkRectangle *area,
     GtkWidget *widget,
     const gchar *detail,
     gint x,
     gint y,
     gint width,
     gint height);
  void (*draw_slider) (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     GdkRectangle *area,
     GtkWidget *widget,
     const gchar *detail,
     gint x,
     gint y,
     gint width,
     gint height,
     GtkOrientation orientation);
  void (*draw_handle) (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     GdkRectangle *area,
     GtkWidget *widget,
     const gchar *detail,
     gint x,
     gint y,
     gint width,
     gint height,
     GtkOrientation orientation);

  void (*draw_expander) (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GdkRectangle *area,
     GtkWidget *widget,
     const gchar *detail,
     gint x,
     gint y,
                                 GtkExpanderStyle expander_style);
  void (*draw_layout) (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     gboolean use_text,
     GdkRectangle *area,
     GtkWidget *widget,
     const gchar *detail,
     gint x,
     gint y,
                                 PangoLayout *layout);
  void (*draw_resize_grip) (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GdkRectangle *area,
     GtkWidget *widget,
     const gchar *detail,
                                 GdkWindowEdge edge,
     gint x,
     gint y,
     gint width,
     gint height);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
  void (*_gtk_reserved9) (void);
  void (*_gtk_reserved10) (void);
  void (*_gtk_reserved11) (void);
  void (*_gtk_reserved12) (void);
};

struct _GtkBorder
{
  gint left;
  gint right;
  gint top;
  gint bottom;
};

GType gtk_style_get_type (void) __attribute__((__const__));
GtkStyle* gtk_style_new (void);
GtkStyle* gtk_style_copy (GtkStyle *style);
GtkStyle* gtk_style_attach (GtkStyle *style,
           GdkWindow *window) __attribute__((warn_unused_result));
void gtk_style_detach (GtkStyle *style);


GtkStyle* gtk_style_ref (GtkStyle *style);
void gtk_style_unref (GtkStyle *style);

GdkFont * gtk_style_get_font (GtkStyle *style);
void gtk_style_set_font (GtkStyle *style,
           GdkFont *font);


void gtk_style_set_background (GtkStyle *style,
           GdkWindow *window,
           GtkStateType state_type);
void gtk_style_apply_default_background (GtkStyle *style,
           GdkWindow *window,
           gboolean set_bg,
           GtkStateType state_type,
           const GdkRectangle *area,
           gint x,
           gint y,
           gint width,
           gint height);

GtkIconSet* gtk_style_lookup_icon_set (GtkStyle *style,
                                              const gchar *stock_id);
gboolean gtk_style_lookup_color (GtkStyle *style,
                                              const gchar *color_name,
                                              GdkColor *color);

GdkPixbuf* gtk_style_render_icon (GtkStyle *style,
                                       const GtkIconSource *source,
                                       GtkTextDirection direction,
                                       GtkStateType state,
                                       GtkIconSize size,
                                       GtkWidget *widget,
                                       const gchar *detail);


void gtk_draw_hline (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     gint x1,
     gint x2,
     gint y);
void gtk_draw_vline (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     gint y1_,
     gint y2_,
     gint x);
void gtk_draw_shadow (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     gint x,
     gint y,
     gint width,
     gint height);
void gtk_draw_polygon (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     GdkPoint *points,
     gint npoints,
     gboolean fill);
void gtk_draw_arrow (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     GtkArrowType arrow_type,
     gboolean fill,
     gint x,
     gint y,
     gint width,
     gint height);
void gtk_draw_diamond (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     gint x,
     gint y,
     gint width,
     gint height);
void gtk_draw_box (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     gint x,
     gint y,
     gint width,
     gint height);
void gtk_draw_flat_box (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     gint x,
     gint y,
     gint width,
     gint height);
void gtk_draw_check (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     gint x,
     gint y,
     gint width,
     gint height);
void gtk_draw_option (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     gint x,
     gint y,
     gint width,
     gint height);
void gtk_draw_tab (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     gint x,
     gint y,
     gint width,
     gint height);
void gtk_draw_shadow_gap (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     gint x,
     gint y,
     gint width,
     gint height,
     GtkPositionType gap_side,
     gint gap_x,
     gint gap_width);
void gtk_draw_box_gap (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     gint x,
     gint y,
     gint width,
     gint height,
     GtkPositionType gap_side,
     gint gap_x,
     gint gap_width);
void gtk_draw_extension (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     gint x,
     gint y,
     gint width,
     gint height,
     GtkPositionType gap_side);
void gtk_draw_focus (GtkStyle *style,
     GdkWindow *window,
     gint x,
     gint y,
     gint width,
     gint height);
void gtk_draw_slider (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     gint x,
     gint y,
     gint width,
     gint height,
     GtkOrientation orientation);
void gtk_draw_handle (GtkStyle *style,
     GdkWindow *window,
     GtkStateType state_type,
     GtkShadowType shadow_type,
     gint x,
     gint y,
     gint width,
     gint height,
     GtkOrientation orientation);
void gtk_draw_expander (GtkStyle *style,
                          GdkWindow *window,
                          GtkStateType state_type,
                          gint x,
                          gint y,
     GtkExpanderStyle expander_style);
void gtk_draw_layout (GtkStyle *style,
                          GdkWindow *window,
                          GtkStateType state_type,
     gboolean use_text,
                          gint x,
                          gint y,
                          PangoLayout *layout);
void gtk_draw_resize_grip (GtkStyle *style,
                           GdkWindow *window,
                           GtkStateType state_type,
                           GdkWindowEdge edge,
                           gint x,
                           gint y,
                           gint width,
                           gint height);


void gtk_paint_hline (GtkStyle *style,
       GdkWindow *window,
       GtkStateType state_type,
       const GdkRectangle *area,
       GtkWidget *widget,
       const gchar *detail,
       gint x1,
       gint x2,
       gint y);
void gtk_paint_vline (GtkStyle *style,
       GdkWindow *window,
       GtkStateType state_type,
       const GdkRectangle *area,
       GtkWidget *widget,
       const gchar *detail,
       gint y1_,
       gint y2_,
       gint x);
void gtk_paint_shadow (GtkStyle *style,
       GdkWindow *window,
       GtkStateType state_type,
       GtkShadowType shadow_type,
       const GdkRectangle *area,
       GtkWidget *widget,
       const gchar *detail,
       gint x,
       gint y,
       gint width,
       gint height);
void gtk_paint_polygon (GtkStyle *style,
       GdkWindow *window,
       GtkStateType state_type,
       GtkShadowType shadow_type,
       const GdkRectangle *area,
       GtkWidget *widget,
       const gchar *detail,
       const GdkPoint *points,
       gint n_points,
       gboolean fill);
void gtk_paint_arrow (GtkStyle *style,
       GdkWindow *window,
       GtkStateType state_type,
       GtkShadowType shadow_type,
       const GdkRectangle *area,
       GtkWidget *widget,
       const gchar *detail,
       GtkArrowType arrow_type,
       gboolean fill,
       gint x,
       gint y,
       gint width,
       gint height);
void gtk_paint_diamond (GtkStyle *style,
       GdkWindow *window,
       GtkStateType state_type,
       GtkShadowType shadow_type,
       const GdkRectangle *area,
       GtkWidget *widget,
       const gchar *detail,
       gint x,
       gint y,
       gint width,
       gint height);
void gtk_paint_box (GtkStyle *style,
       GdkWindow *window,
       GtkStateType state_type,
       GtkShadowType shadow_type,
       const GdkRectangle *area,
       GtkWidget *widget,
       const gchar *detail,
       gint x,
       gint y,
       gint width,
       gint height);
void gtk_paint_flat_box (GtkStyle *style,
       GdkWindow *window,
       GtkStateType state_type,
       GtkShadowType shadow_type,
       const GdkRectangle *area,
       GtkWidget *widget,
       const gchar *detail,
       gint x,
       gint y,
       gint width,
       gint height);
void gtk_paint_check (GtkStyle *style,
       GdkWindow *window,
       GtkStateType state_type,
       GtkShadowType shadow_type,
       const GdkRectangle *area,
       GtkWidget *widget,
       const gchar *detail,
       gint x,
       gint y,
       gint width,
       gint height);
void gtk_paint_option (GtkStyle *style,
       GdkWindow *window,
       GtkStateType state_type,
       GtkShadowType shadow_type,
       const GdkRectangle *area,
       GtkWidget *widget,
       const gchar *detail,
       gint x,
       gint y,
       gint width,
       gint height);
void gtk_paint_tab (GtkStyle *style,
       GdkWindow *window,
       GtkStateType state_type,
       GtkShadowType shadow_type,
       const GdkRectangle *area,
       GtkWidget *widget,
       const gchar *detail,
       gint x,
       gint y,
       gint width,
       gint height);
void gtk_paint_shadow_gap (GtkStyle *style,
       GdkWindow *window,
       GtkStateType state_type,
       GtkShadowType shadow_type,
       const GdkRectangle *area,
       GtkWidget *widget,
       const gchar *detail,
       gint x,
       gint y,
       gint width,
       gint height,
       GtkPositionType gap_side,
       gint gap_x,
       gint gap_width);
void gtk_paint_box_gap (GtkStyle *style,
       GdkWindow *window,
       GtkStateType state_type,
       GtkShadowType shadow_type,
       const GdkRectangle *area,
       GtkWidget *widget,
       const gchar *detail,
       gint x,
       gint y,
       gint width,
       gint height,
       GtkPositionType gap_side,
       gint gap_x,
       gint gap_width);
void gtk_paint_extension (GtkStyle *style,
       GdkWindow *window,
       GtkStateType state_type,
       GtkShadowType shadow_type,
       const GdkRectangle *area,
       GtkWidget *widget,
       const gchar *detail,
       gint x,
       gint y,
       gint width,
       gint height,
       GtkPositionType gap_side);
void gtk_paint_focus (GtkStyle *style,
       GdkWindow *window,
       GtkStateType state_type,
       const GdkRectangle *area,
       GtkWidget *widget,
       const gchar *detail,
       gint x,
       gint y,
       gint width,
       gint height);
void gtk_paint_slider (GtkStyle *style,
       GdkWindow *window,
       GtkStateType state_type,
       GtkShadowType shadow_type,
       const GdkRectangle *area,
       GtkWidget *widget,
       const gchar *detail,
       gint x,
       gint y,
       gint width,
       gint height,
       GtkOrientation orientation);
void gtk_paint_handle (GtkStyle *style,
       GdkWindow *window,
       GtkStateType state_type,
       GtkShadowType shadow_type,
       const GdkRectangle *area,
       GtkWidget *widget,
       const gchar *detail,
       gint x,
       gint y,
       gint width,
       gint height,
       GtkOrientation orientation);
void gtk_paint_expander (GtkStyle *style,
                            GdkWindow *window,
                            GtkStateType state_type,
                            const GdkRectangle *area,
                            GtkWidget *widget,
                            const gchar *detail,
                            gint x,
                            gint y,
       GtkExpanderStyle expander_style);
void gtk_paint_layout (GtkStyle *style,
                            GdkWindow *window,
                            GtkStateType state_type,
       gboolean use_text,
                            const GdkRectangle *area,
                            GtkWidget *widget,
                            const gchar *detail,
                            gint x,
                            gint y,
                            PangoLayout *layout);
void gtk_paint_resize_grip (GtkStyle *style,
                            GdkWindow *window,
                            GtkStateType state_type,
                            const GdkRectangle *area,
                            GtkWidget *widget,
                            const gchar *detail,
                            GdkWindowEdge edge,
                            gint x,
                            gint y,
                            gint width,
                            gint height);


GType gtk_border_get_type (void) __attribute__((__const__));
GtkBorder *gtk_border_new (void) __attribute__((__malloc__));
GtkBorder *gtk_border_copy (const GtkBorder *border_);
void gtk_border_free (GtkBorder *border_);

void gtk_style_get_style_property (GtkStyle *style,
                                   GType widget_type,
                                   const gchar *property_name,
                                   GValue *value);
void gtk_style_get_valist (GtkStyle *style,
                                   GType widget_type,
                                   const gchar *first_property_name,
                                   va_list var_args);
void gtk_style_get (GtkStyle *style,
                                   GType widget_type,
                                   const gchar *first_property_name,
                                   ...) __attribute__((__sentinel__));


const GValue* _gtk_style_peek_property_value (GtkStyle *style,
           GType widget_type,
           GParamSpec *pspec,
           GtkRcPropertyParser parser);

void _gtk_style_init_for_settings (GtkStyle *style,
                                              GtkSettings *settings);

void _gtk_style_shade (const GdkColor *a,
                                              GdkColor *b,
                                              gdouble k);




void gtk_draw_string (GtkStyle *style,
      GdkWindow *window,
                           GtkStateType state_type,
                           gint x,
                           gint y,
                           const gchar *string);
void gtk_paint_string (GtkStyle *style,
      GdkWindow *window,
      GtkStateType state_type,
      const GdkRectangle *area,
      GtkWidget *widget,
      const gchar *detail,
      gint x,
      gint y,
      const gchar *string);


void gtk_draw_insertion_cursor (GtkWidget *widget,
                                     GdkDrawable *drawable,
                                     const GdkRectangle *area,
                                     const GdkRectangle *location,
                                     gboolean is_primary,
                                     GtkTextDirection direction,
                                     gboolean draw_arrow);
GdkGC *_gtk_widget_get_cursor_gc (GtkWidget *widget);
void _gtk_widget_get_cursor_color (GtkWidget *widget,
         GdkColor *color);


# 39 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtksettings.h" 1
# 26 "/usr/include/gtk-2.0/gtk/gtksettings.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkrc.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkrc.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkstyle.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkrc.h" 2




typedef struct _GtkIconFactory GtkIconFactory;
typedef struct _GtkRcContext GtkRcContext;

typedef struct _GtkRcStyleClass GtkRcStyleClass;
# 52 "/usr/include/gtk-2.0/gtk/gtkrc.h"
typedef enum
{
  GTK_RC_FG = 1 << 0,
  GTK_RC_BG = 1 << 1,
  GTK_RC_TEXT = 1 << 2,
  GTK_RC_BASE = 1 << 3
} GtkRcFlags;

struct _GtkRcStyle
{
  GObject parent_instance;



  gchar *name;
  gchar *bg_pixmap_name[5];
  PangoFontDescription *font_desc;

  GtkRcFlags color_flags[5];
  GdkColor fg[5];
  GdkColor bg[5];
  GdkColor text[5];
  GdkColor base[5];

  gint xthickness;
  gint ythickness;


  GArray *rc_properties;


  GSList *rc_style_lists;

  GSList *icon_factories;

  guint engine_specified : 1;
};

struct _GtkRcStyleClass
{
  GObjectClass parent_class;






  GtkRcStyle * (*create_rc_style) (GtkRcStyle *rc_style);





  guint (*parse) (GtkRcStyle *rc_style,
         GtkSettings *settings,
         GScanner *scanner);




  void (*merge) (GtkRcStyle *dest,
         GtkRcStyle *src);



  GtkStyle * (*create_style) (GtkRcStyle *rc_style);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
# 133 "/usr/include/gtk-2.0/gtk/gtkrc.h"
void _gtk_rc_init (void);
GSList* _gtk_rc_parse_widget_class_path (const gchar *pattern);
void _gtk_rc_free_widget_class_path (GSList *list);
gboolean _gtk_rc_match_widget_class (GSList *list,
                                          gint length,
                                          gchar *path,
                                          gchar *path_reversed);

void gtk_rc_add_default_file (const gchar *filename);
void gtk_rc_set_default_files (gchar **filenames);
gchar** gtk_rc_get_default_files (void);
GtkStyle* gtk_rc_get_style (GtkWidget *widget);
GtkStyle* gtk_rc_get_style_by_paths (GtkSettings *settings,
      const char *widget_path,
      const char *class_path,
      GType type);

gboolean gtk_rc_reparse_all_for_settings (GtkSettings *settings,
       gboolean force_load);
void gtk_rc_reset_styles (GtkSettings *settings);

gchar* gtk_rc_find_pixmap_in_path (GtkSettings *settings,
         GScanner *scanner,
         const gchar *pixmap_file);

void gtk_rc_parse (const gchar *filename);
void gtk_rc_parse_string (const gchar *rc_string);
gboolean gtk_rc_reparse_all (void);


void gtk_rc_add_widget_name_style (GtkRcStyle *rc_style,
      const gchar *pattern);
void gtk_rc_add_widget_class_style (GtkRcStyle *rc_style,
      const gchar *pattern);
void gtk_rc_add_class_style (GtkRcStyle *rc_style,
      const gchar *pattern);



GType gtk_rc_style_get_type (void) __attribute__((__const__));
GtkRcStyle* gtk_rc_style_new (void);
GtkRcStyle* gtk_rc_style_copy (GtkRcStyle *orig);


void gtk_rc_style_ref (GtkRcStyle *rc_style);
void gtk_rc_style_unref (GtkRcStyle *rc_style);


gchar* gtk_rc_find_module_in_path (const gchar *module_file);
gchar* gtk_rc_get_theme_dir (void);
gchar* gtk_rc_get_module_dir (void);
gchar* gtk_rc_get_im_module_path (void);
gchar* gtk_rc_get_im_module_file (void);


typedef enum {
  GTK_RC_TOKEN_INVALID = G_TOKEN_LAST,
  GTK_RC_TOKEN_INCLUDE,
  GTK_RC_TOKEN_NORMAL,
  GTK_RC_TOKEN_ACTIVE,
  GTK_RC_TOKEN_PRELIGHT,
  GTK_RC_TOKEN_SELECTED,
  GTK_RC_TOKEN_INSENSITIVE,
  GTK_RC_TOKEN_FG,
  GTK_RC_TOKEN_BG,
  GTK_RC_TOKEN_TEXT,
  GTK_RC_TOKEN_BASE,
  GTK_RC_TOKEN_XTHICKNESS,
  GTK_RC_TOKEN_YTHICKNESS,
  GTK_RC_TOKEN_FONT,
  GTK_RC_TOKEN_FONTSET,
  GTK_RC_TOKEN_FONT_NAME,
  GTK_RC_TOKEN_BG_PIXMAP,
  GTK_RC_TOKEN_PIXMAP_PATH,
  GTK_RC_TOKEN_STYLE,
  GTK_RC_TOKEN_BINDING,
  GTK_RC_TOKEN_BIND,
  GTK_RC_TOKEN_WIDGET,
  GTK_RC_TOKEN_WIDGET_CLASS,
  GTK_RC_TOKEN_CLASS,
  GTK_RC_TOKEN_LOWEST,
  GTK_RC_TOKEN_GTK,
  GTK_RC_TOKEN_APPLICATION,
  GTK_RC_TOKEN_THEME,
  GTK_RC_TOKEN_RC,
  GTK_RC_TOKEN_HIGHEST,
  GTK_RC_TOKEN_ENGINE,
  GTK_RC_TOKEN_MODULE_PATH,
  GTK_RC_TOKEN_IM_MODULE_PATH,
  GTK_RC_TOKEN_IM_MODULE_FILE,
  GTK_RC_TOKEN_STOCK,
  GTK_RC_TOKEN_LTR,
  GTK_RC_TOKEN_RTL,
  GTK_RC_TOKEN_COLOR,
  GTK_RC_TOKEN_UNBIND,
  GTK_RC_TOKEN_LAST
} GtkRcTokenType;

GScanner* gtk_rc_scanner_new (void);
guint gtk_rc_parse_color (GScanner *scanner,
     GdkColor *color);
guint gtk_rc_parse_color_full (GScanner *scanner,
                                   GtkRcStyle *style,
       GdkColor *color);
guint gtk_rc_parse_state (GScanner *scanner,
     GtkStateType *state);
guint gtk_rc_parse_priority (GScanner *scanner,
     GtkPathPriorityType *priority);




struct _GtkRcProperty
{

  GQuark type_name;
  GQuark property_name;


  gchar *origin;
  GValue value;
};
const GtkRcProperty* _gtk_rc_style_lookup_rc_property (GtkRcStyle *rc_style,
             GQuark type_name,
             GQuark property_name);
void _gtk_rc_style_set_rc_property (GtkRcStyle *rc_style,
             GtkRcProperty *property);
void _gtk_rc_style_unset_rc_property (GtkRcStyle *rc_style,
             GQuark type_name,
             GQuark property_name);

GSList * _gtk_rc_style_get_color_hashes (GtkRcStyle *rc_style);

const gchar* _gtk_rc_context_get_default_font_name (GtkSettings *settings);
void _gtk_rc_context_destroy (GtkSettings *settings);


# 27 "/usr/include/gtk-2.0/gtk/gtksettings.h" 2


# 41 "/usr/include/gtk-2.0/gtk/gtksettings.h"
typedef struct _GtkSettingsClass GtkSettingsClass;
typedef struct _GtkSettingsValue GtkSettingsValue;
typedef struct _GtkSettingsPropertyValue GtkSettingsPropertyValue;



struct _GtkSettings
{
  GObject parent_instance;

  GData *queued_settings;
  GtkSettingsPropertyValue *property_values;

  GtkRcContext *rc_context;
  GdkScreen *screen;
};

struct _GtkSettingsClass
{
  GObjectClass parent_class;
};

struct _GtkSettingsValue
{



  gchar *origin;




  GValue value;
};



GType gtk_settings_get_type (void) __attribute__((__const__));

GtkSettings* gtk_settings_get_default (void);

GtkSettings* gtk_settings_get_for_screen (GdkScreen *screen);

void gtk_settings_install_property (GParamSpec *pspec);
void gtk_settings_install_property_parser (GParamSpec *pspec,
            GtkRcPropertyParser parser);


gboolean gtk_rc_property_parse_color (const GParamSpec *pspec,
         const GString *gstring,
         GValue *property_value);
gboolean gtk_rc_property_parse_enum (const GParamSpec *pspec,
         const GString *gstring,
         GValue *property_value);
gboolean gtk_rc_property_parse_flags (const GParamSpec *pspec,
         const GString *gstring,
         GValue *property_value);
gboolean gtk_rc_property_parse_requisition (const GParamSpec *pspec,
         const GString *gstring,
         GValue *property_value);
gboolean gtk_rc_property_parse_border (const GParamSpec *pspec,
         const GString *gstring,
         GValue *property_value);


void gtk_settings_set_property_value (GtkSettings *settings,
        const gchar *name,
        const GtkSettingsValue *svalue);
void gtk_settings_set_string_property (GtkSettings *settings,
        const gchar *name,
        const gchar *v_string,
        const gchar *origin);
void gtk_settings_set_long_property (GtkSettings *settings,
        const gchar *name,
        glong v_long,
        const gchar *origin);
void gtk_settings_set_double_property (GtkSettings *settings,
        const gchar *name,
        gdouble v_double,
        const gchar *origin);



void _gtk_settings_set_property_value_from_rc (GtkSettings *settings,
            const gchar *name,
            const GtkSettingsValue *svalue);
void _gtk_settings_reset_rc_values (GtkSettings *settings);

void _gtk_settings_handle_event (GdkEventSetting *event);
GtkRcPropertyParser _gtk_rc_property_parser_from_type (GType type);
gboolean _gtk_settings_parse_convert (GtkRcPropertyParser parser,
             const GValue *src_value,
             GParamSpec *pspec,
             GValue *dest_value);



# 40 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 2
# 1 "/usr/include/atk-1.0/atk/atk.h" 1
# 25 "/usr/include/atk-1.0/atk/atk.h"
# 1 "/usr/include/atk-1.0/atk/atkobject.h" 1
# 28 "/usr/include/atk-1.0/atk/atkobject.h"
# 1 "/usr/include/atk-1.0/atk/atkstate.h" 1
# 29 "/usr/include/atk-1.0/atk/atkstate.h"

# 124 "/usr/include/atk-1.0/atk/atkstate.h"
typedef enum
{
  ATK_STATE_INVALID,
  ATK_STATE_ACTIVE,
  ATK_STATE_ARMED,
  ATK_STATE_BUSY,
  ATK_STATE_CHECKED,
  ATK_STATE_DEFUNCT,
  ATK_STATE_EDITABLE,
  ATK_STATE_ENABLED,
  ATK_STATE_EXPANDABLE,
  ATK_STATE_EXPANDED,
  ATK_STATE_FOCUSABLE,
  ATK_STATE_FOCUSED,
  ATK_STATE_HORIZONTAL,
  ATK_STATE_ICONIFIED,
  ATK_STATE_MODAL,
  ATK_STATE_MULTI_LINE,
  ATK_STATE_MULTISELECTABLE,
  ATK_STATE_OPAQUE,
  ATK_STATE_PRESSED,
  ATK_STATE_RESIZABLE,
  ATK_STATE_SELECTABLE,
  ATK_STATE_SELECTED,
  ATK_STATE_SENSITIVE,
  ATK_STATE_SHOWING,
  ATK_STATE_SINGLE_LINE,
  ATK_STATE_STALE,
  ATK_STATE_TRANSIENT,
  ATK_STATE_VERTICAL,
  ATK_STATE_VISIBLE,
  ATK_STATE_MANAGES_DESCENDANTS,
  ATK_STATE_INDETERMINATE,
  ATK_STATE_TRUNCATED,
  ATK_STATE_REQUIRED,
  ATK_STATE_INVALID_ENTRY,
  ATK_STATE_SUPPORTS_AUTOCOMPLETION,
  ATK_STATE_SELECTABLE_TEXT,
  ATK_STATE_DEFAULT,
  ATK_STATE_ANIMATED,
  ATK_STATE_VISITED,

  ATK_STATE_LAST_DEFINED
} AtkStateType;

typedef guint64 AtkState;

AtkStateType atk_state_type_register (const gchar *name);

const gchar* atk_state_type_get_name (AtkStateType type);
AtkStateType atk_state_type_for_name (const gchar *name);


# 29 "/usr/include/atk-1.0/atk/atkobject.h" 2
# 1 "/usr/include/atk-1.0/atk/atkrelationtype.h" 1
# 29 "/usr/include/atk-1.0/atk/atkrelationtype.h"

# 58 "/usr/include/atk-1.0/atk/atkrelationtype.h"
typedef enum
{
  ATK_RELATION_NULL = 0,
  ATK_RELATION_CONTROLLED_BY,
  ATK_RELATION_CONTROLLER_FOR,
  ATK_RELATION_LABEL_FOR,
  ATK_RELATION_LABELLED_BY,
  ATK_RELATION_MEMBER_OF,
  ATK_RELATION_NODE_CHILD_OF,
  ATK_RELATION_FLOWS_TO,
  ATK_RELATION_FLOWS_FROM,
  ATK_RELATION_SUBWINDOW_OF,
  ATK_RELATION_EMBEDS,
  ATK_RELATION_EMBEDDED_BY,
  ATK_RELATION_POPUP_FOR,
  ATK_RELATION_PARENT_WINDOW_OF,
  ATK_RELATION_DESCRIBED_BY,
  ATK_RELATION_DESCRIPTION_FOR,
  ATK_RELATION_LAST_DEFINED
} AtkRelationType;


# 30 "/usr/include/atk-1.0/atk/atkobject.h" 2


# 150 "/usr/include/atk-1.0/atk/atkobject.h"
typedef enum
{
  ATK_ROLE_INVALID = 0,
  ATK_ROLE_ACCEL_LABEL,
  ATK_ROLE_ALERT,
  ATK_ROLE_ANIMATION,
  ATK_ROLE_ARROW,
  ATK_ROLE_CALENDAR,
  ATK_ROLE_CANVAS,
  ATK_ROLE_CHECK_BOX,
  ATK_ROLE_CHECK_MENU_ITEM,
  ATK_ROLE_COLOR_CHOOSER,
  ATK_ROLE_COLUMN_HEADER,
  ATK_ROLE_COMBO_BOX,
  ATK_ROLE_DATE_EDITOR,
  ATK_ROLE_DESKTOP_ICON,
  ATK_ROLE_DESKTOP_FRAME,
  ATK_ROLE_DIAL,
  ATK_ROLE_DIALOG,
  ATK_ROLE_DIRECTORY_PANE,
  ATK_ROLE_DRAWING_AREA,
  ATK_ROLE_FILE_CHOOSER,
  ATK_ROLE_FILLER,
  ATK_ROLE_FONT_CHOOSER,
  ATK_ROLE_FRAME,
  ATK_ROLE_GLASS_PANE,
  ATK_ROLE_HTML_CONTAINER,
  ATK_ROLE_ICON,
  ATK_ROLE_IMAGE,
  ATK_ROLE_INTERNAL_FRAME,
  ATK_ROLE_LABEL,
  ATK_ROLE_LAYERED_PANE,
  ATK_ROLE_LIST,
  ATK_ROLE_LIST_ITEM,
  ATK_ROLE_MENU,
  ATK_ROLE_MENU_BAR,
  ATK_ROLE_MENU_ITEM,
  ATK_ROLE_OPTION_PANE,
  ATK_ROLE_PAGE_TAB,
  ATK_ROLE_PAGE_TAB_LIST,
  ATK_ROLE_PANEL,
  ATK_ROLE_PASSWORD_TEXT,
  ATK_ROLE_POPUP_MENU,
  ATK_ROLE_PROGRESS_BAR,
  ATK_ROLE_PUSH_BUTTON,
  ATK_ROLE_RADIO_BUTTON,
  ATK_ROLE_RADIO_MENU_ITEM,
  ATK_ROLE_ROOT_PANE,
  ATK_ROLE_ROW_HEADER,
  ATK_ROLE_SCROLL_BAR,
  ATK_ROLE_SCROLL_PANE,
  ATK_ROLE_SEPARATOR,
  ATK_ROLE_SLIDER,
  ATK_ROLE_SPLIT_PANE,
  ATK_ROLE_SPIN_BUTTON,
  ATK_ROLE_STATUSBAR,
  ATK_ROLE_TABLE,
  ATK_ROLE_TABLE_CELL,
  ATK_ROLE_TABLE_COLUMN_HEADER,
  ATK_ROLE_TABLE_ROW_HEADER,
  ATK_ROLE_TEAR_OFF_MENU_ITEM,
  ATK_ROLE_TERMINAL,
  ATK_ROLE_TEXT,
  ATK_ROLE_TOGGLE_BUTTON,
  ATK_ROLE_TOOL_BAR,
  ATK_ROLE_TOOL_TIP,
  ATK_ROLE_TREE,
  ATK_ROLE_TREE_TABLE,
  ATK_ROLE_UNKNOWN,
  ATK_ROLE_VIEWPORT,
  ATK_ROLE_WINDOW,
  ATK_ROLE_HEADER,
  ATK_ROLE_FOOTER,
  ATK_ROLE_PARAGRAPH,
  ATK_ROLE_RULER,
  ATK_ROLE_APPLICATION,
  ATK_ROLE_AUTOCOMPLETE,
  ATK_ROLE_EDITBAR,
  ATK_ROLE_EMBEDDED,
  ATK_ROLE_ENTRY,
  ATK_ROLE_CHART,
  ATK_ROLE_CAPTION,
  ATK_ROLE_DOCUMENT_FRAME,
  ATK_ROLE_HEADING,
  ATK_ROLE_PAGE,
  ATK_ROLE_SECTION,
  ATK_ROLE_REDUNDANT_OBJECT,
  ATK_ROLE_FORM,
  ATK_ROLE_LINK,
  ATK_ROLE_INPUT_METHOD_WINDOW,
  ATK_ROLE_LAST_DEFINED
} AtkRole;

AtkRole atk_role_register (const gchar *name);
# 262 "/usr/include/atk-1.0/atk/atkobject.h"
typedef enum
{
  ATK_LAYER_INVALID,
  ATK_LAYER_BACKGROUND,
  ATK_LAYER_CANVAS,
  ATK_LAYER_WIDGET,
  ATK_LAYER_MDI,
  ATK_LAYER_POPUP,
  ATK_LAYER_OVERLAY,
  ATK_LAYER_WINDOW
} AtkLayer;
# 281 "/usr/include/atk-1.0/atk/atkobject.h"
typedef GSList AtkAttributeSet;
# 293 "/usr/include/atk-1.0/atk/atkobject.h"
typedef struct _AtkAttribute AtkAttribute;

struct _AtkAttribute {
  gchar* name;
  gchar* value;
};
# 313 "/usr/include/atk-1.0/atk/atkobject.h"
typedef struct _AtkImplementor AtkImplementor;
typedef struct _AtkImplementorIface AtkImplementorIface;


typedef struct _AtkObject AtkObject;
typedef struct _AtkObjectClass AtkObjectClass;
typedef struct _AtkRelationSet AtkRelationSet;
typedef struct _AtkStateSet AtkStateSet;
# 340 "/usr/include/atk-1.0/atk/atkobject.h"
struct _AtkPropertyValues
{
  const gchar *property_name;
  GValue old_value;
  GValue new_value;
};

typedef struct _AtkPropertyValues AtkPropertyValues;

typedef gboolean (*AtkFunction) (gpointer data);
# 362 "/usr/include/atk-1.0/atk/atkobject.h"
typedef void (*AtkPropertyChangeHandler) (AtkObject*, AtkPropertyValues*);


struct _AtkObject
{
  GObject parent;

  gchar *description;
  gchar *name;
  AtkObject *accessible_parent;
  AtkRole role;
  AtkRelationSet *relation_set;
  AtkLayer layer;
};

struct _AtkObjectClass
{
  GObjectClass parent;




  const gchar* (* get_name) (AtkObject *accessible);



  const gchar* (* get_description) (AtkObject *accessible);



  AtkObject* (*get_parent) (AtkObject *accessible);




  gint (* get_n_children) (AtkObject *accessible);





  AtkObject* (* ref_child) (AtkObject *accessible,
                                                    gint i);




  gint (* get_index_in_parent) (AtkObject *accessible);



  AtkRelationSet* (* ref_relation_set) (AtkObject *accessible);



  AtkRole (* get_role) (AtkObject *accessible);
  AtkLayer (* get_layer) (AtkObject *accessible);
  gint (* get_mdi_zorder) (AtkObject *accessible);



  AtkStateSet* (* ref_state_set) (AtkObject *accessible);



  void (* set_name) (AtkObject *accessible,
                                                   const gchar *name);



  void (* set_description) (AtkObject *accessible,
                                                   const gchar *description);



  void (* set_parent) (AtkObject *accessible,
                                                   AtkObject *parent);



  void (* set_role) (AtkObject *accessible,
                                                   AtkRole role);



guint (* connect_property_change_handler) (AtkObject
                 *accessible,
                                                                  AtkPropertyChangeHandler *handler);




void (* remove_property_change_handler) (AtkObject
                *accessible,
                                                                  guint
                handler_id);
void (* initialize) (AtkObject *accessible,
                                                                  gpointer data);




  void (* children_changed) (AtkObject *accessible,
                                                   guint change_index,
                                                   gpointer changed_child);




  void (* focus_event) (AtkObject *accessible,
                                                   gboolean focus_in);




  void (* property_change) (AtkObject *accessible,
                                                   AtkPropertyValues *values);




  void (* state_change) (AtkObject *accessible,
                                                   const gchar *name,
                                                   gboolean state_set);




  void (*visible_data_changed) (AtkObject *accessible);







  void (*active_descendant_changed) (AtkObject *accessible,
                                                        gpointer *child);





  AtkAttributeSet* (*get_attributes) (AtkObject *accessible);
  AtkFunction pad1;
  AtkFunction pad2;
};

GType atk_object_get_type (void);

struct _AtkImplementorIface
{
  GTypeInterface parent;

  AtkObject* (*ref_accessible) (AtkImplementor *implementor);
};
GType atk_implementor_get_type (void);
# 532 "/usr/include/atk-1.0/atk/atkobject.h"
AtkObject* atk_implementor_ref_accessible (AtkImplementor *implementor);





const gchar* atk_object_get_name (AtkObject *accessible);
const gchar* atk_object_get_description (AtkObject *accessible);
AtkObject* atk_object_get_parent (AtkObject *accessible);
gint atk_object_get_n_accessible_children (AtkObject *accessible);
AtkObject* atk_object_ref_accessible_child (AtkObject *accessible,
                                                                   gint i);
AtkRelationSet* atk_object_ref_relation_set (AtkObject *accessible);
AtkRole atk_object_get_role (AtkObject *accessible);

AtkLayer atk_object_get_layer (AtkObject *accessible);
gint atk_object_get_mdi_zorder (AtkObject *accessible);

AtkAttributeSet* atk_object_get_attributes (AtkObject *accessible);
AtkStateSet* atk_object_ref_state_set (AtkObject *accessible);
gint atk_object_get_index_in_parent (AtkObject *accessible);
void atk_object_set_name (AtkObject *accessible,
                                                                   const gchar *name);
void atk_object_set_description (AtkObject *accessible,
                                                                   const gchar *description);
void atk_object_set_parent (AtkObject *accessible,
                                                                   AtkObject *parent);
void atk_object_set_role (AtkObject *accessible,
                                                                   AtkRole role);


guint atk_object_connect_property_change_handler (AtkObject *accessible,
                                                                  AtkPropertyChangeHandler *handler);
void atk_object_remove_property_change_handler (AtkObject *accessible,
                                                                  guint handler_id);

void atk_object_notify_state_change (AtkObject *accessible,
                                                                  AtkState state,
                                                                  gboolean value);
void atk_object_initialize (AtkObject *accessible,
                                                                  gpointer data);

const gchar* atk_role_get_name (AtkRole role);
AtkRole atk_role_for_name (const gchar *name);



gboolean atk_object_add_relationship (AtkObject *object,
        AtkRelationType relationship,
        AtkObject *target);
gboolean atk_object_remove_relationship (AtkObject *object,
        AtkRelationType relationship,
        AtkObject *target);
const gchar* atk_role_get_localized_name (AtkRole role);
# 647 "/usr/include/atk-1.0/atk/atkobject.h"

# 26 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkaction.h" 1
# 27 "/usr/include/atk-1.0/atk/atkaction.h"
# 1 "/usr/include/atk-1.0/atk/atkobject.h" 1
# 28 "/usr/include/atk-1.0/atk/atkaction.h" 2


# 47 "/usr/include/atk-1.0/atk/atkaction.h"
typedef struct _AtkAction AtkAction;

typedef struct _AtkActionIface AtkActionIface;

struct _AtkActionIface
{
  GTypeInterface parent;

  gboolean (*do_action) (AtkAction *action,
                                                gint i);
  gint (*get_n_actions) (AtkAction *action);
  const gchar* (*get_description) (AtkAction *action,
                                                gint i);
  const gchar* (*get_name) (AtkAction *action,
                                                gint i);
  const gchar* (*get_keybinding) (AtkAction *action,
                                                gint i);
  gboolean (*set_description) (AtkAction *action,
                                                gint i,
                                                const gchar *desc);
  const gchar* (*get_localized_name)(AtkAction *action,
      gint i);
  AtkFunction pad2;
};

GType atk_action_get_type (void);
# 85 "/usr/include/atk-1.0/atk/atkaction.h"
gboolean atk_action_do_action (AtkAction *action,
                                            gint i);
gint atk_action_get_n_actions (AtkAction *action);
const gchar* atk_action_get_description (AtkAction *action,
                                                   gint i);
const gchar* atk_action_get_name (AtkAction *action,
                                                   gint i);
const gchar* atk_action_get_keybinding (AtkAction *action,
                                                   gint i);
gboolean atk_action_set_description (AtkAction *action,
                                                   gint i,
                                                   const gchar *desc);



const gchar* atk_action_get_localized_name (AtkAction *action,
           gint i);








# 27 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkcomponent.h" 1
# 27 "/usr/include/atk-1.0/atk/atkcomponent.h"
# 1 "/usr/include/atk-1.0/atk/atkobject.h" 1
# 28 "/usr/include/atk-1.0/atk/atkcomponent.h" 2
# 1 "/usr/include/atk-1.0/atk/atkutil.h" 1
# 27 "/usr/include/atk-1.0/atk/atkutil.h"
# 1 "/usr/include/atk-1.0/atk/atkobject.h" 1
# 28 "/usr/include/atk-1.0/atk/atkutil.h" 2


# 41 "/usr/include/atk-1.0/atk/atkutil.h"
typedef struct _AtkUtil AtkUtil;
typedef struct _AtkUtilClass AtkUtilClass;
typedef struct _AtkKeyEventStruct AtkKeyEventStruct;
# 59 "/usr/include/atk-1.0/atk/atkutil.h"
typedef void (*AtkEventListener) (AtkObject* obj);
# 69 "/usr/include/atk-1.0/atk/atkutil.h"
typedef void (*AtkEventListenerInit) (void);
# 86 "/usr/include/atk-1.0/atk/atkutil.h"
typedef gint (*AtkKeySnoopFunc) (AtkKeyEventStruct *event,
       gpointer func_data);
# 110 "/usr/include/atk-1.0/atk/atkutil.h"
struct _AtkKeyEventStruct {
  gint type;
  guint state;
  guint keyval;
  gint length;
  gchar *string;
  guint16 keycode;
  guint32 timestamp;
};
# 128 "/usr/include/atk-1.0/atk/atkutil.h"
typedef enum
{
  ATK_KEY_EVENT_PRESS,
  ATK_KEY_EVENT_RELEASE,
  ATK_KEY_EVENT_LAST_DEFINED
} AtkKeyEventType;

struct _AtkUtil
{
  GObject parent;
};

struct _AtkUtilClass
{
   GObjectClass parent;
   guint (* add_global_event_listener) (GSignalEmissionHook listener,
        const gchar *event_type);
   void (* remove_global_event_listener) (guint listener_id);
   guint (* add_key_event_listener) (AtkKeySnoopFunc listener,
        gpointer data);
   void (* remove_key_event_listener) (guint listener_id);
   AtkObject* (* get_root) (void);
   const gchar* (* get_toolkit_name) (void);
   const gchar* (* get_toolkit_version) (void);
};
GType atk_util_get_type (void);
# 164 "/usr/include/atk-1.0/atk/atkutil.h"
typedef enum {
  ATK_XY_SCREEN,
  ATK_XY_WINDOW
}AtkCoordType;





guint atk_add_focus_tracker (AtkEventListener focus_tracker);





void atk_remove_focus_tracker (guint tracker_id);
# 191 "/usr/include/atk-1.0/atk/atkutil.h"
void atk_focus_tracker_init (AtkEventListenerInit init);





void atk_focus_tracker_notify (AtkObject *object);





guint atk_add_global_event_listener (GSignalEmissionHook listener,
           const gchar *event_type);




void atk_remove_global_event_listener (guint listener_id);





guint atk_add_key_event_listener (AtkKeySnoopFunc listener, gpointer data);




void atk_remove_key_event_listener (guint listener_id);




AtkObject* atk_get_root(void);

AtkObject* atk_get_focus_object (void);




const gchar *atk_get_toolkit_name (void);




const gchar *atk_get_toolkit_version (void);




const gchar *atk_get_version (void);
# 311 "/usr/include/atk-1.0/atk/atkutil.h"

# 29 "/usr/include/atk-1.0/atk/atkcomponent.h" 2


# 46 "/usr/include/atk-1.0/atk/atkcomponent.h"
typedef struct _AtkComponent AtkComponent;

typedef struct _AtkComponentIface AtkComponentIface;

typedef void (*AtkFocusHandler) (AtkObject*, gboolean);

typedef struct _AtkRectangle AtkRectangle;

struct _AtkRectangle
{
  gint x;
  gint y;
  gint width;
  gint height;
};

GType atk_rectangle_get_type (void);


struct _AtkComponentIface
{
  GTypeInterface parent;

  guint (* add_focus_handler) (AtkComponent *component,
                                         AtkFocusHandler handler);

  gboolean (* contains) (AtkComponent *component,
                                         gint x,
                                         gint y,
                                         AtkCoordType coord_type);

  AtkObject* (* ref_accessible_at_point) (AtkComponent *component,
                                         gint x,
                                         gint y,
                                         AtkCoordType coord_type);
  void (* get_extents) (AtkComponent *component,
                                         gint *x,
                                         gint *y,
                                         gint *width,
                                         gint *height,
                                         AtkCoordType coord_type);
  void (* get_position) (AtkComponent *component,
                                                 gint *x,
                                                 gint *y,
                                                 AtkCoordType coord_type);
  void (* get_size) (AtkComponent *component,
                                                         gint *width,
                                                         gint *height);
  gboolean (* grab_focus) (AtkComponent *component);
  void (* remove_focus_handler) (AtkComponent *component,
                                                          guint handler_id);
  gboolean (* set_extents) (AtkComponent *component,
                                                 gint x,
                                                 gint y,
                                                 gint width,
                                                 gint height,
                                                 AtkCoordType coord_type);
  gboolean (* set_position) (AtkComponent *component,
                                                 gint x,
                                                 gint y,
                                                 AtkCoordType coord_type);
  gboolean (* set_size) (AtkComponent *component,
                                                 gint width,
                                                 gint height);

  AtkLayer (* get_layer) (AtkComponent *component);
  gint (* get_mdi_zorder) (AtkComponent *component);




  void (* bounds_changed) (AtkComponent *component,
                                                 AtkRectangle *bounds);
  gdouble (* get_alpha) (AtkComponent *component);
};

GType atk_component_get_type (void);



guint atk_component_add_focus_handler (AtkComponent *component,
                                                           AtkFocusHandler handler);
gboolean atk_component_contains (AtkComponent *component,
                                                            gint x,
                                                            gint y,
                                                            AtkCoordType coord_type);
AtkObject* atk_component_ref_accessible_at_point(AtkComponent *component,
                                                            gint x,
                                                            gint y,
                                                            AtkCoordType coord_type);
void atk_component_get_extents (AtkComponent *component,
                                                            gint *x,
                                                            gint *y,
                                                            gint *width,
                                                            gint *height,
                                                            AtkCoordType coord_type);
void atk_component_get_position (AtkComponent *component,
                                                            gint *x,
                                                            gint *y,
                                                            AtkCoordType coord_type);
void atk_component_get_size (AtkComponent *component,
                                                            gint *width,
                                                            gint *height);
AtkLayer atk_component_get_layer (AtkComponent *component);
gint atk_component_get_mdi_zorder (AtkComponent *component);
gboolean atk_component_grab_focus (AtkComponent *component);
void atk_component_remove_focus_handler (AtkComponent *component,
                                                            guint handler_id);
gboolean atk_component_set_extents (AtkComponent *component,
                                                            gint x,
                                                            gint y,
                                                            gint width,
                                                            gint height,
                                                            AtkCoordType coord_type);
gboolean atk_component_set_position (AtkComponent *component,
                                                            gint x,
                                                            gint y,
                                                            AtkCoordType coord_type);
gboolean atk_component_set_size (AtkComponent *component,
                                                            gint width,
                                                            gint height);
gdouble atk_component_get_alpha (AtkComponent *component);


# 28 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkdocument.h" 1
# 27 "/usr/include/atk-1.0/atk/atkdocument.h"
# 1 "/usr/include/atk-1.0/atk/atkobject.h" 1
# 28 "/usr/include/atk-1.0/atk/atkdocument.h" 2
# 1 "/usr/include/atk-1.0/atk/atkutil.h" 1
# 29 "/usr/include/atk-1.0/atk/atkdocument.h" 2


# 45 "/usr/include/atk-1.0/atk/atkdocument.h"
typedef struct _AtkDocument AtkDocument;

typedef struct _AtkDocumentIface AtkDocumentIface;

struct _AtkDocumentIface
{
  GTypeInterface parent;
  const gchar* ( *get_document_type) (AtkDocument *document);
  gpointer ( *get_document) (AtkDocument *document);

  const gchar* ( *get_document_locale) (AtkDocument *document);
  AtkAttributeSet * ( *get_document_attributes) (AtkDocument *document);
  const gchar* ( *get_document_attribute_value) (AtkDocument *document,
                                                          const gchar *attribute_name);
  gboolean ( *set_document_attribute) (AtkDocument *document,
                                                    const gchar *attribute_name,
                                                    const gchar *attribute_value);

  AtkFunction pad1;
  AtkFunction pad2;
  AtkFunction pad3;
  AtkFunction pad4;
};

GType atk_document_get_type (void);

const gchar* atk_document_get_document_type (AtkDocument *document);
gpointer atk_document_get_document (AtkDocument *document);
const gchar* atk_document_get_locale (AtkDocument *document);
AtkAttributeSet* atk_document_get_attributes (AtkDocument *document);
const gchar* atk_document_get_attribute_value (AtkDocument *document,
                                                        const gchar *attribute_name);
gboolean atk_document_set_attribute_value (AtkDocument *document,
                                                        const gchar *attribute_name,
                                                        const gchar *attribute_value);


# 29 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkeditabletext.h" 1
# 27 "/usr/include/atk-1.0/atk/atkeditabletext.h"
# 1 "/usr/include/atk-1.0/atk/atkobject.h" 1
# 28 "/usr/include/atk-1.0/atk/atkeditabletext.h" 2
# 1 "/usr/include/atk-1.0/atk/atktext.h" 1
# 28 "/usr/include/atk-1.0/atk/atktext.h"
# 1 "/usr/include/atk-1.0/atk/atkobject.h" 1
# 29 "/usr/include/atk-1.0/atk/atktext.h" 2
# 1 "/usr/include/atk-1.0/atk/atkutil.h" 1
# 30 "/usr/include/atk-1.0/atk/atktext.h" 2


# 67 "/usr/include/atk-1.0/atk/atktext.h"
typedef enum
{
  ATK_TEXT_ATTR_INVALID = 0,
  ATK_TEXT_ATTR_LEFT_MARGIN,
  ATK_TEXT_ATTR_RIGHT_MARGIN,
  ATK_TEXT_ATTR_INDENT,
  ATK_TEXT_ATTR_INVISIBLE,
  ATK_TEXT_ATTR_EDITABLE,
  ATK_TEXT_ATTR_PIXELS_ABOVE_LINES,
  ATK_TEXT_ATTR_PIXELS_BELOW_LINES,
  ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP,
  ATK_TEXT_ATTR_BG_FULL_HEIGHT,
  ATK_TEXT_ATTR_RISE,
  ATK_TEXT_ATTR_UNDERLINE,
  ATK_TEXT_ATTR_STRIKETHROUGH,
  ATK_TEXT_ATTR_SIZE,
  ATK_TEXT_ATTR_SCALE,
  ATK_TEXT_ATTR_WEIGHT,
  ATK_TEXT_ATTR_LANGUAGE,
  ATK_TEXT_ATTR_FAMILY_NAME,
  ATK_TEXT_ATTR_BG_COLOR,
  ATK_TEXT_ATTR_FG_COLOR,
  ATK_TEXT_ATTR_BG_STIPPLE,
  ATK_TEXT_ATTR_FG_STIPPLE,
  ATK_TEXT_ATTR_WRAP_MODE,
  ATK_TEXT_ATTR_DIRECTION,
  ATK_TEXT_ATTR_JUSTIFICATION,
  ATK_TEXT_ATTR_STRETCH,
  ATK_TEXT_ATTR_VARIANT,
  ATK_TEXT_ATTR_STYLE,
  ATK_TEXT_ATTR_LAST_DEFINED
} AtkTextAttribute;

AtkTextAttribute atk_text_attribute_register (const gchar *name);
# 110 "/usr/include/atk-1.0/atk/atktext.h"
typedef struct _AtkText AtkText;

typedef struct _AtkTextIface AtkTextIface;
# 130 "/usr/include/atk-1.0/atk/atktext.h"
typedef enum {
  ATK_TEXT_BOUNDARY_CHAR,
  ATK_TEXT_BOUNDARY_WORD_START,
  ATK_TEXT_BOUNDARY_WORD_END,
  ATK_TEXT_BOUNDARY_SENTENCE_START,
  ATK_TEXT_BOUNDARY_SENTENCE_END,
  ATK_TEXT_BOUNDARY_LINE_START,
  ATK_TEXT_BOUNDARY_LINE_END
} AtkTextBoundary;
# 150 "/usr/include/atk-1.0/atk/atktext.h"
typedef struct _AtkTextRectangle AtkTextRectangle;

struct _AtkTextRectangle {
  gint x;
  gint y;
  gint width;
  gint height;
};
# 168 "/usr/include/atk-1.0/atk/atktext.h"
typedef struct _AtkTextRange AtkTextRange;

struct _AtkTextRange {
  AtkTextRectangle bounds;
  gint start_offset;
  gint end_offset;
  gchar* content;
};
# 186 "/usr/include/atk-1.0/atk/atktext.h"
typedef enum {
    ATK_TEXT_CLIP_NONE,
    ATK_TEXT_CLIP_MIN,
    ATK_TEXT_CLIP_MAX,
    ATK_TEXT_CLIP_BOTH
} AtkTextClipType;

struct _AtkTextIface
{
  GTypeInterface parent;

  gchar* (* get_text) (AtkText *text,
                                                   gint start_offset,
                                                   gint end_offset);
  gchar* (* get_text_after_offset) (AtkText *text,
                                                   gint offset,
                                                   AtkTextBoundary boundary_type,
         gint *start_offset,
         gint *end_offset);
  gchar* (* get_text_at_offset) (AtkText *text,
                                                   gint offset,
                                                   AtkTextBoundary boundary_type,
         gint *start_offset,
         gint *end_offset);
  gunichar (* get_character_at_offset) (AtkText *text,
                                                   gint offset);
  gchar* (* get_text_before_offset) (AtkText *text,
                                                   gint offset,
                                                   AtkTextBoundary boundary_type,
          gint *start_offset,
         gint *end_offset);
  gint (* get_caret_offset) (AtkText *text);
  AtkAttributeSet* (* get_run_attributes) (AtkText *text,
         gint offset,
         gint *start_offset,
         gint *end_offset);
  AtkAttributeSet* (* get_default_attributes) (AtkText *text);
  void (* get_character_extents) (AtkText *text,
                                                   gint offset,
                                                   gint *x,
                                                   gint *y,
                                                   gint *width,
                                                   gint *height,
                                                   AtkCoordType coords);
  gint (* get_character_count) (AtkText *text);
  gint (* get_offset_at_point) (AtkText *text,
                                                   gint x,
                                                   gint y,
                                                   AtkCoordType coords);
  gint (* get_n_selections) (AtkText *text);
  gchar* (* get_selection) (AtkText *text,
         gint selection_num,
         gint *start_offset,
         gint *end_offset);
  gboolean (* add_selection) (AtkText *text,
         gint start_offset,
         gint end_offset);
  gboolean (* remove_selection) (AtkText *text,
         gint selection_num);
  gboolean (* set_selection) (AtkText *text,
         gint selection_num,
         gint start_offset,
         gint end_offset);
  gboolean (* set_caret_offset) (AtkText *text,
                                                   gint offset);




  void (* text_changed) (AtkText *text,
                                                   gint position,
                                                   gint length);
  void (* text_caret_moved) (AtkText *text,
                                                   gint location);
  void (* text_selection_changed) (AtkText *text);

  void (* text_attributes_changed) (AtkText *text);


  void (* get_range_extents) (AtkText *text,
                                                   gint start_offset,
                                                   gint end_offset,
                                                   AtkCoordType coord_type,
                                                   AtkTextRectangle *rect);

  AtkTextRange** (* get_bounded_ranges) (AtkText *text,
                                                   AtkTextRectangle *rect,
                                                   AtkCoordType coord_type,
                                                   AtkTextClipType x_clip_type,
                                                   AtkTextClipType y_clip_type);


  AtkFunction pad4;
};

GType atk_text_get_type (void);
# 291 "/usr/include/atk-1.0/atk/atktext.h"
gchar* atk_text_get_text (AtkText *text,
                                                           gint start_offset,
                                                           gint end_offset);
gunichar atk_text_get_character_at_offset (AtkText *text,
                                                           gint offset);
gchar* atk_text_get_text_after_offset (AtkText *text,
                                                           gint offset,
                                                           AtkTextBoundary boundary_type,
          gint *start_offset,
          gint *end_offset);
gchar* atk_text_get_text_at_offset (AtkText *text,
                                                           gint offset,
                                                           AtkTextBoundary boundary_type,
          gint *start_offset,
          gint *end_offset);
gchar* atk_text_get_text_before_offset (AtkText *text,
                                                           gint offset,
                                                           AtkTextBoundary boundary_type,
          gint *start_offset,
          gint *end_offset);
gint atk_text_get_caret_offset (AtkText *text);
void atk_text_get_character_extents (AtkText *text,
                                                           gint offset,
                                                           gint *x,
                                                           gint *y,
                                                           gint *width,
                                                           gint *height,
                                                           AtkCoordType coords);
AtkAttributeSet* atk_text_get_run_attributes (AtkText *text,
                 gint offset,
                 gint *start_offset,
                 gint *end_offset);
AtkAttributeSet* atk_text_get_default_attributes (AtkText *text);
gint atk_text_get_character_count (AtkText *text);
gint atk_text_get_offset_at_point (AtkText *text,
                                                           gint x,
                                                           gint y,
                                                           AtkCoordType coords);
gint atk_text_get_n_selections (AtkText *text);
gchar* atk_text_get_selection (AtkText *text,
          gint selection_num,
          gint *start_offset,
          gint *end_offset);
gboolean atk_text_add_selection (AtkText *text,
          gint start_offset,
          gint end_offset);
gboolean atk_text_remove_selection (AtkText *text,
          gint selection_num);
gboolean atk_text_set_selection (AtkText *text,
          gint selection_num,
          gint start_offset,
          gint end_offset);
gboolean atk_text_set_caret_offset (AtkText *text,
                                                           gint offset);
void atk_text_get_range_extents (AtkText *text,

                                                           gint start_offset,
                                                           gint end_offset,
                                                           AtkCoordType coord_type,
                                                           AtkTextRectangle *rect);
AtkTextRange** atk_text_get_bounded_ranges (AtkText *text,
                                                           AtkTextRectangle *rect,
                                                           AtkCoordType coord_type,
                                                           AtkTextClipType x_clip_type,
                                                           AtkTextClipType y_clip_type);
void atk_text_free_ranges (AtkTextRange **ranges);
void atk_attribute_set_free (AtkAttributeSet *attrib_set);
const gchar* atk_text_attribute_get_name (AtkTextAttribute attr);
AtkTextAttribute atk_text_attribute_for_name (const gchar *name);
const gchar* atk_text_attribute_get_value (AtkTextAttribute attr,
                                                           gint index_);


# 29 "/usr/include/atk-1.0/atk/atkeditabletext.h" 2


# 44 "/usr/include/atk-1.0/atk/atkeditabletext.h"
typedef struct _AtkEditableText AtkEditableText;

typedef struct _AtkEditableTextIface AtkEditableTextIface;

struct _AtkEditableTextIface
{
  GTypeInterface parent_interface;

  gboolean (* set_run_attributes) (AtkEditableText *text,
                                   AtkAttributeSet *attrib_set,
                                   gint start_offset,
        gint end_offset);
  void (* set_text_contents) (AtkEditableText *text,
                                   const gchar *string);
  void (* insert_text) (AtkEditableText *text,
                                   const gchar *string,
                                   gint length,
                                   gint *position);
  void (* copy_text) (AtkEditableText *text,
                                   gint start_pos,
                                   gint end_pos);
  void (* cut_text) (AtkEditableText *text,
                                   gint start_pos,
                                   gint end_pos);
  void (* delete_text) (AtkEditableText *text,
                                   gint start_pos,
                                   gint end_pos);
  void (* paste_text) (AtkEditableText *text,
                                   gint position);

  AtkFunction pad1;
  AtkFunction pad2;
};
GType atk_editable_text_get_type (void);


gboolean atk_editable_text_set_run_attributes (AtkEditableText *text,
                                               AtkAttributeSet *attrib_set,
                                               gint start_offset,
             gint end_offset);
void atk_editable_text_set_text_contents (AtkEditableText *text,
                                             const gchar *string);
void atk_editable_text_insert_text (AtkEditableText *text,
                                             const gchar *string,
                                             gint length,
                                             gint *position);
void atk_editable_text_copy_text (AtkEditableText *text,
                                             gint start_pos,
                                             gint end_pos);
void atk_editable_text_cut_text (AtkEditableText *text,
                                             gint start_pos,
                                             gint end_pos);
void atk_editable_text_delete_text (AtkEditableText *text,
                                             gint start_pos,
                                             gint end_pos);
void atk_editable_text_paste_text (AtkEditableText *text,
                                             gint position);


# 30 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkgobjectaccessible.h" 1
# 27 "/usr/include/atk-1.0/atk/atkgobjectaccessible.h"
# 1 "/usr/include/atk-1.0/atk/atk.h" 1
# 28 "/usr/include/atk-1.0/atk/atkgobjectaccessible.h" 2


# 42 "/usr/include/atk-1.0/atk/atkgobjectaccessible.h"
typedef struct _AtkGObjectAccessible AtkGObjectAccessible;
typedef struct _AtkGObjectAccessibleClass AtkGObjectAccessibleClass;

struct _AtkGObjectAccessible
{
  AtkObject parent;
};

GType atk_gobject_accessible_get_type (void);

struct _AtkGObjectAccessibleClass
{
  AtkObjectClass parent_class;

  AtkFunction pad1;
  AtkFunction pad2;
};

AtkObject *atk_gobject_accessible_for_object (GObject *obj);
GObject *atk_gobject_accessible_get_object (AtkGObjectAccessible *obj);


# 31 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkhyperlink.h" 1
# 27 "/usr/include/atk-1.0/atk/atkhyperlink.h"
# 1 "/usr/include/atk-1.0/atk/atkaction.h" 1
# 28 "/usr/include/atk-1.0/atk/atkhyperlink.h" 2


# 43 "/usr/include/atk-1.0/atk/atkhyperlink.h"
typedef enum
{
  ATK_HYPERLINK_IS_INLINE = 1 << 0
} AtkHyperlinkStateFlags;
# 55 "/usr/include/atk-1.0/atk/atkhyperlink.h"
typedef struct _AtkHyperlink AtkHyperlink;
typedef struct _AtkHyperlinkClass AtkHyperlinkClass;

struct _AtkHyperlink
{
  GObject parent;
};

struct _AtkHyperlinkClass
{
  GObjectClass parent;

  gchar* (* get_uri) (AtkHyperlink *link_,
                                            gint i);
  AtkObject* (* get_object) (AtkHyperlink *link_,
                                            gint i);
  gint (* get_end_index) (AtkHyperlink *link_);
  gint (* get_start_index) (AtkHyperlink *link_);
  gboolean (* is_valid) (AtkHyperlink *link_);
  gint (* get_n_anchors) (AtkHyperlink *link_);
  guint (* link_state) (AtkHyperlink *link_);
  gboolean (* is_selected_link) (AtkHyperlink *link_);


  void ( *link_activated) (AtkHyperlink *link_);
  AtkFunction pad1;
};

GType atk_hyperlink_get_type (void);

gchar* atk_hyperlink_get_uri (AtkHyperlink *link_,
                                                     gint i);

AtkObject* atk_hyperlink_get_object (AtkHyperlink *link_,
                                                     gint i);

gint atk_hyperlink_get_end_index (AtkHyperlink *link_);

gint atk_hyperlink_get_start_index (AtkHyperlink *link_);

gboolean atk_hyperlink_is_valid (AtkHyperlink *link_);

gboolean atk_hyperlink_is_inline (AtkHyperlink *link_);

gint atk_hyperlink_get_n_anchors (AtkHyperlink *link_);

gboolean atk_hyperlink_is_selected_link (AtkHyperlink *link_);



# 32 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkhyperlinkimpl.h" 1
# 27 "/usr/include/atk-1.0/atk/atkhyperlinkimpl.h"
# 1 "/usr/include/atk-1.0/atk/atkobject.h" 1
# 28 "/usr/include/atk-1.0/atk/atkhyperlinkimpl.h" 2
# 1 "/usr/include/atk-1.0/atk/atkhyperlink.h" 1
# 29 "/usr/include/atk-1.0/atk/atkhyperlinkimpl.h" 2


# 56 "/usr/include/atk-1.0/atk/atkhyperlinkimpl.h"
typedef struct _AtkHyperlinkImpl AtkHyperlinkImpl;

typedef struct _AtkHyperlinkImplIface AtkHyperlinkImplIface;

struct _AtkHyperlinkImplIface
{
  GTypeInterface parent;

  AtkHyperlink* (* get_hyperlink) (AtkHyperlinkImpl *impl);

  AtkFunction pad1;
};

GType atk_hyperlink_impl_get_type (void);

AtkHyperlink *atk_hyperlink_impl_get_hyperlink (AtkHyperlinkImpl *obj);


# 33 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkhypertext.h" 1
# 27 "/usr/include/atk-1.0/atk/atkhypertext.h"
# 1 "/usr/include/atk-1.0/atk/atkobject.h" 1
# 28 "/usr/include/atk-1.0/atk/atkhypertext.h" 2
# 1 "/usr/include/atk-1.0/atk/atkhyperlink.h" 1
# 29 "/usr/include/atk-1.0/atk/atkhypertext.h" 2


# 44 "/usr/include/atk-1.0/atk/atkhypertext.h"
typedef struct _AtkHypertext AtkHypertext;

typedef struct _AtkHypertextIface AtkHypertextIface;

struct _AtkHypertextIface
{
  GTypeInterface parent;

  AtkHyperlink*(* get_link) (AtkHypertext *hypertext,
                                             gint link_index);
  gint (* get_n_links) (AtkHypertext *hypertext);
  gint (* get_link_index) (AtkHypertext *hypertext,
                                             gint char_index);




  void (* link_selected) (AtkHypertext *hypertext,
                                             gint link_index);

  AtkFunction pad1;
  AtkFunction pad2;
  AtkFunction pad3;
};
GType atk_hypertext_get_type (void);

AtkHyperlink* atk_hypertext_get_link (AtkHypertext *hypertext,
                                            gint link_index);
gint atk_hypertext_get_n_links (AtkHypertext *hypertext);
gint atk_hypertext_get_link_index (AtkHypertext *hypertext,
                                            gint char_index);


# 34 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkimage.h" 1
# 27 "/usr/include/atk-1.0/atk/atkimage.h"
# 1 "/usr/include/atk-1.0/atk/atkobject.h" 1
# 28 "/usr/include/atk-1.0/atk/atkimage.h" 2
# 1 "/usr/include/atk-1.0/atk/atkutil.h" 1
# 29 "/usr/include/atk-1.0/atk/atkimage.h" 2


# 45 "/usr/include/atk-1.0/atk/atkimage.h"
typedef struct _AtkImage AtkImage;

typedef struct _AtkImageIface AtkImageIface;

struct _AtkImageIface
{
  GTypeInterface parent;
  void ( *get_image_position) (AtkImage *image,
                                                   gint *x,
                       gint *y,
                                  AtkCoordType coord_type);
  const gchar* ( *get_image_description) (AtkImage *image);
  void ( *get_image_size) (AtkImage *image,
                                                   gint *width,
                                                   gint *height);
  gboolean ( *set_image_description) (AtkImage *image,
                                                   const gchar *description);
  const gchar* ( *get_image_locale) (AtkImage *image);

  AtkFunction pad1;

};

GType atk_image_get_type (void);

const gchar* atk_image_get_image_description (AtkImage *image);

void atk_image_get_image_size (AtkImage *image,
                                          gint *width,
                                          gint *height);

gboolean atk_image_set_image_description (AtkImage *image,
                                          const gchar *description);
void atk_image_get_image_position (AtkImage *image,
                                          gint *x,
       gint *y,
           AtkCoordType coord_type);

const gchar* atk_image_get_image_locale (AtkImage *image);


# 35 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atknoopobject.h" 1
# 27 "/usr/include/atk-1.0/atk/atknoopobject.h"

# 36 "/usr/include/atk-1.0/atk/atknoopobject.h"
typedef struct _AtkNoOpObject AtkNoOpObject;
typedef struct _AtkNoOpObjectClass AtkNoOpObjectClass;

struct _AtkNoOpObject
{
  AtkObject parent;
};

GType atk_no_op_object_get_type (void);

struct _AtkNoOpObjectClass
{
  AtkObjectClass parent_class;
};

AtkObject *atk_no_op_object_new (GObject *obj);


# 36 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atknoopobjectfactory.h" 1
# 27 "/usr/include/atk-1.0/atk/atknoopobjectfactory.h"
# 1 "/usr/include/atk-1.0/atk/atkobjectfactory.h" 1
# 28 "/usr/include/atk-1.0/atk/atkobjectfactory.h"
# 1 "/usr/include/atk-1.0/atk/atkobject.h" 1
# 29 "/usr/include/atk-1.0/atk/atkobjectfactory.h" 2


# 39 "/usr/include/atk-1.0/atk/atkobjectfactory.h"
typedef struct _AtkObjectFactory AtkObjectFactory;
typedef struct _AtkObjectFactoryClass AtkObjectFactoryClass;

struct _AtkObjectFactory
{
  GObject parent;
};

struct _AtkObjectFactoryClass
{
  GObjectClass parent_class;

  AtkObject* (* create_accessible) (GObject *obj);
  void (* invalidate) (AtkObjectFactory *factory);
  GType (* get_accessible_type) (void);

  AtkFunction pad1;
  AtkFunction pad2;
};

GType atk_object_factory_get_type(void);

AtkObject* atk_object_factory_create_accessible (AtkObjectFactory *factory, GObject *obj);
void atk_object_factory_invalidate (AtkObjectFactory *factory);
GType atk_object_factory_get_accessible_type (AtkObjectFactory *factory);


# 28 "/usr/include/atk-1.0/atk/atknoopobjectfactory.h" 2


# 38 "/usr/include/atk-1.0/atk/atknoopobjectfactory.h"
typedef struct _AtkNoOpObjectFactory AtkNoOpObjectFactory;
typedef struct _AtkNoOpObjectFactoryClass AtkNoOpObjectFactoryClass;

struct _AtkNoOpObjectFactory
{
  AtkObjectFactory parent;
};

struct _AtkNoOpObjectFactoryClass
{
  AtkObjectFactoryClass parent_class;
};

GType atk_no_op_object_factory_get_type(void);

AtkObjectFactory *atk_no_op_object_factory_new(void);


# 37 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkobjectfactory.h" 1
# 38 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkregistry.h" 1
# 28 "/usr/include/atk-1.0/atk/atkregistry.h"
# 1 "/usr/include/atk-1.0/atk/atkobjectfactory.h" 1
# 29 "/usr/include/atk-1.0/atk/atkregistry.h" 2


# 39 "/usr/include/atk-1.0/atk/atkregistry.h"
struct _AtkRegistry
{
  GObject parent;
  GHashTable *factory_type_registry;
  GHashTable *factory_singleton_cache;
};

struct _AtkRegistryClass
{
  GObjectClass parent_class;
};

typedef struct _AtkRegistry AtkRegistry;
typedef struct _AtkRegistryClass AtkRegistryClass;


GType atk_registry_get_type (void);
void atk_registry_set_factory_type (AtkRegistry *registry,
                                                 GType type,
                                                 GType factory_type);
GType atk_registry_get_factory_type (AtkRegistry *registry,
       GType type);
AtkObjectFactory* atk_registry_get_factory (AtkRegistry *registry,
                                                 GType type);

AtkRegistry* atk_get_default_registry (void);


# 39 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkrelation.h" 1
# 27 "/usr/include/atk-1.0/atk/atkrelation.h"



# 1 "/usr/include/atk-1.0/atk/atkrelationtype.h" 1
# 31 "/usr/include/atk-1.0/atk/atkrelation.h" 2
# 45 "/usr/include/atk-1.0/atk/atkrelation.h"
typedef struct _AtkRelation AtkRelation;
typedef struct _AtkRelationClass AtkRelationClass;

struct _AtkRelation
{
  GObject parent;

  GPtrArray *target;
  AtkRelationType relationship;
};

struct _AtkRelationClass
{
  GObjectClass parent;
};

GType atk_relation_get_type (void);

AtkRelationType atk_relation_type_register (const gchar *name);
const gchar* atk_relation_type_get_name (AtkRelationType type);
AtkRelationType atk_relation_type_for_name (const gchar *name);





AtkRelation* atk_relation_new (AtkObject **targets,
                                                       gint n_targets,
                                                       AtkRelationType relationship);



AtkRelationType atk_relation_get_relation_type (AtkRelation *relation);



GPtrArray* atk_relation_get_target (AtkRelation *relation);
void atk_relation_add_target (AtkRelation *relation,
                                                       AtkObject *target);
gboolean atk_relation_remove_target (AtkRelation *relation,
                                                       AtkObject *target);


# 40 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkrelationset.h" 1
# 27 "/usr/include/atk-1.0/atk/atkrelationset.h"



# 1 "/usr/include/atk-1.0/atk/atkobject.h" 1
# 31 "/usr/include/atk-1.0/atk/atkrelationset.h" 2
# 1 "/usr/include/atk-1.0/atk/atkrelation.h" 1
# 32 "/usr/include/atk-1.0/atk/atkrelationset.h" 2
# 40 "/usr/include/atk-1.0/atk/atkrelationset.h"
typedef struct _AtkRelationSetClass AtkRelationSetClass;


struct _AtkRelationSet
{
  GObject parent;

  GPtrArray *relations;
};

struct _AtkRelationSetClass
{
  GObjectClass parent;

  AtkFunction pad1;
  AtkFunction pad2;
};

GType atk_relation_set_get_type (void);

AtkRelationSet* atk_relation_set_new (void);
gboolean atk_relation_set_contains (AtkRelationSet *set,
                                                       AtkRelationType relationship);
void atk_relation_set_remove (AtkRelationSet *set,
                                                       AtkRelation *relation);
void atk_relation_set_add (AtkRelationSet *set,
                                                       AtkRelation *relation);
gint atk_relation_set_get_n_relations (AtkRelationSet *set);
AtkRelation* atk_relation_set_get_relation (AtkRelationSet *set,
                                                       gint i);
AtkRelation* atk_relation_set_get_relation_by_type (AtkRelationSet *set,
                                                       AtkRelationType relationship);
void atk_relation_set_add_relation_by_type (AtkRelationSet *set,
                                                       AtkRelationType relationship,
                                                       AtkObject *target);


# 41 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkrelationtype.h" 1
# 42 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkselection.h" 1
# 27 "/usr/include/atk-1.0/atk/atkselection.h"
# 1 "/usr/include/atk-1.0/atk/atkobject.h" 1
# 28 "/usr/include/atk-1.0/atk/atkselection.h" 2


# 45 "/usr/include/atk-1.0/atk/atkselection.h"
typedef struct _AtkSelection AtkSelection;

typedef struct _AtkSelectionIface AtkSelectionIface;

struct _AtkSelectionIface
{
  GTypeInterface parent;

  gboolean (* add_selection) (AtkSelection *selection,
                                         gint i);
  gboolean (* clear_selection) (AtkSelection *selection);
  AtkObject* (* ref_selection) (AtkSelection *selection,
                                         gint i);
  gint (* get_selection_count) (AtkSelection *selection);
  gboolean (* is_child_selected) (AtkSelection *selection,
                                         gint i);
  gboolean (* remove_selection) (AtkSelection *selection,
                                         gint i);
  gboolean (* select_all_selection) (AtkSelection *selection);



  void (*selection_changed) (AtkSelection *selection);

  AtkFunction pad1;
  AtkFunction pad2;
};

GType atk_selection_get_type (void);

gboolean atk_selection_add_selection (AtkSelection *selection,
                                                 gint i);

gboolean atk_selection_clear_selection (AtkSelection *selection);

AtkObject* atk_selection_ref_selection (AtkSelection *selection,
                                                 gint i);

gint atk_selection_get_selection_count (AtkSelection *selection);

gboolean atk_selection_is_child_selected (AtkSelection *selection,
                                                 gint i);

gboolean atk_selection_remove_selection (AtkSelection *selection,
                                                 gint i);

gboolean atk_selection_select_all_selection (AtkSelection *selection);


# 43 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkstate.h" 1
# 44 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkstateset.h" 1
# 28 "/usr/include/atk-1.0/atk/atkstateset.h"
# 1 "/usr/include/atk-1.0/atk/atkobject.h" 1
# 29 "/usr/include/atk-1.0/atk/atkstateset.h" 2
# 1 "/usr/include/atk-1.0/atk/atkstate.h" 1
# 30 "/usr/include/atk-1.0/atk/atkstateset.h" 2


# 40 "/usr/include/atk-1.0/atk/atkstateset.h"
typedef struct _AtkStateSetClass AtkStateSetClass;


struct _AtkStateSet
{
  GObject parent;

};

struct _AtkStateSetClass
{
  GObjectClass parent;
};

GType atk_state_set_get_type (void);

AtkStateSet* atk_state_set_new (void);
gboolean atk_state_set_is_empty (AtkStateSet *set);
gboolean atk_state_set_add_state (AtkStateSet *set,
                                                 AtkStateType type);
void atk_state_set_add_states (AtkStateSet *set,
                                                 AtkStateType *types,
                                                 gint n_types);
void atk_state_set_clear_states (AtkStateSet *set);
gboolean atk_state_set_contains_state (AtkStateSet *set,
                                                 AtkStateType type);
gboolean atk_state_set_contains_states (AtkStateSet *set,
                                                 AtkStateType *types,
                                                 gint n_types);
gboolean atk_state_set_remove_state (AtkStateSet *set,
                                                 AtkStateType type);
AtkStateSet* atk_state_set_and_sets (AtkStateSet *set,
                                                 AtkStateSet *compare_set);
AtkStateSet* atk_state_set_or_sets (AtkStateSet *set,
                                                 AtkStateSet *compare_set);
AtkStateSet* atk_state_set_xor_sets (AtkStateSet *set,
                                                 AtkStateSet *compare_set);


# 45 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkstreamablecontent.h" 1
# 27 "/usr/include/atk-1.0/atk/atkstreamablecontent.h"
# 1 "/usr/include/atk-1.0/atk/atkobject.h" 1
# 28 "/usr/include/atk-1.0/atk/atkstreamablecontent.h" 2


# 38 "/usr/include/atk-1.0/atk/atkstreamablecontent.h"
typedef struct _AtkStreamableContent AtkStreamableContent;

typedef struct _AtkStreamableContentIface AtkStreamableContentIface;

struct _AtkStreamableContentIface
{
  GTypeInterface parent;




  gint (* get_n_mime_types) (AtkStreamableContent *streamable);
# 61 "/usr/include/atk-1.0/atk/atkstreamablecontent.h"
  const gchar* (* get_mime_type) (AtkStreamableContent *streamable,
                                                   gint i);






  GIOChannel* (* get_stream) (AtkStreamableContent *streamable,
                                                   const gchar *mime_type);
# 83 "/usr/include/atk-1.0/atk/atkstreamablecontent.h"
    const gchar* (* get_uri) (AtkStreamableContent *streamable,
                                                   const gchar *mime_type);


  AtkFunction pad1;
  AtkFunction pad2;
  AtkFunction pad3;
};
GType atk_streamable_content_get_type (void);

gint atk_streamable_content_get_n_mime_types (AtkStreamableContent *streamable);

const gchar* atk_streamable_content_get_mime_type (AtkStreamableContent *streamable,
                                                                gint i);
GIOChannel* atk_streamable_content_get_stream (AtkStreamableContent *streamable,
                                                                 const gchar *mime_type);

gchar* atk_streamable_content_get_uri (AtkStreamableContent *streamable,
                                                                 const gchar *mime_type);


# 46 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atktable.h" 1
# 27 "/usr/include/atk-1.0/atk/atktable.h"
# 1 "/usr/include/atk-1.0/atk/atkobject.h" 1
# 28 "/usr/include/atk-1.0/atk/atktable.h" 2


# 44 "/usr/include/atk-1.0/atk/atktable.h"
typedef struct _AtkTable AtkTable;

typedef struct _AtkTableIface AtkTableIface;

struct _AtkTableIface
{
  GTypeInterface parent;

  AtkObject* (* ref_at) (AtkTable *table,
                                                  gint row,
                                                  gint column);
  gint (* get_index_at) (AtkTable *table,
                                                  gint row,
                                                  gint column);
  gint (* get_column_at_index) (AtkTable *table,
                                                  gint index_);
  gint (* get_row_at_index) (AtkTable *table,
                                                  gint index_);
  gint (* get_n_columns) (AtkTable *table);
  gint (* get_n_rows) (AtkTable *table);
  gint (* get_column_extent_at) (AtkTable *table,
                                                  gint row,
                                                  gint column);
  gint (* get_row_extent_at) (AtkTable *table,
                                                  gint row,
                                                  gint column);
  AtkObject*
                    (* get_caption) (AtkTable *table);
  const gchar*
                    (* get_column_description) (AtkTable *table,
                                                  gint column);
  AtkObject* (* get_column_header) (AtkTable *table,
        gint column);
  const gchar*
                    (* get_row_description) (AtkTable *table,
                                                  gint row);
  AtkObject* (* get_row_header) (AtkTable *table,
        gint row);
  AtkObject* (* get_summary) (AtkTable *table);
  void (* set_caption) (AtkTable *table,
                                                  AtkObject *caption);
  void (* set_column_description) (AtkTable *table,
                                                  gint column,
                                                  const gchar *description);
  void (* set_column_header) (AtkTable *table,
                                                  gint column,
                                                  AtkObject *header);
  void (* set_row_description) (AtkTable *table,
                                                  gint row,
                                                  const gchar *description);
  void (* set_row_header) (AtkTable *table,
                                                  gint row,
                                                  AtkObject *header);
  void (* set_summary) (AtkTable *table,
                                                  AtkObject *accessible);
  gint (* get_selected_columns) (AtkTable *table,
                                                  gint **selected);
  gint (* get_selected_rows) (AtkTable *table,
                                                  gint **selected);
  gboolean (* is_column_selected) (AtkTable *table,
                                                  gint column);
  gboolean (* is_row_selected) (AtkTable *table,
                                                  gint row);
  gboolean (* is_selected) (AtkTable *table,
                                                  gint row,
                                                  gint column);
  gboolean (* add_row_selection) (AtkTable *table,
                                                  gint row);
  gboolean (* remove_row_selection) (AtkTable *table,
                                                  gint row);
  gboolean (* add_column_selection) (AtkTable *table,
                                                  gint column);
  gboolean (* remove_column_selection) (AtkTable *table,
                                                  gint column);




  void (* row_inserted) (AtkTable *table,
                                                  gint row,
                                                  gint num_inserted);
  void (* column_inserted) (AtkTable *table,
                                                  gint column,
                                                  gint num_inserted);
  void (* row_deleted) (AtkTable *table,
                                                  gint row,
                                                  gint num_deleted);
  void (* column_deleted) (AtkTable *table,
                                                  gint column,
                                                  gint num_deleted);
  void (* row_reordered) (AtkTable *table);
  void (* column_reordered) (AtkTable *table);
  void (* model_changed) (AtkTable *table);

  AtkFunction pad1;
  AtkFunction pad2;
  AtkFunction pad3;
  AtkFunction pad4;
};

GType atk_table_get_type (void);

AtkObject* atk_table_ref_at (AtkTable *table,
                                                  gint row,
                                                  gint column);
gint atk_table_get_index_at (AtkTable *table,
                                                  gint row,
                                                  gint column);
gint atk_table_get_column_at_index (AtkTable *table,
                                                  gint index_);
gint atk_table_get_row_at_index (AtkTable *table,
                                                  gint index_);
gint atk_table_get_n_columns (AtkTable *table);
gint atk_table_get_n_rows (AtkTable *table);
gint atk_table_get_column_extent_at (AtkTable *table,
                                                  gint row,
                                                  gint column);
gint atk_table_get_row_extent_at (AtkTable *table,
                                                  gint row,
                                                  gint column);
AtkObject*
                  atk_table_get_caption (AtkTable *table);
const gchar*
                  atk_table_get_column_description (AtkTable *table,
                                                  gint column);
AtkObject* atk_table_get_column_header (AtkTable *table,
        gint column);
const gchar*
                  atk_table_get_row_description (AtkTable *table,
                                                  gint row);
AtkObject* atk_table_get_row_header (AtkTable *table,
        gint row);
AtkObject* atk_table_get_summary (AtkTable *table);
void atk_table_set_caption (AtkTable *table,
                                                  AtkObject *caption);
void atk_table_set_column_description
                                                 (AtkTable *table,
                                                  gint column,
                                                  const gchar *description);
void atk_table_set_column_header (AtkTable *table,
                                                  gint column,
                                                  AtkObject *header);
void atk_table_set_row_description (AtkTable *table,
                                                  gint row,
                                                  const gchar *description);
void atk_table_set_row_header (AtkTable *table,
                                                  gint row,
                                                  AtkObject *header);
void atk_table_set_summary (AtkTable *table,
                                                  AtkObject *accessible);
gint atk_table_get_selected_columns (AtkTable *table,
                                                  gint **selected);
gint atk_table_get_selected_rows (AtkTable *table,
                                                  gint **selected);
gboolean atk_table_is_column_selected (AtkTable *table,
                                                  gint column);
gboolean atk_table_is_row_selected (AtkTable *table,
                                                  gint row);
gboolean atk_table_is_selected (AtkTable *table,
                                                  gint row,
                                                  gint column);
gboolean atk_table_add_row_selection (AtkTable *table,
                                                  gint row);
gboolean atk_table_remove_row_selection (AtkTable *table,
                                                  gint row);
gboolean atk_table_add_column_selection (AtkTable *table,
                                                  gint column);
gboolean atk_table_remove_column_selection
                                                 (AtkTable *table,
                                                  gint column);


# 47 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atktext.h" 1
# 48 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkutil.h" 1
# 49 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkmisc.h" 1
# 29 "/usr/include/atk-1.0/atk/atkmisc.h"

# 41 "/usr/include/atk-1.0/atk/atkmisc.h"
typedef struct _AtkMisc AtkMisc;
typedef struct _AtkMiscClass AtkMiscClass;


struct _AtkMisc
{
  GObject parent;
};






extern AtkMisc *atk_misc_instance;

struct _AtkMiscClass
{
   GObjectClass parent;
   void (* threads_enter) (AtkMisc *misc);
   void (* threads_leave) (AtkMisc *misc);
   gpointer vfuncs[32];
};
GType atk_misc_get_type (void);







void atk_misc_threads_enter (AtkMisc *misc);







void atk_misc_threads_leave (AtkMisc *misc);




const AtkMisc *atk_misc_get_instance (void);


# 50 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkvalue.h" 1
# 27 "/usr/include/atk-1.0/atk/atkvalue.h"
# 1 "/usr/include/atk-1.0/atk/atkobject.h" 1
# 28 "/usr/include/atk-1.0/atk/atkvalue.h" 2


# 46 "/usr/include/atk-1.0/atk/atkvalue.h"
typedef struct _AtkValue AtkValue;

typedef struct _AtkValueIface AtkValueIface;

struct _AtkValueIface
{
  GTypeInterface parent;

  void (* get_current_value) (AtkValue *obj,
                                  GValue *value);
  void (* get_maximum_value) (AtkValue *obj,
                                  GValue *value);
  void (* get_minimum_value) (AtkValue *obj,
                                  GValue *value);
  gboolean (* set_current_value) (AtkValue *obj,
                                  const GValue *value);
  void (* get_minimum_increment) (AtkValue *obj,
          GValue *value);
  AtkFunction pad1;
};

GType atk_value_get_type (void);

void atk_value_get_current_value (AtkValue *obj,
                                       GValue *value);


void atk_value_get_maximum_value (AtkValue *obj,
                                       GValue *value);

void atk_value_get_minimum_value (AtkValue *obj,
                                       GValue *value);

gboolean atk_value_set_current_value (AtkValue *obj,
                                       const GValue *value);

void atk_value_get_minimum_increment (AtkValue *obj,
        GValue *value);








# 51 "/usr/include/atk-1.0/atk/atk.h" 2
# 41 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 2






typedef enum
{
  GTK_TOPLEVEL = 1 << 4,
  GTK_NO_WINDOW = 1 << 5,
  GTK_REALIZED = 1 << 6,
  GTK_MAPPED = 1 << 7,
  GTK_VISIBLE = 1 << 8,
  GTK_SENSITIVE = 1 << 9,
  GTK_PARENT_SENSITIVE = 1 << 10,
  GTK_CAN_FOCUS = 1 << 11,
  GTK_HAS_FOCUS = 1 << 12,




  GTK_CAN_DEFAULT = 1 << 13,




  GTK_HAS_DEFAULT = 1 << 14,

  GTK_HAS_GRAB = 1 << 15,
  GTK_RC_STYLE = 1 << 16,
  GTK_COMPOSITE_CHILD = 1 << 17,
  GTK_NO_REPARENT = 1 << 18,
  GTK_APP_PAINTABLE = 1 << 19,




  GTK_RECEIVES_DEFAULT = 1 << 20,

  GTK_DOUBLE_BUFFERED = 1 << 21,
  GTK_NO_SHOW_ALL = 1 << 22
} GtkWidgetFlags;


typedef enum
{
  GTK_WIDGET_HELP_TOOLTIP,
  GTK_WIDGET_HELP_WHATS_THIS
} GtkWidgetHelpType;
# 140 "/usr/include/gtk-2.0/gtk/gtkwidget.h"
typedef struct _GtkRequisition GtkRequisition;
typedef GdkRectangle GtkAllocation;
typedef struct _GtkSelectionData GtkSelectionData;
typedef struct _GtkWidgetClass GtkWidgetClass;
typedef struct _GtkWidgetAuxInfo GtkWidgetAuxInfo;
typedef struct _GtkWidgetShapeInfo GtkWidgetShapeInfo;
typedef struct _GtkClipboard GtkClipboard;
typedef struct _GtkTooltip GtkTooltip;
typedef struct _GtkWindow GtkWindow;
typedef void (*GtkCallback) (GtkWidget *widget,
     gpointer data);




struct _GtkRequisition
{
  gint width;
  gint height;
};






struct _GtkWidget
{






  GtkObject object;






  guint16 private_flags;




  guint8 state;







  guint8 saved_state;







  gchar *name;
# 211 "/usr/include/gtk-2.0/gtk/gtkwidget.h"
  GtkStyle *style;



  GtkRequisition requisition;



  GtkAllocation allocation;





  GdkWindow *window;



  GtkWidget *parent;
};

struct _GtkWidgetClass
{






  GtkObjectClass parent_class;



  guint activate_signal;

  guint set_scroll_adjustments_signal;




  void (*dispatch_child_properties_changed) (GtkWidget *widget,
          guint n_pspecs,
          GParamSpec **pspecs);


  void (* show) (GtkWidget *widget);
  void (* show_all) (GtkWidget *widget);
  void (* hide) (GtkWidget *widget);
  void (* hide_all) (GtkWidget *widget);
  void (* map) (GtkWidget *widget);
  void (* unmap) (GtkWidget *widget);
  void (* realize) (GtkWidget *widget);
  void (* unrealize) (GtkWidget *widget);
  void (* size_request) (GtkWidget *widget,
    GtkRequisition *requisition);
  void (* size_allocate) (GtkWidget *widget,
    GtkAllocation *allocation);
  void (* state_changed) (GtkWidget *widget,
    GtkStateType previous_state);
  void (* parent_set) (GtkWidget *widget,
    GtkWidget *previous_parent);
  void (* hierarchy_changed) (GtkWidget *widget,
    GtkWidget *previous_toplevel);
  void (* style_set) (GtkWidget *widget,
    GtkStyle *previous_style);
  void (* direction_changed) (GtkWidget *widget,
    GtkTextDirection previous_direction);
  void (* grab_notify) (GtkWidget *widget,
    gboolean was_grabbed);
  void (* child_notify) (GtkWidget *widget,
    GParamSpec *pspec);


  gboolean (* mnemonic_activate) (GtkWidget *widget,
      gboolean group_cycling);


  void (* grab_focus) (GtkWidget *widget);
  gboolean (* focus) (GtkWidget *widget,
                                GtkDirectionType direction);


  gboolean (* event) (GtkWidget *widget,
      GdkEvent *event);
  gboolean (* button_press_event) (GtkWidget *widget,
      GdkEventButton *event);
  gboolean (* button_release_event) (GtkWidget *widget,
      GdkEventButton *event);
  gboolean (* scroll_event) (GtkWidget *widget,
      GdkEventScroll *event);
  gboolean (* motion_notify_event) (GtkWidget *widget,
      GdkEventMotion *event);
  gboolean (* delete_event) (GtkWidget *widget,
      GdkEventAny *event);
  gboolean (* destroy_event) (GtkWidget *widget,
      GdkEventAny *event);
  gboolean (* expose_event) (GtkWidget *widget,
      GdkEventExpose *event);
  gboolean (* key_press_event) (GtkWidget *widget,
      GdkEventKey *event);
  gboolean (* key_release_event) (GtkWidget *widget,
      GdkEventKey *event);
  gboolean (* enter_notify_event) (GtkWidget *widget,
      GdkEventCrossing *event);
  gboolean (* leave_notify_event) (GtkWidget *widget,
      GdkEventCrossing *event);
  gboolean (* configure_event) (GtkWidget *widget,
      GdkEventConfigure *event);
  gboolean (* focus_in_event) (GtkWidget *widget,
      GdkEventFocus *event);
  gboolean (* focus_out_event) (GtkWidget *widget,
      GdkEventFocus *event);
  gboolean (* map_event) (GtkWidget *widget,
      GdkEventAny *event);
  gboolean (* unmap_event) (GtkWidget *widget,
      GdkEventAny *event);
  gboolean (* property_notify_event) (GtkWidget *widget,
      GdkEventProperty *event);
  gboolean (* selection_clear_event) (GtkWidget *widget,
      GdkEventSelection *event);
  gboolean (* selection_request_event) (GtkWidget *widget,
      GdkEventSelection *event);
  gboolean (* selection_notify_event) (GtkWidget *widget,
      GdkEventSelection *event);
  gboolean (* proximity_in_event) (GtkWidget *widget,
      GdkEventProximity *event);
  gboolean (* proximity_out_event) (GtkWidget *widget,
      GdkEventProximity *event);
  gboolean (* visibility_notify_event) (GtkWidget *widget,
      GdkEventVisibility *event);
  gboolean (* client_event) (GtkWidget *widget,
      GdkEventClient *event);
  gboolean (* no_expose_event) (GtkWidget *widget,
      GdkEventAny *event);
  gboolean (* window_state_event) (GtkWidget *widget,
      GdkEventWindowState *event);


  void (* selection_get) (GtkWidget *widget,
        GtkSelectionData *selection_data,
        guint info,
        guint time_);
  void (* selection_received) (GtkWidget *widget,
        GtkSelectionData *selection_data,
        guint time_);


  void (* drag_begin) (GtkWidget *widget,
        GdkDragContext *context);
  void (* drag_end) (GtkWidget *widget,
        GdkDragContext *context);
  void (* drag_data_get) (GtkWidget *widget,
        GdkDragContext *context,
        GtkSelectionData *selection_data,
        guint info,
        guint time_);
  void (* drag_data_delete) (GtkWidget *widget,
        GdkDragContext *context);


  void (* drag_leave) (GtkWidget *widget,
        GdkDragContext *context,
        guint time_);
  gboolean (* drag_motion) (GtkWidget *widget,
        GdkDragContext *context,
        gint x,
        gint y,
        guint time_);
  gboolean (* drag_drop) (GtkWidget *widget,
        GdkDragContext *context,
        gint x,
        gint y,
        guint time_);
  void (* drag_data_received) (GtkWidget *widget,
        GdkDragContext *context,
        gint x,
        gint y,
        GtkSelectionData *selection_data,
        guint info,
        guint time_);


  gboolean (* popup_menu) (GtkWidget *widget);






  gboolean (* show_help) (GtkWidget *widget,
                                    GtkWidgetHelpType help_type);



  AtkObject* (*get_accessible) (GtkWidget *widget);

  void (*screen_changed) (GtkWidget *widget,
                                      GdkScreen *previous_screen);
  gboolean (*can_activate_accel) (GtkWidget *widget,
                                      guint signal_id);


  gboolean (*grab_broken_event) (GtkWidget *widget,
                                 GdkEventGrabBroken *event);

  void (* composited_changed) (GtkWidget *widget);

  gboolean (* query_tooltip) (GtkWidget *widget,
           gint x,
           gint y,
           gboolean keyboard_tooltip,
           GtkTooltip *tooltip);






  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
};

struct _GtkWidgetAuxInfo
{
  gint x;
  gint y;
  gint width;
  gint height;
  guint x_set : 1;
  guint y_set : 1;
};

struct _GtkWidgetShapeInfo
{
  gint16 offset_x;
  gint16 offset_y;
  GdkBitmap *shape_mask;
};

GType gtk_widget_get_type (void) __attribute__((__const__));
GtkWidget* gtk_widget_new (GType type,
        const gchar *first_property_name,
        ...);
void gtk_widget_destroy (GtkWidget *widget);
void gtk_widget_destroyed (GtkWidget *widget,
        GtkWidget **widget_pointer);

GtkWidget* gtk_widget_ref (GtkWidget *widget);
void gtk_widget_unref (GtkWidget *widget);
void gtk_widget_set (GtkWidget *widget,
        const gchar *first_property_name,
        ...) __attribute__((__sentinel__));

void gtk_widget_unparent (GtkWidget *widget);
void gtk_widget_show (GtkWidget *widget);
void gtk_widget_show_now (GtkWidget *widget);
void gtk_widget_hide (GtkWidget *widget);
void gtk_widget_show_all (GtkWidget *widget);
void gtk_widget_hide_all (GtkWidget *widget);
void gtk_widget_set_no_show_all (GtkWidget *widget,
        gboolean no_show_all);
gboolean gtk_widget_get_no_show_all (GtkWidget *widget);
void gtk_widget_map (GtkWidget *widget);
void gtk_widget_unmap (GtkWidget *widget);
void gtk_widget_realize (GtkWidget *widget);
void gtk_widget_unrealize (GtkWidget *widget);


void gtk_widget_queue_draw (GtkWidget *widget);
void gtk_widget_queue_draw_area (GtkWidget *widget,
        gint x,
        gint y,
        gint width,
        gint height);

void gtk_widget_queue_clear (GtkWidget *widget);
void gtk_widget_queue_clear_area (GtkWidget *widget,
        gint x,
        gint y,
        gint width,
        gint height);



void gtk_widget_queue_resize (GtkWidget *widget);
void gtk_widget_queue_resize_no_redraw (GtkWidget *widget);

void gtk_widget_draw (GtkWidget *widget,
        const GdkRectangle *area);

void gtk_widget_size_request (GtkWidget *widget,
        GtkRequisition *requisition);
void gtk_widget_size_allocate (GtkWidget *widget,
        GtkAllocation *allocation);
void gtk_widget_get_child_requisition (GtkWidget *widget,
          GtkRequisition *requisition);
void gtk_widget_add_accelerator (GtkWidget *widget,
        const gchar *accel_signal,
        GtkAccelGroup *accel_group,
        guint accel_key,
        GdkModifierType accel_mods,
        GtkAccelFlags accel_flags);
gboolean gtk_widget_remove_accelerator (GtkWidget *widget,
        GtkAccelGroup *accel_group,
        guint accel_key,
        GdkModifierType accel_mods);
void gtk_widget_set_accel_path (GtkWidget *widget,
        const gchar *accel_path,
        GtkAccelGroup *accel_group);
const gchar* _gtk_widget_get_accel_path (GtkWidget *widget,
        gboolean *locked);
GList* gtk_widget_list_accel_closures (GtkWidget *widget);
gboolean gtk_widget_can_activate_accel (GtkWidget *widget,
                                           guint signal_id);
gboolean gtk_widget_mnemonic_activate (GtkWidget *widget,
        gboolean group_cycling);
gboolean gtk_widget_event (GtkWidget *widget,
        GdkEvent *event);
gint gtk_widget_send_expose (GtkWidget *widget,
        GdkEvent *event);

gboolean gtk_widget_activate (GtkWidget *widget);
gboolean gtk_widget_set_scroll_adjustments (GtkWidget *widget,
           GtkAdjustment *hadjustment,
           GtkAdjustment *vadjustment);

void gtk_widget_reparent (GtkWidget *widget,
        GtkWidget *new_parent);
gboolean gtk_widget_intersect (GtkWidget *widget,
        const GdkRectangle *area,
        GdkRectangle *intersection);
GdkRegion *gtk_widget_region_intersect (GtkWidget *widget,
        const GdkRegion *region);

void gtk_widget_freeze_child_notify (GtkWidget *widget);
void gtk_widget_child_notify (GtkWidget *widget,
        const gchar *child_property);
void gtk_widget_thaw_child_notify (GtkWidget *widget);

gboolean gtk_widget_is_focus (GtkWidget *widget);
void gtk_widget_grab_focus (GtkWidget *widget);
void gtk_widget_grab_default (GtkWidget *widget);

void gtk_widget_set_name (GtkWidget *widget,
        const gchar *name);
const gchar* gtk_widget_get_name (GtkWidget *widget);
void gtk_widget_set_state (GtkWidget *widget,
        GtkStateType state);
void gtk_widget_set_sensitive (GtkWidget *widget,
        gboolean sensitive);
void gtk_widget_set_app_paintable (GtkWidget *widget,
        gboolean app_paintable);
void gtk_widget_set_double_buffered (GtkWidget *widget,
        gboolean double_buffered);
void gtk_widget_set_redraw_on_allocate (GtkWidget *widget,
        gboolean redraw_on_allocate);
void gtk_widget_set_parent (GtkWidget *widget,
        GtkWidget *parent);
GtkWidget * gtk_widget_get_parent (GtkWidget *widget);
void gtk_widget_set_parent_window (GtkWidget *widget,
        GdkWindow *parent_window);
GdkWindow * gtk_widget_get_parent_window (GtkWidget *widget);
void gtk_widget_set_child_visible (GtkWidget *widget,
        gboolean is_visible);
gboolean gtk_widget_get_child_visible (GtkWidget *widget);
GdkWindow* gtk_widget_get_window (GtkWidget *widget);

gboolean gtk_widget_child_focus (GtkWidget *widget,
                                           GtkDirectionType direction);
gboolean gtk_widget_keynav_failed (GtkWidget *widget,
                                           GtkDirectionType direction);
void gtk_widget_error_bell (GtkWidget *widget);

void gtk_widget_set_size_request (GtkWidget *widget,
                                           gint width,
                                           gint height);
void gtk_widget_get_size_request (GtkWidget *widget,
                                           gint *width,
                                           gint *height);

void gtk_widget_set_uposition (GtkWidget *widget,
        gint x,
        gint y);
void gtk_widget_set_usize (GtkWidget *widget,
        gint width,
        gint height);


void gtk_widget_set_events (GtkWidget *widget,
        gint events);
void gtk_widget_add_events (GtkWidget *widget,
        gint events);
void gtk_widget_set_extension_events (GtkWidget *widget,
         GdkExtensionMode mode);

GdkExtensionMode gtk_widget_get_extension_events (GtkWidget *widget);
GtkWidget* gtk_widget_get_toplevel (GtkWidget *widget);
GtkWidget* gtk_widget_get_ancestor (GtkWidget *widget,
      GType widget_type);
GdkColormap* gtk_widget_get_colormap (GtkWidget *widget);
GdkVisual* gtk_widget_get_visual (GtkWidget *widget);

GdkScreen * gtk_widget_get_screen (GtkWidget *widget);
gboolean gtk_widget_has_screen (GtkWidget *widget);
GdkDisplay * gtk_widget_get_display (GtkWidget *widget);
GdkWindow * gtk_widget_get_root_window (GtkWidget *widget);
GtkSettings* gtk_widget_get_settings (GtkWidget *widget);
GtkClipboard *gtk_widget_get_clipboard (GtkWidget *widget,
       GdkAtom selection);
GdkPixmap * gtk_widget_get_snapshot (GtkWidget *widget,
                                          GdkRectangle *clip_rect);
# 632 "/usr/include/gtk-2.0/gtk/gtkwidget.h"
AtkObject* gtk_widget_get_accessible (GtkWidget *widget);







void gtk_widget_set_colormap (GtkWidget *widget,
      GdkColormap *colormap);

gint gtk_widget_get_events (GtkWidget *widget);
void gtk_widget_get_pointer (GtkWidget *widget,
      gint *x,
      gint *y);

gboolean gtk_widget_is_ancestor (GtkWidget *widget,
      GtkWidget *ancestor);

gboolean gtk_widget_translate_coordinates (GtkWidget *src_widget,
            GtkWidget *dest_widget,
            gint src_x,
            gint src_y,
            gint *dest_x,
            gint *dest_y);



gboolean gtk_widget_hide_on_delete (GtkWidget *widget);



void gtk_widget_set_style (GtkWidget *widget,
      GtkStyle *style);
void gtk_widget_ensure_style (GtkWidget *widget);
GtkStyle* gtk_widget_get_style (GtkWidget *widget);

void gtk_widget_modify_style (GtkWidget *widget,
        GtkRcStyle *style);
GtkRcStyle *gtk_widget_get_modifier_style (GtkWidget *widget);
void gtk_widget_modify_fg (GtkWidget *widget,
        GtkStateType state,
        const GdkColor *color);
void gtk_widget_modify_bg (GtkWidget *widget,
        GtkStateType state,
        const GdkColor *color);
void gtk_widget_modify_text (GtkWidget *widget,
        GtkStateType state,
        const GdkColor *color);
void gtk_widget_modify_base (GtkWidget *widget,
        GtkStateType state,
        const GdkColor *color);
void gtk_widget_modify_cursor (GtkWidget *widget,
        const GdkColor *primary,
        const GdkColor *secondary);
void gtk_widget_modify_font (GtkWidget *widget,
        PangoFontDescription *font_desc);






PangoContext *gtk_widget_create_pango_context (GtkWidget *widget);
PangoContext *gtk_widget_get_pango_context (GtkWidget *widget);
PangoLayout *gtk_widget_create_pango_layout (GtkWidget *widget,
            const gchar *text);

GdkPixbuf *gtk_widget_render_icon (GtkWidget *widget,
                                               const gchar *stock_id,
                                               GtkIconSize size,
                                               const gchar *detail);




void gtk_widget_set_composite_name (GtkWidget *widget,
      const gchar *name);
gchar* gtk_widget_get_composite_name (GtkWidget *widget);


void gtk_widget_reset_rc_styles (GtkWidget *widget);





void gtk_widget_push_colormap (GdkColormap *cmap);
void gtk_widget_push_composite_child (void);
void gtk_widget_pop_composite_child (void);
void gtk_widget_pop_colormap (void);



void gtk_widget_class_install_style_property (GtkWidgetClass *klass,
           GParamSpec *pspec);
void gtk_widget_class_install_style_property_parser (GtkWidgetClass *klass,
           GParamSpec *pspec,
           GtkRcPropertyParser parser);
GParamSpec* gtk_widget_class_find_style_property (GtkWidgetClass *klass,
           const gchar *property_name);
GParamSpec** gtk_widget_class_list_style_properties (GtkWidgetClass *klass,
           guint *n_properties);
void gtk_widget_style_get_property (GtkWidget *widget,
        const gchar *property_name,
        GValue *value);
void gtk_widget_style_get_valist (GtkWidget *widget,
        const gchar *first_property_name,
        va_list var_args);
void gtk_widget_style_get (GtkWidget *widget,
        const gchar *first_property_name,
        ...) __attribute__((__sentinel__));




void gtk_widget_set_default_colormap (GdkColormap *colormap);
GtkStyle* gtk_widget_get_default_style (void);

GdkColormap* gtk_widget_get_default_colormap (void);
GdkVisual* gtk_widget_get_default_visual (void);





void gtk_widget_set_direction (GtkWidget *widget,
         GtkTextDirection dir);
GtkTextDirection gtk_widget_get_direction (GtkWidget *widget);

void gtk_widget_set_default_direction (GtkTextDirection dir);
GtkTextDirection gtk_widget_get_default_direction (void);


gboolean gtk_widget_is_composited (GtkWidget *widget);



void gtk_widget_shape_combine_mask (GtkWidget *widget,
         GdkBitmap *shape_mask,
         gint offset_x,
         gint offset_y);
void gtk_widget_input_shape_combine_mask (GtkWidget *widget,
        GdkBitmap *shape_mask,
        gint offset_x,
        gint offset_y);


void gtk_widget_reset_shapes (GtkWidget *widget);




void gtk_widget_path (GtkWidget *widget,
         guint *path_length,
         gchar **path,
         gchar **path_reversed);
void gtk_widget_class_path (GtkWidget *widget,
         guint *path_length,
         gchar **path,
         gchar **path_reversed);

GList* gtk_widget_list_mnemonic_labels (GtkWidget *widget);
void gtk_widget_add_mnemonic_label (GtkWidget *widget,
      GtkWidget *label);
void gtk_widget_remove_mnemonic_label (GtkWidget *widget,
      GtkWidget *label);

void gtk_widget_set_tooltip_window (GtkWidget *widget,
                                                        GtkWindow *custom_window);
GtkWindow *gtk_widget_get_tooltip_window (GtkWidget *widget);
void gtk_widget_trigger_tooltip_query (GtkWidget *widget);
void gtk_widget_set_tooltip_text (GtkWidget *widget,
                                             const gchar *text);
gchar * gtk_widget_get_tooltip_text (GtkWidget *widget);
void gtk_widget_set_tooltip_markup (GtkWidget *widget,
                                             const gchar *markup);
gchar * gtk_widget_get_tooltip_markup (GtkWidget *widget);
void gtk_widget_set_has_tooltip (GtkWidget *widget,
          gboolean has_tooltip);
gboolean gtk_widget_get_has_tooltip (GtkWidget *widget);

GType gtk_requisition_get_type (void) __attribute__((__const__));
GtkRequisition *gtk_requisition_copy (const GtkRequisition *requisition);
void gtk_requisition_free (GtkRequisition *requisition);






void _gtk_widget_grab_notify (GtkWidget *widget,
                 gboolean was_grabbed);

GtkWidgetAuxInfo *_gtk_widget_get_aux_info (GtkWidget *widget,
          gboolean create);
void _gtk_widget_propagate_hierarchy_changed (GtkWidget *widget,
          GtkWidget *previous_toplevel);
void _gtk_widget_propagate_screen_changed (GtkWidget *widget,
          GdkScreen *previous_screen);
void _gtk_widget_propagate_composited_changed (GtkWidget *widget);

void _gtk_widget_set_pointer_window (GtkWidget *widget,
         GdkWindow *pointer_window);
GdkWindow *_gtk_widget_get_pointer_window (GtkWidget *widget);
gboolean _gtk_widget_is_pointer_widget (GtkWidget *widget);
void _gtk_widget_synthesize_crossing (GtkWidget *from,
         GtkWidget *to,
         GdkCrossingMode mode);

GdkColormap* _gtk_widget_peek_colormap (void);


# 36 "/usr/include/gtk-2.0/gtk/gtkcontainer.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkadjustment.h" 1
# 37 "/usr/include/gtk-2.0/gtk/gtkcontainer.h" 2



# 51 "/usr/include/gtk-2.0/gtk/gtkcontainer.h"
typedef struct _GtkContainer GtkContainer;
typedef struct _GtkContainerClass GtkContainerClass;

struct _GtkContainer
{
  GtkWidget widget;

  GtkWidget *focus_child;

  guint border_width : 16;


  guint need_resize : 1;
  guint resize_mode : 2;
  guint reallocate_redraws : 1;
  guint has_focus_chain : 1;
};

struct _GtkContainerClass
{
  GtkWidgetClass parent_class;

  void (*add) (GtkContainer *container,
     GtkWidget *widget);
  void (*remove) (GtkContainer *container,
     GtkWidget *widget);
  void (*check_resize) (GtkContainer *container);
  void (*forall) (GtkContainer *container,
     gboolean include_internals,
     GtkCallback callback,
     gpointer callback_data);
  void (*set_focus_child) (GtkContainer *container,
     GtkWidget *widget);
  GType (*child_type) (GtkContainer *container);
  gchar* (*composite_name) (GtkContainer *container,
     GtkWidget *child);
  void (*set_child_property) (GtkContainer *container,
     GtkWidget *child,
     guint property_id,
     const GValue *value,
     GParamSpec *pspec);
  void (*get_child_property) (GtkContainer *container,
                                 GtkWidget *child,
     guint property_id,
     GValue *value,
     GParamSpec *pspec);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};



GType gtk_container_get_type (void) __attribute__((__const__));
void gtk_container_set_border_width (GtkContainer *container,
       guint border_width);
guint gtk_container_get_border_width (GtkContainer *container);
void gtk_container_add (GtkContainer *container,
       GtkWidget *widget);
void gtk_container_remove (GtkContainer *container,
       GtkWidget *widget);

void gtk_container_set_resize_mode (GtkContainer *container,
       GtkResizeMode resize_mode);
GtkResizeMode gtk_container_get_resize_mode (GtkContainer *container);

void gtk_container_check_resize (GtkContainer *container);

void gtk_container_foreach (GtkContainer *container,
         GtkCallback callback,
         gpointer callback_data);

void gtk_container_foreach_full (GtkContainer *container,
         GtkCallback callback,
         GtkCallbackMarshal marshal,
         gpointer callback_data,
         GDestroyNotify notify);

GList* gtk_container_get_children (GtkContainer *container);





void gtk_container_propagate_expose (GtkContainer *container,
      GtkWidget *child,
      GdkEventExpose *event);

void gtk_container_set_focus_chain (GtkContainer *container,
                                         GList *focusable_widgets);
gboolean gtk_container_get_focus_chain (GtkContainer *container,
      GList **focusable_widgets);
void gtk_container_unset_focus_chain (GtkContainer *container);



void gtk_container_set_reallocate_redraws (GtkContainer *container,
          gboolean needs_redraws);
void gtk_container_set_focus_child (GtkContainer *container,
         GtkWidget *child);
GtkWidget *
       gtk_container_get_focus_child (GtkContainer *container);
void gtk_container_set_focus_vadjustment (GtkContainer *container,
         GtkAdjustment *adjustment);
GtkAdjustment *gtk_container_get_focus_vadjustment (GtkContainer *container);
void gtk_container_set_focus_hadjustment (GtkContainer *container,
         GtkAdjustment *adjustment);
GtkAdjustment *gtk_container_get_focus_hadjustment (GtkContainer *container);

void gtk_container_resize_children (GtkContainer *container);

GType gtk_container_child_type (GtkContainer *container);


void gtk_container_class_install_child_property (GtkContainerClass *cclass,
        guint property_id,
        GParamSpec *pspec);
GParamSpec* gtk_container_class_find_child_property (GObjectClass *cclass,
        const gchar *property_name);
GParamSpec** gtk_container_class_list_child_properties (GObjectClass *cclass,
        guint *n_properties);
void gtk_container_add_with_properties (GtkContainer *container,
        GtkWidget *widget,
        const gchar *first_prop_name,
        ...) __attribute__((__sentinel__));
void gtk_container_child_set (GtkContainer *container,
        GtkWidget *child,
        const gchar *first_prop_name,
        ...) __attribute__((__sentinel__));
void gtk_container_child_get (GtkContainer *container,
        GtkWidget *child,
        const gchar *first_prop_name,
        ...) __attribute__((__sentinel__));
void gtk_container_child_set_valist (GtkContainer *container,
        GtkWidget *child,
        const gchar *first_property_name,
        va_list var_args);
void gtk_container_child_get_valist (GtkContainer *container,
        GtkWidget *child,
        const gchar *first_property_name,
        va_list var_args);
void gtk_container_child_set_property (GtkContainer *container,
        GtkWidget *child,
        const gchar *property_name,
        const GValue *value);
void gtk_container_child_get_property (GtkContainer *container,
        GtkWidget *child,
        const gchar *property_name,
        GValue *value);





void gtk_container_forall (GtkContainer *container,
           GtkCallback callback,
           gpointer callback_data);


void _gtk_container_queue_resize (GtkContainer *container);
void _gtk_container_clear_resize_widgets (GtkContainer *container);
gchar* _gtk_container_child_composite_name (GtkContainer *container,
           GtkWidget *child);
void _gtk_container_dequeue_resize_handler (GtkContainer *container);
GList *_gtk_container_focus_sort (GtkContainer *container,
           GList *children,
           GtkDirectionType direction,
           GtkWidget *old_focus);






# 36 "/usr/include/gtk-2.0/gtk/gtkbin.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkbin.h"
typedef struct _GtkBin GtkBin;
typedef struct _GtkBinClass GtkBinClass;

struct _GtkBin
{
  GtkContainer container;

  GtkWidget *child;
};

struct _GtkBinClass
{
  GtkContainerClass parent_class;
};


GType gtk_bin_get_type (void) __attribute__((__const__));

GtkWidget *gtk_bin_get_child (GtkBin *bin);


# 37 "/usr/include/gtk-2.0/gtk/gtkwindow.h" 2



# 49 "/usr/include/gtk-2.0/gtk/gtkwindow.h"
typedef struct _GtkWindowClass GtkWindowClass;
typedef struct _GtkWindowGeometryInfo GtkWindowGeometryInfo;
typedef struct _GtkWindowGroup GtkWindowGroup;
typedef struct _GtkWindowGroupClass GtkWindowGroupClass;

struct _GtkWindow
{
  GtkBin bin;

  gchar *title;
  gchar *wmclass_name;
  gchar *wmclass_class;
  gchar *wm_role;

  GtkWidget *focus_widget;
  GtkWidget *default_widget;
  GtkWindow *transient_parent;
  GtkWindowGeometryInfo *geometry_info;
  GdkWindow *frame;
  GtkWindowGroup *group;

  guint16 configure_request_count;
  guint allow_shrink : 1;
  guint allow_grow : 1;
  guint configure_notify_received : 1;






  guint need_default_position : 1;
  guint need_default_size : 1;
  guint position : 3;
  guint type : 4;
  guint has_user_ref_count : 1;
  guint has_focus : 1;

  guint modal : 1;
  guint destroy_with_parent : 1;

  guint has_frame : 1;


  guint iconify_initially : 1;
  guint stick_initially : 1;
  guint maximize_initially : 1;
  guint decorated : 1;

  guint type_hint : 3;


  guint gravity : 5;

  guint is_active : 1;
  guint has_toplevel_focus : 1;

  guint frame_left;
  guint frame_top;
  guint frame_right;
  guint frame_bottom;

  guint keys_changed_handler;

  GdkModifierType mnemonic_modifier;
  GdkScreen *screen;
};

struct _GtkWindowClass
{
  GtkBinClass parent_class;

  void (* set_focus) (GtkWindow *window,
       GtkWidget *focus);
  gboolean (* frame_event) (GtkWindow *window,
       GdkEvent *event);



  void (* activate_focus) (GtkWindow *window);
  void (* activate_default) (GtkWindow *window);





  void (* move_focus) (GtkWindow *window,
                                        GtkDirectionType direction);

  void (*keys_changed) (GtkWindow *window);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
# 154 "/usr/include/gtk-2.0/gtk/gtkwindow.h"
struct _GtkWindowGroup
{
  GObject parent_instance;

  GSList *grabs;
};

struct _GtkWindowGroupClass
{
  GObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};







GType gtk_window_get_type (void) __attribute__((__const__));
GtkWidget* gtk_window_new (GtkWindowType type);
void gtk_window_set_title (GtkWindow *window,
      const gchar *title);
const gchar *gtk_window_get_title (GtkWindow *window);
void gtk_window_set_wmclass (GtkWindow *window,
      const gchar *wmclass_name,
      const gchar *wmclass_class);
void gtk_window_set_role (GtkWindow *window,
                                                const gchar *role);
void gtk_window_set_startup_id (GtkWindow *window,
                                                const gchar *startup_id);
const gchar *gtk_window_get_role (GtkWindow *window);
void gtk_window_add_accel_group (GtkWindow *window,
      GtkAccelGroup *accel_group);
void gtk_window_remove_accel_group (GtkWindow *window,
      GtkAccelGroup *accel_group);
void gtk_window_set_position (GtkWindow *window,
      GtkWindowPosition position);
gboolean gtk_window_activate_focus (GtkWindow *window);
void gtk_window_set_focus (GtkWindow *window,
      GtkWidget *focus);
GtkWidget *gtk_window_get_focus (GtkWindow *window);
void gtk_window_set_default (GtkWindow *window,
      GtkWidget *default_widget);
GtkWidget *gtk_window_get_default_widget (GtkWindow *window);
gboolean gtk_window_activate_default (GtkWindow *window);

void gtk_window_set_transient_for (GtkWindow *window,
      GtkWindow *parent);
GtkWindow *gtk_window_get_transient_for (GtkWindow *window);
void gtk_window_set_opacity (GtkWindow *window,
      gdouble opacity);
gdouble gtk_window_get_opacity (GtkWindow *window);
void gtk_window_set_type_hint (GtkWindow *window,
      GdkWindowTypeHint hint);
GdkWindowTypeHint gtk_window_get_type_hint (GtkWindow *window);
void gtk_window_set_skip_taskbar_hint (GtkWindow *window,
                                                gboolean setting);
gboolean gtk_window_get_skip_taskbar_hint (GtkWindow *window);
void gtk_window_set_skip_pager_hint (GtkWindow *window,
                                                gboolean setting);
gboolean gtk_window_get_skip_pager_hint (GtkWindow *window);
void gtk_window_set_urgency_hint (GtkWindow *window,
                                                gboolean setting);
gboolean gtk_window_get_urgency_hint (GtkWindow *window);
void gtk_window_set_accept_focus (GtkWindow *window,
                                                gboolean setting);
gboolean gtk_window_get_accept_focus (GtkWindow *window);
void gtk_window_set_focus_on_map (GtkWindow *window,
                                                gboolean setting);
gboolean gtk_window_get_focus_on_map (GtkWindow *window);
void gtk_window_set_destroy_with_parent (GtkWindow *window,
                                                gboolean setting);
gboolean gtk_window_get_destroy_with_parent (GtkWindow *window);

void gtk_window_set_resizable (GtkWindow *window,
                                                gboolean resizable);
gboolean gtk_window_get_resizable (GtkWindow *window);

void gtk_window_set_gravity (GtkWindow *window,
                                                GdkGravity gravity);
GdkGravity gtk_window_get_gravity (GtkWindow *window);


void gtk_window_set_geometry_hints (GtkWindow *window,
      GtkWidget *geometry_widget,
      GdkGeometry *geometry,
      GdkWindowHints geom_mask);

void gtk_window_set_screen (GtkWindow *window,
      GdkScreen *screen);
GdkScreen* gtk_window_get_screen (GtkWindow *window);

gboolean gtk_window_is_active (GtkWindow *window);
gboolean gtk_window_has_toplevel_focus (GtkWindow *window);




void gtk_window_set_has_frame (GtkWindow *window,
      gboolean setting);
gboolean gtk_window_get_has_frame (GtkWindow *window);
void gtk_window_set_frame_dimensions (GtkWindow *window,
      gint left,
      gint top,
      gint right,
      gint bottom);
void gtk_window_get_frame_dimensions (GtkWindow *window,
      gint *left,
      gint *top,
      gint *right,
      gint *bottom);
void gtk_window_set_decorated (GtkWindow *window,
                                                gboolean setting);
gboolean gtk_window_get_decorated (GtkWindow *window);
void gtk_window_set_deletable (GtkWindow *window,
                                                gboolean setting);
gboolean gtk_window_get_deletable (GtkWindow *window);

void gtk_window_set_icon_list (GtkWindow *window,
                                                    GList *list);
GList* gtk_window_get_icon_list (GtkWindow *window);
void gtk_window_set_icon (GtkWindow *window,
                                                    GdkPixbuf *icon);
void gtk_window_set_icon_name (GtkWindow *window,
          const gchar *name);
gboolean gtk_window_set_icon_from_file (GtkWindow *window,
          const gchar *filename,
          GError **err);
GdkPixbuf* gtk_window_get_icon (GtkWindow *window);
const
gchar *gtk_window_get_icon_name (GtkWindow *window);
void gtk_window_set_default_icon_list (GList *list);
GList* gtk_window_get_default_icon_list (void);
void gtk_window_set_default_icon (GdkPixbuf *icon);
void gtk_window_set_default_icon_name (const gchar *name);
const
gchar *gtk_window_get_default_icon_name (void);
gboolean gtk_window_set_default_icon_from_file (const gchar *filename,
          GError **err);

void gtk_window_set_auto_startup_notification (gboolean setting);


void gtk_window_set_modal (GtkWindow *window,
          gboolean modal);
gboolean gtk_window_get_modal (GtkWindow *window);
GList* gtk_window_list_toplevels (void);

void gtk_window_add_mnemonic (GtkWindow *window,
        guint keyval,
        GtkWidget *target);
void gtk_window_remove_mnemonic (GtkWindow *window,
        guint keyval,
        GtkWidget *target);
gboolean gtk_window_mnemonic_activate (GtkWindow *window,
        guint keyval,
        GdkModifierType modifier);
void gtk_window_set_mnemonic_modifier (GtkWindow *window,
        GdkModifierType modifier);
GdkModifierType gtk_window_get_mnemonic_modifier (GtkWindow *window);

gboolean gtk_window_activate_key (GtkWindow *window,
        GdkEventKey *event);
gboolean gtk_window_propagate_key_event (GtkWindow *window,
        GdkEventKey *event);

void gtk_window_present (GtkWindow *window);
void gtk_window_present_with_time (GtkWindow *window,
            guint32 timestamp);
void gtk_window_iconify (GtkWindow *window);
void gtk_window_deiconify (GtkWindow *window);
void gtk_window_stick (GtkWindow *window);
void gtk_window_unstick (GtkWindow *window);
void gtk_window_maximize (GtkWindow *window);
void gtk_window_unmaximize (GtkWindow *window);
void gtk_window_fullscreen (GtkWindow *window);
void gtk_window_unfullscreen (GtkWindow *window);
void gtk_window_set_keep_above (GtkWindow *window, gboolean setting);
void gtk_window_set_keep_below (GtkWindow *window, gboolean setting);

void gtk_window_begin_resize_drag (GtkWindow *window,
                                   GdkWindowEdge edge,
                                   gint button,
                                   gint root_x,
                                   gint root_y,
                                   guint32 timestamp);
void gtk_window_begin_move_drag (GtkWindow *window,
                                   gint button,
                                   gint root_x,
                                   gint root_y,
                                   guint32 timestamp);


void gtk_window_set_policy (GtkWindow *window,
      gint allow_shrink,
      gint allow_grow,
      gint auto_shrink);






void gtk_window_set_default_size (GtkWindow *window,
                                      gint width,
                                      gint height);
void gtk_window_get_default_size (GtkWindow *window,
                                      gint *width,
                                      gint *height);
void gtk_window_resize (GtkWindow *window,
                                      gint width,
                                      gint height);
void gtk_window_get_size (GtkWindow *window,
                                      gint *width,
                                      gint *height);
void gtk_window_move (GtkWindow *window,
                                      gint x,
                                      gint y);
void gtk_window_get_position (GtkWindow *window,
                                      gint *root_x,
                                      gint *root_y);
gboolean gtk_window_parse_geometry (GtkWindow *window,
                                      const gchar *geometry);
GtkWindowGroup *gtk_window_get_group (GtkWindow *window);


void gtk_window_reshow_with_initial_size (GtkWindow *window);



GType gtk_window_group_get_type (void) __attribute__((__const__));

GtkWindowGroup * gtk_window_group_new (void);
void gtk_window_group_add_window (GtkWindowGroup *window_group,
       GtkWindow *window);
void gtk_window_group_remove_window (GtkWindowGroup *window_group,
              GtkWindow *window);
GList * gtk_window_group_list_windows (GtkWindowGroup *window_group);



void _gtk_window_internal_set_focus (GtkWindow *window,
      GtkWidget *focus);
void gtk_window_remove_embedded_xid (GtkWindow *window,
      GdkNativeWindow xid);
void gtk_window_add_embedded_xid (GtkWindow *window,
      GdkNativeWindow xid);
void _gtk_window_reposition (GtkWindow *window,
      gint x,
      gint y);
void _gtk_window_constrain_size (GtkWindow *window,
      gint width,
      gint height,
      gint *new_width,
      gint *new_height);
GtkWidget *_gtk_window_group_get_current_grab (GtkWindowGroup *window_group);

void _gtk_window_set_has_toplevel_focus (GtkWindow *window,
          gboolean has_toplevel_focus);
void _gtk_window_unset_focus_and_default (GtkWindow *window,
           GtkWidget *widget);

void _gtk_window_set_is_active (GtkWindow *window,
          gboolean is_active);

void _gtk_window_set_is_toplevel (GtkWindow *window,
          gboolean is_toplevel);

typedef void (*GtkWindowKeysForeachFunc) (GtkWindow *window,
       guint keyval,
       GdkModifierType modifiers,
       gboolean is_mnemonic,
       gpointer data);

void _gtk_window_keys_foreach (GtkWindow *window,
          GtkWindowKeysForeachFunc func,
          gpointer func_data);


gboolean _gtk_window_query_nonaccels (GtkWindow *window,
       guint accel_key,
       GdkModifierType accel_mods);


# 36 "/usr/include/gtk-2.0/gtk/gtkdialog.h" 2





typedef enum
{
  GTK_DIALOG_MODAL = 1 << 0,
  GTK_DIALOG_DESTROY_WITH_PARENT = 1 << 1,
  GTK_DIALOG_NO_SEPARATOR = 1 << 2
} GtkDialogFlags;
# 56 "/usr/include/gtk-2.0/gtk/gtkdialog.h"
typedef enum
{



  GTK_RESPONSE_NONE = -1,





  GTK_RESPONSE_REJECT = -2,
  GTK_RESPONSE_ACCEPT = -3,


  GTK_RESPONSE_DELETE_EVENT = -4,




  GTK_RESPONSE_OK = -5,
  GTK_RESPONSE_CANCEL = -6,
  GTK_RESPONSE_CLOSE = -7,
  GTK_RESPONSE_YES = -8,
  GTK_RESPONSE_NO = -9,
  GTK_RESPONSE_APPLY = -10,
  GTK_RESPONSE_HELP = -11
} GtkResponseType;
# 94 "/usr/include/gtk-2.0/gtk/gtkdialog.h"
typedef struct _GtkDialog GtkDialog;
typedef struct _GtkDialogClass GtkDialogClass;

struct _GtkDialog
{
  GtkWindow window;


  GtkWidget *vbox;
  GtkWidget *action_area;


  GtkWidget *separator;
};

struct _GtkDialogClass
{
  GtkWindowClass parent_class;

  void (* response) (GtkDialog *dialog, gint response_id);



  void (* close) (GtkDialog *dialog);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_dialog_get_type (void) __attribute__((__const__));
GtkWidget* gtk_dialog_new (void);

GtkWidget* gtk_dialog_new_with_buttons (const gchar *title,
                                        GtkWindow *parent,
                                        GtkDialogFlags flags,
                                        const gchar *first_button_text,
                                        ...);

void gtk_dialog_add_action_widget (GtkDialog *dialog,
                                         GtkWidget *child,
                                         gint response_id);
GtkWidget* gtk_dialog_add_button (GtkDialog *dialog,
                                         const gchar *button_text,
                                         gint response_id);
void gtk_dialog_add_buttons (GtkDialog *dialog,
                                         const gchar *first_button_text,
                                         ...) __attribute__((__sentinel__));

void gtk_dialog_set_response_sensitive (GtkDialog *dialog,
                                        gint response_id,
                                        gboolean setting);
void gtk_dialog_set_default_response (GtkDialog *dialog,
                                        gint response_id);
gint gtk_dialog_get_response_for_widget (GtkDialog *dialog,
      GtkWidget *widget);

void gtk_dialog_set_has_separator (GtkDialog *dialog,
                                       gboolean setting);
gboolean gtk_dialog_get_has_separator (GtkDialog *dialog);

gboolean gtk_alternative_dialog_button_order (GdkScreen *screen);
void gtk_dialog_set_alternative_button_order (GtkDialog *dialog,
        gint first_response_id,
        ...);
void gtk_dialog_set_alternative_button_order_from_array (GtkDialog *dialog,
                                                             gint n_params,
                                                             gint *new_order);


void gtk_dialog_response (GtkDialog *dialog,
                                    gint response_id);


gint gtk_dialog_run (GtkDialog *dialog);

GtkWidget * gtk_dialog_get_action_area (GtkDialog *dialog);
GtkWidget * gtk_dialog_get_content_area (GtkDialog *dialog);


void _gtk_dialog_set_ignore_separator (GtkDialog *dialog,
           gboolean ignore_separator);


# 33 "/usr/include/gtk-2.0/gtk/gtkaboutdialog.h" 2


# 43 "/usr/include/gtk-2.0/gtk/gtkaboutdialog.h"
typedef struct _GtkAboutDialog GtkAboutDialog;
typedef struct _GtkAboutDialogClass GtkAboutDialogClass;

struct _GtkAboutDialog
{
  GtkDialog parent_instance;


  gpointer private_data;
};

struct _GtkAboutDialogClass
{
  GtkDialogClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_about_dialog_get_type (void) __attribute__((__const__));
GtkWidget *gtk_about_dialog_new (void);
void gtk_show_about_dialog (GtkWindow *parent,
        const gchar *first_property_name,
        ...) __attribute__((__sentinel__));


const gchar *gtk_about_dialog_get_name (GtkAboutDialog *about);
void gtk_about_dialog_set_name (GtkAboutDialog *about,
        const gchar *name);

const gchar *gtk_about_dialog_get_program_name (GtkAboutDialog *about);
void gtk_about_dialog_set_program_name (GtkAboutDialog *about,
        const gchar *name);
const gchar *gtk_about_dialog_get_version (GtkAboutDialog *about);
void gtk_about_dialog_set_version (GtkAboutDialog *about,
        const gchar *version);
const gchar *gtk_about_dialog_get_copyright (GtkAboutDialog *about);
void gtk_about_dialog_set_copyright (GtkAboutDialog *about,
        const gchar *copyright);
const gchar *gtk_about_dialog_get_comments (GtkAboutDialog *about);
void gtk_about_dialog_set_comments (GtkAboutDialog *about,
        const gchar *comments);
const gchar *gtk_about_dialog_get_license (GtkAboutDialog *about);
void gtk_about_dialog_set_license (GtkAboutDialog *about,
        const gchar *license);

gboolean gtk_about_dialog_get_wrap_license (GtkAboutDialog *about);
void gtk_about_dialog_set_wrap_license (GtkAboutDialog *about,
                                                                gboolean wrap_license);

const gchar *gtk_about_dialog_get_website (GtkAboutDialog *about);
void gtk_about_dialog_set_website (GtkAboutDialog *about,
        const gchar *website);
const gchar *gtk_about_dialog_get_website_label (GtkAboutDialog *about);
void gtk_about_dialog_set_website_label (GtkAboutDialog *about,
        const gchar *website_label);
const gchar* const * gtk_about_dialog_get_authors (GtkAboutDialog *about);
void gtk_about_dialog_set_authors (GtkAboutDialog *about,
        const gchar **authors);
const gchar* const * gtk_about_dialog_get_documenters (GtkAboutDialog *about);
void gtk_about_dialog_set_documenters (GtkAboutDialog *about,
        const gchar **documenters);
const gchar* const * gtk_about_dialog_get_artists (GtkAboutDialog *about);
void gtk_about_dialog_set_artists (GtkAboutDialog *about,
        const gchar **artists);
const gchar *gtk_about_dialog_get_translator_credits (GtkAboutDialog *about);
void gtk_about_dialog_set_translator_credits (GtkAboutDialog *about,
        const gchar *translator_credits);
GdkPixbuf *gtk_about_dialog_get_logo (GtkAboutDialog *about);
void gtk_about_dialog_set_logo (GtkAboutDialog *about,
        GdkPixbuf *logo);
const gchar *gtk_about_dialog_get_logo_icon_name (GtkAboutDialog *about);
void gtk_about_dialog_set_logo_icon_name (GtkAboutDialog *about,
        const gchar *icon_name);

typedef void (* GtkAboutDialogActivateLinkFunc) (GtkAboutDialog *about,
       const gchar *link_,
       gpointer data);

GtkAboutDialogActivateLinkFunc gtk_about_dialog_set_email_hook (GtkAboutDialogActivateLinkFunc func,
        gpointer data,
        GDestroyNotify destroy);
GtkAboutDialogActivateLinkFunc gtk_about_dialog_set_url_hook (GtkAboutDialogActivateLinkFunc func,
        gpointer data,
        GDestroyNotify destroy);


# 34 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkaccelgroup.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkaccellabel.h" 1
# 38 "/usr/include/gtk-2.0/gtk/gtkaccellabel.h"
# 1 "/usr/include/gtk-2.0/gtk/gtklabel.h" 1
# 34 "/usr/include/gtk-2.0/gtk/gtklabel.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkmisc.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkmisc.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkmisc.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkmisc.h"
typedef struct _GtkMisc GtkMisc;
typedef struct _GtkMiscClass GtkMiscClass;

struct _GtkMisc
{
  GtkWidget widget;

  gfloat xalign;
  gfloat yalign;

  guint16 xpad;
  guint16 ypad;
};

struct _GtkMiscClass
{
  GtkWidgetClass parent_class;
};


GType gtk_misc_get_type (void) __attribute__((__const__));
void gtk_misc_set_alignment (GtkMisc *misc,
    gfloat xalign,
    gfloat yalign);
void gtk_misc_get_alignment (GtkMisc *misc,
    gfloat *xalign,
    gfloat *yalign);
void gtk_misc_set_padding (GtkMisc *misc,
    gint xpad,
    gint ypad);
void gtk_misc_get_padding (GtkMisc *misc,
    gint *xpad,
    gint *ypad);



# 35 "/usr/include/gtk-2.0/gtk/gtklabel.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkwindow.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtklabel.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkmenu.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkmenu.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkaccelgroup.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkmenu.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkmenushell.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkmenushell.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcontainer.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkmenushell.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkmenushell.h"
typedef struct _GtkMenuShell GtkMenuShell;
typedef struct _GtkMenuShellClass GtkMenuShellClass;

struct _GtkMenuShell
{
  GtkContainer container;

  GList *children;
  GtkWidget *active_menu_item;
  GtkWidget *parent_menu_shell;

  guint button;
  guint32 activate_time;

  guint active : 1;
  guint have_grab : 1;
  guint have_xgrab : 1;
  guint ignore_leave : 1;
  guint menu_flag : 1;
  guint ignore_enter : 1;
};

struct _GtkMenuShellClass
{
  GtkContainerClass parent_class;

  guint submenu_placement : 1;

  void (*deactivate) (GtkMenuShell *menu_shell);
  void (*selection_done) (GtkMenuShell *menu_shell);

  void (*move_current) (GtkMenuShell *menu_shell,
       GtkMenuDirectionType direction);
  void (*activate_current) (GtkMenuShell *menu_shell,
       gboolean force_hide);
  void (*cancel) (GtkMenuShell *menu_shell);
  void (*select_item) (GtkMenuShell *menu_shell,
       GtkWidget *menu_item);
  void (*insert) (GtkMenuShell *menu_shell,
       GtkWidget *child,
       gint position);
  gint (*get_popup_delay) (GtkMenuShell *menu_shell);
  gboolean (*move_selected) (GtkMenuShell *menu_shell,
        gint distance);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
};


GType gtk_menu_shell_get_type (void) __attribute__((__const__));
void gtk_menu_shell_append (GtkMenuShell *menu_shell,
     GtkWidget *child);
void gtk_menu_shell_prepend (GtkMenuShell *menu_shell,
     GtkWidget *child);
void gtk_menu_shell_insert (GtkMenuShell *menu_shell,
     GtkWidget *child,
     gint position);
void gtk_menu_shell_deactivate (GtkMenuShell *menu_shell);
void gtk_menu_shell_select_item (GtkMenuShell *menu_shell,
     GtkWidget *menu_item);
void gtk_menu_shell_deselect (GtkMenuShell *menu_shell);
void gtk_menu_shell_activate_item (GtkMenuShell *menu_shell,
     GtkWidget *menu_item,
     gboolean force_deactivate);
void gtk_menu_shell_select_first (GtkMenuShell *menu_shell,
     gboolean search_sensitive);
void _gtk_menu_shell_select_last (GtkMenuShell *menu_shell,
     gboolean search_sensitive);
void _gtk_menu_shell_activate (GtkMenuShell *menu_shell);
gint _gtk_menu_shell_get_popup_delay (GtkMenuShell *menu_shell);
void gtk_menu_shell_cancel (GtkMenuShell *menu_shell);

void _gtk_menu_shell_add_mnemonic (GtkMenuShell *menu_shell,
                                        guint keyval,
                                        GtkWidget *target);
void _gtk_menu_shell_remove_mnemonic (GtkMenuShell *menu_shell,
                                        guint keyval,
                                        GtkWidget *target);

gboolean gtk_menu_shell_get_take_focus (GtkMenuShell *menu_shell);
void gtk_menu_shell_set_take_focus (GtkMenuShell *menu_shell,
                                        gboolean take_focus);


# 37 "/usr/include/gtk-2.0/gtk/gtkmenu.h" 2



# 49 "/usr/include/gtk-2.0/gtk/gtkmenu.h"
typedef struct _GtkMenu GtkMenu;
typedef struct _GtkMenuClass GtkMenuClass;

typedef void (*GtkMenuPositionFunc) (GtkMenu *menu,
         gint *x,
         gint *y,
         gboolean *push_in,
         gpointer user_data);
typedef void (*GtkMenuDetachFunc) (GtkWidget *attach_widget,
         GtkMenu *menu);

struct _GtkMenu
{
  GtkMenuShell menu_shell;

  GtkWidget *parent_menu_item;
  GtkWidget *old_active_menu_item;

  GtkAccelGroup *accel_group;
  gchar *accel_path;
  GtkMenuPositionFunc position_func;
  gpointer position_func_data;

  guint toggle_size;




  GtkWidget *toplevel;

  GtkWidget *tearoff_window;
  GtkWidget *tearoff_hbox;
  GtkWidget *tearoff_scrollbar;
  GtkAdjustment *tearoff_adjustment;

  GdkWindow *view_window;
  GdkWindow *bin_window;

  gint scroll_offset;
  gint saved_scroll_offset;
  gint scroll_step;
  guint timeout_id;




  GdkRegion *navigation_region;
  guint navigation_timeout;

  guint needs_destruction_ref_count : 1;
  guint torn_off : 1;



  guint tearoff_active : 1;

  guint scroll_fast : 1;

  guint upper_arrow_visible : 1;
  guint lower_arrow_visible : 1;
  guint upper_arrow_prelight : 1;
  guint lower_arrow_prelight : 1;
};

struct _GtkMenuClass
{
  GtkMenuShellClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_menu_get_type (void) __attribute__((__const__));
GtkWidget* gtk_menu_new (void);


void gtk_menu_popup (GtkMenu *menu,
        GtkWidget *parent_menu_shell,
        GtkWidget *parent_menu_item,
        GtkMenuPositionFunc func,
        gpointer data,
        guint button,
        guint32 activate_time);




void gtk_menu_reposition (GtkMenu *menu);

void gtk_menu_popdown (GtkMenu *menu);




GtkWidget* gtk_menu_get_active (GtkMenu *menu);
void gtk_menu_set_active (GtkMenu *menu,
        guint index_);




void gtk_menu_set_accel_group (GtkMenu *menu,
        GtkAccelGroup *accel_group);
GtkAccelGroup* gtk_menu_get_accel_group (GtkMenu *menu);
void gtk_menu_set_accel_path (GtkMenu *menu,
        const gchar *accel_path);
const gchar* gtk_menu_get_accel_path (GtkMenu *menu);





void gtk_menu_attach_to_widget (GtkMenu *menu,
        GtkWidget *attach_widget,
        GtkMenuDetachFunc detacher);
void gtk_menu_detach (GtkMenu *menu);





GtkWidget* gtk_menu_get_attach_widget (GtkMenu *menu);

void gtk_menu_set_tearoff_state (GtkMenu *menu,
        gboolean torn_off);
gboolean gtk_menu_get_tearoff_state (GtkMenu *menu);




void gtk_menu_set_title (GtkMenu *menu,
        const gchar *title);
const gchar *gtk_menu_get_title (GtkMenu *menu);

void gtk_menu_reorder_child (GtkMenu *menu,
                                           GtkWidget *child,
                                           gint position);

void gtk_menu_set_screen (GtkMenu *menu,
        GdkScreen *screen);

void gtk_menu_attach (GtkMenu *menu,
                                           GtkWidget *child,
                                           guint left_attach,
                                           guint right_attach,
                                           guint top_attach,
                                           guint bottom_attach);

void gtk_menu_set_monitor (GtkMenu *menu,
                                           gint monitor_num);
gint gtk_menu_get_monitor (GtkMenu *menu);
GList* gtk_menu_get_for_attach_widget (GtkWidget *widget);








# 37 "/usr/include/gtk-2.0/gtk/gtklabel.h" 2



# 49 "/usr/include/gtk-2.0/gtk/gtklabel.h"
typedef struct _GtkLabel GtkLabel;
typedef struct _GtkLabelClass GtkLabelClass;

typedef struct _GtkLabelSelectionInfo GtkLabelSelectionInfo;

struct _GtkLabel
{
  GtkMisc misc;


  gchar *label;
  guint jtype : 2;
  guint wrap : 1;
  guint use_underline : 1;
  guint use_markup : 1;
  guint ellipsize : 3;
  guint single_line_mode : 1;
  guint have_transform : 1;
  guint in_click : 1;
  guint wrap_mode : 3;
  guint pattern_set : 1;

  guint mnemonic_keyval;

  gchar *text;
  PangoAttrList *attrs;
  PangoAttrList *effective_attrs;

  PangoLayout *layout;

  GtkWidget *mnemonic_widget;
  GtkWindow *mnemonic_window;

  GtkLabelSelectionInfo *select_info;
};

struct _GtkLabelClass
{
  GtkMiscClass parent_class;

  void (* move_cursor) (GtkLabel *label,
       GtkMovementStep step,
       gint count,
       gboolean extend_selection);
  void (* copy_clipboard) (GtkLabel *label);


  void (* populate_popup) (GtkLabel *label,
                             GtkMenu *menu);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_label_get_type (void) __attribute__((__const__));
GtkWidget* gtk_label_new (const gchar *str);
GtkWidget* gtk_label_new_with_mnemonic (const gchar *str);
void gtk_label_set_text (GtkLabel *label,
         const gchar *str);
const gchar* gtk_label_get_text (GtkLabel *label);
void gtk_label_set_attributes (GtkLabel *label,
         PangoAttrList *attrs);
PangoAttrList *gtk_label_get_attributes (GtkLabel *label);
void gtk_label_set_label (GtkLabel *label,
         const gchar *str);
const gchar *gtk_label_get_label (GtkLabel *label);
void gtk_label_set_markup (GtkLabel *label,
         const gchar *str);
void gtk_label_set_use_markup (GtkLabel *label,
         gboolean setting);
gboolean gtk_label_get_use_markup (GtkLabel *label);
void gtk_label_set_use_underline (GtkLabel *label,
         gboolean setting);
gboolean gtk_label_get_use_underline (GtkLabel *label);

void gtk_label_set_markup_with_mnemonic (GtkLabel *label,
         const gchar *str);
guint gtk_label_get_mnemonic_keyval (GtkLabel *label);
void gtk_label_set_mnemonic_widget (GtkLabel *label,
         GtkWidget *widget);
GtkWidget *gtk_label_get_mnemonic_widget (GtkLabel *label);
void gtk_label_set_text_with_mnemonic (GtkLabel *label,
         const gchar *str);
void gtk_label_set_justify (GtkLabel *label,
         GtkJustification jtype);
GtkJustification gtk_label_get_justify (GtkLabel *label);
void gtk_label_set_ellipsize (GtkLabel *label,
         PangoEllipsizeMode mode);
PangoEllipsizeMode gtk_label_get_ellipsize (GtkLabel *label);
void gtk_label_set_width_chars (GtkLabel *label,
         gint n_chars);
gint gtk_label_get_width_chars (GtkLabel *label);
void gtk_label_set_max_width_chars (GtkLabel *label,
           gint n_chars);
gint gtk_label_get_max_width_chars (GtkLabel *label);
void gtk_label_set_pattern (GtkLabel *label,
         const gchar *pattern);
void gtk_label_set_line_wrap (GtkLabel *label,
         gboolean wrap);
gboolean gtk_label_get_line_wrap (GtkLabel *label);
void gtk_label_set_line_wrap_mode (GtkLabel *label,
         PangoWrapMode wrap_mode);
PangoWrapMode gtk_label_get_line_wrap_mode (GtkLabel *label);
void gtk_label_set_selectable (GtkLabel *label,
         gboolean setting);
gboolean gtk_label_get_selectable (GtkLabel *label);
void gtk_label_set_angle (GtkLabel *label,
         gdouble angle);
gdouble gtk_label_get_angle (GtkLabel *label);
void gtk_label_select_region (GtkLabel *label,
         gint start_offset,
         gint end_offset);
gboolean gtk_label_get_selection_bounds (GtkLabel *label,
                                                   gint *start,
                                                   gint *end);

PangoLayout *gtk_label_get_layout (GtkLabel *label);
void gtk_label_get_layout_offsets (GtkLabel *label,
                                           gint *x,
                                           gint *y);

void gtk_label_set_single_line_mode (GtkLabel *label,
                                              gboolean single_line_mode);
gboolean gtk_label_get_single_line_mode (GtkLabel *label);




void gtk_label_get (GtkLabel *label,
                                    gchar **str);





guint gtk_label_parse_uline (GtkLabel *label,
     const gchar *string);




# 39 "/usr/include/gtk-2.0/gtk/gtkaccellabel.h" 2



# 51 "/usr/include/gtk-2.0/gtk/gtkaccellabel.h"
typedef struct _GtkAccelLabel GtkAccelLabel;
typedef struct _GtkAccelLabelClass GtkAccelLabelClass;

struct _GtkAccelLabel
{
  GtkLabel label;

  guint gtk_reserved;
  guint accel_padding;
  GtkWidget *accel_widget;
  GClosure *accel_closure;
  GtkAccelGroup *accel_group;
  gchar *accel_string;
  guint16 accel_string_width;
};

struct _GtkAccelLabelClass
{
  GtkLabelClass parent_class;

  gchar *signal_quote1;
  gchar *signal_quote2;
  gchar *mod_name_shift;
  gchar *mod_name_control;
  gchar *mod_name_alt;
  gchar *mod_separator;
  gchar *accel_seperator;
  guint latin1_to_char : 1;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};





GType gtk_accel_label_get_type (void) __attribute__((__const__));
GtkWidget* gtk_accel_label_new (const gchar *string);
GtkWidget* gtk_accel_label_get_accel_widget (GtkAccelLabel *accel_label);
guint gtk_accel_label_get_accel_width (GtkAccelLabel *accel_label);
void gtk_accel_label_set_accel_widget (GtkAccelLabel *accel_label,
           GtkWidget *accel_widget);
void gtk_accel_label_set_accel_closure (GtkAccelLabel *accel_label,
           GClosure *accel_closure);
gboolean gtk_accel_label_refetch (GtkAccelLabel *accel_label);


gchar * _gtk_accel_label_class_get_accelerator_label (GtkAccelLabelClass *klass,
        guint accelerator_key,
        GdkModifierType accelerator_mods);


# 36 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkaccelmap.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkaccelmap.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkaccelgroup.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkaccelmap.h" 2


# 40 "/usr/include/gtk-2.0/gtk/gtkaccelmap.h"
typedef struct _GtkAccelMap GtkAccelMap;
typedef struct _GtkAccelMapClass GtkAccelMapClass;


typedef void (*GtkAccelMapForeach) (gpointer data,
       const gchar *accel_path,
       guint accel_key,
       GdkModifierType accel_mods,
       gboolean changed);
# 59 "/usr/include/gtk-2.0/gtk/gtkaccelmap.h"
void gtk_accel_map_add_entry (const gchar *accel_path,
      guint accel_key,
      GdkModifierType accel_mods);
gboolean gtk_accel_map_lookup_entry (const gchar *accel_path,
      GtkAccelKey *key);
gboolean gtk_accel_map_change_entry (const gchar *accel_path,
      guint accel_key,
      GdkModifierType accel_mods,
      gboolean replace);
void gtk_accel_map_load (const gchar *file_name);
void gtk_accel_map_save (const gchar *file_name);
void gtk_accel_map_foreach (gpointer data,
      GtkAccelMapForeach foreach_func);
void gtk_accel_map_load_fd (gint fd);
void gtk_accel_map_load_scanner (GScanner *scanner);
void gtk_accel_map_save_fd (gint fd);

void gtk_accel_map_lock_path (const gchar *accel_path);
void gtk_accel_map_unlock_path (const gchar *accel_path);


void gtk_accel_map_add_filter (const gchar *filter_pattern);
void gtk_accel_map_foreach_unfiltered (gpointer data,
       GtkAccelMapForeach foreach_func);


GType gtk_accel_map_get_type (void) __attribute__((__const__));
GtkAccelMap *gtk_accel_map_get (void);



void _gtk_accel_map_init (void);

void _gtk_accel_map_add_group (const gchar *accel_path,
        GtkAccelGroup *accel_group);
void _gtk_accel_map_remove_group (const gchar *accel_path,
        GtkAccelGroup *accel_group);
gboolean _gtk_accel_path_is_valid (const gchar *accel_path);



# 37 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkaccessible.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkaccessible.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkaccessible.h" 2


# 39 "/usr/include/gtk-2.0/gtk/gtkaccessible.h"
typedef struct _GtkAccessible GtkAccessible;
typedef struct _GtkAccessibleClass GtkAccessibleClass;





struct _GtkAccessible
{
  AtkObject parent;





  GtkWidget *widget;
};

struct _GtkAccessibleClass
{
  AtkObjectClass parent_class;

  void (*connect_widget_destroyed) (GtkAccessible *accessible);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_accessible_get_type (void) __attribute__((__const__));

void gtk_accessible_connect_widget_destroyed (GtkAccessible *accessible);


# 38 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkaction.h" 1
# 38 "/usr/include/gtk-2.0/gtk/gtkaction.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 39 "/usr/include/gtk-2.0/gtk/gtkaction.h" 2


# 49 "/usr/include/gtk-2.0/gtk/gtkaction.h"
typedef struct _GtkAction GtkAction;
typedef struct _GtkActionClass GtkActionClass;
typedef struct _GtkActionPrivate GtkActionPrivate;

struct _GtkAction
{
  GObject object;



  GtkActionPrivate *private_data;
};

struct _GtkActionClass
{
  GObjectClass parent_class;


  void (* activate) (GtkAction *action);

  GType menu_item_type;
  GType toolbar_item_type;


  GtkWidget *(* create_menu_item) (GtkAction *action);
  GtkWidget *(* create_tool_item) (GtkAction *action);
  void (* connect_proxy) (GtkAction *action,
         GtkWidget *proxy);
  void (* disconnect_proxy) (GtkAction *action,
         GtkWidget *proxy);

  GtkWidget *(* create_menu) (GtkAction *action);


  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_action_get_type (void) __attribute__((__const__));
GtkAction *gtk_action_new (const gchar *name,
      const gchar *label,
      const gchar *tooltip,
      const gchar *stock_id);
const gchar* gtk_action_get_name (GtkAction *action);
gboolean gtk_action_is_sensitive (GtkAction *action);
gboolean gtk_action_get_sensitive (GtkAction *action);
void gtk_action_set_sensitive (GtkAction *action,
      gboolean sensitive);
gboolean gtk_action_is_visible (GtkAction *action);
gboolean gtk_action_get_visible (GtkAction *action);
void gtk_action_set_visible (GtkAction *action,
      gboolean visible);
void gtk_action_activate (GtkAction *action);
GtkWidget * gtk_action_create_icon (GtkAction *action,
      GtkIconSize icon_size);
GtkWidget * gtk_action_create_menu_item (GtkAction *action);
GtkWidget * gtk_action_create_tool_item (GtkAction *action);
GtkWidget * gtk_action_create_menu (GtkAction *action);
GSList * gtk_action_get_proxies (GtkAction *action);
void gtk_action_connect_accelerator (GtkAction *action);
void gtk_action_disconnect_accelerator (GtkAction *action);
const gchar *gtk_action_get_accel_path (GtkAction *action);
GClosure *gtk_action_get_accel_closure (GtkAction *action);


GtkAction *gtk_widget_get_action (GtkWidget *widget);
void gtk_action_connect_proxy (GtkAction *action,
      GtkWidget *proxy);
void gtk_action_disconnect_proxy (GtkAction *action,
      GtkWidget *proxy);
void gtk_action_block_activate_from (GtkAction *action,
      GtkWidget *proxy);
void gtk_action_unblock_activate_from (GtkAction *action,
      GtkWidget *proxy);

void gtk_action_block_activate (GtkAction *action);
void gtk_action_unblock_activate (GtkAction *action);


void _gtk_action_add_to_proxy_list (GtkAction *action,
      GtkWidget *proxy);
void _gtk_action_remove_from_proxy_list(GtkAction *action,
      GtkWidget *proxy);


void _gtk_action_emit_activate (GtkAction *action);


void gtk_action_set_accel_path (GtkAction *action,
      const gchar *accel_path);
void gtk_action_set_accel_group (GtkAction *action,
      GtkAccelGroup *accel_group);
void _gtk_action_sync_menu_visible (GtkAction *action,
      GtkWidget *proxy,
      gboolean empty);

void gtk_action_set_label (GtkAction *action,
                                                         const gchar *label);
const gchar *gtk_action_get_label (GtkAction *action);
void gtk_action_set_short_label (GtkAction *action,
                                                         const gchar *short_label);
const gchar *gtk_action_get_short_label (GtkAction *action);
void gtk_action_set_tooltip (GtkAction *action,
                                                         const gchar *tooltip);
const gchar *gtk_action_get_tooltip (GtkAction *action);
void gtk_action_set_stock_id (GtkAction *action,
                                                         const gchar *stock_id);
const gchar *gtk_action_get_stock_id (GtkAction *action);
void gtk_action_set_gicon (GtkAction *action,
                                                         GIcon *icon);
GIcon *gtk_action_get_gicon (GtkAction *action);
void gtk_action_set_icon_name (GtkAction *action,
                                                         const gchar *icon_name);
const gchar *gtk_action_get_icon_name (GtkAction *action);
void gtk_action_set_visible_horizontal (GtkAction *action,
                                                         gboolean visible_horizontal);
gboolean gtk_action_get_visible_horizontal (GtkAction *action);
void gtk_action_set_visible_vertical (GtkAction *action,
                                                         gboolean visible_vertical);
gboolean gtk_action_get_visible_vertical (GtkAction *action);
void gtk_action_set_is_important (GtkAction *action,
                                                         gboolean is_important);
gboolean gtk_action_get_is_important (GtkAction *action);



# 39 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkactiongroup.h" 1
# 38 "/usr/include/gtk-2.0/gtk/gtkactiongroup.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkaction.h" 1
# 39 "/usr/include/gtk-2.0/gtk/gtkactiongroup.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktypeutils.h" 1
# 40 "/usr/include/gtk-2.0/gtk/gtkactiongroup.h" 2


# 50 "/usr/include/gtk-2.0/gtk/gtkactiongroup.h"
typedef struct _GtkActionGroup GtkActionGroup;
typedef struct _GtkActionGroupPrivate GtkActionGroupPrivate;
typedef struct _GtkActionGroupClass GtkActionGroupClass;
typedef struct _GtkActionEntry GtkActionEntry;
typedef struct _GtkToggleActionEntry GtkToggleActionEntry;
typedef struct _GtkRadioActionEntry GtkRadioActionEntry;

struct _GtkActionGroup
{
  GObject parent;



  GtkActionGroupPrivate *private_data;
};

struct _GtkActionGroupClass
{
  GObjectClass parent_class;

  GtkAction *(* get_action) (GtkActionGroup *action_group,
                             const gchar *action_name);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

struct _GtkActionEntry
{
  const gchar *name;
  const gchar *stock_id;
  const gchar *label;
  const gchar *accelerator;
  const gchar *tooltip;
  GCallback callback;
};

struct _GtkToggleActionEntry
{
  const gchar *name;
  const gchar *stock_id;
  const gchar *label;
  const gchar *accelerator;
  const gchar *tooltip;
  GCallback callback;
  gboolean is_active;
};

struct _GtkRadioActionEntry
{
  const gchar *name;
  const gchar *stock_id;
  const gchar *label;
  const gchar *accelerator;
  const gchar *tooltip;
  gint value;
};

GType gtk_action_group_get_type (void) __attribute__((__const__));
GtkActionGroup *gtk_action_group_new (const gchar *name);
const gchar *gtk_action_group_get_name (GtkActionGroup *action_group);
gboolean gtk_action_group_get_sensitive (GtkActionGroup *action_group);
void gtk_action_group_set_sensitive (GtkActionGroup *action_group,
         gboolean sensitive);
gboolean gtk_action_group_get_visible (GtkActionGroup *action_group);
void gtk_action_group_set_visible (GtkActionGroup *action_group,
         gboolean visible);
GtkAction *gtk_action_group_get_action (GtkActionGroup *action_group,
         const gchar *action_name);
GList *gtk_action_group_list_actions (GtkActionGroup *action_group);
void gtk_action_group_add_action (GtkActionGroup *action_group,
         GtkAction *action);
void gtk_action_group_add_action_with_accel (GtkActionGroup *action_group,
         GtkAction *action,
         const gchar *accelerator);
void gtk_action_group_remove_action (GtkActionGroup *action_group,
         GtkAction *action);
void gtk_action_group_add_actions (GtkActionGroup *action_group,
         const GtkActionEntry *entries,
         guint n_entries,
         gpointer user_data);
void gtk_action_group_add_toggle_actions (GtkActionGroup *action_group,
         const GtkToggleActionEntry *entries,
         guint n_entries,
         gpointer user_data);
void gtk_action_group_add_radio_actions (GtkActionGroup *action_group,
         const GtkRadioActionEntry *entries,
         guint n_entries,
         gint value,
         GCallback on_change,
         gpointer user_data);
void gtk_action_group_add_actions_full (GtkActionGroup *action_group,
         const GtkActionEntry *entries,
         guint n_entries,
         gpointer user_data,
         GDestroyNotify destroy);
void gtk_action_group_add_toggle_actions_full (GtkActionGroup *action_group,
         const GtkToggleActionEntry *entries,
         guint n_entries,
         gpointer user_data,
         GDestroyNotify destroy);
void gtk_action_group_add_radio_actions_full (GtkActionGroup *action_group,
         const GtkRadioActionEntry *entries,
         guint n_entries,
         gint value,
         GCallback on_change,
         gpointer user_data,
         GDestroyNotify destroy);
void gtk_action_group_set_translate_func (GtkActionGroup *action_group,
         GtkTranslateFunc func,
         gpointer data,
         GDestroyNotify notify);
void gtk_action_group_set_translation_domain (GtkActionGroup *action_group,
         const gchar *domain);
const gchar *gtk_action_group_translate_string (GtkActionGroup *action_group,
                                                     const gchar *string);


void _gtk_action_group_emit_connect_proxy (GtkActionGroup *action_group,
                                              GtkAction *action,
                                              GtkWidget *proxy);
void _gtk_action_group_emit_disconnect_proxy (GtkActionGroup *action_group,
                                              GtkAction *action,
                                              GtkWidget *proxy);
void _gtk_action_group_emit_pre_activate (GtkActionGroup *action_group,
                                              GtkAction *action);
void _gtk_action_group_emit_post_activate (GtkActionGroup *action_group,
                                              GtkAction *action);


# 40 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkactivatable.h" 1
# 27 "/usr/include/gtk-2.0/gtk/gtkactivatable.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkaction.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkactivatable.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktypeutils.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkactivatable.h" 2


# 39 "/usr/include/gtk-2.0/gtk/gtkactivatable.h"
typedef struct _GtkActivatable GtkActivatable;
typedef struct _GtkActivatableIface GtkActivatableIface;
# 56 "/usr/include/gtk-2.0/gtk/gtkactivatable.h"
struct _GtkActivatableIface
{
  GTypeInterface g_iface;


  void (* update) (GtkActivatable *activatable,
                         GtkAction *action,
                         const gchar *property_name);
  void (* sync_action_properties) (GtkActivatable *activatable,
                         GtkAction *action);
};


GType gtk_activatable_get_type (void) __attribute__((__const__));

void gtk_activatable_sync_action_properties (GtkActivatable *activatable,
             GtkAction *action);

void gtk_activatable_set_related_action (GtkActivatable *activatable,
             GtkAction *action);
GtkAction *gtk_activatable_get_related_action (GtkActivatable *activatable);

void gtk_activatable_set_use_action_appearance (GtkActivatable *activatable,
             gboolean use_appearance);
gboolean gtk_activatable_get_use_action_appearance (GtkActivatable *activatable);


void gtk_activatable_do_set_related_action (GtkActivatable *activatable,
             GtkAction *action);


# 41 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkadjustment.h" 1
# 42 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkalignment.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkalignment.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkbin.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkalignment.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkalignment.h"
typedef struct _GtkAlignment GtkAlignment;
typedef struct _GtkAlignmentClass GtkAlignmentClass;
typedef struct _GtkAlignmentPrivate GtkAlignmentPrivate;

struct _GtkAlignment
{
  GtkBin bin;

  gfloat xalign;
  gfloat yalign;
  gfloat xscale;
  gfloat yscale;
};

struct _GtkAlignmentClass
{
  GtkBinClass parent_class;
};


GType gtk_alignment_get_type (void) __attribute__((__const__));
GtkWidget* gtk_alignment_new (gfloat xalign,
         gfloat yalign,
         gfloat xscale,
         gfloat yscale);
void gtk_alignment_set (GtkAlignment *alignment,
         gfloat xalign,
         gfloat yalign,
         gfloat xscale,
         gfloat yscale);

void gtk_alignment_set_padding (GtkAlignment *alignment,
          guint padding_top,
          guint padding_bottom,
          guint padding_left,
          guint padding_right);

void gtk_alignment_get_padding (GtkAlignment *alignment,
          guint *padding_top,
          guint *padding_bottom,
          guint *padding_left,
          guint *padding_right);


# 43 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkarrow.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkarrow.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkmisc.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkarrow.h" 2



# 49 "/usr/include/gtk-2.0/gtk/gtkarrow.h"
typedef struct _GtkArrow GtkArrow;
typedef struct _GtkArrowClass GtkArrowClass;

struct _GtkArrow
{
  GtkMisc misc;

  gint16 arrow_type;
  gint16 shadow_type;
};

struct _GtkArrowClass
{
  GtkMiscClass parent_class;
};


GType gtk_arrow_get_type (void) __attribute__((__const__));
GtkWidget* gtk_arrow_new (GtkArrowType arrow_type,
     GtkShadowType shadow_type);
void gtk_arrow_set (GtkArrow *arrow,
     GtkArrowType arrow_type,
     GtkShadowType shadow_type);



# 44 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkaspectframe.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkaspectframe.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkframe.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkframe.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkbin.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkframe.h" 2



# 49 "/usr/include/gtk-2.0/gtk/gtkframe.h"
typedef struct _GtkFrame GtkFrame;
typedef struct _GtkFrameClass GtkFrameClass;

struct _GtkFrame
{
  GtkBin bin;

  GtkWidget *label_widget;
  gint16 shadow_type;
  gfloat label_xalign;
  gfloat label_yalign;

  GtkAllocation child_allocation;
};

struct _GtkFrameClass
{
  GtkBinClass parent_class;

  void (*compute_child_allocation) (GtkFrame *frame, GtkAllocation *allocation);
};


GType gtk_frame_get_type (void) __attribute__((__const__));
GtkWidget* gtk_frame_new (const gchar *label);

void gtk_frame_set_label (GtkFrame *frame,
        const gchar *label);
const gchar *gtk_frame_get_label (GtkFrame *frame);

void gtk_frame_set_label_widget (GtkFrame *frame,
           GtkWidget *label_widget);
GtkWidget *gtk_frame_get_label_widget (GtkFrame *frame);
void gtk_frame_set_label_align (GtkFrame *frame,
           gfloat xalign,
           gfloat yalign);
void gtk_frame_get_label_align (GtkFrame *frame,
           gfloat *xalign,
           gfloat *yalign);
void gtk_frame_set_shadow_type (GtkFrame *frame,
           GtkShadowType type);
GtkShadowType gtk_frame_get_shadow_type (GtkFrame *frame);



# 36 "/usr/include/gtk-2.0/gtk/gtkaspectframe.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkaspectframe.h"
typedef struct _GtkAspectFrame GtkAspectFrame;
typedef struct _GtkAspectFrameClass GtkAspectFrameClass;

struct _GtkAspectFrame
{
  GtkFrame frame;

  gfloat xalign;
  gfloat yalign;
  gfloat ratio;
  gboolean obey_child;

  GtkAllocation center_allocation;
};

struct _GtkAspectFrameClass
{
  GtkFrameClass parent_class;
};


GType gtk_aspect_frame_get_type (void) __attribute__((__const__));
GtkWidget* gtk_aspect_frame_new (const gchar *label,
     gfloat xalign,
     gfloat yalign,
     gfloat ratio,
     gboolean obey_child);
void gtk_aspect_frame_set (GtkAspectFrame *aspect_frame,
     gfloat xalign,
     gfloat yalign,
     gfloat ratio,
     gboolean obey_child);



# 45 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkassistant.h" 1
# 33 "/usr/include/gtk-2.0/gtk/gtkassistant.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkwindow.h" 1
# 34 "/usr/include/gtk-2.0/gtk/gtkassistant.h" 2


# 44 "/usr/include/gtk-2.0/gtk/gtkassistant.h"
typedef enum
{
  GTK_ASSISTANT_PAGE_CONTENT,
  GTK_ASSISTANT_PAGE_INTRO,
  GTK_ASSISTANT_PAGE_CONFIRM,
  GTK_ASSISTANT_PAGE_SUMMARY,
  GTK_ASSISTANT_PAGE_PROGRESS
} GtkAssistantPageType;

typedef struct _GtkAssistant GtkAssistant;
typedef struct _GtkAssistantPrivate GtkAssistantPrivate;
typedef struct _GtkAssistantClass GtkAssistantClass;

struct _GtkAssistant
{
  GtkWindow parent;

  GtkWidget *cancel;
  GtkWidget *forward;
  GtkWidget *back;
  GtkWidget *apply;
  GtkWidget *close;
  GtkWidget *last;


  GtkAssistantPrivate *priv;
};

struct _GtkAssistantClass
{
  GtkWindowClass parent_class;

  void (* prepare) (GtkAssistant *assistant, GtkWidget *page);
  void (* apply) (GtkAssistant *assistant);
  void (* close) (GtkAssistant *assistant);
  void (* cancel) (GtkAssistant *assistant);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
};

typedef gint (*GtkAssistantPageFunc) (gint current_page, gpointer data);

GType gtk_assistant_get_type (void) __attribute__((__const__));
GtkWidget *gtk_assistant_new (void);
gint gtk_assistant_get_current_page (GtkAssistant *assistant);
void gtk_assistant_set_current_page (GtkAssistant *assistant,
          gint page_num);
gint gtk_assistant_get_n_pages (GtkAssistant *assistant);
GtkWidget *gtk_assistant_get_nth_page (GtkAssistant *assistant,
          gint page_num);
gint gtk_assistant_prepend_page (GtkAssistant *assistant,
          GtkWidget *page);
gint gtk_assistant_append_page (GtkAssistant *assistant,
          GtkWidget *page);
gint gtk_assistant_insert_page (GtkAssistant *assistant,
          GtkWidget *page,
          gint position);
void gtk_assistant_set_forward_page_func (GtkAssistant *assistant,
          GtkAssistantPageFunc page_func,
          gpointer data,
          GDestroyNotify destroy);
void gtk_assistant_set_page_type (GtkAssistant *assistant,
          GtkWidget *page,
          GtkAssistantPageType type);
GtkAssistantPageType gtk_assistant_get_page_type (GtkAssistant *assistant,
          GtkWidget *page);
void gtk_assistant_set_page_title (GtkAssistant *assistant,
          GtkWidget *page,
          const gchar *title);
const gchar *gtk_assistant_get_page_title (GtkAssistant *assistant,
          GtkWidget *page);
void gtk_assistant_set_page_header_image (GtkAssistant *assistant,
          GtkWidget *page,
          GdkPixbuf *pixbuf);
GdkPixbuf *gtk_assistant_get_page_header_image (GtkAssistant *assistant,
          GtkWidget *page);
void gtk_assistant_set_page_side_image (GtkAssistant *assistant,
          GtkWidget *page,
          GdkPixbuf *pixbuf);
GdkPixbuf *gtk_assistant_get_page_side_image (GtkAssistant *assistant,
          GtkWidget *page);
void gtk_assistant_set_page_complete (GtkAssistant *assistant,
          GtkWidget *page,
          gboolean complete);
gboolean gtk_assistant_get_page_complete (GtkAssistant *assistant,
          GtkWidget *page);
void gtk_assistant_add_action_widget (GtkAssistant *assistant,
          GtkWidget *child);
void gtk_assistant_remove_action_widget (GtkAssistant *assistant,
          GtkWidget *child);

void gtk_assistant_update_buttons_state (GtkAssistant *assistant);


# 46 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkbbox.h" 1
# 34 "/usr/include/gtk-2.0/gtk/gtkbbox.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkbox.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkbox.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcontainer.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkbox.h" 2



# 49 "/usr/include/gtk-2.0/gtk/gtkbox.h"
typedef struct _GtkBox GtkBox;
typedef struct _GtkBoxClass GtkBoxClass;
typedef struct _GtkBoxChild GtkBoxChild;

struct _GtkBox
{
  GtkContainer container;


  GList *children;
  gint16 spacing;
  guint homogeneous : 1;
};

struct _GtkBoxClass
{
  GtkContainerClass parent_class;
};

struct _GtkBoxChild
{
  GtkWidget *widget;
  guint16 padding;
  guint expand : 1;
  guint fill : 1;
  guint pack : 1;
  guint is_secondary : 1;
};


GType gtk_box_get_type (void) __attribute__((__const__));
GtkWidget* _gtk_box_new (GtkOrientation orientation,
                                         gboolean homogeneous,
                                         gint spacing);

void gtk_box_pack_start (GtkBox *box,
                                         GtkWidget *child,
                                         gboolean expand,
                                         gboolean fill,
                                         guint padding);
void gtk_box_pack_end (GtkBox *box,
                                         GtkWidget *child,
                                         gboolean expand,
                                         gboolean fill,
                                         guint padding);


void gtk_box_pack_start_defaults (GtkBox *box,
                                         GtkWidget *widget);
void gtk_box_pack_end_defaults (GtkBox *box,
                                         GtkWidget *widget);


void gtk_box_set_homogeneous (GtkBox *box,
                                         gboolean homogeneous);
gboolean gtk_box_get_homogeneous (GtkBox *box);
void gtk_box_set_spacing (GtkBox *box,
                                         gint spacing);
gint gtk_box_get_spacing (GtkBox *box);

void gtk_box_reorder_child (GtkBox *box,
                                         GtkWidget *child,
                                         gint position);

void gtk_box_query_child_packing (GtkBox *box,
                                         GtkWidget *child,
                                         gboolean *expand,
                                         gboolean *fill,
                                         guint *padding,
                                         GtkPackType *pack_type);
void gtk_box_set_child_packing (GtkBox *box,
                                         GtkWidget *child,
                                         gboolean expand,
                                         gboolean fill,
                                         guint padding,
                                         GtkPackType pack_type);


void _gtk_box_set_old_defaults (GtkBox *box);
gboolean _gtk_box_get_spacing_set (GtkBox *box);
void _gtk_box_set_spacing_set (GtkBox *box,
                                         gboolean spacing_set);


# 35 "/usr/include/gtk-2.0/gtk/gtkbbox.h" 2



# 49 "/usr/include/gtk-2.0/gtk/gtkbbox.h"
typedef struct _GtkButtonBox GtkButtonBox;
typedef struct _GtkButtonBoxClass GtkButtonBoxClass;

struct _GtkButtonBox
{
  GtkBox box;
  gint child_min_width;
  gint child_min_height;
  gint child_ipad_x;
  gint child_ipad_y;
  GtkButtonBoxStyle layout_style;
};

struct _GtkButtonBoxClass
{
  GtkBoxClass parent_class;
};


GType gtk_button_box_get_type (void) __attribute__((__const__));

GtkButtonBoxStyle gtk_button_box_get_layout (GtkButtonBox *widget);
void gtk_button_box_set_layout (GtkButtonBox *widget,
            GtkButtonBoxStyle layout_style);
gboolean gtk_button_box_get_child_secondary (GtkButtonBox *widget,
            GtkWidget *child);
void gtk_button_box_set_child_secondary (GtkButtonBox *widget,
            GtkWidget *child,
            gboolean is_secondary);





void gtk_button_box_set_child_size (GtkButtonBox *widget,
     gint min_width,
     gint min_height);
void gtk_button_box_set_child_ipadding (GtkButtonBox *widget,
     gint ipad_x,
     gint ipad_y);
void gtk_button_box_get_child_size (GtkButtonBox *widget,
     gint *min_width,
     gint *min_height);
void gtk_button_box_get_child_ipadding (GtkButtonBox *widget,
     gint *ipad_x,
     gint *ipad_y);



void _gtk_button_box_child_requisition (GtkWidget *widget,
     int *nvis_children,
     int *nvis_secondaries,
     int *width,
     int *height);

# 47 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkbin.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkbindings.h" 1
# 39 "/usr/include/gtk-2.0/gtk/gtkbindings.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkobject.h" 1
# 40 "/usr/include/gtk-2.0/gtk/gtkbindings.h" 2








typedef struct _GtkBindingSet GtkBindingSet;
typedef struct _GtkBindingEntry GtkBindingEntry;
typedef struct _GtkBindingSignal GtkBindingSignal;
typedef struct _GtkBindingArg GtkBindingArg;

struct _GtkBindingSet
{
  gchar *set_name;
  gint priority;
  GSList *widget_path_pspecs;
  GSList *widget_class_pspecs;
  GSList *class_branch_pspecs;
  GtkBindingEntry *entries;
  GtkBindingEntry *current;
  guint parsed : 1;
};

struct _GtkBindingEntry
{


  guint keyval;
  GdkModifierType modifiers;

  GtkBindingSet *binding_set;
  guint destroyed : 1;
  guint in_emission : 1;
  guint marks_unbound : 1;
  GtkBindingEntry *set_next;
  GtkBindingEntry *hash_next;
  GtkBindingSignal *signals;
};

struct _GtkBindingArg
{
  GType arg_type;
  union {
    glong long_data;
    gdouble double_data;
    gchar *string_data;
  } d;
};

struct _GtkBindingSignal
{
  GtkBindingSignal *next;
  gchar *signal_name;
  guint n_args;
  GtkBindingArg *args;
};



GtkBindingSet* gtk_binding_set_new (const gchar *set_name);
GtkBindingSet* gtk_binding_set_by_class(gpointer object_class);
GtkBindingSet* gtk_binding_set_find (const gchar *set_name);
gboolean gtk_bindings_activate (GtkObject *object,
      guint keyval,
      GdkModifierType modifiers);
gboolean gtk_bindings_activate_event (GtkObject *object,
      GdkEventKey *event);
gboolean gtk_binding_set_activate (GtkBindingSet *binding_set,
      guint keyval,
      GdkModifierType modifiers,
      GtkObject *object);



void gtk_binding_entry_clear (GtkBindingSet *binding_set,
      guint keyval,
      GdkModifierType modifiers);
guint gtk_binding_parse_binding (GScanner *scanner);


void gtk_binding_entry_skip (GtkBindingSet *binding_set,
                                         guint keyval,
                                         GdkModifierType modifiers);
void gtk_binding_entry_add_signal (GtkBindingSet *binding_set,
                                         guint keyval,
                                         GdkModifierType modifiers,
                                         const gchar *signal_name,
                                         guint n_args,
                                         ...);
void gtk_binding_entry_add_signall (GtkBindingSet *binding_set,
      guint keyval,
      GdkModifierType modifiers,
      const gchar *signal_name,
      GSList *binding_args);
void gtk_binding_entry_remove (GtkBindingSet *binding_set,
      guint keyval,
      GdkModifierType modifiers);

void gtk_binding_set_add_path (GtkBindingSet *binding_set,
      GtkPathType path_type,
      const gchar *path_pattern,
      GtkPathPriorityType priority);




guint _gtk_binding_parse_binding (GScanner *scanner);
void _gtk_binding_reset_parsed (void);
void _gtk_binding_entry_add_signall (GtkBindingSet *binding_set,
      guint keyval,
      GdkModifierType modifiers,
      const gchar *signal_name,
      GSList *binding_args);


# 49 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkbox.h" 1
# 50 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkbuildable.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkbuildable.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkbuilder.h" 1
# 31 "/usr/include/gtk-2.0/gtk/gtkbuilder.h"

# 42 "/usr/include/gtk-2.0/gtk/gtkbuilder.h"
typedef struct _GtkBuilder GtkBuilder;
typedef struct _GtkBuilderClass GtkBuilderClass;
typedef struct _GtkBuilderPrivate GtkBuilderPrivate;

typedef enum
{
  GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION,
  GTK_BUILDER_ERROR_UNHANDLED_TAG,
  GTK_BUILDER_ERROR_MISSING_ATTRIBUTE,
  GTK_BUILDER_ERROR_INVALID_ATTRIBUTE,
  GTK_BUILDER_ERROR_INVALID_TAG,
  GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE,
  GTK_BUILDER_ERROR_INVALID_VALUE,
  GTK_BUILDER_ERROR_VERSION_MISMATCH
} GtkBuilderError;

GQuark gtk_builder_error_quark (void);

struct _GtkBuilder
{
  GObject parent_instance;

  GtkBuilderPrivate *priv;
};

struct _GtkBuilderClass
{
  GObjectClass parent_class;

  GType (* get_type_from_name) (GtkBuilder *builder,
                                const char *type_name);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};

typedef void (*GtkBuilderConnectFunc) (GtkBuilder *builder,
           GObject *object,
           const gchar *signal_name,
           const gchar *handler_name,
           GObject *connect_object,
           GConnectFlags flags,
           gpointer user_data);

GType gtk_builder_get_type (void) __attribute__((__const__));
GtkBuilder* gtk_builder_new (void);

guint gtk_builder_add_from_file (GtkBuilder *builder,
                                                  const gchar *filename,
                                                  GError **error);
guint gtk_builder_add_from_string (GtkBuilder *builder,
                                                  const gchar *buffer,
                                                  gsize length,
                                                  GError **error);
guint gtk_builder_add_objects_from_file (GtkBuilder *builder,
                                                  const gchar *filename,
                                                  gchar **object_ids,
                                                  GError **error);
guint gtk_builder_add_objects_from_string (GtkBuilder *builder,
                                                  const gchar *buffer,
                                                  gsize length,
                                                  gchar **object_ids,
                                                  GError **error);
GObject* gtk_builder_get_object (GtkBuilder *builder,
                                                  const gchar *name);
GSList* gtk_builder_get_objects (GtkBuilder *builder);
void gtk_builder_connect_signals (GtkBuilder *builder,
        gpointer user_data);
void gtk_builder_connect_signals_full (GtkBuilder *builder,
                                                  GtkBuilderConnectFunc func,
        gpointer user_data);
void gtk_builder_set_translation_domain (GtkBuilder *builder,
                                                  const gchar *domain);
const gchar* gtk_builder_get_translation_domain (GtkBuilder *builder);
GType gtk_builder_get_type_from_name (GtkBuilder *builder,
                                                  const char *type_name);

gboolean gtk_builder_value_from_string (GtkBuilder *builder,
        GParamSpec *pspec,
                                                  const gchar *string,
                                                  GValue *value,
        GError **error);
gboolean gtk_builder_value_from_string_type (GtkBuilder *builder,
        GType type,
                                                  const gchar *string,
                                                  GValue *value,
        GError **error);





# 29 "/usr/include/gtk-2.0/gtk/gtkbuildable.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktypeutils.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkbuildable.h" 2


# 40 "/usr/include/gtk-2.0/gtk/gtkbuildable.h"
typedef struct _GtkBuildable GtkBuildable;
typedef struct _GtkBuildableIface GtkBuildableIface;

struct _GtkBuildableIface
{
  GTypeInterface g_iface;


  void (* set_name) (GtkBuildable *buildable,
                                            const gchar *name);
  const gchar * (* get_name) (GtkBuildable *buildable);
  void (* add_child) (GtkBuildable *buildable,
         GtkBuilder *builder,
         GObject *child,
         const gchar *type);
  void (* set_buildable_property) (GtkBuildable *buildable,
         GtkBuilder *builder,
         const gchar *name,
         const GValue *value);
  GObject * (* construct_child) (GtkBuildable *buildable,
         GtkBuilder *builder,
         const gchar *name);
  gboolean (* custom_tag_start) (GtkBuildable *buildable,
         GtkBuilder *builder,
         GObject *child,
         const gchar *tagname,
         GMarkupParser *parser,
         gpointer *data);
  void (* custom_tag_end) (GtkBuildable *buildable,
         GtkBuilder *builder,
         GObject *child,
         const gchar *tagname,
         gpointer *data);
  void (* custom_finished) (GtkBuildable *buildable,
         GtkBuilder *builder,
         GObject *child,
         const gchar *tagname,
         gpointer data);
  void (* parser_finished) (GtkBuildable *buildable,
         GtkBuilder *builder);

  GObject * (* get_internal_child) (GtkBuildable *buildable,
         GtkBuilder *builder,
         const gchar *childname);
};


GType gtk_buildable_get_type (void) __attribute__((__const__));

void gtk_buildable_set_name (GtkBuildable *buildable,
      const gchar *name);
const gchar * gtk_buildable_get_name (GtkBuildable *buildable);
void gtk_buildable_add_child (GtkBuildable *buildable,
      GtkBuilder *builder,
      GObject *child,
      const gchar *type);
void gtk_buildable_set_buildable_property (GtkBuildable *buildable,
      GtkBuilder *builder,
      const gchar *name,
      const GValue *value);
GObject * gtk_buildable_construct_child (GtkBuildable *buildable,
      GtkBuilder *builder,
      const gchar *name);
gboolean gtk_buildable_custom_tag_start (GtkBuildable *buildable,
      GtkBuilder *builder,
      GObject *child,
      const gchar *tagname,
      GMarkupParser *parser,
      gpointer *data);
void gtk_buildable_custom_tag_end (GtkBuildable *buildable,
      GtkBuilder *builder,
      GObject *child,
      const gchar *tagname,
      gpointer *data);
void gtk_buildable_custom_finished (GtkBuildable *buildable,
      GtkBuilder *builder,
      GObject *child,
      const gchar *tagname,
      gpointer data);
void gtk_buildable_parser_finished (GtkBuildable *buildable,
      GtkBuilder *builder);
GObject * gtk_buildable_get_internal_child (GtkBuildable *buildable,
      GtkBuilder *builder,
      const gchar *childname);


# 51 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkbuilder.h" 1
# 52 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkbutton.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkbutton.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkbin.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkbutton.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkimage.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkimage.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkmisc.h" 1
# 37 "/usr/include/gtk-2.0/gtk/gtkimage.h" 2



# 49 "/usr/include/gtk-2.0/gtk/gtkimage.h"
typedef struct _GtkImage GtkImage;
typedef struct _GtkImageClass GtkImageClass;

typedef struct _GtkImagePixmapData GtkImagePixmapData;
typedef struct _GtkImageImageData GtkImageImageData;
typedef struct _GtkImagePixbufData GtkImagePixbufData;
typedef struct _GtkImageStockData GtkImageStockData;
typedef struct _GtkImageIconSetData GtkImageIconSetData;
typedef struct _GtkImageAnimationData GtkImageAnimationData;
typedef struct _GtkImageIconNameData GtkImageIconNameData;
typedef struct _GtkImageGIconData GtkImageGIconData;

struct _GtkImagePixmapData
{
  GdkPixmap *pixmap;
};

struct _GtkImageImageData
{
  GdkImage *image;
};

struct _GtkImagePixbufData
{
  GdkPixbuf *pixbuf;
};

struct _GtkImageStockData
{
  gchar *stock_id;
};

struct _GtkImageIconSetData
{
  GtkIconSet *icon_set;
};

struct _GtkImageAnimationData
{
  GdkPixbufAnimation *anim;
  GdkPixbufAnimationIter *iter;
  guint frame_timeout;
};

struct _GtkImageIconNameData
{
  gchar *icon_name;
  GdkPixbuf *pixbuf;
  guint theme_change_id;
};

struct _GtkImageGIconData
{
  GIcon *icon;
  GdkPixbuf *pixbuf;
  guint theme_change_id;
};

typedef enum
{
  GTK_IMAGE_EMPTY,
  GTK_IMAGE_PIXMAP,
  GTK_IMAGE_IMAGE,
  GTK_IMAGE_PIXBUF,
  GTK_IMAGE_STOCK,
  GTK_IMAGE_ICON_SET,
  GTK_IMAGE_ANIMATION,
  GTK_IMAGE_ICON_NAME,
  GTK_IMAGE_GICON
} GtkImageType;

struct _GtkImage
{
  GtkMisc misc;

  GtkImageType storage_type;

  union
  {
    GtkImagePixmapData pixmap;
    GtkImageImageData image;
    GtkImagePixbufData pixbuf;
    GtkImageStockData stock;
    GtkImageIconSetData icon_set;
    GtkImageAnimationData anim;
    GtkImageIconNameData name;
    GtkImageGIconData gicon;
  } data;


  GdkBitmap *mask;


  GtkIconSize icon_size;
};

struct _GtkImageClass
{
  GtkMiscClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};







GType gtk_image_get_type (void) __attribute__((__const__));

GtkWidget* gtk_image_new (void);
GtkWidget* gtk_image_new_from_pixmap (GdkPixmap *pixmap,
                                         GdkBitmap *mask);
GtkWidget* gtk_image_new_from_image (GdkImage *image,
                                         GdkBitmap *mask);
GtkWidget* gtk_image_new_from_file (const gchar *filename);
GtkWidget* gtk_image_new_from_pixbuf (GdkPixbuf *pixbuf);
GtkWidget* gtk_image_new_from_stock (const gchar *stock_id,
                                         GtkIconSize size);
GtkWidget* gtk_image_new_from_icon_set (GtkIconSet *icon_set,
                                         GtkIconSize size);
GtkWidget* gtk_image_new_from_animation (GdkPixbufAnimation *animation);
GtkWidget* gtk_image_new_from_icon_name (const gchar *icon_name,
      GtkIconSize size);
GtkWidget* gtk_image_new_from_gicon (GIcon *icon,
      GtkIconSize size);

void gtk_image_clear (GtkImage *image);
void gtk_image_set_from_pixmap (GtkImage *image,
                                   GdkPixmap *pixmap,
                                   GdkBitmap *mask);
void gtk_image_set_from_image (GtkImage *image,
                                   GdkImage *gdk_image,
                                   GdkBitmap *mask);
void gtk_image_set_from_file (GtkImage *image,
                                   const gchar *filename);
void gtk_image_set_from_pixbuf (GtkImage *image,
                                   GdkPixbuf *pixbuf);
void gtk_image_set_from_stock (GtkImage *image,
                                   const gchar *stock_id,
                                   GtkIconSize size);
void gtk_image_set_from_icon_set (GtkImage *image,
                                   GtkIconSet *icon_set,
                                   GtkIconSize size);
void gtk_image_set_from_animation (GtkImage *image,
                                   GdkPixbufAnimation *animation);
void gtk_image_set_from_icon_name (GtkImage *image,
       const gchar *icon_name,
       GtkIconSize size);
void gtk_image_set_from_gicon (GtkImage *image,
       GIcon *icon,
       GtkIconSize size);
void gtk_image_set_pixel_size (GtkImage *image,
       gint pixel_size);

GtkImageType gtk_image_get_storage_type (GtkImage *image);

void gtk_image_get_pixmap (GtkImage *image,
                                   GdkPixmap **pixmap,
                                   GdkBitmap **mask);
void gtk_image_get_image (GtkImage *image,
                                   GdkImage **gdk_image,
                                   GdkBitmap **mask);
GdkPixbuf* gtk_image_get_pixbuf (GtkImage *image);
void gtk_image_get_stock (GtkImage *image,
                                   gchar **stock_id,
                                   GtkIconSize *size);
void gtk_image_get_icon_set (GtkImage *image,
                                   GtkIconSet **icon_set,
                                   GtkIconSize *size);
GdkPixbufAnimation* gtk_image_get_animation (GtkImage *image);
void gtk_image_get_icon_name (GtkImage *image,
        const gchar **icon_name,
        GtkIconSize *size);
void gtk_image_get_gicon (GtkImage *image,
        GIcon **gicon,
        GtkIconSize *size);
gint gtk_image_get_pixel_size (GtkImage *image);




void gtk_image_set (GtkImage *image,
          GdkImage *val,
          GdkBitmap *mask);
void gtk_image_get (GtkImage *image,
          GdkImage **val,
          GdkBitmap **mask);



# 37 "/usr/include/gtk-2.0/gtk/gtkbutton.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkbutton.h"
typedef struct _GtkButton GtkButton;
typedef struct _GtkButtonClass GtkButtonClass;

struct _GtkButton
{
  GtkBin bin;

  GdkWindow *event_window;

  gchar *label_text;

  guint activate_timeout;

  guint constructed : 1;
  guint in_button : 1;
  guint button_down : 1;
  guint relief : 2;
  guint use_underline : 1;
  guint use_stock : 1;
  guint depressed : 1;
  guint depress_on_activate : 1;
  guint focus_on_click : 1;
};

struct _GtkButtonClass
{
  GtkBinClass parent_class;

  void (* pressed) (GtkButton *button);
  void (* released) (GtkButton *button);
  void (* clicked) (GtkButton *button);
  void (* enter) (GtkButton *button);
  void (* leave) (GtkButton *button);
  void (* activate) (GtkButton *button);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_button_get_type (void) __attribute__((__const__));
GtkWidget* gtk_button_new (void);
GtkWidget* gtk_button_new_with_label (const gchar *label);
GtkWidget* gtk_button_new_from_stock (const gchar *stock_id);
GtkWidget* gtk_button_new_with_mnemonic (const gchar *label);
void gtk_button_pressed (GtkButton *button);
void gtk_button_released (GtkButton *button);
void gtk_button_clicked (GtkButton *button);
void gtk_button_enter (GtkButton *button);
void gtk_button_leave (GtkButton *button);

void gtk_button_set_relief (GtkButton *button,
           GtkReliefStyle newstyle);
GtkReliefStyle gtk_button_get_relief (GtkButton *button);
void gtk_button_set_label (GtkButton *button,
           const gchar *label);
const gchar *gtk_button_get_label (GtkButton *button);
void gtk_button_set_use_underline (GtkButton *button,
           gboolean use_underline);
gboolean gtk_button_get_use_underline (GtkButton *button);
void gtk_button_set_use_stock (GtkButton *button,
           gboolean use_stock);
gboolean gtk_button_get_use_stock (GtkButton *button);
void gtk_button_set_focus_on_click (GtkButton *button,
           gboolean focus_on_click);
gboolean gtk_button_get_focus_on_click (GtkButton *button);
void gtk_button_set_alignment (GtkButton *button,
           gfloat xalign,
           gfloat yalign);
void gtk_button_get_alignment (GtkButton *button,
           gfloat *xalign,
           gfloat *yalign);
void gtk_button_set_image (GtkButton *button,
                  GtkWidget *image);
GtkWidget* gtk_button_get_image (GtkButton *button);
void gtk_button_set_image_position (GtkButton *button,
           GtkPositionType position);
GtkPositionType gtk_button_get_image_position (GtkButton *button);

void _gtk_button_set_depressed (GtkButton *button,
         gboolean depressed);
void _gtk_button_paint (GtkButton *button,
         const GdkRectangle *area,
         GtkStateType state_type,
         GtkShadowType shadow_type,
         const gchar *main_detail,
         const gchar *default_detail);


# 53 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcalendar.h" 1
# 37 "/usr/include/gtk-2.0/gtk/gtkcalendar.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 38 "/usr/include/gtk-2.0/gtk/gtkcalendar.h" 2


# 1 "/usr/include/gtk-2.0/gtk/gtksignal.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtksignal.h"
# 1 "/usr/include/gtk-2.0/gtk/gtk.h" 1
# 33 "/usr/include/gtk-2.0/gtk/gtksignal.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkmarshal.h" 1










extern void gtk_marshal_BOOLEAN__VOID (GClosure *closure,
                                       GValue *return_value,
                                       guint n_param_values,
                                       const GValue *param_values,
                                       gpointer invocation_hint,
                                       gpointer marshal_data);



extern void gtk_marshal_BOOLEAN__POINTER (GClosure *closure,
                                          GValue *return_value,
                                          guint n_param_values,
                                          const GValue *param_values,
                                          gpointer invocation_hint,
                                          gpointer marshal_data);



extern void gtk_marshal_BOOLEAN__POINTER_POINTER_INT_INT (GClosure *closure,
                                                          GValue *return_value,
                                                          guint n_param_values,
                                                          const GValue *param_values,
                                                          gpointer invocation_hint,
                                                          gpointer marshal_data);



extern void gtk_marshal_BOOLEAN__POINTER_INT_INT (GClosure *closure,
                                                  GValue *return_value,
                                                  guint n_param_values,
                                                  const GValue *param_values,
                                                  gpointer invocation_hint,
                                                  gpointer marshal_data);



extern void gtk_marshal_BOOLEAN__POINTER_INT_INT_UINT (GClosure *closure,
                                                       GValue *return_value,
                                                       guint n_param_values,
                                                       const GValue *param_values,
                                                       gpointer invocation_hint,
                                                       gpointer marshal_data);



extern void gtk_marshal_BOOLEAN__POINTER_STRING_STRING_POINTER (GClosure *closure,
                                                                GValue *return_value,
                                                                guint n_param_values,
                                                                const GValue *param_values,
                                                                gpointer invocation_hint,
                                                                gpointer marshal_data);



extern void gtk_marshal_ENUM__ENUM (GClosure *closure,
                                    GValue *return_value,
                                    guint n_param_values,
                                    const GValue *param_values,
                                    gpointer invocation_hint,
                                    gpointer marshal_data);


extern void gtk_marshal_INT__POINTER (GClosure *closure,
                                      GValue *return_value,
                                      guint n_param_values,
                                      const GValue *param_values,
                                      gpointer invocation_hint,
                                      gpointer marshal_data);


extern void gtk_marshal_INT__POINTER_CHAR_CHAR (GClosure *closure,
                                                GValue *return_value,
                                                guint n_param_values,
                                                const GValue *param_values,
                                                gpointer invocation_hint,
                                                gpointer marshal_data);
# 101 "/usr/include/gtk-2.0/gtk/gtkmarshal.h"
extern void gtk_marshal_VOID__ENUM_FLOAT (GClosure *closure,
                                          GValue *return_value,
                                          guint n_param_values,
                                          const GValue *param_values,
                                          gpointer invocation_hint,
                                          gpointer marshal_data);



extern void gtk_marshal_VOID__ENUM_FLOAT_BOOLEAN (GClosure *closure,
                                                  GValue *return_value,
                                                  guint n_param_values,
                                                  const GValue *param_values,
                                                  gpointer invocation_hint,
                                                  gpointer marshal_data);







extern void gtk_marshal_VOID__INT_INT (GClosure *closure,
                                       GValue *return_value,
                                       guint n_param_values,
                                       const GValue *param_values,
                                       gpointer invocation_hint,
                                       gpointer marshal_data);



extern void gtk_marshal_VOID__INT_INT_POINTER (GClosure *closure,
                                               GValue *return_value,
                                               guint n_param_values,
                                               const GValue *param_values,
                                               gpointer invocation_hint,
                                               gpointer marshal_data);
# 153 "/usr/include/gtk-2.0/gtk/gtkmarshal.h"
extern void gtk_marshal_VOID__POINTER_INT (GClosure *closure,
                                           GValue *return_value,
                                           guint n_param_values,
                                           const GValue *param_values,
                                           gpointer invocation_hint,
                                           gpointer marshal_data);



extern void gtk_marshal_VOID__POINTER_POINTER (GClosure *closure,
                                               GValue *return_value,
                                               guint n_param_values,
                                               const GValue *param_values,
                                               gpointer invocation_hint,
                                               gpointer marshal_data);



extern void gtk_marshal_VOID__POINTER_POINTER_POINTER (GClosure *closure,
                                                       GValue *return_value,
                                                       guint n_param_values,
                                                       const GValue *param_values,
                                                       gpointer invocation_hint,
                                                       gpointer marshal_data);



extern void gtk_marshal_VOID__POINTER_STRING_STRING (GClosure *closure,
                                                     GValue *return_value,
                                                     guint n_param_values,
                                                     const GValue *param_values,
                                                     gpointer invocation_hint,
                                                     gpointer marshal_data);



extern void gtk_marshal_VOID__POINTER_UINT (GClosure *closure,
                                            GValue *return_value,
                                            guint n_param_values,
                                            const GValue *param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data);



extern void gtk_marshal_VOID__POINTER_UINT_ENUM (GClosure *closure,
                                                 GValue *return_value,
                                                 guint n_param_values,
                                                 const GValue *param_values,
                                                 gpointer invocation_hint,
                                                 gpointer marshal_data);



extern void gtk_marshal_VOID__POINTER_POINTER_UINT_UINT (GClosure *closure,
                                                         GValue *return_value,
                                                         guint n_param_values,
                                                         const GValue *param_values,
                                                         gpointer invocation_hint,
                                                         gpointer marshal_data);



extern void gtk_marshal_VOID__POINTER_INT_INT_POINTER_UINT_UINT (GClosure *closure,
                                                                 GValue *return_value,
                                                                 guint n_param_values,
                                                                 const GValue *param_values,
                                                                 gpointer invocation_hint,
                                                                 gpointer marshal_data);



extern void gtk_marshal_VOID__POINTER_UINT_UINT (GClosure *closure,
                                                 GValue *return_value,
                                                 guint n_param_values,
                                                 const GValue *param_values,
                                                 gpointer invocation_hint,
                                                 gpointer marshal_data);
# 240 "/usr/include/gtk-2.0/gtk/gtkmarshal.h"
extern void gtk_marshal_VOID__STRING_INT_POINTER (GClosure *closure,
                                                  GValue *return_value,
                                                  guint n_param_values,
                                                  const GValue *param_values,
                                                  gpointer invocation_hint,
                                                  gpointer marshal_data);







extern void gtk_marshal_VOID__UINT_POINTER_UINT_ENUM_ENUM_POINTER (GClosure *closure,
                                                                   GValue *return_value,
                                                                   guint n_param_values,
                                                                   const GValue *param_values,
                                                                   gpointer invocation_hint,
                                                                   gpointer marshal_data);



extern void gtk_marshal_VOID__UINT_POINTER_UINT_UINT_ENUM (GClosure *closure,
                                                           GValue *return_value,
                                                           guint n_param_values,
                                                           const GValue *param_values,
                                                           gpointer invocation_hint,
                                                           gpointer marshal_data);



extern void gtk_marshal_VOID__UINT_STRING (GClosure *closure,
                                           GValue *return_value,
                                           guint n_param_values,
                                           const GValue *param_values,
                                           gpointer invocation_hint,
                                           gpointer marshal_data);



# 34 "/usr/include/gtk-2.0/gtk/gtksignal.h" 2


# 92 "/usr/include/gtk-2.0/gtk/gtksignal.h"
guint gtk_signal_newv (const gchar *name,
       GtkSignalRunType signal_flags,
       GType object_type,
       guint function_offset,
       GSignalCMarshaller marshaller,
       GType return_val,
       guint n_args,
       GType *args);
guint gtk_signal_new (const gchar *name,
       GtkSignalRunType signal_flags,
       GType object_type,
       guint function_offset,
       GSignalCMarshaller marshaller,
       GType return_val,
       guint n_args,
       ...);
void gtk_signal_emit_stop_by_name (GtkObject *object,
       const gchar *name);
void gtk_signal_connect_object_while_alive (GtkObject *object,
       const gchar *name,
       GCallback func,
       GtkObject *alive_object);
void gtk_signal_connect_while_alive (GtkObject *object,
       const gchar *name,
       GCallback func,
       gpointer func_data,
       GtkObject *alive_object);
gulong gtk_signal_connect_full (GtkObject *object,
       const gchar *name,
       GCallback func,
       GtkCallbackMarshal unsupported,
       gpointer data,
       GDestroyNotify destroy_func,
       gint object_signal,
       gint after);
void gtk_signal_emitv (GtkObject *object,
       guint signal_id,
       GtkArg *args);
void gtk_signal_emit (GtkObject *object,
       guint signal_id,
       ...);
void gtk_signal_emit_by_name (GtkObject *object,
       const gchar *name,
       ...);
void gtk_signal_emitv_by_name (GtkObject *object,
       const gchar *name,
       GtkArg *args);
void gtk_signal_compat_matched (GtkObject *object,
       GCallback func,
       gpointer data,
       GSignalMatchType match,
       guint action);


# 41 "/usr/include/gtk-2.0/gtk/gtkcalendar.h" 2



# 53 "/usr/include/gtk-2.0/gtk/gtkcalendar.h"
typedef struct _GtkCalendar GtkCalendar;
typedef struct _GtkCalendarClass GtkCalendarClass;

typedef struct _GtkCalendarPrivate GtkCalendarPrivate;
# 72 "/usr/include/gtk-2.0/gtk/gtkcalendar.h"
typedef enum
{
  GTK_CALENDAR_SHOW_HEADING = 1 << 0,
  GTK_CALENDAR_SHOW_DAY_NAMES = 1 << 1,
  GTK_CALENDAR_NO_MONTH_CHANGE = 1 << 2,
  GTK_CALENDAR_SHOW_WEEK_NUMBERS = 1 << 3,
  GTK_CALENDAR_WEEK_START_MONDAY = 1 << 4,
  GTK_CALENDAR_SHOW_DETAILS = 1 << 5
} GtkCalendarDisplayOptions;
# 99 "/usr/include/gtk-2.0/gtk/gtkcalendar.h"
typedef gchar* (*GtkCalendarDetailFunc) (GtkCalendar *calendar,
                                         guint year,
                                         guint month,
                                         guint day,
                                         gpointer user_data);

struct _GtkCalendar
{
  GtkWidget widget;

  GtkStyle *header_style;
  GtkStyle *label_style;

  gint month;
  gint year;
  gint selected_day;

  gint day_month[6][7];
  gint day[6][7];

  gint num_marked_dates;
  gint marked_date[31];
  GtkCalendarDisplayOptions display_flags;
  GdkColor marked_date_color[31];

  GdkGC *gc;
  GdkGC *xor_gc;

  gint focus_row;
  gint focus_col;

  gint highlight_row;
  gint highlight_col;

  GtkCalendarPrivate *priv;
  gchar grow_space [32];


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

struct _GtkCalendarClass
{
  GtkWidgetClass parent_class;


  void (* month_changed) (GtkCalendar *calendar);
  void (* day_selected) (GtkCalendar *calendar);
  void (* day_selected_double_click) (GtkCalendar *calendar);
  void (* prev_month) (GtkCalendar *calendar);
  void (* next_month) (GtkCalendar *calendar);
  void (* prev_year) (GtkCalendar *calendar);
  void (* next_year) (GtkCalendar *calendar);

};


GType gtk_calendar_get_type (void) __attribute__((__const__));
GtkWidget* gtk_calendar_new (void);

gboolean gtk_calendar_select_month (GtkCalendar *calendar,
      guint month,
      guint year);
void gtk_calendar_select_day (GtkCalendar *calendar,
      guint day);

gboolean gtk_calendar_mark_day (GtkCalendar *calendar,
      guint day);
gboolean gtk_calendar_unmark_day (GtkCalendar *calendar,
      guint day);
void gtk_calendar_clear_marks (GtkCalendar *calendar);


void gtk_calendar_set_display_options (GtkCalendar *calendar,
          GtkCalendarDisplayOptions flags);
GtkCalendarDisplayOptions
           gtk_calendar_get_display_options (GtkCalendar *calendar);

void gtk_calendar_display_options (GtkCalendar *calendar,
      GtkCalendarDisplayOptions flags);


void gtk_calendar_get_date (GtkCalendar *calendar,
      guint *year,
      guint *month,
      guint *day);

void gtk_calendar_set_detail_func (GtkCalendar *calendar,
                                         GtkCalendarDetailFunc func,
                                         gpointer data,
                                         GDestroyNotify destroy);

void gtk_calendar_set_detail_width_chars (GtkCalendar *calendar,
                                                gint chars);
void gtk_calendar_set_detail_height_rows (GtkCalendar *calendar,
                                                gint rows);

gint gtk_calendar_get_detail_width_chars (GtkCalendar *calendar);
gint gtk_calendar_get_detail_height_rows (GtkCalendar *calendar);


void gtk_calendar_freeze (GtkCalendar *calendar);
void gtk_calendar_thaw (GtkCalendar *calendar);



# 54 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcelleditable.h" 1
# 27 "/usr/include/gtk-2.0/gtk/gtkcelleditable.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkcelleditable.h" 2









typedef struct _GtkCellEditable GtkCellEditable;
typedef struct _GtkCellEditableIface GtkCellEditableIface;

struct _GtkCellEditableIface
{
  GTypeInterface g_iface;


  void (* editing_done) (GtkCellEditable *cell_editable);
  void (* remove_widget) (GtkCellEditable *cell_editable);


  void (* start_editing) (GtkCellEditable *cell_editable,
     GdkEvent *event);
};


GType gtk_cell_editable_get_type (void) __attribute__((__const__));

void gtk_cell_editable_start_editing (GtkCellEditable *cell_editable,
           GdkEvent *event);
void gtk_cell_editable_editing_done (GtkCellEditable *cell_editable);
void gtk_cell_editable_remove_widget (GtkCellEditable *cell_editable);



# 55 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcelllayout.h" 1
# 27 "/usr/include/gtk-2.0/gtk/gtkcelllayout.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcellrenderer.h" 1
# 27 "/usr/include/gtk-2.0/gtk/gtkcellrenderer.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcelleditable.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkcellrenderer.h" 2



typedef enum
{
  GTK_CELL_RENDERER_SELECTED = 1 << 0,
  GTK_CELL_RENDERER_PRELIT = 1 << 1,
  GTK_CELL_RENDERER_INSENSITIVE = 1 << 2,

  GTK_CELL_RENDERER_SORTED = 1 << 3,
  GTK_CELL_RENDERER_FOCUSED = 1 << 4
} GtkCellRendererState;

typedef enum
{
  GTK_CELL_RENDERER_MODE_INERT,
  GTK_CELL_RENDERER_MODE_ACTIVATABLE,
  GTK_CELL_RENDERER_MODE_EDITABLE
} GtkCellRendererMode;
# 55 "/usr/include/gtk-2.0/gtk/gtkcellrenderer.h"
typedef struct _GtkCellRenderer GtkCellRenderer;
typedef struct _GtkCellRendererClass GtkCellRendererClass;

struct _GtkCellRenderer
{
  GtkObject parent;

  gfloat xalign;
  gfloat yalign;

  gint width;
  gint height;

  guint16 xpad;
  guint16 ypad;

  guint mode : 2;
  guint visible : 1;
  guint is_expander : 1;
  guint is_expanded : 1;
  guint cell_background_set : 1;
  guint sensitive : 1;
  guint editing : 1;
};

struct _GtkCellRendererClass
{
  GtkObjectClass parent_class;


  void (* get_size) (GtkCellRenderer *cell,
          GtkWidget *widget,
          GdkRectangle *cell_area,
          gint *x_offset,
          gint *y_offset,
          gint *width,
          gint *height);
  void (* render) (GtkCellRenderer *cell,
          GdkDrawable *window,
          GtkWidget *widget,
          GdkRectangle *background_area,
          GdkRectangle *cell_area,
          GdkRectangle *expose_area,
          GtkCellRendererState flags);
  gboolean (* activate) (GtkCellRenderer *cell,
          GdkEvent *event,
          GtkWidget *widget,
          const gchar *path,
          GdkRectangle *background_area,
          GdkRectangle *cell_area,
          GtkCellRendererState flags);
  GtkCellEditable *(* start_editing) (GtkCellRenderer *cell,
          GdkEvent *event,
          GtkWidget *widget,
          const gchar *path,
          GdkRectangle *background_area,
          GdkRectangle *cell_area,
          GtkCellRendererState flags);


  void (* editing_canceled) (GtkCellRenderer *cell);
  void (* editing_started) (GtkCellRenderer *cell,
        GtkCellEditable *editable,
        const gchar *path);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
};

GType gtk_cell_renderer_get_type (void) __attribute__((__const__));

void gtk_cell_renderer_get_size (GtkCellRenderer *cell,
         GtkWidget *widget,
         const GdkRectangle *cell_area,
         gint *x_offset,
         gint *y_offset,
         gint *width,
         gint *height);
void gtk_cell_renderer_render (GtkCellRenderer *cell,
         GdkWindow *window,
         GtkWidget *widget,
         const GdkRectangle *background_area,
         const GdkRectangle *cell_area,
         const GdkRectangle *expose_area,
         GtkCellRendererState flags);
gboolean gtk_cell_renderer_activate (GtkCellRenderer *cell,
         GdkEvent *event,
         GtkWidget *widget,
         const gchar *path,
         const GdkRectangle *background_area,
         const GdkRectangle *cell_area,
         GtkCellRendererState flags);
GtkCellEditable *gtk_cell_renderer_start_editing (GtkCellRenderer *cell,
         GdkEvent *event,
         GtkWidget *widget,
         const gchar *path,
         const GdkRectangle *background_area,
         const GdkRectangle *cell_area,
         GtkCellRendererState flags);
void gtk_cell_renderer_set_fixed_size (GtkCellRenderer *cell,
         gint width,
         gint height);
void gtk_cell_renderer_get_fixed_size (GtkCellRenderer *cell,
         gint *width,
         gint *height);



void gtk_cell_renderer_editing_canceled (GtkCellRenderer *cell);

void gtk_cell_renderer_stop_editing (GtkCellRenderer *cell,
             gboolean canceled);



# 28 "/usr/include/gtk-2.0/gtk/gtkcelllayout.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h" 1
# 27 "/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcellrenderer.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreemodel.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtktreemodel.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkobject.h" 1
# 31 "/usr/include/gtk-2.0/gtk/gtktreemodel.h" 2


# 43 "/usr/include/gtk-2.0/gtk/gtktreemodel.h"
typedef struct _GtkTreeIter GtkTreeIter;
typedef struct _GtkTreePath GtkTreePath;
typedef struct _GtkTreeRowReference GtkTreeRowReference;
typedef struct _GtkTreeModel GtkTreeModel;
typedef struct _GtkTreeModelIface GtkTreeModelIface;
typedef gboolean (* GtkTreeModelForeachFunc) (GtkTreeModel *model, GtkTreePath *path, GtkTreeIter *iter, gpointer data);


typedef enum
{
  GTK_TREE_MODEL_ITERS_PERSIST = 1 << 0,
  GTK_TREE_MODEL_LIST_ONLY = 1 << 1
} GtkTreeModelFlags;

struct _GtkTreeIter
{
  gint stamp;
  gpointer user_data;
  gpointer user_data2;
  gpointer user_data3;
};

struct _GtkTreeModelIface
{
  GTypeInterface g_iface;


  void (* row_changed) (GtkTreeModel *tree_model,
       GtkTreePath *path,
       GtkTreeIter *iter);
  void (* row_inserted) (GtkTreeModel *tree_model,
       GtkTreePath *path,
       GtkTreeIter *iter);
  void (* row_has_child_toggled) (GtkTreeModel *tree_model,
       GtkTreePath *path,
       GtkTreeIter *iter);
  void (* row_deleted) (GtkTreeModel *tree_model,
       GtkTreePath *path);
  void (* rows_reordered) (GtkTreeModel *tree_model,
       GtkTreePath *path,
       GtkTreeIter *iter,
       gint *new_order);


  GtkTreeModelFlags (* get_flags) (GtkTreeModel *tree_model);

  gint (* get_n_columns) (GtkTreeModel *tree_model);
  GType (* get_column_type) (GtkTreeModel *tree_model,
        gint index_);
  gboolean (* get_iter) (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        GtkTreePath *path);
  GtkTreePath *(* get_path) (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
  void (* get_value) (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        gint column,
        GValue *value);
  gboolean (* iter_next) (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
  gboolean (* iter_children) (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        GtkTreeIter *parent);
  gboolean (* iter_has_child) (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
  gint (* iter_n_children) (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
  gboolean (* iter_nth_child) (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        GtkTreeIter *parent,
        gint n);
  gboolean (* iter_parent) (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        GtkTreeIter *child);
  void (* ref_node) (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
  void (* unref_node) (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
};



GtkTreePath *gtk_tree_path_new (void);
GtkTreePath *gtk_tree_path_new_from_string (const gchar *path);
GtkTreePath *gtk_tree_path_new_from_indices (gint first_index,
          ...);
gchar *gtk_tree_path_to_string (GtkTreePath *path);
GtkTreePath *gtk_tree_path_new_first (void);
void gtk_tree_path_append_index (GtkTreePath *path,
          gint index_);
void gtk_tree_path_prepend_index (GtkTreePath *path,
          gint index_);
gint gtk_tree_path_get_depth (GtkTreePath *path);
gint *gtk_tree_path_get_indices (GtkTreePath *path);
void gtk_tree_path_free (GtkTreePath *path);
GtkTreePath *gtk_tree_path_copy (const GtkTreePath *path);
GType gtk_tree_path_get_type (void) __attribute__((__const__));
gint gtk_tree_path_compare (const GtkTreePath *a,
          const GtkTreePath *b);
void gtk_tree_path_next (GtkTreePath *path);
gboolean gtk_tree_path_prev (GtkTreePath *path);
gboolean gtk_tree_path_up (GtkTreePath *path);
void gtk_tree_path_down (GtkTreePath *path);

gboolean gtk_tree_path_is_ancestor (GtkTreePath *path,
                                             GtkTreePath *descendant);
gboolean gtk_tree_path_is_descendant (GtkTreePath *path,
                                             GtkTreePath *ancestor);
# 161 "/usr/include/gtk-2.0/gtk/gtktreemodel.h"
GType gtk_tree_row_reference_get_type (void) __attribute__((__const__));
GtkTreeRowReference *gtk_tree_row_reference_new (GtkTreeModel *model,
             GtkTreePath *path);
GtkTreeRowReference *gtk_tree_row_reference_new_proxy (GObject *proxy,
             GtkTreeModel *model,
             GtkTreePath *path);
GtkTreePath *gtk_tree_row_reference_get_path (GtkTreeRowReference *reference);
GtkTreeModel *gtk_tree_row_reference_get_model (GtkTreeRowReference *reference);
gboolean gtk_tree_row_reference_valid (GtkTreeRowReference *reference);
GtkTreeRowReference *gtk_tree_row_reference_copy (GtkTreeRowReference *reference);
void gtk_tree_row_reference_free (GtkTreeRowReference *reference);


void gtk_tree_row_reference_inserted (GObject *proxy,
             GtkTreePath *path);
void gtk_tree_row_reference_deleted (GObject *proxy,
             GtkTreePath *path);
void gtk_tree_row_reference_reordered (GObject *proxy,
             GtkTreePath *path,
             GtkTreeIter *iter,
             gint *new_order);


GtkTreeIter * gtk_tree_iter_copy (GtkTreeIter *iter);
void gtk_tree_iter_free (GtkTreeIter *iter);
GType gtk_tree_iter_get_type (void) __attribute__((__const__));

GType gtk_tree_model_get_type (void) __attribute__((__const__));
GtkTreeModelFlags gtk_tree_model_get_flags (GtkTreeModel *tree_model);
gint gtk_tree_model_get_n_columns (GtkTreeModel *tree_model);
GType gtk_tree_model_get_column_type (GtkTreeModel *tree_model,
        gint index_);



gboolean gtk_tree_model_get_iter (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        GtkTreePath *path);
gboolean gtk_tree_model_get_iter_from_string (GtkTreeModel *tree_model,
             GtkTreeIter *iter,
             const gchar *path_string);
gchar * gtk_tree_model_get_string_from_iter (GtkTreeModel *tree_model,
                                                       GtkTreeIter *iter);
gboolean gtk_tree_model_get_iter_first (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
GtkTreePath * gtk_tree_model_get_path (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
void gtk_tree_model_get_value (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        gint column,
        GValue *value);
gboolean gtk_tree_model_iter_next (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
gboolean gtk_tree_model_iter_children (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        GtkTreeIter *parent);
gboolean gtk_tree_model_iter_has_child (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
gint gtk_tree_model_iter_n_children (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
gboolean gtk_tree_model_iter_nth_child (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        GtkTreeIter *parent,
        gint n);
gboolean gtk_tree_model_iter_parent (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        GtkTreeIter *child);
void gtk_tree_model_ref_node (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
void gtk_tree_model_unref_node (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
void gtk_tree_model_get (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        ...);
void gtk_tree_model_get_valist (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        va_list var_args);


void gtk_tree_model_foreach (GtkTreeModel *model,
        GtkTreeModelForeachFunc func,
        gpointer user_data);







void gtk_tree_model_row_changed (GtkTreeModel *tree_model,
        GtkTreePath *path,
        GtkTreeIter *iter);
void gtk_tree_model_row_inserted (GtkTreeModel *tree_model,
        GtkTreePath *path,
        GtkTreeIter *iter);
void gtk_tree_model_row_has_child_toggled (GtkTreeModel *tree_model,
        GtkTreePath *path,
        GtkTreeIter *iter);
void gtk_tree_model_row_deleted (GtkTreeModel *tree_model,
        GtkTreePath *path);
void gtk_tree_model_rows_reordered (GtkTreeModel *tree_model,
        GtkTreePath *path,
        GtkTreeIter *iter,
        gint *new_order);


# 29 "/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreesortable.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtktreesortable.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktreemodel.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtktreesortable.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktypeutils.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtktreesortable.h" 2










enum {
  GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID = -1,
  GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID = -2
};

typedef struct _GtkTreeSortable GtkTreeSortable;
typedef struct _GtkTreeSortableIface GtkTreeSortableIface;

typedef gint (* GtkTreeIterCompareFunc) (GtkTreeModel *model,
      GtkTreeIter *a,
      GtkTreeIter *b,
      gpointer user_data);


struct _GtkTreeSortableIface
{
  GTypeInterface g_iface;


  void (* sort_column_changed) (GtkTreeSortable *sortable);


  gboolean (* get_sort_column_id) (GtkTreeSortable *sortable,
          gint *sort_column_id,
          GtkSortType *order);
  void (* set_sort_column_id) (GtkTreeSortable *sortable,
          gint sort_column_id,
          GtkSortType order);
  void (* set_sort_func) (GtkTreeSortable *sortable,
          gint sort_column_id,
          GtkTreeIterCompareFunc func,
          gpointer data,
          GDestroyNotify destroy);
  void (* set_default_sort_func) (GtkTreeSortable *sortable,
          GtkTreeIterCompareFunc func,
          gpointer data,
          GDestroyNotify destroy);
  gboolean (* has_default_sort_func) (GtkTreeSortable *sortable);
};


GType gtk_tree_sortable_get_type (void) __attribute__((__const__));

void gtk_tree_sortable_sort_column_changed (GtkTreeSortable *sortable);
gboolean gtk_tree_sortable_get_sort_column_id (GtkTreeSortable *sortable,
        gint *sort_column_id,
        GtkSortType *order);
void gtk_tree_sortable_set_sort_column_id (GtkTreeSortable *sortable,
        gint sort_column_id,
        GtkSortType order);
void gtk_tree_sortable_set_sort_func (GtkTreeSortable *sortable,
        gint sort_column_id,
        GtkTreeIterCompareFunc sort_func,
        gpointer user_data,
        GDestroyNotify destroy);
void gtk_tree_sortable_set_default_sort_func (GtkTreeSortable *sortable,
        GtkTreeIterCompareFunc sort_func,
        gpointer user_data,
        GDestroyNotify destroy);
gboolean gtk_tree_sortable_has_default_sort_func (GtkTreeSortable *sortable);


# 30 "/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h" 2


# 1 "/usr/include/gtk-2.0/gtk/gtkobject.h" 1
# 33 "/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h" 2



# 45 "/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h"
typedef enum
{
  GTK_TREE_VIEW_COLUMN_GROW_ONLY,
  GTK_TREE_VIEW_COLUMN_AUTOSIZE,
  GTK_TREE_VIEW_COLUMN_FIXED
} GtkTreeViewColumnSizing;

typedef struct _GtkTreeViewColumn GtkTreeViewColumn;
typedef struct _GtkTreeViewColumnClass GtkTreeViewColumnClass;

typedef void (* GtkTreeCellDataFunc) (GtkTreeViewColumn *tree_column,
          GtkCellRenderer *cell,
          GtkTreeModel *tree_model,
          GtkTreeIter *iter,
          gpointer data);


struct _GtkTreeViewColumn
{
  GtkObject parent;

  GtkWidget *tree_view;
  GtkWidget *button;
  GtkWidget *child;
  GtkWidget *arrow;
  GtkWidget *alignment;
  GdkWindow *window;
  GtkCellEditable *editable_widget;
  gfloat xalign;
  guint property_changed_signal;
  gint spacing;



  GtkTreeViewColumnSizing column_type;
  gint requested_width;
  gint button_request;
  gint resized_width;
  gint width;
  gint fixed_width;
  gint min_width;
  gint max_width;


  gint drag_x;
  gint drag_y;

  gchar *title;
  GList *cell_list;


  guint sort_clicked_signal;
  guint sort_column_changed_signal;
  gint sort_column_id;
  GtkSortType sort_order;


  guint visible : 1;
  guint resizable : 1;
  guint clickable : 1;
  guint dirty : 1;
  guint show_sort_indicator : 1;
  guint maybe_reordered : 1;
  guint reorderable : 1;
  guint use_resized_width : 1;
  guint expand : 1;
};

struct _GtkTreeViewColumnClass
{
  GtkObjectClass parent_class;

  void (*clicked) (GtkTreeViewColumn *tree_column);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_tree_view_column_get_type (void) __attribute__((__const__));
GtkTreeViewColumn *gtk_tree_view_column_new (void);
GtkTreeViewColumn *gtk_tree_view_column_new_with_attributes (const gchar *title,
          GtkCellRenderer *cell,
          ...) __attribute__((__sentinel__));
void gtk_tree_view_column_pack_start (GtkTreeViewColumn *tree_column,
          GtkCellRenderer *cell,
          gboolean expand);
void gtk_tree_view_column_pack_end (GtkTreeViewColumn *tree_column,
          GtkCellRenderer *cell,
          gboolean expand);
void gtk_tree_view_column_clear (GtkTreeViewColumn *tree_column);
GList *gtk_tree_view_column_get_cell_renderers (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_add_attribute (GtkTreeViewColumn *tree_column,
          GtkCellRenderer *cell_renderer,
          const gchar *attribute,
          gint column);
void gtk_tree_view_column_set_attributes (GtkTreeViewColumn *tree_column,
          GtkCellRenderer *cell_renderer,
          ...) __attribute__((__sentinel__));
void gtk_tree_view_column_set_cell_data_func (GtkTreeViewColumn *tree_column,
          GtkCellRenderer *cell_renderer,
          GtkTreeCellDataFunc func,
          gpointer func_data,
          GDestroyNotify destroy);
void gtk_tree_view_column_clear_attributes (GtkTreeViewColumn *tree_column,
          GtkCellRenderer *cell_renderer);
void gtk_tree_view_column_set_spacing (GtkTreeViewColumn *tree_column,
          gint spacing);
gint gtk_tree_view_column_get_spacing (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_set_visible (GtkTreeViewColumn *tree_column,
          gboolean visible);
gboolean gtk_tree_view_column_get_visible (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_set_resizable (GtkTreeViewColumn *tree_column,
          gboolean resizable);
gboolean gtk_tree_view_column_get_resizable (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_set_sizing (GtkTreeViewColumn *tree_column,
          GtkTreeViewColumnSizing type);
GtkTreeViewColumnSizing gtk_tree_view_column_get_sizing (GtkTreeViewColumn *tree_column);
gint gtk_tree_view_column_get_width (GtkTreeViewColumn *tree_column);
gint gtk_tree_view_column_get_fixed_width (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_set_fixed_width (GtkTreeViewColumn *tree_column,
          gint fixed_width);
void gtk_tree_view_column_set_min_width (GtkTreeViewColumn *tree_column,
          gint min_width);
gint gtk_tree_view_column_get_min_width (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_set_max_width (GtkTreeViewColumn *tree_column,
          gint max_width);
gint gtk_tree_view_column_get_max_width (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_clicked (GtkTreeViewColumn *tree_column);





void gtk_tree_view_column_set_title (GtkTreeViewColumn *tree_column,
          const gchar *title);
const gchar *gtk_tree_view_column_get_title (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_set_expand (GtkTreeViewColumn *tree_column,
          gboolean expand);
gboolean gtk_tree_view_column_get_expand (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_set_clickable (GtkTreeViewColumn *tree_column,
          gboolean clickable);
gboolean gtk_tree_view_column_get_clickable (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_set_widget (GtkTreeViewColumn *tree_column,
          GtkWidget *widget);
GtkWidget *gtk_tree_view_column_get_widget (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_set_alignment (GtkTreeViewColumn *tree_column,
          gfloat xalign);
gfloat gtk_tree_view_column_get_alignment (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_set_reorderable (GtkTreeViewColumn *tree_column,
          gboolean reorderable);
gboolean gtk_tree_view_column_get_reorderable (GtkTreeViewColumn *tree_column);






void gtk_tree_view_column_set_sort_column_id (GtkTreeViewColumn *tree_column,
          gint sort_column_id);
gint gtk_tree_view_column_get_sort_column_id (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_set_sort_indicator (GtkTreeViewColumn *tree_column,
          gboolean setting);
gboolean gtk_tree_view_column_get_sort_indicator (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_set_sort_order (GtkTreeViewColumn *tree_column,
          GtkSortType order);
GtkSortType gtk_tree_view_column_get_sort_order (GtkTreeViewColumn *tree_column);




void gtk_tree_view_column_cell_set_cell_data (GtkTreeViewColumn *tree_column,
          GtkTreeModel *tree_model,
          GtkTreeIter *iter,
          gboolean is_expander,
          gboolean is_expanded);
void gtk_tree_view_column_cell_get_size (GtkTreeViewColumn *tree_column,
          const GdkRectangle *cell_area,
          gint *x_offset,
          gint *y_offset,
          gint *width,
          gint *height);
gboolean gtk_tree_view_column_cell_is_visible (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_focus_cell (GtkTreeViewColumn *tree_column,
          GtkCellRenderer *cell);
gboolean gtk_tree_view_column_cell_get_position (GtkTreeViewColumn *tree_column,
                               GtkCellRenderer *cell_renderer,
                               gint *start_pos,
                               gint *width);
void gtk_tree_view_column_queue_resize (GtkTreeViewColumn *tree_column);
GtkWidget *gtk_tree_view_column_get_tree_view (GtkTreeViewColumn *tree_column);



# 29 "/usr/include/gtk-2.0/gtk/gtkcelllayout.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkbuildable.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkcelllayout.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkbuilder.h" 1
# 31 "/usr/include/gtk-2.0/gtk/gtkcelllayout.h" 2








typedef struct _GtkCellLayout GtkCellLayout;
typedef struct _GtkCellLayoutIface GtkCellLayoutIface;


typedef void (* GtkCellLayoutDataFunc) (GtkCellLayout *cell_layout,
                                        GtkCellRenderer *cell,
                                        GtkTreeModel *tree_model,
                                        GtkTreeIter *iter,
                                        gpointer data);

struct _GtkCellLayoutIface
{
  GTypeInterface g_iface;


  void (* pack_start) (GtkCellLayout *cell_layout,
                               GtkCellRenderer *cell,
                               gboolean expand);
  void (* pack_end) (GtkCellLayout *cell_layout,
                               GtkCellRenderer *cell,
                               gboolean expand);
  void (* clear) (GtkCellLayout *cell_layout);
  void (* add_attribute) (GtkCellLayout *cell_layout,
                               GtkCellRenderer *cell,
                               const gchar *attribute,
                               gint column);
  void (* set_cell_data_func) (GtkCellLayout *cell_layout,
                               GtkCellRenderer *cell,
                               GtkCellLayoutDataFunc func,
                               gpointer func_data,
                               GDestroyNotify destroy);
  void (* clear_attributes) (GtkCellLayout *cell_layout,
                               GtkCellRenderer *cell);
  void (* reorder) (GtkCellLayout *cell_layout,
                               GtkCellRenderer *cell,
                               gint position);
  GList* (* get_cells) (GtkCellLayout *cell_layout);
};

GType gtk_cell_layout_get_type (void) __attribute__((__const__));
void gtk_cell_layout_pack_start (GtkCellLayout *cell_layout,
                                          GtkCellRenderer *cell,
                                          gboolean expand);
void gtk_cell_layout_pack_end (GtkCellLayout *cell_layout,
                                          GtkCellRenderer *cell,
                                          gboolean expand);
GList *gtk_cell_layout_get_cells (GtkCellLayout *cell_layout);
void gtk_cell_layout_clear (GtkCellLayout *cell_layout);
void gtk_cell_layout_set_attributes (GtkCellLayout *cell_layout,
                                          GtkCellRenderer *cell,
                                          ...) __attribute__((__sentinel__));
void gtk_cell_layout_add_attribute (GtkCellLayout *cell_layout,
                                          GtkCellRenderer *cell,
                                          const gchar *attribute,
                                          gint column);
void gtk_cell_layout_set_cell_data_func (GtkCellLayout *cell_layout,
                                          GtkCellRenderer *cell,
                                          GtkCellLayoutDataFunc func,
                                          gpointer func_data,
                                          GDestroyNotify destroy);
void gtk_cell_layout_clear_attributes (GtkCellLayout *cell_layout,
                                          GtkCellRenderer *cell);
void gtk_cell_layout_reorder (GtkCellLayout *cell_layout,
                                          GtkCellRenderer *cell,
                                          gint position);
gboolean _gtk_cell_layout_buildable_custom_tag_start (GtkBuildable *buildable,
            GtkBuilder *builder,
            GObject *child,
            const gchar *tagname,
            GMarkupParser *parser,
            gpointer *data);
void _gtk_cell_layout_buildable_custom_tag_end (GtkBuildable *buildable,
            GtkBuilder *builder,
            GObject *child,
            const gchar *tagname,
            gpointer *data);
void _gtk_cell_layout_buildable_add_child (GtkBuildable *buildable,
            GtkBuilder *builder,
            GObject *child,
            const gchar *type);


# 56 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcellrenderer.h" 1
# 57 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcellrendereraccel.h" 1
# 27 "/usr/include/gtk-2.0/gtk/gtkcellrendereraccel.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcellrenderertext.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkcellrenderertext.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcellrenderer.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkcellrenderertext.h" 2



# 41 "/usr/include/gtk-2.0/gtk/gtkcellrenderertext.h"
typedef struct _GtkCellRendererText GtkCellRendererText;
typedef struct _GtkCellRendererTextClass GtkCellRendererTextClass;

struct _GtkCellRendererText
{
  GtkCellRenderer parent;


  gchar *text;
  PangoFontDescription *font;
  gdouble font_scale;
  PangoColor foreground;
  PangoColor background;

  PangoAttrList *extra_attrs;

  PangoUnderline underline_style;

  gint rise;
  gint fixed_height_rows;

  guint strikethrough : 1;

  guint editable : 1;

  guint scale_set : 1;

  guint foreground_set : 1;
  guint background_set : 1;

  guint underline_set : 1;

  guint rise_set : 1;

  guint strikethrough_set : 1;

  guint editable_set : 1;
  guint calc_fixed_height : 1;
};

struct _GtkCellRendererTextClass
{
  GtkCellRendererClass parent_class;

  void (* edited) (GtkCellRendererText *cell_renderer_text,
     const gchar *path,
     const gchar *new_text);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_cell_renderer_text_get_type (void) __attribute__((__const__));
GtkCellRenderer *gtk_cell_renderer_text_new (void);

void gtk_cell_renderer_text_set_fixed_height_from_font (GtkCellRendererText *renderer,
            gint number_of_rows);



# 28 "/usr/include/gtk-2.0/gtk/gtkcellrendereraccel.h" 2


# 38 "/usr/include/gtk-2.0/gtk/gtkcellrendereraccel.h"
typedef struct _GtkCellRendererAccel GtkCellRendererAccel;
typedef struct _GtkCellRendererAccelClass GtkCellRendererAccelClass;


typedef enum
{
  GTK_CELL_RENDERER_ACCEL_MODE_GTK,
  GTK_CELL_RENDERER_ACCEL_MODE_OTHER
} GtkCellRendererAccelMode;


struct _GtkCellRendererAccel
{
  GtkCellRendererText parent;


  guint accel_key;
  GdkModifierType accel_mods;
  guint keycode;
  GtkCellRendererAccelMode accel_mode;

  GtkWidget *edit_widget;
  GtkWidget *grab_widget;
  GtkWidget *sizing_label;
};

struct _GtkCellRendererAccelClass
{
  GtkCellRendererTextClass parent_class;

  void (* accel_edited) (GtkCellRendererAccel *accel,
      const gchar *path_string,
     guint accel_key,
     GdkModifierType accel_mods,
     guint hardware_keycode);

  void (* accel_cleared) (GtkCellRendererAccel *accel,
     const gchar *path_string);


  void (*_gtk_reserved0) (void);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_cell_renderer_accel_get_type (void) __attribute__((__const__));
GtkCellRenderer *gtk_cell_renderer_accel_new (void);



# 58 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcellrenderercombo.h" 1
# 27 "/usr/include/gtk-2.0/gtk/gtkcellrenderercombo.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktreemodel.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkcellrenderercombo.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcellrenderertext.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkcellrenderercombo.h" 2


# 39 "/usr/include/gtk-2.0/gtk/gtkcellrenderercombo.h"
typedef struct _GtkCellRendererCombo GtkCellRendererCombo;
typedef struct _GtkCellRendererComboClass GtkCellRendererComboClass;

struct _GtkCellRendererCombo
{
  GtkCellRendererText parent;

  GtkTreeModel *model;
  gint text_column;
  gboolean has_entry;


  guint focus_out_id;
};

struct _GtkCellRendererComboClass
{
  GtkCellRendererTextClass parent;
};

GType gtk_cell_renderer_combo_get_type (void) __attribute__((__const__));
GtkCellRenderer *gtk_cell_renderer_combo_new (void);


# 59 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcellrendererpixbuf.h" 1
# 27 "/usr/include/gtk-2.0/gtk/gtkcellrendererpixbuf.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcellrenderer.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkcellrendererpixbuf.h" 2



# 40 "/usr/include/gtk-2.0/gtk/gtkcellrendererpixbuf.h"
typedef struct _GtkCellRendererPixbuf GtkCellRendererPixbuf;
typedef struct _GtkCellRendererPixbufClass GtkCellRendererPixbufClass;

struct _GtkCellRendererPixbuf
{
  GtkCellRenderer parent;


  GdkPixbuf *pixbuf;
  GdkPixbuf *pixbuf_expander_open;
  GdkPixbuf *pixbuf_expander_closed;
};

struct _GtkCellRendererPixbufClass
{
  GtkCellRendererClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_cell_renderer_pixbuf_get_type (void) __attribute__((__const__));
GtkCellRenderer *gtk_cell_renderer_pixbuf_new (void);



# 60 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcellrendererprogress.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkcellrendererprogress.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcellrenderer.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkcellrendererprogress.h" 2


# 46 "/usr/include/gtk-2.0/gtk/gtkcellrendererprogress.h"
typedef struct _GtkCellRendererProgress GtkCellRendererProgress;
typedef struct _GtkCellRendererProgressClass GtkCellRendererProgressClass;
typedef struct _GtkCellRendererProgressPrivate GtkCellRendererProgressPrivate;

struct _GtkCellRendererProgress
{
  GtkCellRenderer parent_instance;


  GtkCellRendererProgressPrivate *priv;
};

struct _GtkCellRendererProgressClass
{
  GtkCellRendererClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_cell_renderer_progress_get_type (void) __attribute__((__const__));
GtkCellRenderer* gtk_cell_renderer_progress_new (void);


# 61 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcellrendererspin.h" 1
# 27 "/usr/include/gtk-2.0/gtk/gtkcellrendererspin.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcellrenderertext.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkcellrendererspin.h" 2


# 38 "/usr/include/gtk-2.0/gtk/gtkcellrendererspin.h"
typedef struct _GtkCellRendererSpin GtkCellRendererSpin;
typedef struct _GtkCellRendererSpinClass GtkCellRendererSpinClass;
typedef struct _GtkCellRendererSpinPrivate GtkCellRendererSpinPrivate;

struct _GtkCellRendererSpin
{
  GtkCellRendererText parent;
};

struct _GtkCellRendererSpinClass
{
  GtkCellRendererTextClass parent;
};

GType gtk_cell_renderer_spin_get_type (void);
GtkCellRenderer *gtk_cell_renderer_spin_new (void);


# 62 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcellrenderertext.h" 1
# 63 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcellrenderertoggle.h" 1
# 27 "/usr/include/gtk-2.0/gtk/gtkcellrenderertoggle.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcellrenderer.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkcellrenderertoggle.h" 2



# 40 "/usr/include/gtk-2.0/gtk/gtkcellrenderertoggle.h"
typedef struct _GtkCellRendererToggle GtkCellRendererToggle;
typedef struct _GtkCellRendererToggleClass GtkCellRendererToggleClass;

struct _GtkCellRendererToggle
{
  GtkCellRenderer parent;


  guint active : 1;
  guint activatable : 1;
  guint radio : 1;
};

struct _GtkCellRendererToggleClass
{
  GtkCellRendererClass parent_class;

  void (* toggled) (GtkCellRendererToggle *cell_renderer_toggle,
      const gchar *path);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_cell_renderer_toggle_get_type (void) __attribute__((__const__));
GtkCellRenderer *gtk_cell_renderer_toggle_new (void);

gboolean gtk_cell_renderer_toggle_get_radio (GtkCellRendererToggle *toggle);
void gtk_cell_renderer_toggle_set_radio (GtkCellRendererToggle *toggle,
           gboolean radio);

gboolean gtk_cell_renderer_toggle_get_active (GtkCellRendererToggle *toggle);
void gtk_cell_renderer_toggle_set_active (GtkCellRendererToggle *toggle,
                                                     gboolean setting);



# 64 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcellview.h" 1
# 27 "/usr/include/gtk-2.0/gtk/gtkcellview.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkcellview.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcellrenderer.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkcellview.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreemodel.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkcellview.h" 2


# 40 "/usr/include/gtk-2.0/gtk/gtkcellview.h"
typedef struct _GtkCellView GtkCellView;
typedef struct _GtkCellViewClass GtkCellViewClass;
typedef struct _GtkCellViewPrivate GtkCellViewPrivate;

struct _GtkCellView
{
  GtkWidget parent_instance;


  GtkCellViewPrivate *priv;
};

struct _GtkCellViewClass
{
  GtkWidgetClass parent_class;
};

GType gtk_cell_view_get_type (void) __attribute__((__const__));
GtkWidget *gtk_cell_view_new (void);
GtkWidget *gtk_cell_view_new_with_text (const gchar *text);
GtkWidget *gtk_cell_view_new_with_markup (const gchar *markup);
GtkWidget *gtk_cell_view_new_with_pixbuf (GdkPixbuf *pixbuf);

void gtk_cell_view_set_model (GtkCellView *cell_view,
                                                         GtkTreeModel *model);
GtkTreeModel *gtk_cell_view_get_model (GtkCellView *cell_view);
void gtk_cell_view_set_displayed_row (GtkCellView *cell_view,
                                                         GtkTreePath *path);
GtkTreePath *gtk_cell_view_get_displayed_row (GtkCellView *cell_view);
gboolean gtk_cell_view_get_size_of_row (GtkCellView *cell_view,
                                                         GtkTreePath *path,
                                                         GtkRequisition *requisition);

void gtk_cell_view_set_background_color (GtkCellView *cell_view,
                                                         const GdkColor *color);
GList *gtk_cell_view_get_cell_renderers (GtkCellView *cell_view);


# 65 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcheckbutton.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkcheckbutton.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktogglebutton.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtktogglebutton.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkbutton.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtktogglebutton.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtktogglebutton.h"
typedef struct _GtkToggleButton GtkToggleButton;
typedef struct _GtkToggleButtonClass GtkToggleButtonClass;

struct _GtkToggleButton
{
  GtkButton button;

  guint active : 1;
  guint draw_indicator : 1;
  guint inconsistent : 1;
};

struct _GtkToggleButtonClass
{
  GtkButtonClass parent_class;

  void (* toggled) (GtkToggleButton *toggle_button);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_toggle_button_get_type (void) __attribute__((__const__));

GtkWidget* gtk_toggle_button_new (void);
GtkWidget* gtk_toggle_button_new_with_label (const gchar *label);
GtkWidget* gtk_toggle_button_new_with_mnemonic (const gchar *label);
void gtk_toggle_button_set_mode (GtkToggleButton *toggle_button,
                                                gboolean draw_indicator);
gboolean gtk_toggle_button_get_mode (GtkToggleButton *toggle_button);
void gtk_toggle_button_set_active (GtkToggleButton *toggle_button,
                                                gboolean is_active);
gboolean gtk_toggle_button_get_active (GtkToggleButton *toggle_button);
void gtk_toggle_button_toggled (GtkToggleButton *toggle_button);
void gtk_toggle_button_set_inconsistent (GtkToggleButton *toggle_button,
                                                gboolean setting);
gboolean gtk_toggle_button_get_inconsistent (GtkToggleButton *toggle_button);







# 36 "/usr/include/gtk-2.0/gtk/gtkcheckbutton.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkcheckbutton.h"
typedef struct _GtkCheckButton GtkCheckButton;
typedef struct _GtkCheckButtonClass GtkCheckButtonClass;

struct _GtkCheckButton
{
  GtkToggleButton toggle_button;
};

struct _GtkCheckButtonClass
{
  GtkToggleButtonClass parent_class;

  void (* draw_indicator) (GtkCheckButton *check_button,
      GdkRectangle *area);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_check_button_get_type (void) __attribute__((__const__));
GtkWidget* gtk_check_button_new (void);
GtkWidget* gtk_check_button_new_with_label (const gchar *label);
GtkWidget* gtk_check_button_new_with_mnemonic (const gchar *label);

void _gtk_check_button_get_props (GtkCheckButton *check_button,
      gint *indicator_size,
      gint *indicator_spacing);


# 66 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcheckmenuitem.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkcheckmenuitem.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkmenuitem.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkmenuitem.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkitem.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkitem.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkbin.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkitem.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkitem.h"
typedef struct _GtkItem GtkItem;
typedef struct _GtkItemClass GtkItemClass;

struct _GtkItem
{
  GtkBin bin;
};

struct _GtkItemClass
{
  GtkBinClass parent_class;

  void (* select) (GtkItem *item);
  void (* deselect) (GtkItem *item);
  void (* toggle) (GtkItem *item);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_item_get_type (void) __attribute__((__const__));
void gtk_item_select (GtkItem *item);
void gtk_item_deselect (GtkItem *item);
void gtk_item_toggle (GtkItem *item);


# 36 "/usr/include/gtk-2.0/gtk/gtkmenuitem.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkmenuitem.h"
typedef struct _GtkMenuItem GtkMenuItem;
typedef struct _GtkMenuItemClass GtkMenuItemClass;

struct _GtkMenuItem
{
  GtkItem item;

  GtkWidget *submenu;
  GdkWindow *event_window;

  guint16 toggle_size;
  guint16 accelerator_width;
  gchar *accel_path;

  guint show_submenu_indicator : 1;
  guint submenu_placement : 1;
  guint submenu_direction : 1;
  guint right_justify: 1;
  guint timer_from_keypress : 1;
  guint from_menubar : 1;
  guint timer;
};

struct _GtkMenuItemClass
{
  GtkItemClass parent_class;







  guint hide_on_activate : 1;

  void (* activate) (GtkMenuItem *menu_item);
  void (* activate_item) (GtkMenuItem *menu_item);
  void (* toggle_size_request) (GtkMenuItem *menu_item,
     gint *requisition);
  void (* toggle_size_allocate) (GtkMenuItem *menu_item,
     gint allocation);
  void (* set_label) (GtkMenuItem *menu_item,
     const gchar *label);
  const gchar *(* get_label) (GtkMenuItem *menu_item);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
};


GType gtk_menu_item_get_type (void) __attribute__((__const__));
GtkWidget* gtk_menu_item_new (void);
GtkWidget* gtk_menu_item_new_with_label (const gchar *label);
GtkWidget* gtk_menu_item_new_with_mnemonic (const gchar *label);
void gtk_menu_item_set_submenu (GtkMenuItem *menu_item,
            GtkWidget *submenu);
GtkWidget* gtk_menu_item_get_submenu (GtkMenuItem *menu_item);
void gtk_menu_item_select (GtkMenuItem *menu_item);
void gtk_menu_item_deselect (GtkMenuItem *menu_item);
void gtk_menu_item_activate (GtkMenuItem *menu_item);
void gtk_menu_item_toggle_size_request (GtkMenuItem *menu_item,
            gint *requisition);
void gtk_menu_item_toggle_size_allocate (GtkMenuItem *menu_item,
            gint allocation);
void gtk_menu_item_set_right_justified (GtkMenuItem *menu_item,
            gboolean right_justified);
gboolean gtk_menu_item_get_right_justified (GtkMenuItem *menu_item);
void gtk_menu_item_set_accel_path (GtkMenuItem *menu_item,
            const gchar *accel_path);
const gchar* gtk_menu_item_get_accel_path (GtkMenuItem *menu_item);

void gtk_menu_item_set_label (GtkMenuItem *menu_item,
             const gchar *label);
const gchar *gtk_menu_item_get_label (GtkMenuItem *menu_item);

void gtk_menu_item_set_use_underline (GtkMenuItem *menu_item,
             gboolean setting);
gboolean gtk_menu_item_get_use_underline (GtkMenuItem *menu_item);


void _gtk_menu_item_refresh_accel_path (GtkMenuItem *menu_item,
            const gchar *prefix,
            GtkAccelGroup *accel_group,
            gboolean group_changed);
gboolean _gtk_menu_item_is_selectable (GtkWidget *menu_item);
void _gtk_menu_item_popup_submenu (GtkWidget *menu_item,
                                               gboolean with_delay);
void _gtk_menu_item_popdown_submenu (GtkWidget *menu_item);


void gtk_menu_item_remove_submenu (GtkMenuItem *menu_item);




# 36 "/usr/include/gtk-2.0/gtk/gtkcheckmenuitem.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkcheckmenuitem.h"
typedef struct _GtkCheckMenuItem GtkCheckMenuItem;
typedef struct _GtkCheckMenuItemClass GtkCheckMenuItemClass;

struct _GtkCheckMenuItem
{
  GtkMenuItem menu_item;

  guint active : 1;
  guint always_show_toggle : 1;
  guint inconsistent : 1;
  guint draw_as_radio : 1;
};

struct _GtkCheckMenuItemClass
{
  GtkMenuItemClass parent_class;

  void (* toggled) (GtkCheckMenuItem *check_menu_item);
  void (* draw_indicator) (GtkCheckMenuItem *check_menu_item,
      GdkRectangle *area);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_check_menu_item_get_type (void) __attribute__((__const__));

GtkWidget* gtk_check_menu_item_new (void);
GtkWidget* gtk_check_menu_item_new_with_label (const gchar *label);
GtkWidget* gtk_check_menu_item_new_with_mnemonic (const gchar *label);
void gtk_check_menu_item_set_active (GtkCheckMenuItem *check_menu_item,
        gboolean is_active);
gboolean gtk_check_menu_item_get_active (GtkCheckMenuItem *check_menu_item);
void gtk_check_menu_item_toggled (GtkCheckMenuItem *check_menu_item);
void gtk_check_menu_item_set_inconsistent (GtkCheckMenuItem *check_menu_item,
        gboolean setting);
gboolean gtk_check_menu_item_get_inconsistent (GtkCheckMenuItem *check_menu_item);
void gtk_check_menu_item_set_draw_as_radio (GtkCheckMenuItem *check_menu_item,
        gboolean draw_as_radio);
gboolean gtk_check_menu_item_get_draw_as_radio (GtkCheckMenuItem *check_menu_item);



void gtk_check_menu_item_set_show_toggle (GtkCheckMenuItem *menu_item,
      gboolean always);




# 67 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkclipboard.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkclipboard.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkselection.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkselection.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkselection.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktextiter.h" 1
# 34 "/usr/include/gtk-2.0/gtk/gtktextiter.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktexttag.h" 1
# 59 "/usr/include/gtk-2.0/gtk/gtktexttag.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkenums.h" 1
# 60 "/usr/include/gtk-2.0/gtk/gtktexttag.h" 2


# 1 "/usr/include/gtk-2.0/gtk/gtkobject.h" 1
# 63 "/usr/include/gtk-2.0/gtk/gtktexttag.h" 2




typedef struct _GtkTextIter GtkTextIter;
typedef struct _GtkTextTagTable GtkTextTagTable;

typedef struct _GtkTextAttributes GtkTextAttributes;
# 81 "/usr/include/gtk-2.0/gtk/gtktexttag.h"
typedef struct _GtkTextTag GtkTextTag;
typedef struct _GtkTextTagClass GtkTextTagClass;

struct _GtkTextTag
{
  GObject parent_instance;

  GtkTextTagTable *table;

  char *name;



  int priority;
# 106 "/usr/include/gtk-2.0/gtk/gtktexttag.h"
  GtkTextAttributes *values;




  guint bg_color_set : 1;
  guint bg_stipple_set : 1;
  guint fg_color_set : 1;
  guint scale_set : 1;
  guint fg_stipple_set : 1;
  guint justification_set : 1;
  guint left_margin_set : 1;
  guint indent_set : 1;
  guint rise_set : 1;
  guint strikethrough_set : 1;
  guint right_margin_set : 1;
  guint pixels_above_lines_set : 1;
  guint pixels_below_lines_set : 1;
  guint pixels_inside_wrap_set : 1;
  guint tabs_set : 1;
  guint underline_set : 1;
  guint wrap_mode_set : 1;
  guint bg_full_height_set : 1;
  guint invisible_set : 1;
  guint editable_set : 1;
  guint language_set : 1;
  guint pg_bg_color_set : 1;


  guint accumulative_margin : 1;

  guint pad1 : 1;
};

struct _GtkTextTagClass
{
  GObjectClass parent_class;

  gboolean (* event) (GtkTextTag *tag,
                      GObject *event_object,
                      GdkEvent *event,
                      const GtkTextIter *iter);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_text_tag_get_type (void) __attribute__((__const__));
GtkTextTag *gtk_text_tag_new (const gchar *name);
gint gtk_text_tag_get_priority (GtkTextTag *tag);
void gtk_text_tag_set_priority (GtkTextTag *tag,
                                        gint priority);
gboolean gtk_text_tag_event (GtkTextTag *tag,
                                        GObject *event_object,
                                        GdkEvent *event,
                                        const GtkTextIter *iter);





typedef struct _GtkTextAppearance GtkTextAppearance;

struct _GtkTextAppearance
{

  GdkColor bg_color;
  GdkColor fg_color;
  GdkBitmap *bg_stipple;
  GdkBitmap *fg_stipple;


  gint rise;





  gpointer padding1;


  guint underline : 4;
  guint strikethrough : 1;






  guint draw_bg : 1;





  guint inside_selection : 1;
  guint is_text : 1;


  guint pad1 : 1;
  guint pad2 : 1;
  guint pad3 : 1;
  guint pad4 : 1;
};

struct _GtkTextAttributes
{

  guint refcount;


  GtkTextAppearance appearance;

  GtkJustification justification;
  GtkTextDirection direction;


  PangoFontDescription *font;

  gdouble font_scale;

  gint left_margin;

  gint indent;

  gint right_margin;

  gint pixels_above_lines;

  gint pixels_below_lines;

  gint pixels_inside_wrap;

  PangoTabArray *tabs;

  GtkWrapMode wrap_mode;




  PangoLanguage *language;


  GdkColor *pg_bg_color;



  guint invisible : 1;




  guint bg_full_height : 1;


  guint editable : 1;


  guint realized : 1;


  guint pad1 : 1;
  guint pad2 : 1;
  guint pad3 : 1;
  guint pad4 : 1;
};

GtkTextAttributes* gtk_text_attributes_new (void);
GtkTextAttributes* gtk_text_attributes_copy (GtkTextAttributes *src);
void gtk_text_attributes_copy_values (GtkTextAttributes *src,
                                                    GtkTextAttributes *dest);
void gtk_text_attributes_unref (GtkTextAttributes *values);
GtkTextAttributes *gtk_text_attributes_ref (GtkTextAttributes *values);

GType gtk_text_attributes_get_type (void) __attribute__((__const__));



# 35 "/usr/include/gtk-2.0/gtk/gtktextiter.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktextchild.h" 1
# 37 "/usr/include/gtk-2.0/gtk/gtktextchild.h"








typedef struct _GtkTextChildAnchor GtkTextChildAnchor;
typedef struct _GtkTextChildAnchorClass GtkTextChildAnchorClass;
# 55 "/usr/include/gtk-2.0/gtk/gtktextchild.h"
struct _GtkTextChildAnchor
{
  GObject parent_instance;

  gpointer segment;
};

struct _GtkTextChildAnchorClass
{
  GObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_text_child_anchor_get_type (void) __attribute__((__const__));

GtkTextChildAnchor* gtk_text_child_anchor_new (void);

GList* gtk_text_child_anchor_get_widgets (GtkTextChildAnchor *anchor);
gboolean gtk_text_child_anchor_get_deleted (GtkTextChildAnchor *anchor);


# 36 "/usr/include/gtk-2.0/gtk/gtktextiter.h" 2



typedef enum {
  GTK_TEXT_SEARCH_VISIBLE_ONLY = 1 << 0,
  GTK_TEXT_SEARCH_TEXT_ONLY = 1 << 1

} GtkTextSearchFlags;







typedef struct _GtkTextBuffer GtkTextBuffer;



struct _GtkTextIter {





  gpointer dummy1;
  gpointer dummy2;
  gint dummy3;
  gint dummy4;
  gint dummy5;
  gint dummy6;
  gint dummy7;
  gint dummy8;
  gpointer dummy9;
  gpointer dummy10;
  gint dummy11;
  gint dummy12;

  gint dummy13;
  gpointer dummy14;
};




GtkTextBuffer *gtk_text_iter_get_buffer (const GtkTextIter *iter);





GtkTextIter *gtk_text_iter_copy (const GtkTextIter *iter);
void gtk_text_iter_free (GtkTextIter *iter);

GType gtk_text_iter_get_type (void) __attribute__((__const__));





gint gtk_text_iter_get_offset (const GtkTextIter *iter);
gint gtk_text_iter_get_line (const GtkTextIter *iter);
gint gtk_text_iter_get_line_offset (const GtkTextIter *iter);
gint gtk_text_iter_get_line_index (const GtkTextIter *iter);

gint gtk_text_iter_get_visible_line_offset (const GtkTextIter *iter);
gint gtk_text_iter_get_visible_line_index (const GtkTextIter *iter);





gunichar gtk_text_iter_get_char (const GtkTextIter *iter);




gchar *gtk_text_iter_get_slice (const GtkTextIter *start,
                                          const GtkTextIter *end);


gchar *gtk_text_iter_get_text (const GtkTextIter *start,
                                          const GtkTextIter *end);

gchar *gtk_text_iter_get_visible_slice (const GtkTextIter *start,
                                          const GtkTextIter *end);
gchar *gtk_text_iter_get_visible_text (const GtkTextIter *start,
                                          const GtkTextIter *end);

GdkPixbuf* gtk_text_iter_get_pixbuf (const GtkTextIter *iter);
GSList * gtk_text_iter_get_marks (const GtkTextIter *iter);

GtkTextChildAnchor* gtk_text_iter_get_child_anchor (const GtkTextIter *iter);




GSList *gtk_text_iter_get_toggled_tags (const GtkTextIter *iter,
                                          gboolean toggled_on);

gboolean gtk_text_iter_begins_tag (const GtkTextIter *iter,
                                          GtkTextTag *tag);

gboolean gtk_text_iter_ends_tag (const GtkTextIter *iter,
                                          GtkTextTag *tag);

gboolean gtk_text_iter_toggles_tag (const GtkTextIter *iter,
                                          GtkTextTag *tag);

gboolean gtk_text_iter_has_tag (const GtkTextIter *iter,
                                          GtkTextTag *tag);
GSList *gtk_text_iter_get_tags (const GtkTextIter *iter);

gboolean gtk_text_iter_editable (const GtkTextIter *iter,
                                          gboolean default_setting);
gboolean gtk_text_iter_can_insert (const GtkTextIter *iter,
                                          gboolean default_editability);

gboolean gtk_text_iter_starts_word (const GtkTextIter *iter);
gboolean gtk_text_iter_ends_word (const GtkTextIter *iter);
gboolean gtk_text_iter_inside_word (const GtkTextIter *iter);
gboolean gtk_text_iter_starts_sentence (const GtkTextIter *iter);
gboolean gtk_text_iter_ends_sentence (const GtkTextIter *iter);
gboolean gtk_text_iter_inside_sentence (const GtkTextIter *iter);
gboolean gtk_text_iter_starts_line (const GtkTextIter *iter);
gboolean gtk_text_iter_ends_line (const GtkTextIter *iter);
gboolean gtk_text_iter_is_cursor_position (const GtkTextIter *iter);

gint gtk_text_iter_get_chars_in_line (const GtkTextIter *iter);
gint gtk_text_iter_get_bytes_in_line (const GtkTextIter *iter);

gboolean gtk_text_iter_get_attributes (const GtkTextIter *iter,
          GtkTextAttributes *values);
PangoLanguage* gtk_text_iter_get_language (const GtkTextIter *iter);
gboolean gtk_text_iter_is_end (const GtkTextIter *iter);
gboolean gtk_text_iter_is_start (const GtkTextIter *iter);





gboolean gtk_text_iter_forward_char (GtkTextIter *iter);
gboolean gtk_text_iter_backward_char (GtkTextIter *iter);
gboolean gtk_text_iter_forward_chars (GtkTextIter *iter,
                                             gint count);
gboolean gtk_text_iter_backward_chars (GtkTextIter *iter,
                                             gint count);
gboolean gtk_text_iter_forward_line (GtkTextIter *iter);
gboolean gtk_text_iter_backward_line (GtkTextIter *iter);
gboolean gtk_text_iter_forward_lines (GtkTextIter *iter,
                                             gint count);
gboolean gtk_text_iter_backward_lines (GtkTextIter *iter,
                                             gint count);
gboolean gtk_text_iter_forward_word_end (GtkTextIter *iter);
gboolean gtk_text_iter_backward_word_start (GtkTextIter *iter);
gboolean gtk_text_iter_forward_word_ends (GtkTextIter *iter,
                                             gint count);
gboolean gtk_text_iter_backward_word_starts (GtkTextIter *iter,
                                             gint count);

gboolean gtk_text_iter_forward_visible_line (GtkTextIter *iter);
gboolean gtk_text_iter_backward_visible_line (GtkTextIter *iter);
gboolean gtk_text_iter_forward_visible_lines (GtkTextIter *iter,
                                               gint count);
gboolean gtk_text_iter_backward_visible_lines (GtkTextIter *iter,
                                               gint count);

gboolean gtk_text_iter_forward_visible_word_end (GtkTextIter *iter);
gboolean gtk_text_iter_backward_visible_word_start (GtkTextIter *iter);
gboolean gtk_text_iter_forward_visible_word_ends (GtkTextIter *iter,
                                             gint count);
gboolean gtk_text_iter_backward_visible_word_starts (GtkTextIter *iter,
                                             gint count);

gboolean gtk_text_iter_forward_sentence_end (GtkTextIter *iter);
gboolean gtk_text_iter_backward_sentence_start (GtkTextIter *iter);
gboolean gtk_text_iter_forward_sentence_ends (GtkTextIter *iter,
                                                 gint count);
gboolean gtk_text_iter_backward_sentence_starts (GtkTextIter *iter,
                                                 gint count);





gboolean gtk_text_iter_forward_cursor_position (GtkTextIter *iter);
gboolean gtk_text_iter_backward_cursor_position (GtkTextIter *iter);
gboolean gtk_text_iter_forward_cursor_positions (GtkTextIter *iter,
                                                  gint count);
gboolean gtk_text_iter_backward_cursor_positions (GtkTextIter *iter,
                                                  gint count);

gboolean gtk_text_iter_forward_visible_cursor_position (GtkTextIter *iter);
gboolean gtk_text_iter_backward_visible_cursor_position (GtkTextIter *iter);
gboolean gtk_text_iter_forward_visible_cursor_positions (GtkTextIter *iter,
                                                          gint count);
gboolean gtk_text_iter_backward_visible_cursor_positions (GtkTextIter *iter,
                                                          gint count);


void gtk_text_iter_set_offset (GtkTextIter *iter,
                                           gint char_offset);
void gtk_text_iter_set_line (GtkTextIter *iter,
                                           gint line_number);
void gtk_text_iter_set_line_offset (GtkTextIter *iter,
                                           gint char_on_line);
void gtk_text_iter_set_line_index (GtkTextIter *iter,
                                           gint byte_on_line);
void gtk_text_iter_forward_to_end (GtkTextIter *iter);
gboolean gtk_text_iter_forward_to_line_end (GtkTextIter *iter);

void gtk_text_iter_set_visible_line_offset (GtkTextIter *iter,
                                                gint char_on_line);
void gtk_text_iter_set_visible_line_index (GtkTextIter *iter,
                                                gint byte_on_line);





gboolean gtk_text_iter_forward_to_tag_toggle (GtkTextIter *iter,
                                              GtkTextTag *tag);

gboolean gtk_text_iter_backward_to_tag_toggle (GtkTextIter *iter,
                                               GtkTextTag *tag);

typedef gboolean (* GtkTextCharPredicate) (gunichar ch, gpointer user_data);

gboolean gtk_text_iter_forward_find_char (GtkTextIter *iter,
                                           GtkTextCharPredicate pred,
                                           gpointer user_data,
                                           const GtkTextIter *limit);
gboolean gtk_text_iter_backward_find_char (GtkTextIter *iter,
                                           GtkTextCharPredicate pred,
                                           gpointer user_data,
                                           const GtkTextIter *limit);

gboolean gtk_text_iter_forward_search (const GtkTextIter *iter,
                                        const gchar *str,
                                        GtkTextSearchFlags flags,
                                        GtkTextIter *match_start,
                                        GtkTextIter *match_end,
                                        const GtkTextIter *limit);

gboolean gtk_text_iter_backward_search (const GtkTextIter *iter,
                                        const gchar *str,
                                        GtkTextSearchFlags flags,
                                        GtkTextIter *match_start,
                                        GtkTextIter *match_end,
                                        const GtkTextIter *limit);





gboolean gtk_text_iter_equal (const GtkTextIter *lhs,
                                        const GtkTextIter *rhs);
gint gtk_text_iter_compare (const GtkTextIter *lhs,
                                        const GtkTextIter *rhs);
gboolean gtk_text_iter_in_range (const GtkTextIter *iter,
                                        const GtkTextIter *start,
                                        const GtkTextIter *end);


void gtk_text_iter_order (GtkTextIter *first,
                                        GtkTextIter *second);


# 37 "/usr/include/gtk-2.0/gtk/gtkselection.h" 2




typedef struct _GtkTargetList GtkTargetList;
typedef struct _GtkTargetEntry GtkTargetEntry;
# 58 "/usr/include/gtk-2.0/gtk/gtkselection.h"
struct _GtkSelectionData
{
  GdkAtom selection;
  GdkAtom target;
  GdkAtom type;
  gint format;
  guchar *data;
  gint length;
  GdkDisplay *display;
};

struct _GtkTargetEntry {
  gchar *target;
  guint flags;
  guint info;
};





typedef struct _GtkTargetPair GtkTargetPair;


struct _GtkTargetList {
  GList *list;
  guint ref_count;
};

struct _GtkTargetPair {
  GdkAtom target;
  guint flags;
  guint info;
};

GtkTargetList *gtk_target_list_new (const GtkTargetEntry *targets,
       guint ntargets);
GtkTargetList *gtk_target_list_ref (GtkTargetList *list);
void gtk_target_list_unref (GtkTargetList *list);
void gtk_target_list_add (GtkTargetList *list,
         GdkAtom target,
       guint flags,
       guint info);
void gtk_target_list_add_text_targets (GtkTargetList *list,
                                                      guint info);
void gtk_target_list_add_rich_text_targets (GtkTargetList *list,
                                                      guint info,
                                                      gboolean deserializable,
                                                      GtkTextBuffer *buffer);
void gtk_target_list_add_image_targets (GtkTargetList *list,
                                                      guint info,
                                                      gboolean writable);
void gtk_target_list_add_uri_targets (GtkTargetList *list,
                                                      guint info);
void gtk_target_list_add_table (GtkTargetList *list,
       const GtkTargetEntry *targets,
       guint ntargets);
void gtk_target_list_remove (GtkTargetList *list,
       GdkAtom target);
gboolean gtk_target_list_find (GtkTargetList *list,
       GdkAtom target,
       guint *info);

GtkTargetEntry * gtk_target_table_new_from_list (GtkTargetList *list,
                                                 gint *n_targets);
void gtk_target_table_free (GtkTargetEntry *targets,
                                                 gint n_targets);



gboolean gtk_selection_owner_set (GtkWidget *widget,
           GdkAtom selection,
           guint32 time_);
gboolean gtk_selection_owner_set_for_display (GdkDisplay *display,
           GtkWidget *widget,
           GdkAtom selection,
           guint32 time_);

void gtk_selection_add_target (GtkWidget *widget,
          GdkAtom selection,
          GdkAtom target,
          guint info);
void gtk_selection_add_targets (GtkWidget *widget,
          GdkAtom selection,
          const GtkTargetEntry *targets,
          guint ntargets);
void gtk_selection_clear_targets (GtkWidget *widget,
          GdkAtom selection);
gboolean gtk_selection_convert (GtkWidget *widget,
          GdkAtom selection,
          GdkAtom target,
          guint32 time_);

GdkAtom gtk_selection_data_get_selection (GtkSelectionData *selection_data);
GdkAtom gtk_selection_data_get_target (GtkSelectionData *selection_data);
GdkAtom gtk_selection_data_get_data_type (GtkSelectionData *selection_data);
gint gtk_selection_data_get_format (GtkSelectionData *selection_data);
const guchar *gtk_selection_data_get_data (GtkSelectionData *selection_data);
gint gtk_selection_data_get_length (GtkSelectionData *selection_data);
GdkDisplay *gtk_selection_data_get_display (GtkSelectionData *selection_data);

void gtk_selection_data_set (GtkSelectionData *selection_data,
          GdkAtom type,
          gint format,
          const guchar *data,
          gint length);
gboolean gtk_selection_data_set_text (GtkSelectionData *selection_data,
          const gchar *str,
          gint len);
guchar * gtk_selection_data_get_text (GtkSelectionData *selection_data);
gboolean gtk_selection_data_set_pixbuf (GtkSelectionData *selection_data,
              GdkPixbuf *pixbuf);
GdkPixbuf *gtk_selection_data_get_pixbuf (GtkSelectionData *selection_data);
gboolean gtk_selection_data_set_uris (GtkSelectionData *selection_data,
          gchar **uris);
gchar **gtk_selection_data_get_uris (GtkSelectionData *selection_data);

gboolean gtk_selection_data_get_targets (GtkSelectionData *selection_data,
        GdkAtom **targets,
        gint *n_atoms);
gboolean gtk_selection_data_targets_include_text (GtkSelectionData *selection_data);
gboolean gtk_selection_data_targets_include_rich_text (GtkSelectionData *selection_data,
                                                       GtkTextBuffer *buffer);
gboolean gtk_selection_data_targets_include_image (GtkSelectionData *selection_data,
         gboolean writable);
gboolean gtk_selection_data_targets_include_uri (GtkSelectionData *selection_data);
gboolean gtk_targets_include_text (GdkAtom *targets,
        gint n_targets);
gboolean gtk_targets_include_rich_text (GdkAtom *targets,
        gint n_targets,
                                                  GtkTextBuffer *buffer);
gboolean gtk_targets_include_image (GdkAtom *targets,
        gint n_targets,
        gboolean writable);
gboolean gtk_targets_include_uri (GdkAtom *targets,
        gint n_targets);



void gtk_selection_remove_all (GtkWidget *widget);



gboolean gtk_selection_clear (GtkWidget *widget,
        GdkEventSelection *event);

gboolean _gtk_selection_request (GtkWidget *widget,
        GdkEventSelection *event);
gboolean _gtk_selection_incr_event (GdkWindow *window,
        GdkEventProperty *event);
gboolean _gtk_selection_notify (GtkWidget *widget,
        GdkEventSelection *event);
gboolean _gtk_selection_property_notify (GtkWidget *widget,
        GdkEventProperty *event);

GType gtk_selection_data_get_type (void) __attribute__((__const__));
GtkSelectionData *gtk_selection_data_copy (GtkSelectionData *data);
void gtk_selection_data_free (GtkSelectionData *data);

GType gtk_target_list_get_type (void) __attribute__((__const__));


# 30 "/usr/include/gtk-2.0/gtk/gtkclipboard.h" 2







typedef void (* GtkClipboardReceivedFunc) (GtkClipboard *clipboard,
                GtkSelectionData *selection_data,
                gpointer data);
typedef void (* GtkClipboardTextReceivedFunc) (GtkClipboard *clipboard,
                const gchar *text,
                gpointer data);
typedef void (* GtkClipboardRichTextReceivedFunc) (GtkClipboard *clipboard,
                                                   GdkAtom format,
                const guint8 *text,
                                                   gsize length,
                gpointer data);
typedef void (* GtkClipboardImageReceivedFunc) (GtkClipboard *clipboard,
         GdkPixbuf *pixbuf,
         gpointer data);
typedef void (* GtkClipboardURIReceivedFunc) (GtkClipboard *clipboard,
         gchar **uris,
         gpointer data);
typedef void (* GtkClipboardTargetsReceivedFunc) (GtkClipboard *clipboard,
                GdkAtom *atoms,
         gint n_atoms,
                gpointer data);





typedef void (* GtkClipboardGetFunc) (GtkClipboard *clipboard,
            GtkSelectionData *selection_data,
            guint info,
            gpointer user_data_or_owner);
typedef void (* GtkClipboardClearFunc) (GtkClipboard *clipboard,
            gpointer user_data_or_owner);

GType gtk_clipboard_get_type (void) __attribute__((__const__));

GtkClipboard *gtk_clipboard_get_for_display (GdkDisplay *display,
          GdkAtom selection);

GtkClipboard *gtk_clipboard_get (GdkAtom selection);


GdkDisplay *gtk_clipboard_get_display (GtkClipboard *clipboard);


gboolean gtk_clipboard_set_with_data (GtkClipboard *clipboard,
           const GtkTargetEntry *targets,
           guint n_targets,
           GtkClipboardGetFunc get_func,
           GtkClipboardClearFunc clear_func,
           gpointer user_data);
gboolean gtk_clipboard_set_with_owner (GtkClipboard *clipboard,
           const GtkTargetEntry *targets,
           guint n_targets,
           GtkClipboardGetFunc get_func,
           GtkClipboardClearFunc clear_func,
           GObject *owner);
GObject *gtk_clipboard_get_owner (GtkClipboard *clipboard);
void gtk_clipboard_clear (GtkClipboard *clipboard);
void gtk_clipboard_set_text (GtkClipboard *clipboard,
           const gchar *text,
           gint len);
void gtk_clipboard_set_image (GtkClipboard *clipboard,
           GdkPixbuf *pixbuf);

void gtk_clipboard_request_contents (GtkClipboard *clipboard,
                                      GdkAtom target,
                                      GtkClipboardReceivedFunc callback,
                                      gpointer user_data);
void gtk_clipboard_request_text (GtkClipboard *clipboard,
                                      GtkClipboardTextReceivedFunc callback,
                                      gpointer user_data);
void gtk_clipboard_request_rich_text (GtkClipboard *clipboard,
                                      GtkTextBuffer *buffer,
                                      GtkClipboardRichTextReceivedFunc callback,
                                      gpointer user_data);
void gtk_clipboard_request_image (GtkClipboard *clipboard,
                                      GtkClipboardImageReceivedFunc callback,
                                      gpointer user_data);
void gtk_clipboard_request_uris (GtkClipboard *clipboard,
                                      GtkClipboardURIReceivedFunc callback,
                                      gpointer user_data);
void gtk_clipboard_request_targets (GtkClipboard *clipboard,
                                      GtkClipboardTargetsReceivedFunc callback,
                                      gpointer user_data);

GtkSelectionData *gtk_clipboard_wait_for_contents (GtkClipboard *clipboard,
                                                    GdkAtom target);
gchar * gtk_clipboard_wait_for_text (GtkClipboard *clipboard);
guint8 * gtk_clipboard_wait_for_rich_text (GtkClipboard *clipboard,
                                                    GtkTextBuffer *buffer,
                                                    GdkAtom *format,
                                                    gsize *length);
GdkPixbuf * gtk_clipboard_wait_for_image (GtkClipboard *clipboard);
gchar ** gtk_clipboard_wait_for_uris (GtkClipboard *clipboard);
gboolean gtk_clipboard_wait_for_targets (GtkClipboard *clipboard,
                                                    GdkAtom **targets,
                                                    gint *n_targets);

gboolean gtk_clipboard_wait_is_text_available (GtkClipboard *clipboard);
gboolean gtk_clipboard_wait_is_rich_text_available (GtkClipboard *clipboard,
                                                    GtkTextBuffer *buffer);
gboolean gtk_clipboard_wait_is_image_available (GtkClipboard *clipboard);
gboolean gtk_clipboard_wait_is_uris_available (GtkClipboard *clipboard);
gboolean gtk_clipboard_wait_is_target_available (GtkClipboard *clipboard,
                                                    GdkAtom target);


void gtk_clipboard_set_can_store (GtkClipboard *clipboard,
      const GtkTargetEntry *targets,
      gint n_targets);

void gtk_clipboard_store (GtkClipboard *clipboard);


void _gtk_clipboard_handle_event (GdkEventOwnerChange *event);

void _gtk_clipboard_store_all (void);


# 68 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcolorbutton.h" 1
# 40 "/usr/include/gtk-2.0/gtk/gtkcolorbutton.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkbutton.h" 1
# 41 "/usr/include/gtk-2.0/gtk/gtkcolorbutton.h" 2


# 58 "/usr/include/gtk-2.0/gtk/gtkcolorbutton.h"
typedef struct _GtkColorButton GtkColorButton;
typedef struct _GtkColorButtonClass GtkColorButtonClass;
typedef struct _GtkColorButtonPrivate GtkColorButtonPrivate;

struct _GtkColorButton {
  GtkButton button;



  GtkColorButtonPrivate *priv;
};

struct _GtkColorButtonClass {
  GtkButtonClass parent_class;

  void (* color_set) (GtkColorButton *cp);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_color_button_get_type (void) __attribute__((__const__));
GtkWidget *gtk_color_button_new (void);
GtkWidget *gtk_color_button_new_with_color (const GdkColor *color);
void gtk_color_button_set_color (GtkColorButton *color_button,
         const GdkColor *color);
void gtk_color_button_set_alpha (GtkColorButton *color_button,
         guint16 alpha);
void gtk_color_button_get_color (GtkColorButton *color_button,
         GdkColor *color);
guint16 gtk_color_button_get_alpha (GtkColorButton *color_button);
void gtk_color_button_set_use_alpha (GtkColorButton *color_button,
         gboolean use_alpha);
gboolean gtk_color_button_get_use_alpha (GtkColorButton *color_button);
void gtk_color_button_set_title (GtkColorButton *color_button,
         const gchar *title);
const gchar *gtk_color_button_get_title (GtkColorButton *color_button);



# 69 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcolorsel.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkcolorsel.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkdialog.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkcolorsel.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkvbox.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkvbox.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkbox.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkvbox.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkvbox.h"
typedef struct _GtkVBox GtkVBox;
typedef struct _GtkVBoxClass GtkVBoxClass;

struct _GtkVBox
{
  GtkBox box;
};

struct _GtkVBoxClass
{
  GtkBoxClass parent_class;
};


GType gtk_vbox_get_type (void) __attribute__((__const__));
GtkWidget * gtk_vbox_new (gboolean homogeneous,
                               gint spacing);


# 37 "/usr/include/gtk-2.0/gtk/gtkcolorsel.h" 2


# 48 "/usr/include/gtk-2.0/gtk/gtkcolorsel.h"
typedef struct _GtkColorSelection GtkColorSelection;
typedef struct _GtkColorSelectionClass GtkColorSelectionClass;


typedef void (* GtkColorSelectionChangePaletteFunc) (const GdkColor *colors,
                                                     gint n_colors);
typedef void (* GtkColorSelectionChangePaletteWithScreenFunc) (GdkScreen *screen,
              const GdkColor *colors,
              gint n_colors);

struct _GtkColorSelection
{
  GtkVBox parent_instance;


  gpointer private_data;
};

struct _GtkColorSelectionClass
{
  GtkVBoxClass parent_class;

  void (*color_changed) (GtkColorSelection *color_selection);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};




GType gtk_color_selection_get_type (void) __attribute__((__const__));
GtkWidget *gtk_color_selection_new (void);
gboolean gtk_color_selection_get_has_opacity_control (GtkColorSelection *colorsel);
void gtk_color_selection_set_has_opacity_control (GtkColorSelection *colorsel,
       gboolean has_opacity);
gboolean gtk_color_selection_get_has_palette (GtkColorSelection *colorsel);
void gtk_color_selection_set_has_palette (GtkColorSelection *colorsel,
       gboolean has_palette);


void gtk_color_selection_set_current_color (GtkColorSelection *colorsel,
        const GdkColor *color);
void gtk_color_selection_set_current_alpha (GtkColorSelection *colorsel,
        guint16 alpha);
void gtk_color_selection_get_current_color (GtkColorSelection *colorsel,
        GdkColor *color);
guint16 gtk_color_selection_get_current_alpha (GtkColorSelection *colorsel);
void gtk_color_selection_set_previous_color (GtkColorSelection *colorsel,
        const GdkColor *color);
void gtk_color_selection_set_previous_alpha (GtkColorSelection *colorsel,
        guint16 alpha);
void gtk_color_selection_get_previous_color (GtkColorSelection *colorsel,
        GdkColor *color);
guint16 gtk_color_selection_get_previous_alpha (GtkColorSelection *colorsel);

gboolean gtk_color_selection_is_adjusting (GtkColorSelection *colorsel);

gboolean gtk_color_selection_palette_from_string (const gchar *str,
                                                  GdkColor **colors,
                                                  gint *n_colors);
gchar* gtk_color_selection_palette_to_string (const GdkColor *colors,
                                                  gint n_colors);



GtkColorSelectionChangePaletteFunc gtk_color_selection_set_change_palette_hook (GtkColorSelectionChangePaletteFunc func);



GtkColorSelectionChangePaletteWithScreenFunc gtk_color_selection_set_change_palette_with_screen_hook (GtkColorSelectionChangePaletteWithScreenFunc func);



void gtk_color_selection_set_color (GtkColorSelection *colorsel,
         gdouble *color);
void gtk_color_selection_get_color (GtkColorSelection *colorsel,
         gdouble *color);
void gtk_color_selection_set_update_policy (GtkColorSelection *colorsel,
         GtkUpdateType policy);



# 70 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcolorseldialog.h" 1
# 34 "/usr/include/gtk-2.0/gtk/gtkcolorseldialog.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkdialog.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkcolorseldialog.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcolorsel.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkcolorseldialog.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkvbox.h" 1
# 37 "/usr/include/gtk-2.0/gtk/gtkcolorseldialog.h" 2


# 48 "/usr/include/gtk-2.0/gtk/gtkcolorseldialog.h"
typedef struct _GtkColorSelectionDialog GtkColorSelectionDialog;
typedef struct _GtkColorSelectionDialogClass GtkColorSelectionDialogClass;


struct _GtkColorSelectionDialog
{
  GtkDialog parent_instance;

  GtkWidget *colorsel;
  GtkWidget *ok_button;
  GtkWidget *cancel_button;
  GtkWidget *help_button;
};

struct _GtkColorSelectionDialogClass
{
  GtkDialogClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};



GType gtk_color_selection_dialog_get_type (void) __attribute__((__const__));
GtkWidget* gtk_color_selection_dialog_new (const gchar *title);
GtkWidget* gtk_color_selection_dialog_get_color_selection (GtkColorSelectionDialog *colorsel);



# 71 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcombobox.h" 1
# 27 "/usr/include/gtk-2.0/gtk/gtkcombobox.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkbin.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkcombobox.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreemodel.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkcombobox.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreeview.h" 1
# 27 "/usr/include/gtk-2.0/gtk/gtktreeview.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcontainer.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtktreeview.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreemodel.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtktreeview.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtktreeview.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkdnd.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkdnd.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 37 "/usr/include/gtk-2.0/gtk/gtkdnd.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkselection.h" 1
# 38 "/usr/include/gtk-2.0/gtk/gtkdnd.h" 2




typedef enum {
  GTK_DEST_DEFAULT_MOTION = 1 << 0,
  GTK_DEST_DEFAULT_HIGHLIGHT = 1 << 1,
  GTK_DEST_DEFAULT_DROP = 1 << 2,
  GTK_DEST_DEFAULT_ALL = 0x07
} GtkDestDefaults;



typedef enum {
  GTK_TARGET_SAME_APP = 1 << 0,
  GTK_TARGET_SAME_WIDGET = 1 << 1,
  GTK_TARGET_OTHER_APP = 1 << 2,
  GTK_TARGET_OTHER_WIDGET = 1 << 3
} GtkTargetFlags;



void gtk_drag_get_data (GtkWidget *widget,
   GdkDragContext *context,
   GdkAtom target,
   guint32 time_);
void gtk_drag_finish (GdkDragContext *context,
   gboolean success,
   gboolean del,
   guint32 time_);

GtkWidget *gtk_drag_get_source_widget (GdkDragContext *context);

void gtk_drag_highlight (GtkWidget *widget);
void gtk_drag_unhighlight (GtkWidget *widget);

void gtk_drag_dest_set (GtkWidget *widget,
     GtkDestDefaults flags,
              const GtkTargetEntry *targets,
     gint n_targets,
     GdkDragAction actions);

void gtk_drag_dest_set_proxy (GtkWidget *widget,
         GdkWindow *proxy_window,
         GdkDragProtocol protocol,
         gboolean use_coordinates);

void gtk_drag_dest_unset (GtkWidget *widget);

GdkAtom gtk_drag_dest_find_target (GtkWidget *widget,
                                              GdkDragContext *context,
                                              GtkTargetList *target_list);
GtkTargetList* gtk_drag_dest_get_target_list (GtkWidget *widget);
void gtk_drag_dest_set_target_list (GtkWidget *widget,
                                              GtkTargetList *target_list);
void gtk_drag_dest_add_text_targets (GtkWidget *widget);
void gtk_drag_dest_add_image_targets (GtkWidget *widget);
void gtk_drag_dest_add_uri_targets (GtkWidget *widget);

void gtk_drag_dest_set_track_motion (GtkWidget *widget,
      gboolean track_motion);
gboolean gtk_drag_dest_get_track_motion (GtkWidget *widget);



void gtk_drag_source_set (GtkWidget *widget,
      GdkModifierType start_button_mask,
      const GtkTargetEntry *targets,
      gint n_targets,
      GdkDragAction actions);

void gtk_drag_source_unset (GtkWidget *widget);

GtkTargetList* gtk_drag_source_get_target_list (GtkWidget *widget);
void gtk_drag_source_set_target_list (GtkWidget *widget,
                                                GtkTargetList *target_list);
void gtk_drag_source_add_text_targets (GtkWidget *widget);
void gtk_drag_source_add_image_targets (GtkWidget *widget);
void gtk_drag_source_add_uri_targets (GtkWidget *widget);

void gtk_drag_source_set_icon (GtkWidget *widget,
          GdkColormap *colormap,
          GdkPixmap *pixmap,
          GdkBitmap *mask);
void gtk_drag_source_set_icon_pixbuf (GtkWidget *widget,
          GdkPixbuf *pixbuf);
void gtk_drag_source_set_icon_stock (GtkWidget *widget,
          const gchar *stock_id);
void gtk_drag_source_set_icon_name (GtkWidget *widget,
          const gchar *icon_name);





GdkDragContext *gtk_drag_begin (GtkWidget *widget,
    GtkTargetList *targets,
    GdkDragAction actions,
    gint button,
    GdkEvent *event);



void gtk_drag_set_icon_widget (GdkDragContext *context,
          GtkWidget *widget,
          gint hot_x,
          gint hot_y);
void gtk_drag_set_icon_pixmap (GdkDragContext *context,
          GdkColormap *colormap,
          GdkPixmap *pixmap,
          GdkBitmap *mask,
          gint hot_x,
          gint hot_y);
void gtk_drag_set_icon_pixbuf (GdkDragContext *context,
          GdkPixbuf *pixbuf,
          gint hot_x,
          gint hot_y);
void gtk_drag_set_icon_stock (GdkDragContext *context,
          const gchar *stock_id,
          gint hot_x,
          gint hot_y);
void gtk_drag_set_icon_name (GdkDragContext *context,
          const gchar *icon_name,
          gint hot_x,
          gint hot_y);

void gtk_drag_set_icon_default (GdkDragContext *context);

gboolean gtk_drag_check_threshold (GtkWidget *widget,
       gint start_x,
       gint start_y,
       gint current_x,
       gint current_y);


void _gtk_drag_source_handle_event (GtkWidget *widget,
        GdkEvent *event);
void _gtk_drag_dest_handle_event (GtkWidget *toplevel,
      GdkEvent *event);


void gtk_drag_set_default_icon (GdkColormap *colormap,
    GdkPixmap *pixmap,
    GdkBitmap *mask,
           gint hot_x,
           gint hot_y);



# 31 "/usr/include/gtk-2.0/gtk/gtktreeview.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkentry.h" 1
# 39 "/usr/include/gtk-2.0/gtk/gtkentry.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkeditable.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkeditable.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkeditable.h" 2



# 47 "/usr/include/gtk-2.0/gtk/gtkeditable.h"
typedef struct _GtkEditable GtkEditable;
typedef struct _GtkEditableClass GtkEditableClass;

struct _GtkEditableClass
{
  GTypeInterface base_iface;


  void (* insert_text) (GtkEditable *editable,
         const gchar *text,
         gint length,
         gint *position);
  void (* delete_text) (GtkEditable *editable,
         gint start_pos,
         gint end_pos);
  void (* changed) (GtkEditable *editable);


  void (* do_insert_text) (GtkEditable *editable,
         const gchar *text,
         gint length,
         gint *position);
  void (* do_delete_text) (GtkEditable *editable,
         gint start_pos,
         gint end_pos);

  gchar* (* get_chars) (GtkEditable *editable,
         gint start_pos,
         gint end_pos);
  void (* set_selection_bounds) (GtkEditable *editable,
         gint start_pos,
         gint end_pos);
  gboolean (* get_selection_bounds) (GtkEditable *editable,
         gint *start_pos,
         gint *end_pos);
  void (* set_position) (GtkEditable *editable,
         gint position);
  gint (* get_position) (GtkEditable *editable);
};

GType gtk_editable_get_type (void) __attribute__((__const__));
void gtk_editable_select_region (GtkEditable *editable,
         gint start_pos,
         gint end_pos);
gboolean gtk_editable_get_selection_bounds (GtkEditable *editable,
         gint *start_pos,
         gint *end_pos);
void gtk_editable_insert_text (GtkEditable *editable,
         const gchar *new_text,
         gint new_text_length,
         gint *position);
void gtk_editable_delete_text (GtkEditable *editable,
         gint start_pos,
         gint end_pos);
gchar* gtk_editable_get_chars (GtkEditable *editable,
         gint start_pos,
         gint end_pos);
void gtk_editable_cut_clipboard (GtkEditable *editable);
void gtk_editable_copy_clipboard (GtkEditable *editable);
void gtk_editable_paste_clipboard (GtkEditable *editable);
void gtk_editable_delete_selection (GtkEditable *editable);
void gtk_editable_set_position (GtkEditable *editable,
         gint position);
gint gtk_editable_get_position (GtkEditable *editable);
void gtk_editable_set_editable (GtkEditable *editable,
         gboolean is_editable);
gboolean gtk_editable_get_editable (GtkEditable *editable);


# 40 "/usr/include/gtk-2.0/gtk/gtkentry.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkimcontext.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkimcontext.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkobject.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkimcontext.h" 2



# 42 "/usr/include/gtk-2.0/gtk/gtkimcontext.h"
typedef struct _GtkIMContext GtkIMContext;
typedef struct _GtkIMContextClass GtkIMContextClass;

struct _GtkIMContext
{
  GObject parent_instance;
};

struct _GtkIMContextClass
{




  GtkObjectClass parent_class;



  void (*preedit_start) (GtkIMContext *context);
  void (*preedit_end) (GtkIMContext *context);
  void (*preedit_changed) (GtkIMContext *context);
  void (*commit) (GtkIMContext *context, const gchar *str);
  gboolean (*retrieve_surrounding) (GtkIMContext *context);
  gboolean (*delete_surrounding) (GtkIMContext *context,
        gint offset,
        gint n_chars);


  void (*set_client_window) (GtkIMContext *context,
       GdkWindow *window);
  void (*get_preedit_string) (GtkIMContext *context,
       gchar **str,
       PangoAttrList **attrs,
       gint *cursor_pos);
  gboolean (*filter_keypress) (GtkIMContext *context,
              GdkEventKey *event);
  void (*focus_in) (GtkIMContext *context);
  void (*focus_out) (GtkIMContext *context);
  void (*reset) (GtkIMContext *context);
  void (*set_cursor_location) (GtkIMContext *context,
       GdkRectangle *area);
  void (*set_use_preedit) (GtkIMContext *context,
       gboolean use_preedit);
  void (*set_surrounding) (GtkIMContext *context,
       const gchar *text,
       gint len,
       gint cursor_index);
  gboolean (*get_surrounding) (GtkIMContext *context,
       gchar **text,
       gint *cursor_index);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
};

GType gtk_im_context_get_type (void) __attribute__((__const__));

void gtk_im_context_set_client_window (GtkIMContext *context,
          GdkWindow *window);
void gtk_im_context_get_preedit_string (GtkIMContext *context,
          gchar **str,
          PangoAttrList **attrs,
          gint *cursor_pos);
gboolean gtk_im_context_filter_keypress (GtkIMContext *context,
          GdkEventKey *event);
void gtk_im_context_focus_in (GtkIMContext *context);
void gtk_im_context_focus_out (GtkIMContext *context);
void gtk_im_context_reset (GtkIMContext *context);
void gtk_im_context_set_cursor_location (GtkIMContext *context,
          const GdkRectangle *area);
void gtk_im_context_set_use_preedit (GtkIMContext *context,
          gboolean use_preedit);
void gtk_im_context_set_surrounding (GtkIMContext *context,
          const gchar *text,
          gint len,
          gint cursor_index);
gboolean gtk_im_context_get_surrounding (GtkIMContext *context,
          gchar **text,
          gint *cursor_index);
gboolean gtk_im_context_delete_surrounding (GtkIMContext *context,
          gint offset,
          gint n_chars);


# 41 "/usr/include/gtk-2.0/gtk/gtkentry.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkmenu.h" 1
# 42 "/usr/include/gtk-2.0/gtk/gtkentry.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkentrycompletion.h" 1
# 27 "/usr/include/gtk-2.0/gtk/gtkentrycompletion.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktreemodel.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkentrycompletion.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkliststore.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkliststore.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktreemodel.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkliststore.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreesortable.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkliststore.h" 2



# 42 "/usr/include/gtk-2.0/gtk/gtkliststore.h"
typedef struct _GtkListStore GtkListStore;
typedef struct _GtkListStoreClass GtkListStoreClass;

struct _GtkListStore
{
  GObject parent;


  gint stamp;
  gpointer seq;
  gpointer _gtk_reserved1;
  GList *sort_list;
  gint n_columns;
  gint sort_column_id;
  GtkSortType order;
  GType *column_headers;
  gint length;
  GtkTreeIterCompareFunc default_sort_func;
  gpointer default_sort_data;
  GDestroyNotify default_sort_destroy;
  guint columns_dirty : 1;
};

struct _GtkListStoreClass
{
  GObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_list_store_get_type (void) __attribute__((__const__));
GtkListStore *gtk_list_store_new (gint n_columns,
            ...);
GtkListStore *gtk_list_store_newv (gint n_columns,
            GType *types);
void gtk_list_store_set_column_types (GtkListStore *list_store,
            gint n_columns,
            GType *types);



void gtk_list_store_set_value (GtkListStore *list_store,
            GtkTreeIter *iter,
            gint column,
            GValue *value);
void gtk_list_store_set (GtkListStore *list_store,
            GtkTreeIter *iter,
            ...);
void gtk_list_store_set_valuesv (GtkListStore *list_store,
            GtkTreeIter *iter,
            gint *columns,
            GValue *values,
            gint n_values);
void gtk_list_store_set_valist (GtkListStore *list_store,
            GtkTreeIter *iter,
            va_list var_args);
gboolean gtk_list_store_remove (GtkListStore *list_store,
            GtkTreeIter *iter);
void gtk_list_store_insert (GtkListStore *list_store,
            GtkTreeIter *iter,
            gint position);
void gtk_list_store_insert_before (GtkListStore *list_store,
            GtkTreeIter *iter,
            GtkTreeIter *sibling);
void gtk_list_store_insert_after (GtkListStore *list_store,
            GtkTreeIter *iter,
            GtkTreeIter *sibling);
void gtk_list_store_insert_with_values (GtkListStore *list_store,
        GtkTreeIter *iter,
        gint position,
        ...);
void gtk_list_store_insert_with_valuesv (GtkListStore *list_store,
        GtkTreeIter *iter,
        gint position,
        gint *columns,
        GValue *values,
        gint n_values);
void gtk_list_store_prepend (GtkListStore *list_store,
            GtkTreeIter *iter);
void gtk_list_store_append (GtkListStore *list_store,
            GtkTreeIter *iter);
void gtk_list_store_clear (GtkListStore *list_store);
gboolean gtk_list_store_iter_is_valid (GtkListStore *list_store,
                                               GtkTreeIter *iter);
void gtk_list_store_reorder (GtkListStore *store,
                                               gint *new_order);
void gtk_list_store_swap (GtkListStore *store,
                                               GtkTreeIter *a,
                                               GtkTreeIter *b);
void gtk_list_store_move_after (GtkListStore *store,
                                               GtkTreeIter *iter,
                                               GtkTreeIter *position);
void gtk_list_store_move_before (GtkListStore *store,
                                               GtkTreeIter *iter,
                                               GtkTreeIter *position);



# 29 "/usr/include/gtk-2.0/gtk/gtkentrycompletion.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkentrycompletion.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreemodelfilter.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtktreemodelfilter.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktreemodel.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtktreemodelfilter.h" 2


# 40 "/usr/include/gtk-2.0/gtk/gtktreemodelfilter.h"
typedef gboolean (* GtkTreeModelFilterVisibleFunc) (GtkTreeModel *model,
                                                    GtkTreeIter *iter,
                                                    gpointer data);
typedef void (* GtkTreeModelFilterModifyFunc) (GtkTreeModel *model,
                                               GtkTreeIter *iter,
                                               GValue *value,
                                               gint column,
                                               gpointer data);

typedef struct _GtkTreeModelFilter GtkTreeModelFilter;
typedef struct _GtkTreeModelFilterClass GtkTreeModelFilterClass;
typedef struct _GtkTreeModelFilterPrivate GtkTreeModelFilterPrivate;

struct _GtkTreeModelFilter
{
  GObject parent;


  GtkTreeModelFilterPrivate *priv;
};

struct _GtkTreeModelFilterClass
{
  GObjectClass parent_class;


  void (*_gtk_reserved0) (void);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
};


GType gtk_tree_model_filter_get_type (void) __attribute__((__const__));
GtkTreeModel *gtk_tree_model_filter_new (GtkTreeModel *child_model,
                                                                GtkTreePath *root);
void gtk_tree_model_filter_set_visible_func (GtkTreeModelFilter *filter,
                                                                GtkTreeModelFilterVisibleFunc func,
                                                                gpointer data,
                                                                GDestroyNotify destroy);
void gtk_tree_model_filter_set_modify_func (GtkTreeModelFilter *filter,
                                                                gint n_columns,
                                                                GType *types,
                                                                GtkTreeModelFilterModifyFunc func,
                                                                gpointer data,
                                                                GDestroyNotify destroy);
void gtk_tree_model_filter_set_visible_column (GtkTreeModelFilter *filter,
                                                                gint column);

GtkTreeModel *gtk_tree_model_filter_get_model (GtkTreeModelFilter *filter);


gboolean gtk_tree_model_filter_convert_child_iter_to_iter (GtkTreeModelFilter *filter,
                                                                GtkTreeIter *filter_iter,
                                                                GtkTreeIter *child_iter);
void gtk_tree_model_filter_convert_iter_to_child_iter (GtkTreeModelFilter *filter,
                                                                GtkTreeIter *child_iter,
                                                                GtkTreeIter *filter_iter);
GtkTreePath *gtk_tree_model_filter_convert_child_path_to_path (GtkTreeModelFilter *filter,
                                                                GtkTreePath *child_path);
GtkTreePath *gtk_tree_model_filter_convert_path_to_child_path (GtkTreeModelFilter *filter,
                                                                GtkTreePath *filter_path);


void gtk_tree_model_filter_refilter (GtkTreeModelFilter *filter);
void gtk_tree_model_filter_clear_cache (GtkTreeModelFilter *filter);


# 31 "/usr/include/gtk-2.0/gtk/gtkentrycompletion.h" 2


# 41 "/usr/include/gtk-2.0/gtk/gtkentrycompletion.h"
typedef struct _GtkEntryCompletion GtkEntryCompletion;
typedef struct _GtkEntryCompletionClass GtkEntryCompletionClass;
typedef struct _GtkEntryCompletionPrivate GtkEntryCompletionPrivate;

typedef gboolean (* GtkEntryCompletionMatchFunc) (GtkEntryCompletion *completion,
                                                  const gchar *key,
                                                  GtkTreeIter *iter,
                                                  gpointer user_data);


struct _GtkEntryCompletion
{
  GObject parent_instance;


  GtkEntryCompletionPrivate *priv;
};

struct _GtkEntryCompletionClass
{
  GObjectClass parent_class;

  gboolean (* match_selected) (GtkEntryCompletion *completion,
                                 GtkTreeModel *model,
                                 GtkTreeIter *iter);
  void (* action_activated) (GtkEntryCompletion *completion,
                                 gint index_);
  gboolean (* insert_prefix) (GtkEntryCompletion *completion,
     const gchar *prefix);
  gboolean (* cursor_on_match) (GtkEntryCompletion *completion,
     GtkTreeModel *model,
     GtkTreeIter *iter);


  void (*_gtk_reserved0) (void);
  void (*_gtk_reserved1) (void);
};


GType gtk_entry_completion_get_type (void) __attribute__((__const__));
GtkEntryCompletion *gtk_entry_completion_new (void);

GtkWidget *gtk_entry_completion_get_entry (GtkEntryCompletion *completion);

void gtk_entry_completion_set_model (GtkEntryCompletion *completion,
                                                                 GtkTreeModel *model);
GtkTreeModel *gtk_entry_completion_get_model (GtkEntryCompletion *completion);

void gtk_entry_completion_set_match_func (GtkEntryCompletion *completion,
                                                                 GtkEntryCompletionMatchFunc func,
                                                                 gpointer func_data,
                                                                 GDestroyNotify func_notify);
void gtk_entry_completion_set_minimum_key_length (GtkEntryCompletion *completion,
                                                                 gint length);
gint gtk_entry_completion_get_minimum_key_length (GtkEntryCompletion *completion);
void gtk_entry_completion_complete (GtkEntryCompletion *completion);
void gtk_entry_completion_insert_prefix (GtkEntryCompletion *completion);

void gtk_entry_completion_insert_action_text (GtkEntryCompletion *completion,
                                                                 gint index_,
                                                                 const gchar *text);
void gtk_entry_completion_insert_action_markup (GtkEntryCompletion *completion,
                                                                 gint index_,
                                                                 const gchar *markup);
void gtk_entry_completion_delete_action (GtkEntryCompletion *completion,
                                                                 gint index_);

void gtk_entry_completion_set_inline_completion (GtkEntryCompletion *completion,
                                                                 gboolean inline_completion);
gboolean gtk_entry_completion_get_inline_completion (GtkEntryCompletion *completion);
void gtk_entry_completion_set_inline_selection (GtkEntryCompletion *completion,
                                                                 gboolean inline_selection);
gboolean gtk_entry_completion_get_inline_selection (GtkEntryCompletion *completion);
void gtk_entry_completion_set_popup_completion (GtkEntryCompletion *completion,
                                                                 gboolean popup_completion);
gboolean gtk_entry_completion_get_popup_completion (GtkEntryCompletion *completion);
void gtk_entry_completion_set_popup_set_width (GtkEntryCompletion *completion,
                                                                 gboolean popup_set_width);
gboolean gtk_entry_completion_get_popup_set_width (GtkEntryCompletion *completion);
void gtk_entry_completion_set_popup_single_match (GtkEntryCompletion *completion,
                                                                 gboolean popup_single_match);
gboolean gtk_entry_completion_get_popup_single_match (GtkEntryCompletion *completion);

const gchar *gtk_entry_completion_get_completion_prefix (GtkEntryCompletion *completion);

void gtk_entry_completion_set_text_column (GtkEntryCompletion *completion,
                                                                 gint column);
gint gtk_entry_completion_get_text_column (GtkEntryCompletion *completion);


# 43 "/usr/include/gtk-2.0/gtk/gtkentry.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkimage.h" 1
# 44 "/usr/include/gtk-2.0/gtk/gtkentry.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkselection.h" 1
# 45 "/usr/include/gtk-2.0/gtk/gtkentry.h" 2



# 56 "/usr/include/gtk-2.0/gtk/gtkentry.h"
typedef enum
{
  GTK_ENTRY_ICON_PRIMARY,
  GTK_ENTRY_ICON_SECONDARY
} GtkEntryIconPosition;

typedef struct _GtkEntry GtkEntry;
typedef struct _GtkEntryClass GtkEntryClass;

struct _GtkEntry
{
  GtkWidget widget;

  gchar *text;

  guint editable : 1;
  guint visible : 1;
  guint overwrite_mode : 1;
  guint in_drag : 1;


  guint16 text_length;
  guint16 text_max_length;


  GdkWindow *text_area;
  GtkIMContext *im_context;
  GtkWidget *popup_menu;

  gint current_pos;
  gint selection_bound;

  PangoLayout *cached_layout;

  guint cache_includes_preedit : 1;
  guint need_im_reset : 1;
  guint has_frame : 1;
  guint activates_default : 1;
  guint cursor_visible : 1;
  guint in_click : 1;
  guint is_cell_renderer : 1;
  guint editing_canceled : 1;
  guint mouse_cursor_obscured : 1;
  guint select_words : 1;
  guint select_lines : 1;
  guint resolved_dir : 4;
  guint truncate_multiline : 1;

  guint button;
  guint blink_timeout;
  guint recompute_idle;
  gint scroll_offset;
  gint ascent;
  gint descent;

  guint16 text_size;
  guint16 n_bytes;

  guint16 preedit_length;
  guint16 preedit_cursor;

  gint dnd_position;

  gint drag_start_x;
  gint drag_start_y;

  gunichar invisible_char;

  gint width_chars;
};

struct _GtkEntryClass
{
  GtkWidgetClass parent_class;


  void (* populate_popup) (GtkEntry *entry,
                             GtkMenu *menu);



  void (* activate) (GtkEntry *entry);
  void (* move_cursor) (GtkEntry *entry,
          GtkMovementStep step,
          gint count,
          gboolean extend_selection);
  void (* insert_at_cursor) (GtkEntry *entry,
          const gchar *str);
  void (* delete_from_cursor) (GtkEntry *entry,
          GtkDeleteType type,
          gint count);
  void (* backspace) (GtkEntry *entry);
  void (* cut_clipboard) (GtkEntry *entry);
  void (* copy_clipboard) (GtkEntry *entry);
  void (* paste_clipboard) (GtkEntry *entry);
  void (* toggle_overwrite) (GtkEntry *entry);


  void (* get_text_area_size) (GtkEntry *entry,
          gint *x,
          gint *y,
          gint *width,
          gint *height);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
};

GType gtk_entry_get_type (void) __attribute__((__const__));
GtkWidget* gtk_entry_new (void);
void gtk_entry_set_visibility (GtkEntry *entry,
       gboolean visible);
gboolean gtk_entry_get_visibility (GtkEntry *entry);
void gtk_entry_set_invisible_char (GtkEntry *entry,
                                                 gunichar ch);
gunichar gtk_entry_get_invisible_char (GtkEntry *entry);
void gtk_entry_unset_invisible_char (GtkEntry *entry);
void gtk_entry_set_has_frame (GtkEntry *entry,
                                                 gboolean setting);
gboolean gtk_entry_get_has_frame (GtkEntry *entry);
void gtk_entry_set_inner_border (GtkEntry *entry,
                                                      const GtkBorder *border);
const GtkBorder* gtk_entry_get_inner_border (GtkEntry *entry);
void gtk_entry_set_overwrite_mode (GtkEntry *entry,
                                                 gboolean overwrite);
gboolean gtk_entry_get_overwrite_mode (GtkEntry *entry);

void gtk_entry_set_max_length (GtkEntry *entry,
       gint max);
gint gtk_entry_get_max_length (GtkEntry *entry);
guint16 gtk_entry_get_text_length (GtkEntry *entry);
void gtk_entry_set_activates_default (GtkEntry *entry,
                                                 gboolean setting);
gboolean gtk_entry_get_activates_default (GtkEntry *entry);

void gtk_entry_set_width_chars (GtkEntry *entry,
                                                 gint n_chars);
gint gtk_entry_get_width_chars (GtkEntry *entry);



void gtk_entry_set_text (GtkEntry *entry,
                                                 const gchar *text);

const gchar* gtk_entry_get_text (GtkEntry *entry);

PangoLayout* gtk_entry_get_layout (GtkEntry *entry);
void gtk_entry_get_layout_offsets (GtkEntry *entry,
                                                 gint *x,
                                                 gint *y);
void gtk_entry_set_alignment (GtkEntry *entry,
                                                 gfloat xalign);
gfloat gtk_entry_get_alignment (GtkEntry *entry);

void gtk_entry_set_completion (GtkEntry *entry,
                                              GtkEntryCompletion *completion);
GtkEntryCompletion *gtk_entry_get_completion (GtkEntry *entry);

gint gtk_entry_layout_index_to_text_index (GtkEntry *entry,
                                                 gint layout_index);
gint gtk_entry_text_index_to_layout_index (GtkEntry *entry,
                                                 gint text_index);



void gtk_entry_set_cursor_hadjustment (GtkEntry *entry,
                                                 GtkAdjustment *adjustment);
GtkAdjustment* gtk_entry_get_cursor_hadjustment (GtkEntry *entry);



void gtk_entry_set_progress_fraction (GtkEntry *entry,
                                                  gdouble fraction);
gdouble gtk_entry_get_progress_fraction (GtkEntry *entry);

void gtk_entry_set_progress_pulse_step (GtkEntry *entry,
                                                  gdouble fraction);
gdouble gtk_entry_get_progress_pulse_step (GtkEntry *entry);

void gtk_entry_progress_pulse (GtkEntry *entry);



void gtk_entry_set_icon_from_pixbuf (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         GdkPixbuf *pixbuf);
void gtk_entry_set_icon_from_stock (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         const gchar *stock_id);
void gtk_entry_set_icon_from_icon_name (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         const gchar *icon_name);
void gtk_entry_set_icon_from_gicon (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         GIcon *icon);
GtkImageType gtk_entry_get_icon_storage_type (GtkEntry *entry,
         GtkEntryIconPosition icon_pos);
GdkPixbuf* gtk_entry_get_icon_pixbuf (GtkEntry *entry,
         GtkEntryIconPosition icon_pos);
const gchar* gtk_entry_get_icon_stock (GtkEntry *entry,
         GtkEntryIconPosition icon_pos);
const gchar* gtk_entry_get_icon_name (GtkEntry *entry,
         GtkEntryIconPosition icon_pos);
GIcon* gtk_entry_get_icon_gicon (GtkEntry *entry,
         GtkEntryIconPosition icon_pos);
void gtk_entry_set_icon_activatable (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         gboolean activatable);
gboolean gtk_entry_get_icon_activatable (GtkEntry *entry,
         GtkEntryIconPosition icon_pos);
void gtk_entry_set_icon_sensitive (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         gboolean sensitive);
gboolean gtk_entry_get_icon_sensitive (GtkEntry *entry,
         GtkEntryIconPosition icon_pos);
gint gtk_entry_get_icon_at_pos (GtkEntry *entry,
         gint x,
         gint y);
void gtk_entry_set_icon_tooltip_text (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         const gchar *tooltip);
gchar * gtk_entry_get_icon_tooltip_text (GtkEntry *entry,
                                                          GtkEntryIconPosition icon_pos);
void gtk_entry_set_icon_tooltip_markup (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         const gchar *tooltip);
gchar * gtk_entry_get_icon_tooltip_markup (GtkEntry *entry,
                                                          GtkEntryIconPosition icon_pos);
void gtk_entry_set_icon_drag_source (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         GtkTargetList *target_list,
         GdkDragAction actions);
gint gtk_entry_get_current_icon_drag_source (GtkEntry *entry);






GtkWidget* gtk_entry_new_with_max_length (gint max);
void gtk_entry_append_text (GtkEntry *entry,
       const gchar *text);
void gtk_entry_prepend_text (GtkEntry *entry,
       const gchar *text);
void gtk_entry_set_position (GtkEntry *entry,
       gint position);
void gtk_entry_select_region (GtkEntry *entry,
       gint start,
       gint end);
void gtk_entry_set_editable (GtkEntry *entry,
       gboolean editable);



# 32 "/usr/include/gtk-2.0/gtk/gtktreeview.h" 2




typedef enum
{

  GTK_TREE_VIEW_DROP_BEFORE,
  GTK_TREE_VIEW_DROP_AFTER,



  GTK_TREE_VIEW_DROP_INTO_OR_BEFORE,
  GTK_TREE_VIEW_DROP_INTO_OR_AFTER
} GtkTreeViewDropPosition;
# 55 "/usr/include/gtk-2.0/gtk/gtktreeview.h"
typedef struct _GtkTreeView GtkTreeView;
typedef struct _GtkTreeViewClass GtkTreeViewClass;
typedef struct _GtkTreeViewPrivate GtkTreeViewPrivate;
typedef struct _GtkTreeSelection GtkTreeSelection;
typedef struct _GtkTreeSelectionClass GtkTreeSelectionClass;

struct _GtkTreeView
{
  GtkContainer parent;

  GtkTreeViewPrivate *priv;
};

struct _GtkTreeViewClass
{
  GtkContainerClass parent_class;

  void (* set_scroll_adjustments) (GtkTreeView *tree_view,
               GtkAdjustment *hadjustment,
               GtkAdjustment *vadjustment);
  void (* row_activated) (GtkTreeView *tree_view,
               GtkTreePath *path,
        GtkTreeViewColumn *column);
  gboolean (* test_expand_row) (GtkTreeView *tree_view,
               GtkTreeIter *iter,
               GtkTreePath *path);
  gboolean (* test_collapse_row) (GtkTreeView *tree_view,
               GtkTreeIter *iter,
               GtkTreePath *path);
  void (* row_expanded) (GtkTreeView *tree_view,
               GtkTreeIter *iter,
               GtkTreePath *path);
  void (* row_collapsed) (GtkTreeView *tree_view,
               GtkTreeIter *iter,
               GtkTreePath *path);
  void (* columns_changed) (GtkTreeView *tree_view);
  void (* cursor_changed) (GtkTreeView *tree_view);


  gboolean (* move_cursor) (GtkTreeView *tree_view,
               GtkMovementStep step,
               gint count);
  gboolean (* select_all) (GtkTreeView *tree_view);
  gboolean (* unselect_all) (GtkTreeView *tree_view);
  gboolean (* select_cursor_row) (GtkTreeView *tree_view,
        gboolean start_editing);
  gboolean (* toggle_cursor_row) (GtkTreeView *tree_view);
  gboolean (* expand_collapse_cursor_row) (GtkTreeView *tree_view,
        gboolean logical,
        gboolean expand,
        gboolean open_all);
  gboolean (* select_cursor_parent) (GtkTreeView *tree_view);
  gboolean (* start_interactive_search) (GtkTreeView *tree_view);


  void (*_gtk_reserved0) (void);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


typedef gboolean (* GtkTreeViewColumnDropFunc) (GtkTreeView *tree_view,
      GtkTreeViewColumn *column,
      GtkTreeViewColumn *prev_column,
      GtkTreeViewColumn *next_column,
      gpointer data);
typedef void (* GtkTreeViewMappingFunc) (GtkTreeView *tree_view,
      GtkTreePath *path,
      gpointer user_data);
typedef gboolean (*GtkTreeViewSearchEqualFunc) (GtkTreeModel *model,
      gint column,
      const gchar *key,
      GtkTreeIter *iter,
      gpointer search_data);
typedef gboolean (*GtkTreeViewRowSeparatorFunc) (GtkTreeModel *model,
       GtkTreeIter *iter,
       gpointer data);
typedef void (*GtkTreeViewSearchPositionFunc) (GtkTreeView *tree_view,
         GtkWidget *search_dialog,
         gpointer user_data);



GType gtk_tree_view_get_type (void) __attribute__((__const__));
GtkWidget *gtk_tree_view_new (void);
GtkWidget *gtk_tree_view_new_with_model (GtkTreeModel *model);


GtkTreeModel *gtk_tree_view_get_model (GtkTreeView *tree_view);
void gtk_tree_view_set_model (GtkTreeView *tree_view,
            GtkTreeModel *model);
GtkTreeSelection *gtk_tree_view_get_selection (GtkTreeView *tree_view);
GtkAdjustment *gtk_tree_view_get_hadjustment (GtkTreeView *tree_view);
void gtk_tree_view_set_hadjustment (GtkTreeView *tree_view,
            GtkAdjustment *adjustment);
GtkAdjustment *gtk_tree_view_get_vadjustment (GtkTreeView *tree_view);
void gtk_tree_view_set_vadjustment (GtkTreeView *tree_view,
            GtkAdjustment *adjustment);
gboolean gtk_tree_view_get_headers_visible (GtkTreeView *tree_view);
void gtk_tree_view_set_headers_visible (GtkTreeView *tree_view,
            gboolean headers_visible);
void gtk_tree_view_columns_autosize (GtkTreeView *tree_view);
gboolean gtk_tree_view_get_headers_clickable (GtkTreeView *tree_view);
void gtk_tree_view_set_headers_clickable (GtkTreeView *tree_view,
            gboolean setting);
void gtk_tree_view_set_rules_hint (GtkTreeView *tree_view,
            gboolean setting);
gboolean gtk_tree_view_get_rules_hint (GtkTreeView *tree_view);


gint gtk_tree_view_append_column (GtkTreeView *tree_view,
            GtkTreeViewColumn *column);
gint gtk_tree_view_remove_column (GtkTreeView *tree_view,
            GtkTreeViewColumn *column);
gint gtk_tree_view_insert_column (GtkTreeView *tree_view,
            GtkTreeViewColumn *column,
            gint position);
gint gtk_tree_view_insert_column_with_attributes (GtkTreeView *tree_view,
            gint position,
            const gchar *title,
            GtkCellRenderer *cell,
            ...) __attribute__((__sentinel__));
gint gtk_tree_view_insert_column_with_data_func (GtkTreeView *tree_view,
            gint position,
            const gchar *title,
            GtkCellRenderer *cell,
                                                                    GtkTreeCellDataFunc func,
                                                                    gpointer data,
                                                                    GDestroyNotify dnotify);
GtkTreeViewColumn *gtk_tree_view_get_column (GtkTreeView *tree_view,
            gint n);
GList *gtk_tree_view_get_columns (GtkTreeView *tree_view);
void gtk_tree_view_move_column_after (GtkTreeView *tree_view,
            GtkTreeViewColumn *column,
            GtkTreeViewColumn *base_column);
void gtk_tree_view_set_expander_column (GtkTreeView *tree_view,
            GtkTreeViewColumn *column);
GtkTreeViewColumn *gtk_tree_view_get_expander_column (GtkTreeView *tree_view);
void gtk_tree_view_set_column_drag_function (GtkTreeView *tree_view,
            GtkTreeViewColumnDropFunc func,
            gpointer user_data,
            GDestroyNotify destroy);


void gtk_tree_view_scroll_to_point (GtkTreeView *tree_view,
            gint tree_x,
            gint tree_y);
void gtk_tree_view_scroll_to_cell (GtkTreeView *tree_view,
            GtkTreePath *path,
            GtkTreeViewColumn *column,
            gboolean use_align,
            gfloat row_align,
            gfloat col_align);
void gtk_tree_view_row_activated (GtkTreeView *tree_view,
            GtkTreePath *path,
            GtkTreeViewColumn *column);
void gtk_tree_view_expand_all (GtkTreeView *tree_view);
void gtk_tree_view_collapse_all (GtkTreeView *tree_view);
void gtk_tree_view_expand_to_path (GtkTreeView *tree_view,
            GtkTreePath *path);
gboolean gtk_tree_view_expand_row (GtkTreeView *tree_view,
            GtkTreePath *path,
            gboolean open_all);
gboolean gtk_tree_view_collapse_row (GtkTreeView *tree_view,
            GtkTreePath *path);
void gtk_tree_view_map_expanded_rows (GtkTreeView *tree_view,
            GtkTreeViewMappingFunc func,
            gpointer data);
gboolean gtk_tree_view_row_expanded (GtkTreeView *tree_view,
            GtkTreePath *path);
void gtk_tree_view_set_reorderable (GtkTreeView *tree_view,
            gboolean reorderable);
gboolean gtk_tree_view_get_reorderable (GtkTreeView *tree_view);
void gtk_tree_view_set_cursor (GtkTreeView *tree_view,
            GtkTreePath *path,
            GtkTreeViewColumn *focus_column,
            gboolean start_editing);
void gtk_tree_view_set_cursor_on_cell (GtkTreeView *tree_view,
            GtkTreePath *path,
            GtkTreeViewColumn *focus_column,
            GtkCellRenderer *focus_cell,
            gboolean start_editing);
void gtk_tree_view_get_cursor (GtkTreeView *tree_view,
            GtkTreePath **path,
            GtkTreeViewColumn **focus_column);



GdkWindow *gtk_tree_view_get_bin_window (GtkTreeView *tree_view);
gboolean gtk_tree_view_get_path_at_pos (GtkTreeView *tree_view,
            gint x,
            gint y,
            GtkTreePath **path,
            GtkTreeViewColumn **column,
            gint *cell_x,
            gint *cell_y);
void gtk_tree_view_get_cell_area (GtkTreeView *tree_view,
            GtkTreePath *path,
            GtkTreeViewColumn *column,
            GdkRectangle *rect);
void gtk_tree_view_get_background_area (GtkTreeView *tree_view,
            GtkTreePath *path,
            GtkTreeViewColumn *column,
            GdkRectangle *rect);
void gtk_tree_view_get_visible_rect (GtkTreeView *tree_view,
            GdkRectangle *visible_rect);


void gtk_tree_view_widget_to_tree_coords (GtkTreeView *tree_view,
            gint wx,
            gint wy,
            gint *tx,
            gint *ty);
void gtk_tree_view_tree_to_widget_coords (GtkTreeView *tree_view,
            gint tx,
            gint ty,
            gint *wx,
            gint *wy);

gboolean gtk_tree_view_get_visible_range (GtkTreeView *tree_view,
            GtkTreePath **start_path,
            GtkTreePath **end_path);


void gtk_tree_view_enable_model_drag_source (GtkTreeView *tree_view,
            GdkModifierType start_button_mask,
            const GtkTargetEntry *targets,
            gint n_targets,
            GdkDragAction actions);
void gtk_tree_view_enable_model_drag_dest (GtkTreeView *tree_view,
            const GtkTargetEntry *targets,
            gint n_targets,
            GdkDragAction actions);
void gtk_tree_view_unset_rows_drag_source (GtkTreeView *tree_view);
void gtk_tree_view_unset_rows_drag_dest (GtkTreeView *tree_view);



void gtk_tree_view_set_drag_dest_row (GtkTreeView *tree_view,
            GtkTreePath *path,
            GtkTreeViewDropPosition pos);
void gtk_tree_view_get_drag_dest_row (GtkTreeView *tree_view,
            GtkTreePath **path,
            GtkTreeViewDropPosition *pos);
gboolean gtk_tree_view_get_dest_row_at_pos (GtkTreeView *tree_view,
            gint drag_x,
            gint drag_y,
            GtkTreePath **path,
            GtkTreeViewDropPosition *pos);
GdkPixmap *gtk_tree_view_create_row_drag_icon (GtkTreeView *tree_view,
            GtkTreePath *path);


void gtk_tree_view_set_enable_search (GtkTreeView *tree_view,
        gboolean enable_search);
gboolean gtk_tree_view_get_enable_search (GtkTreeView *tree_view);
gint gtk_tree_view_get_search_column (GtkTreeView *tree_view);
void gtk_tree_view_set_search_column (GtkTreeView *tree_view,
        gint column);
GtkTreeViewSearchEqualFunc gtk_tree_view_get_search_equal_func (GtkTreeView *tree_view);
void gtk_tree_view_set_search_equal_func (GtkTreeView *tree_view,
        GtkTreeViewSearchEqualFunc search_equal_func,
        gpointer search_user_data,
        GDestroyNotify search_destroy);

GtkEntry *gtk_tree_view_get_search_entry (GtkTreeView *tree_view);
void gtk_tree_view_set_search_entry (GtkTreeView *tree_view,
              GtkEntry *entry);
GtkTreeViewSearchPositionFunc gtk_tree_view_get_search_position_func (GtkTreeView *tree_view);
void gtk_tree_view_set_search_position_func (GtkTreeView *tree_view,
              GtkTreeViewSearchPositionFunc func,
              gpointer data,
              GDestroyNotify destroy);


void gtk_tree_view_convert_widget_to_tree_coords (GtkTreeView *tree_view,
       gint wx,
       gint wy,
       gint *tx,
       gint *ty);
void gtk_tree_view_convert_tree_to_widget_coords (GtkTreeView *tree_view,
       gint tx,
       gint ty,
       gint *wx,
       gint *wy);
void gtk_tree_view_convert_widget_to_bin_window_coords (GtkTreeView *tree_view,
       gint wx,
       gint wy,
       gint *bx,
       gint *by);
void gtk_tree_view_convert_bin_window_to_widget_coords (GtkTreeView *tree_view,
       gint bx,
       gint by,
       gint *wx,
       gint *wy);
void gtk_tree_view_convert_tree_to_bin_window_coords (GtkTreeView *tree_view,
       gint tx,
       gint ty,
       gint *bx,
       gint *by);
void gtk_tree_view_convert_bin_window_to_tree_coords (GtkTreeView *tree_view,
       gint bx,
       gint by,
       gint *tx,
       gint *ty);



typedef void (* GtkTreeDestroyCountFunc) (GtkTreeView *tree_view,
        GtkTreePath *path,
        gint children,
        gpointer user_data);
void gtk_tree_view_set_destroy_count_func (GtkTreeView *tree_view,
        GtkTreeDestroyCountFunc func,
        gpointer data,
        GDestroyNotify destroy);

void gtk_tree_view_set_fixed_height_mode (GtkTreeView *tree_view,
           gboolean enable);
gboolean gtk_tree_view_get_fixed_height_mode (GtkTreeView *tree_view);
void gtk_tree_view_set_hover_selection (GtkTreeView *tree_view,
           gboolean hover);
gboolean gtk_tree_view_get_hover_selection (GtkTreeView *tree_view);
void gtk_tree_view_set_hover_expand (GtkTreeView *tree_view,
           gboolean expand);
gboolean gtk_tree_view_get_hover_expand (GtkTreeView *tree_view);
void gtk_tree_view_set_rubber_banding (GtkTreeView *tree_view,
           gboolean enable);
gboolean gtk_tree_view_get_rubber_banding (GtkTreeView *tree_view);

gboolean gtk_tree_view_is_rubber_banding_active (GtkTreeView *tree_view);

GtkTreeViewRowSeparatorFunc gtk_tree_view_get_row_separator_func (GtkTreeView *tree_view);
void gtk_tree_view_set_row_separator_func (GtkTreeView *tree_view,
          GtkTreeViewRowSeparatorFunc func,
          gpointer data,
          GDestroyNotify destroy);

GtkTreeViewGridLines gtk_tree_view_get_grid_lines (GtkTreeView *tree_view);
void gtk_tree_view_set_grid_lines (GtkTreeView *tree_view,
          GtkTreeViewGridLines grid_lines);
gboolean gtk_tree_view_get_enable_tree_lines (GtkTreeView *tree_view);
void gtk_tree_view_set_enable_tree_lines (GtkTreeView *tree_view,
          gboolean enabled);
void gtk_tree_view_set_show_expanders (GtkTreeView *tree_view,
          gboolean enabled);
gboolean gtk_tree_view_get_show_expanders (GtkTreeView *tree_view);
void gtk_tree_view_set_level_indentation (GtkTreeView *tree_view,
          gint indentation);
gint gtk_tree_view_get_level_indentation (GtkTreeView *tree_view);


void gtk_tree_view_set_tooltip_row (GtkTreeView *tree_view,
      GtkTooltip *tooltip,
      GtkTreePath *path);
void gtk_tree_view_set_tooltip_cell (GtkTreeView *tree_view,
      GtkTooltip *tooltip,
      GtkTreePath *path,
      GtkTreeViewColumn *column,
      GtkCellRenderer *cell);
gboolean gtk_tree_view_get_tooltip_context(GtkTreeView *tree_view,
      gint *x,
      gint *y,
      gboolean keyboard_tip,
      GtkTreeModel **model,
      GtkTreePath **path,
      GtkTreeIter *iter);
void gtk_tree_view_set_tooltip_column (GtkTreeView *tree_view,
             gint column);
gint gtk_tree_view_get_tooltip_column (GtkTreeView *tree_view);


# 30 "/usr/include/gtk-2.0/gtk/gtkcombobox.h" 2


# 40 "/usr/include/gtk-2.0/gtk/gtkcombobox.h"
typedef struct _GtkComboBox GtkComboBox;
typedef struct _GtkComboBoxClass GtkComboBoxClass;
typedef struct _GtkComboBoxPrivate GtkComboBoxPrivate;

struct _GtkComboBox
{
  GtkBin parent_instance;


  GtkComboBoxPrivate *priv;
};

struct _GtkComboBoxClass
{
  GtkBinClass parent_class;


  void (* changed) (GtkComboBox *combo_box);


  gchar * (* get_active_text) (GtkComboBox *combo_box);


  void (*_gtk_reserved0) (void);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
};



GType gtk_combo_box_get_type (void) __attribute__((__const__));
GtkWidget *gtk_combo_box_new (void);
GtkWidget *gtk_combo_box_new_with_model (GtkTreeModel *model);


gint gtk_combo_box_get_wrap_width (GtkComboBox *combo_box);
void gtk_combo_box_set_wrap_width (GtkComboBox *combo_box,
                                                    gint width);
gint gtk_combo_box_get_row_span_column (GtkComboBox *combo_box);
void gtk_combo_box_set_row_span_column (GtkComboBox *combo_box,
                                                    gint row_span);
gint gtk_combo_box_get_column_span_column (GtkComboBox *combo_box);
void gtk_combo_box_set_column_span_column (GtkComboBox *combo_box,
                                                    gint column_span);

gboolean gtk_combo_box_get_add_tearoffs (GtkComboBox *combo_box);
void gtk_combo_box_set_add_tearoffs (GtkComboBox *combo_box,
          gboolean add_tearoffs);

const gchar *gtk_combo_box_get_title (GtkComboBox *combo_box);
void gtk_combo_box_set_title (GtkComboBox *combo_box,
                 const gchar *title);

gboolean gtk_combo_box_get_focus_on_click (GtkComboBox *combo);
void gtk_combo_box_set_focus_on_click (GtkComboBox *combo,
          gboolean focus_on_click);


gint gtk_combo_box_get_active (GtkComboBox *combo_box);
void gtk_combo_box_set_active (GtkComboBox *combo_box,
                                              gint index_);
gboolean gtk_combo_box_get_active_iter (GtkComboBox *combo_box,
                                              GtkTreeIter *iter);
void gtk_combo_box_set_active_iter (GtkComboBox *combo_box,
                                              GtkTreeIter *iter);


void gtk_combo_box_set_model (GtkComboBox *combo_box,
                                              GtkTreeModel *model);
GtkTreeModel *gtk_combo_box_get_model (GtkComboBox *combo_box);

GtkTreeViewRowSeparatorFunc gtk_combo_box_get_row_separator_func (GtkComboBox *combo_box);
void gtk_combo_box_set_row_separator_func (GtkComboBox *combo_box,
          GtkTreeViewRowSeparatorFunc func,
          gpointer data,
          GDestroyNotify destroy);

void gtk_combo_box_set_button_sensitivity (GtkComboBox *combo_box,
        GtkSensitivityType sensitivity);
GtkSensitivityType gtk_combo_box_get_button_sensitivity (GtkComboBox *combo_box);


GtkWidget *gtk_combo_box_new_text (void);
void gtk_combo_box_append_text (GtkComboBox *combo_box,
                                              const gchar *text);
void gtk_combo_box_insert_text (GtkComboBox *combo_box,
                                              gint position,
                                              const gchar *text);
void gtk_combo_box_prepend_text (GtkComboBox *combo_box,
                                              const gchar *text);
void gtk_combo_box_remove_text (GtkComboBox *combo_box,
                                              gint position);
gchar *gtk_combo_box_get_active_text (GtkComboBox *combo_box);


void gtk_combo_box_popup (GtkComboBox *combo_box);
void gtk_combo_box_popdown (GtkComboBox *combo_box);
AtkObject* gtk_combo_box_get_popup_accessible (GtkComboBox *combo_box);


gboolean _gtk_combo_box_editing_canceled (GtkComboBox *combo_box);


# 72 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcomboboxentry.h" 1
# 27 "/usr/include/gtk-2.0/gtk/gtkcomboboxentry.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcombobox.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkcomboboxentry.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreemodel.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkcomboboxentry.h" 2


# 39 "/usr/include/gtk-2.0/gtk/gtkcomboboxentry.h"
typedef struct _GtkComboBoxEntry GtkComboBoxEntry;
typedef struct _GtkComboBoxEntryClass GtkComboBoxEntryClass;
typedef struct _GtkComboBoxEntryPrivate GtkComboBoxEntryPrivate;

struct _GtkComboBoxEntry
{
  GtkComboBox parent_instance;


  GtkComboBoxEntryPrivate *priv;
};

struct _GtkComboBoxEntryClass
{
  GtkComboBoxClass parent_class;


  void (*_gtk_reserved0) (void);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
};


GType gtk_combo_box_entry_get_type (void) __attribute__((__const__));
GtkWidget *gtk_combo_box_entry_new (void);
GtkWidget *gtk_combo_box_entry_new_with_model (GtkTreeModel *model,
                                                 gint text_column);

void gtk_combo_box_entry_set_text_column (GtkComboBoxEntry *entry_box,
                                                 gint text_column);
gint gtk_combo_box_entry_get_text_column (GtkComboBoxEntry *entry_box);


GtkWidget *gtk_combo_box_entry_new_text (void);



# 73 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcontainer.h" 1
# 74 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcurve.h" 1
# 45 "/usr/include/gtk-2.0/gtk/gtkcurve.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkdrawingarea.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkdrawingarea.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkdrawingarea.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkdrawingarea.h"
typedef struct _GtkDrawingArea GtkDrawingArea;
typedef struct _GtkDrawingAreaClass GtkDrawingAreaClass;

struct _GtkDrawingArea
{
  GtkWidget widget;

  gpointer draw_data;
};

struct _GtkDrawingAreaClass
{
  GtkWidgetClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_drawing_area_get_type (void) __attribute__((__const__));
GtkWidget* gtk_drawing_area_new (void);


void gtk_drawing_area_size (GtkDrawingArea *darea,
     gint width,
     gint height);




# 46 "/usr/include/gtk-2.0/gtk/gtkcurve.h" 2



# 58 "/usr/include/gtk-2.0/gtk/gtkcurve.h"
typedef struct _GtkCurve GtkCurve;
typedef struct _GtkCurveClass GtkCurveClass;


struct _GtkCurve
{
  GtkDrawingArea graph;

  gint cursor_type;
  gfloat min_x;
  gfloat max_x;
  gfloat min_y;
  gfloat max_y;
  GdkPixmap *pixmap;
  GtkCurveType curve_type;
  gint height;
  gint grab_point;
  gint last;


  gint num_points;
  GdkPoint *point;


  gint num_ctlpoints;
  gfloat (*ctlpoint)[2];
};

struct _GtkCurveClass
{
  GtkDrawingAreaClass parent_class;

  void (* curve_type_changed) (GtkCurve *curve);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_curve_get_type (void) __attribute__((__const__));
GtkWidget* gtk_curve_new (void);
void gtk_curve_reset (GtkCurve *curve);
void gtk_curve_set_gamma (GtkCurve *curve, gfloat gamma_);
void gtk_curve_set_range (GtkCurve *curve,
      gfloat min_x, gfloat max_x,
      gfloat min_y, gfloat max_y);
void gtk_curve_get_vector (GtkCurve *curve,
      int veclen, gfloat vector[]);
void gtk_curve_set_vector (GtkCurve *curve,
      int veclen, gfloat vector[]);
void gtk_curve_set_curve_type (GtkCurve *curve, GtkCurveType type);



# 75 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkdebug.h" 1
# 76 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkdialog.h" 1
# 77 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkdnd.h" 1
# 78 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkdrawingarea.h" 1
# 79 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkeditable.h" 1
# 80 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkentry.h" 1
# 81 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkentrycompletion.h" 1
# 82 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkenums.h" 1
# 83 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkeventbox.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkeventbox.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkbin.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkeventbox.h" 2



# 47 "/usr/include/gtk-2.0/gtk/gtkeventbox.h"
typedef struct _GtkEventBox GtkEventBox;
typedef struct _GtkEventBoxClass GtkEventBoxClass;

struct _GtkEventBox
{
  GtkBin bin;
};

struct _GtkEventBoxClass
{
  GtkBinClass parent_class;
};

GType gtk_event_box_get_type (void) __attribute__((__const__));
GtkWidget* gtk_event_box_new (void);
gboolean gtk_event_box_get_visible_window (GtkEventBox *event_box);
void gtk_event_box_set_visible_window (GtkEventBox *event_box,
          gboolean visible_window);
gboolean gtk_event_box_get_above_child (GtkEventBox *event_box);
void gtk_event_box_set_above_child (GtkEventBox *event_box,
          gboolean above_child);


# 84 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkexpander.h" 1
# 31 "/usr/include/gtk-2.0/gtk/gtkexpander.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkbin.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtkexpander.h" 2


# 42 "/usr/include/gtk-2.0/gtk/gtkexpander.h"
typedef struct _GtkExpander GtkExpander;
typedef struct _GtkExpanderClass GtkExpanderClass;
typedef struct _GtkExpanderPrivate GtkExpanderPrivate;

struct _GtkExpander
{
  GtkBin bin;

  GtkExpanderPrivate *priv;
};

struct _GtkExpanderClass
{
  GtkBinClass parent_class;




  void (* activate) (GtkExpander *expander);
};

GType gtk_expander_get_type (void) __attribute__((__const__));

GtkWidget *gtk_expander_new (const gchar *label);
GtkWidget *gtk_expander_new_with_mnemonic (const gchar *label);

void gtk_expander_set_expanded (GtkExpander *expander,
            gboolean expanded);
gboolean gtk_expander_get_expanded (GtkExpander *expander);


void gtk_expander_set_spacing (GtkExpander *expander,
            gint spacing);
gint gtk_expander_get_spacing (GtkExpander *expander);

void gtk_expander_set_label (GtkExpander *expander,
            const gchar *label);
const gchar *gtk_expander_get_label (GtkExpander *expander);

void gtk_expander_set_use_underline (GtkExpander *expander,
            gboolean use_underline);
gboolean gtk_expander_get_use_underline (GtkExpander *expander);

void gtk_expander_set_use_markup (GtkExpander *expander,
            gboolean use_markup);
gboolean gtk_expander_get_use_markup (GtkExpander *expander);

void gtk_expander_set_label_widget (GtkExpander *expander,
            GtkWidget *label_widget);
GtkWidget *gtk_expander_get_label_widget (GtkExpander *expander);


# 85 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkfixed.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkfixed.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcontainer.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkfixed.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkfixed.h"
typedef struct _GtkFixed GtkFixed;
typedef struct _GtkFixedClass GtkFixedClass;
typedef struct _GtkFixedChild GtkFixedChild;

struct _GtkFixed
{
  GtkContainer container;

  GList *children;
};

struct _GtkFixedClass
{
  GtkContainerClass parent_class;
};

struct _GtkFixedChild
{
  GtkWidget *widget;
  gint x;
  gint y;
};


GType gtk_fixed_get_type (void) __attribute__((__const__));
GtkWidget* gtk_fixed_new (void);
void gtk_fixed_put (GtkFixed *fixed,
                                        GtkWidget *widget,
                                        gint x,
                                        gint y);
void gtk_fixed_move (GtkFixed *fixed,
                                        GtkWidget *widget,
                                        gint x,
                                        gint y);
void gtk_fixed_set_has_window (GtkFixed *fixed,
     gboolean has_window);
gboolean gtk_fixed_get_has_window (GtkFixed *fixed);


# 86 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkfilechooser.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkfilechooser.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkfilefilter.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkfilefilter.h"






typedef struct _GtkFileFilter GtkFileFilter;
typedef struct _GtkFileFilterInfo GtkFileFilterInfo;

typedef enum {
  GTK_FILE_FILTER_FILENAME = 1 << 0,
  GTK_FILE_FILTER_URI = 1 << 1,
  GTK_FILE_FILTER_DISPLAY_NAME = 1 << 2,
  GTK_FILE_FILTER_MIME_TYPE = 1 << 3
} GtkFileFilterFlags;

typedef gboolean (*GtkFileFilterFunc) (const GtkFileFilterInfo *filter_info,
           gpointer data);

struct _GtkFileFilterInfo
{
  GtkFileFilterFlags contains;

  const gchar *filename;
  const gchar *uri;
  const gchar *display_name;
  const gchar *mime_type;
};

GType gtk_file_filter_get_type (void) __attribute__((__const__));

GtkFileFilter * gtk_file_filter_new (void);
void gtk_file_filter_set_name (GtkFileFilter *filter,
      const gchar *name);
const gchar *gtk_file_filter_get_name (GtkFileFilter *filter);

void gtk_file_filter_add_mime_type (GtkFileFilter *filter,
      const gchar *mime_type);
void gtk_file_filter_add_pattern (GtkFileFilter *filter,
      const gchar *pattern);
void gtk_file_filter_add_pixbuf_formats (GtkFileFilter *filter);
void gtk_file_filter_add_custom (GtkFileFilter *filter,
      GtkFileFilterFlags needed,
      GtkFileFilterFunc func,
      gpointer data,
      GDestroyNotify notify);

GtkFileFilterFlags gtk_file_filter_get_needed (GtkFileFilter *filter);
gboolean gtk_file_filter_filter (GtkFileFilter *filter,
            const GtkFileFilterInfo *filter_info);


# 29 "/usr/include/gtk-2.0/gtk/gtkfilechooser.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkfilechooser.h" 2







typedef struct _GtkFileChooser GtkFileChooser;

typedef enum
{
  GTK_FILE_CHOOSER_ACTION_OPEN,
  GTK_FILE_CHOOSER_ACTION_SAVE,
  GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER,
  GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER
} GtkFileChooserAction;

typedef enum
{
  GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM,
  GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME,
  GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN
} GtkFileChooserConfirmation;

GType gtk_file_chooser_get_type (void) __attribute__((__const__));





typedef enum {
  GTK_FILE_CHOOSER_ERROR_NONEXISTENT,
  GTK_FILE_CHOOSER_ERROR_BAD_FILENAME,
  GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS,
  GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME
} GtkFileChooserError;

GQuark gtk_file_chooser_error_quark (void);



void gtk_file_chooser_set_action (GtkFileChooser *chooser,
          GtkFileChooserAction action);
GtkFileChooserAction gtk_file_chooser_get_action (GtkFileChooser *chooser);
void gtk_file_chooser_set_local_only (GtkFileChooser *chooser,
          gboolean local_only);
gboolean gtk_file_chooser_get_local_only (GtkFileChooser *chooser);
void gtk_file_chooser_set_select_multiple (GtkFileChooser *chooser,
          gboolean select_multiple);
gboolean gtk_file_chooser_get_select_multiple (GtkFileChooser *chooser);
void gtk_file_chooser_set_show_hidden (GtkFileChooser *chooser,
          gboolean show_hidden);
gboolean gtk_file_chooser_get_show_hidden (GtkFileChooser *chooser);

void gtk_file_chooser_set_do_overwrite_confirmation (GtkFileChooser *chooser,
             gboolean do_overwrite_confirmation);
gboolean gtk_file_chooser_get_do_overwrite_confirmation (GtkFileChooser *chooser);



void gtk_file_chooser_set_current_name (GtkFileChooser *chooser,
           const gchar *name);
# 110 "/usr/include/gtk-2.0/gtk/gtkfilechooser.h"
gchar * gtk_file_chooser_get_filename (GtkFileChooser *chooser);
gboolean gtk_file_chooser_set_filename (GtkFileChooser *chooser,
           const char *filename);
gboolean gtk_file_chooser_select_filename (GtkFileChooser *chooser,
           const char *filename);
void gtk_file_chooser_unselect_filename (GtkFileChooser *chooser,
           const char *filename);
void gtk_file_chooser_select_all (GtkFileChooser *chooser);
void gtk_file_chooser_unselect_all (GtkFileChooser *chooser);
GSList * gtk_file_chooser_get_filenames (GtkFileChooser *chooser);
gboolean gtk_file_chooser_set_current_folder (GtkFileChooser *chooser,
           const gchar *filename);
gchar * gtk_file_chooser_get_current_folder (GtkFileChooser *chooser);




gchar * gtk_file_chooser_get_uri (GtkFileChooser *chooser);
gboolean gtk_file_chooser_set_uri (GtkFileChooser *chooser,
        const char *uri);
gboolean gtk_file_chooser_select_uri (GtkFileChooser *chooser,
        const char *uri);
void gtk_file_chooser_unselect_uri (GtkFileChooser *chooser,
        const char *uri);
GSList * gtk_file_chooser_get_uris (GtkFileChooser *chooser);
gboolean gtk_file_chooser_set_current_folder_uri (GtkFileChooser *chooser,
        const gchar *uri);
gchar * gtk_file_chooser_get_current_folder_uri (GtkFileChooser *chooser);


GFile * gtk_file_chooser_get_file (GtkFileChooser *chooser);
gboolean gtk_file_chooser_set_file (GtkFileChooser *chooser,
                                                   GFile *file,
                                                   GError **error);
gboolean gtk_file_chooser_select_file (GtkFileChooser *chooser,
                                                   GFile *file,
                                                   GError **error);
void gtk_file_chooser_unselect_file (GtkFileChooser *chooser,
                                                   GFile *file);
GSList * gtk_file_chooser_get_files (GtkFileChooser *chooser);
gboolean gtk_file_chooser_set_current_folder_file (GtkFileChooser *chooser,
                                                   GFile *file,
                                                   GError **error);
GFile * gtk_file_chooser_get_current_folder_file (GtkFileChooser *chooser);



void gtk_file_chooser_set_preview_widget (GtkFileChooser *chooser,
             GtkWidget *preview_widget);
GtkWidget *gtk_file_chooser_get_preview_widget (GtkFileChooser *chooser);
void gtk_file_chooser_set_preview_widget_active (GtkFileChooser *chooser,
             gboolean active);
gboolean gtk_file_chooser_get_preview_widget_active (GtkFileChooser *chooser);
void gtk_file_chooser_set_use_preview_label (GtkFileChooser *chooser,
             gboolean use_label);
gboolean gtk_file_chooser_get_use_preview_label (GtkFileChooser *chooser);

char *gtk_file_chooser_get_preview_filename (GtkFileChooser *chooser);
char *gtk_file_chooser_get_preview_uri (GtkFileChooser *chooser);
GFile *gtk_file_chooser_get_preview_file (GtkFileChooser *chooser);



void gtk_file_chooser_set_extra_widget (GtkFileChooser *chooser,
           GtkWidget *extra_widget);
GtkWidget *gtk_file_chooser_get_extra_widget (GtkFileChooser *chooser);



void gtk_file_chooser_add_filter (GtkFileChooser *chooser,
     GtkFileFilter *filter);
void gtk_file_chooser_remove_filter (GtkFileChooser *chooser,
     GtkFileFilter *filter);
GSList *gtk_file_chooser_list_filters (GtkFileChooser *chooser);



void gtk_file_chooser_set_filter (GtkFileChooser *chooser,
        GtkFileFilter *filter);
GtkFileFilter *gtk_file_chooser_get_filter (GtkFileChooser *chooser);



gboolean gtk_file_chooser_add_shortcut_folder (GtkFileChooser *chooser,
        const char *folder,
        GError **error);
gboolean gtk_file_chooser_remove_shortcut_folder (GtkFileChooser *chooser,
        const char *folder,
        GError **error);
GSList *gtk_file_chooser_list_shortcut_folders (GtkFileChooser *chooser);

gboolean gtk_file_chooser_add_shortcut_folder_uri (GtkFileChooser *chooser,
            const char *uri,
            GError **error);
gboolean gtk_file_chooser_remove_shortcut_folder_uri (GtkFileChooser *chooser,
            const char *uri,
            GError **error);
GSList *gtk_file_chooser_list_shortcut_folder_uris (GtkFileChooser *chooser);


# 87 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkfilechooserbutton.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkfilechooserbutton.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkhbox.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkhbox.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkbox.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkhbox.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkhbox.h"
typedef struct _GtkHBox GtkHBox;
typedef struct _GtkHBoxClass GtkHBoxClass;

struct _GtkHBox
{
  GtkBox box;
};

struct _GtkHBoxClass
{
  GtkBoxClass parent_class;
};


GType gtk_hbox_get_type (void) __attribute__((__const__));
GtkWidget * gtk_hbox_new (gboolean homogeneous,
                               gint spacing);


# 29 "/usr/include/gtk-2.0/gtk/gtkfilechooserbutton.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkfilechooser.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkfilechooserbutton.h" 2


# 40 "/usr/include/gtk-2.0/gtk/gtkfilechooserbutton.h"
typedef struct _GtkFileChooserButton GtkFileChooserButton;
typedef struct _GtkFileChooserButtonPrivate GtkFileChooserButtonPrivate;
typedef struct _GtkFileChooserButtonClass GtkFileChooserButtonClass;

struct _GtkFileChooserButton
{

  GtkHBox parent;

  GtkFileChooserButtonPrivate *priv;
};

struct _GtkFileChooserButtonClass
{

  GtkHBoxClass parent_class;

  void (* file_set) (GtkFileChooserButton *fc);

  void (*__gtk_reserved1);
  void (*__gtk_reserved2);
  void (*__gtk_reserved3);
  void (*__gtk_reserved4);
  void (*__gtk_reserved5);
  void (*__gtk_reserved6);
  void (*__gtk_reserved7);
};


GType gtk_file_chooser_button_get_type (void) __attribute__((__const__));
GtkWidget * gtk_file_chooser_button_new (const gchar *title,
        GtkFileChooserAction action);


GtkWidget * gtk_file_chooser_button_new_with_backend (const gchar *title,
        GtkFileChooserAction action,
        const gchar *backend);


GtkWidget * gtk_file_chooser_button_new_with_dialog (GtkWidget *dialog);
const gchar *gtk_file_chooser_button_get_title (GtkFileChooserButton *button);
void gtk_file_chooser_button_set_title (GtkFileChooserButton *button,
        const gchar *title);
gint gtk_file_chooser_button_get_width_chars (GtkFileChooserButton *button);
void gtk_file_chooser_button_set_width_chars (GtkFileChooserButton *button,
        gint n_chars);
gboolean gtk_file_chooser_button_get_focus_on_click (GtkFileChooserButton *button);
void gtk_file_chooser_button_set_focus_on_click (GtkFileChooserButton *button,
                                                                  gboolean focus_on_click);


# 88 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkfilechooserdialog.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkfilechooserdialog.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkdialog.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkfilechooserdialog.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkfilechooser.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkfilechooserdialog.h" 2


# 40 "/usr/include/gtk-2.0/gtk/gtkfilechooserdialog.h"
typedef struct _GtkFileChooserDialog GtkFileChooserDialog;
typedef struct _GtkFileChooserDialogPrivate GtkFileChooserDialogPrivate;
typedef struct _GtkFileChooserDialogClass GtkFileChooserDialogClass;

struct _GtkFileChooserDialog
{
  GtkDialog parent_instance;

  GtkFileChooserDialogPrivate *priv;
};

struct _GtkFileChooserDialogClass
{
  GtkDialogClass parent_class;
};

GType gtk_file_chooser_dialog_get_type (void) __attribute__((__const__));
GtkWidget *gtk_file_chooser_dialog_new (const gchar *title,
           GtkWindow *parent,
           GtkFileChooserAction action,
           const gchar *first_button_text,
           ...) __attribute__((__sentinel__));


GtkWidget *gtk_file_chooser_dialog_new_with_backend (const gchar *title,
           GtkWindow *parent,
           GtkFileChooserAction action,
           const gchar *backend,
           const gchar *first_button_text,
           ...) __attribute__((__sentinel__));



# 89 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkfilechooserwidget.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkfilechooserwidget.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkfilechooser.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkfilechooserwidget.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkvbox.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkfilechooserwidget.h" 2


# 40 "/usr/include/gtk-2.0/gtk/gtkfilechooserwidget.h"
typedef struct _GtkFileChooserWidget GtkFileChooserWidget;
typedef struct _GtkFileChooserWidgetPrivate GtkFileChooserWidgetPrivate;
typedef struct _GtkFileChooserWidgetClass GtkFileChooserWidgetClass;

struct _GtkFileChooserWidget
{
  GtkVBox parent_instance;

  GtkFileChooserWidgetPrivate *priv;
};

struct _GtkFileChooserWidgetClass
{
  GtkVBoxClass parent_class;
};

GType gtk_file_chooser_widget_get_type (void) __attribute__((__const__));
GtkWidget *gtk_file_chooser_widget_new (GtkFileChooserAction action);



GtkWidget *gtk_file_chooser_widget_new_with_backend (GtkFileChooserAction action,
           const gchar *backend);



# 90 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkfilefilter.h" 1
# 91 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkfontbutton.h" 1
# 34 "/usr/include/gtk-2.0/gtk/gtkfontbutton.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkbutton.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkfontbutton.h" 2



# 49 "/usr/include/gtk-2.0/gtk/gtkfontbutton.h"
typedef struct _GtkFontButton GtkFontButton;
typedef struct _GtkFontButtonClass GtkFontButtonClass;
typedef struct _GtkFontButtonPrivate GtkFontButtonPrivate;

struct _GtkFontButton {
  GtkButton button;


  GtkFontButtonPrivate *priv;
};

struct _GtkFontButtonClass {
  GtkButtonClass parent_class;


  void (* font_set) (GtkFontButton *gfp);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_font_button_get_type (void) __attribute__((__const__));
GtkWidget *gtk_font_button_new (void);
GtkWidget *gtk_font_button_new_with_font (const gchar *fontname);

const gchar *gtk_font_button_get_title (GtkFontButton *font_button);
void gtk_font_button_set_title (GtkFontButton *font_button,
                                                      const gchar *title);
gboolean gtk_font_button_get_use_font (GtkFontButton *font_button);
void gtk_font_button_set_use_font (GtkFontButton *font_button,
                                                      gboolean use_font);
gboolean gtk_font_button_get_use_size (GtkFontButton *font_button);
void gtk_font_button_set_use_size (GtkFontButton *font_button,
                                                      gboolean use_size);
const gchar* gtk_font_button_get_font_name (GtkFontButton *font_button);
gboolean gtk_font_button_set_font_name (GtkFontButton *font_button,
                                                      const gchar *fontname);
gboolean gtk_font_button_get_show_style (GtkFontButton *font_button);
void gtk_font_button_set_show_style (GtkFontButton *font_button,
                                                      gboolean show_style);
gboolean gtk_font_button_get_show_size (GtkFontButton *font_button);
void gtk_font_button_set_show_size (GtkFontButton *font_button,
                                                      gboolean show_size);


# 92 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkfontsel.h" 1
# 39 "/usr/include/gtk-2.0/gtk/gtkfontsel.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkdialog.h" 1
# 40 "/usr/include/gtk-2.0/gtk/gtkfontsel.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkvbox.h" 1
# 41 "/usr/include/gtk-2.0/gtk/gtkfontsel.h" 2



# 61 "/usr/include/gtk-2.0/gtk/gtkfontsel.h"
typedef struct _GtkFontSelection GtkFontSelection;
typedef struct _GtkFontSelectionClass GtkFontSelectionClass;

typedef struct _GtkFontSelectionDialog GtkFontSelectionDialog;
typedef struct _GtkFontSelectionDialogClass GtkFontSelectionDialogClass;

struct _GtkFontSelection
{
  GtkVBox parent_instance;

  GtkWidget *font_entry;
  GtkWidget *family_list;
  GtkWidget *font_style_entry;
  GtkWidget *face_list;
  GtkWidget *size_entry;
  GtkWidget *size_list;
  GtkWidget *pixels_button;
  GtkWidget *points_button;
  GtkWidget *filter_button;
  GtkWidget *preview_entry;

  PangoFontFamily *family;
  PangoFontFace *face;

  gint size;

  GdkFont *font;


};

struct _GtkFontSelectionClass
{
  GtkVBoxClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

struct _GtkFontSelectionDialog
{
  GtkDialog parent_instance;


  GtkWidget *fontsel;

  GtkWidget *main_vbox;
  GtkWidget *action_area;


  GtkWidget *ok_button;
  GtkWidget *apply_button;
  GtkWidget *cancel_button;






  gint dialog_width;
  gboolean auto_resize;
};

struct _GtkFontSelectionDialogClass
{
  GtkDialogClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
# 145 "/usr/include/gtk-2.0/gtk/gtkfontsel.h"
GType gtk_font_selection_get_type (void) __attribute__((__const__));
GtkWidget * gtk_font_selection_new (void);
GtkWidget * gtk_font_selection_get_family_list (GtkFontSelection *fontsel);
GtkWidget * gtk_font_selection_get_face_list (GtkFontSelection *fontsel);
GtkWidget * gtk_font_selection_get_size_entry (GtkFontSelection *fontsel);
GtkWidget * gtk_font_selection_get_size_list (GtkFontSelection *fontsel);
GtkWidget * gtk_font_selection_get_preview_entry (GtkFontSelection *fontsel);
PangoFontFamily *
             gtk_font_selection_get_family (GtkFontSelection *fontsel);
PangoFontFace *
             gtk_font_selection_get_face (GtkFontSelection *fontsel);
gint gtk_font_selection_get_size (GtkFontSelection *fontsel);
gchar* gtk_font_selection_get_font_name (GtkFontSelection *fontsel);


GdkFont* gtk_font_selection_get_font (GtkFontSelection *fontsel);


gboolean gtk_font_selection_set_font_name (GtkFontSelection *fontsel,
                                                   const gchar *fontname);
const gchar* gtk_font_selection_get_preview_text (GtkFontSelection *fontsel);
void gtk_font_selection_set_preview_text (GtkFontSelection *fontsel,
                                                   const gchar *text);







GType gtk_font_selection_dialog_get_type (void) __attribute__((__const__));
GtkWidget *gtk_font_selection_dialog_new (const gchar *title);

GtkWidget *gtk_font_selection_dialog_get_ok_button (GtkFontSelectionDialog *fsd);

GtkWidget *gtk_font_selection_dialog_get_apply_button (GtkFontSelectionDialog *fsd);

GtkWidget *gtk_font_selection_dialog_get_cancel_button (GtkFontSelectionDialog *fsd);






gchar* gtk_font_selection_dialog_get_font_name (GtkFontSelectionDialog *fsd);





GdkFont* gtk_font_selection_dialog_get_font (GtkFontSelectionDialog *fsd);






gboolean gtk_font_selection_dialog_set_font_name (GtkFontSelectionDialog *fsd,
                                                        const gchar *fontname);



const gchar*
          gtk_font_selection_dialog_get_preview_text (GtkFontSelectionDialog *fsd);



void gtk_font_selection_dialog_set_preview_text (GtkFontSelectionDialog *fsd,
                                                        const gchar *text);



# 93 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkframe.h" 1
# 94 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkgamma.h" 1
# 45 "/usr/include/gtk-2.0/gtk/gtkgamma.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkvbox.h" 1
# 46 "/usr/include/gtk-2.0/gtk/gtkgamma.h" 2



# 57 "/usr/include/gtk-2.0/gtk/gtkgamma.h"
typedef struct _GtkGammaCurve GtkGammaCurve;
typedef struct _GtkGammaCurveClass GtkGammaCurveClass;


struct _GtkGammaCurve
{
  GtkVBox vbox;

  GtkWidget *table;
  GtkWidget *curve;
  GtkWidget *button[5];

  gfloat gamma;
  GtkWidget *gamma_dialog;
  GtkWidget *gamma_text;
};

struct _GtkGammaCurveClass
{
  GtkVBoxClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_gamma_curve_get_type (void) __attribute__((__const__));
GtkWidget* gtk_gamma_curve_new (void);



# 95 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkgc.h" 1
# 38 "/usr/include/gtk-2.0/gtk/gtkgc.h"


GdkGC* gtk_gc_get (gint depth,
         GdkColormap *colormap,
         GdkGCValues *values,
         GdkGCValuesMask values_mask);
void gtk_gc_release (GdkGC *gc);



# 96 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkhandlebox.h" 1
# 40 "/usr/include/gtk-2.0/gtk/gtkhandlebox.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkbin.h" 1
# 41 "/usr/include/gtk-2.0/gtk/gtkhandlebox.h" 2



# 53 "/usr/include/gtk-2.0/gtk/gtkhandlebox.h"
typedef struct _GtkHandleBox GtkHandleBox;
typedef struct _GtkHandleBoxClass GtkHandleBoxClass;

struct _GtkHandleBox
{
  GtkBin bin;

  GdkWindow *bin_window;
  GdkWindow *float_window;
  GtkShadowType shadow_type;
  guint handle_position : 2;
  guint float_window_mapped : 1;
  guint child_detached : 1;
  guint in_drag : 1;
  guint shrink_on_detach : 1;

  signed int snap_edge : 3;



  gint deskoff_x;
  gint deskoff_y;

  GtkAllocation attach_allocation;
  GtkAllocation float_allocation;
};

struct _GtkHandleBoxClass
{
  GtkBinClass parent_class;

  void (*child_attached) (GtkHandleBox *handle_box,
     GtkWidget *child);
  void (*child_detached) (GtkHandleBox *handle_box,
     GtkWidget *child);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_handle_box_get_type (void) __attribute__((__const__));
GtkWidget* gtk_handle_box_new (void);
void gtk_handle_box_set_shadow_type (GtkHandleBox *handle_box,
                                                   GtkShadowType type);
GtkShadowType gtk_handle_box_get_shadow_type (GtkHandleBox *handle_box);
void gtk_handle_box_set_handle_position (GtkHandleBox *handle_box,
                GtkPositionType position);
GtkPositionType gtk_handle_box_get_handle_position(GtkHandleBox *handle_box);
void gtk_handle_box_set_snap_edge (GtkHandleBox *handle_box,
         GtkPositionType edge);
GtkPositionType gtk_handle_box_get_snap_edge (GtkHandleBox *handle_box);
gboolean gtk_handle_box_get_child_detached (GtkHandleBox *handle_box);


# 97 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkhbbox.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkhbbox.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkbbox.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkhbbox.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkhbbox.h"
typedef struct _GtkHButtonBox GtkHButtonBox;
typedef struct _GtkHButtonBoxClass GtkHButtonBoxClass;

struct _GtkHButtonBox
{
  GtkButtonBox button_box;
};

struct _GtkHButtonBoxClass
{
  GtkButtonBoxClass parent_class;
};


GType gtk_hbutton_box_get_type (void) __attribute__((__const__));
GtkWidget* gtk_hbutton_box_new (void);




gint gtk_hbutton_box_get_spacing_default (void);
GtkButtonBoxStyle gtk_hbutton_box_get_layout_default (void);

void gtk_hbutton_box_set_spacing_default (gint spacing);
void gtk_hbutton_box_set_layout_default (GtkButtonBoxStyle layout);



# 98 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkhbox.h" 1
# 99 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkhpaned.h" 1
# 34 "/usr/include/gtk-2.0/gtk/gtkhpaned.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkpaned.h" 1
# 34 "/usr/include/gtk-2.0/gtk/gtkpaned.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcontainer.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkpaned.h" 2


# 46 "/usr/include/gtk-2.0/gtk/gtkpaned.h"
typedef struct _GtkPaned GtkPaned;
typedef struct _GtkPanedClass GtkPanedClass;
typedef struct _GtkPanedPrivate GtkPanedPrivate;

struct _GtkPaned
{
  GtkContainer container;

  GtkWidget *child1;
  GtkWidget *child2;

  GdkWindow *handle;
  GdkGC *xor_gc;
  GdkCursorType cursor_type;


  GdkRectangle handle_pos;

  gint child1_size;
  gint last_allocation;
  gint min_position;
  gint max_position;

  guint position_set : 1;
  guint in_drag : 1;
  guint child1_shrink : 1;
  guint child1_resize : 1;
  guint child2_shrink : 1;
  guint child2_resize : 1;
  guint orientation : 1;
  guint in_recursion : 1;
  guint handle_prelit : 1;

  GtkWidget *last_child1_focus;
  GtkWidget *last_child2_focus;
  GtkPanedPrivate *priv;

  gint drag_pos;
  gint original_position;
};

struct _GtkPanedClass
{
  GtkContainerClass parent_class;

  gboolean (* cycle_child_focus) (GtkPaned *paned,
        gboolean reverse);
  gboolean (* toggle_handle_focus) (GtkPaned *paned);
  gboolean (* move_handle) (GtkPaned *paned,
        GtkScrollType scroll);
  gboolean (* cycle_handle_focus) (GtkPaned *paned,
        gboolean reverse);
  gboolean (* accept_position) (GtkPaned *paned);
  gboolean (* cancel_position) (GtkPaned *paned);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_paned_get_type (void) __attribute__((__const__));
void gtk_paned_add1 (GtkPaned *paned,
                                    GtkWidget *child);
void gtk_paned_add2 (GtkPaned *paned,
                                    GtkWidget *child);
void gtk_paned_pack1 (GtkPaned *paned,
                                    GtkWidget *child,
                                    gboolean resize,
                                    gboolean shrink);
void gtk_paned_pack2 (GtkPaned *paned,
                                    GtkWidget *child,
                                    gboolean resize,
                                    gboolean shrink);

gint gtk_paned_get_position (GtkPaned *paned);
void gtk_paned_set_position (GtkPaned *paned,
                                    gint position);

GtkWidget * gtk_paned_get_child1 (GtkPaned *paned);
GtkWidget * gtk_paned_get_child2 (GtkPaned *paned);



void gtk_paned_compute_position (GtkPaned *paned,
                                    gint allocation,
                                    gint child1_req,
                                    gint child2_req);





# 35 "/usr/include/gtk-2.0/gtk/gtkhpaned.h" 2


# 46 "/usr/include/gtk-2.0/gtk/gtkhpaned.h"
typedef struct _GtkHPaned GtkHPaned;
typedef struct _GtkHPanedClass GtkHPanedClass;

struct _GtkHPaned
{
  GtkPaned paned;
};

struct _GtkHPanedClass
{
  GtkPanedClass parent_class;
};


GType gtk_hpaned_get_type (void) __attribute__((__const__));
GtkWidget * gtk_hpaned_new (void);


# 100 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkhruler.h" 1
# 45 "/usr/include/gtk-2.0/gtk/gtkhruler.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkruler.h" 1
# 45 "/usr/include/gtk-2.0/gtk/gtkruler.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 46 "/usr/include/gtk-2.0/gtk/gtkruler.h" 2



# 58 "/usr/include/gtk-2.0/gtk/gtkruler.h"
typedef struct _GtkRuler GtkRuler;
typedef struct _GtkRulerClass GtkRulerClass;
typedef struct _GtkRulerMetric GtkRulerMetric;




struct _GtkRuler
{
  GtkWidget widget;

  GdkPixmap *backing_store;
  GdkGC *non_gr_exp_gc;
  GtkRulerMetric *metric;
  gint xsrc;
  gint ysrc;
  gint slider_size;


  gdouble lower;

  gdouble upper;

  gdouble position;

  gdouble max_size;
};

struct _GtkRulerClass
{
  GtkWidgetClass parent_class;

  void (* draw_ticks) (GtkRuler *ruler);
  void (* draw_pos) (GtkRuler *ruler);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

struct _GtkRulerMetric
{
  gchar *metric_name;
  gchar *abbrev;


  gdouble pixels_per_unit;
  gdouble ruler_scale[10];
  gint subdivide[5];
};


GType gtk_ruler_get_type (void) __attribute__((__const__));
void gtk_ruler_set_metric (GtkRuler *ruler,
                                      GtkMetricType metric);
GtkMetricType gtk_ruler_get_metric (GtkRuler *ruler);
void gtk_ruler_set_range (GtkRuler *ruler,
                                      gdouble lower,
                                      gdouble upper,
                                      gdouble position,
                                      gdouble max_size);
void gtk_ruler_get_range (GtkRuler *ruler,
                                      gdouble *lower,
                                      gdouble *upper,
                                      gdouble *position,
                                      gdouble *max_size);

void gtk_ruler_draw_ticks (GtkRuler *ruler);
void gtk_ruler_draw_pos (GtkRuler *ruler);


# 46 "/usr/include/gtk-2.0/gtk/gtkhruler.h" 2



# 59 "/usr/include/gtk-2.0/gtk/gtkhruler.h"
typedef struct _GtkHRuler GtkHRuler;
typedef struct _GtkHRulerClass GtkHRulerClass;

struct _GtkHRuler
{
  GtkRuler ruler;
};

struct _GtkHRulerClass
{
  GtkRulerClass parent_class;
};


GType gtk_hruler_get_type (void) __attribute__((__const__));
GtkWidget* gtk_hruler_new (void);



# 101 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkhscale.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkhscale.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkscale.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkscale.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkrange.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkrange.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkadjustment.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkrange.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 37 "/usr/include/gtk-2.0/gtk/gtkrange.h" 2



# 50 "/usr/include/gtk-2.0/gtk/gtkrange.h"
typedef struct _GtkRangeLayout GtkRangeLayout;
typedef struct _GtkRangeStepTimer GtkRangeStepTimer;

typedef struct _GtkRange GtkRange;
typedef struct _GtkRangeClass GtkRangeClass;

struct _GtkRange
{
  GtkWidget widget;

  GtkAdjustment *adjustment;
  GtkUpdateType update_policy;
  guint inverted : 1;



  guint flippable : 1;





  guint has_stepper_a : 1;
  guint has_stepper_b : 1;
  guint has_stepper_c : 1;
  guint has_stepper_d : 1;

  guint need_recalc : 1;

  guint slider_size_fixed : 1;

  gint min_slider_size;

  GtkOrientation orientation;


  GdkRectangle range_rect;

  gint slider_start;
  gint slider_end;


  gint round_digits;


  guint trough_click_forward : 1;
  guint update_pending : 1;
  GtkRangeLayout *layout;
  GtkRangeStepTimer *timer;
  gint slide_initial_slider_position;
  gint slide_initial_coordinate;
  guint update_timeout_id;
  GdkWindow *event_window;
};

struct _GtkRangeClass
{
  GtkWidgetClass parent_class;


  gchar *slider_detail;
  gchar *stepper_detail;

  void (* value_changed) (GtkRange *range);
  void (* adjust_bounds) (GtkRange *range,
                             gdouble new_value);


  void (* move_slider) (GtkRange *range,
                             GtkScrollType scroll);


  void (* get_range_border) (GtkRange *range,
                             GtkBorder *border_);

  gboolean (* change_value) (GtkRange *range,
                             GtkScrollType scroll,
                             gdouble new_value);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
};


GType gtk_range_get_type (void) __attribute__((__const__));

void gtk_range_set_update_policy (GtkRange *range,
                                                            GtkUpdateType policy);
GtkUpdateType gtk_range_get_update_policy (GtkRange *range);

void gtk_range_set_adjustment (GtkRange *range,
                                                            GtkAdjustment *adjustment);
GtkAdjustment* gtk_range_get_adjustment (GtkRange *range);

void gtk_range_set_inverted (GtkRange *range,
                                                            gboolean setting);
gboolean gtk_range_get_inverted (GtkRange *range);

void gtk_range_set_lower_stepper_sensitivity (GtkRange *range,
                                                            GtkSensitivityType sensitivity);
GtkSensitivityType gtk_range_get_lower_stepper_sensitivity (GtkRange *range);
void gtk_range_set_upper_stepper_sensitivity (GtkRange *range,
                                                            GtkSensitivityType sensitivity);
GtkSensitivityType gtk_range_get_upper_stepper_sensitivity (GtkRange *range);

void gtk_range_set_increments (GtkRange *range,
                                                            gdouble step,
                                                            gdouble page);
void gtk_range_set_range (GtkRange *range,
                                                            gdouble min,
                                                            gdouble max);
void gtk_range_set_value (GtkRange *range,
                                                            gdouble value);
gdouble gtk_range_get_value (GtkRange *range);

void gtk_range_set_show_fill_level (GtkRange *range,
                                                            gboolean show_fill_level);
gboolean gtk_range_get_show_fill_level (GtkRange *range);
void gtk_range_set_restrict_to_fill_level (GtkRange *range,
                                                            gboolean restrict_to_fill_level);
gboolean gtk_range_get_restrict_to_fill_level (GtkRange *range);
void gtk_range_set_fill_level (GtkRange *range,
                                                            gdouble fill_level);
gdouble gtk_range_get_fill_level (GtkRange *range);


gdouble _gtk_range_get_wheel_delta (GtkRange *range,
                                                            GdkScrollDirection direction);

void _gtk_range_set_stop_values (GtkRange *range,
                                                            gdouble *values,
                                                            gint n_values);
gint _gtk_range_get_stop_positions (GtkRange *range,
                                                            gint **values);



# 36 "/usr/include/gtk-2.0/gtk/gtkscale.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkscale.h"
typedef struct _GtkScale GtkScale;
typedef struct _GtkScaleClass GtkScaleClass;

struct _GtkScale
{
  GtkRange range;

  gint digits;
  guint draw_value : 1;
  guint value_pos : 2;
};

struct _GtkScaleClass
{
  GtkRangeClass parent_class;

  gchar* (* format_value) (GtkScale *scale,
                           gdouble value);

  void (* draw_value) (GtkScale *scale);

  void (* get_layout_offsets) (GtkScale *scale,
                               gint *x,
                               gint *y);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
};

GType gtk_scale_get_type (void) __attribute__((__const__));
void gtk_scale_set_digits (GtkScale *scale,
                                                gint digits);
gint gtk_scale_get_digits (GtkScale *scale);
void gtk_scale_set_draw_value (GtkScale *scale,
                                                gboolean draw_value);
gboolean gtk_scale_get_draw_value (GtkScale *scale);
void gtk_scale_set_value_pos (GtkScale *scale,
                                                GtkPositionType pos);
GtkPositionType gtk_scale_get_value_pos (GtkScale *scale);

PangoLayout * gtk_scale_get_layout (GtkScale *scale);
void gtk_scale_get_layout_offsets (GtkScale *scale,
                                                gint *x,
                                                gint *y);

void gtk_scale_add_mark (GtkScale *scale,
                                                gdouble value,
                                                GtkPositionType position,
                                                const gchar *markup);
void gtk_scale_clear_marks (GtkScale *scale);


void _gtk_scale_clear_layout (GtkScale *scale);
void _gtk_scale_get_value_size (GtkScale *scale,
                                                gint *width,
                                                gint *height);
gchar * _gtk_scale_format_value (GtkScale *scale,
                                                gdouble value);


# 36 "/usr/include/gtk-2.0/gtk/gtkhscale.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkhscale.h"
typedef struct _GtkHScale GtkHScale;
typedef struct _GtkHScaleClass GtkHScaleClass;

struct _GtkHScale
{
  GtkScale scale;
};

struct _GtkHScaleClass
{
  GtkScaleClass parent_class;
};


GType gtk_hscale_get_type (void) __attribute__((__const__));
GtkWidget* gtk_hscale_new (GtkAdjustment *adjustment);
GtkWidget* gtk_hscale_new_with_range (gdouble min,
                                      gdouble max,
                                      gdouble step);



# 102 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkhscrollbar.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkhscrollbar.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkscrollbar.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkscrollbar.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkrange.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkscrollbar.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkscrollbar.h"
typedef struct _GtkScrollbar GtkScrollbar;
typedef struct _GtkScrollbarClass GtkScrollbarClass;

struct _GtkScrollbar
{
  GtkRange range;
};

struct _GtkScrollbarClass
{
  GtkRangeClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_scrollbar_get_type (void) __attribute__((__const__));


# 36 "/usr/include/gtk-2.0/gtk/gtkhscrollbar.h" 2



# 49 "/usr/include/gtk-2.0/gtk/gtkhscrollbar.h"
typedef struct _GtkHScrollbar GtkHScrollbar;
typedef struct _GtkHScrollbarClass GtkHScrollbarClass;

struct _GtkHScrollbar
{
  GtkScrollbar scrollbar;
};

struct _GtkHScrollbarClass
{
  GtkScrollbarClass parent_class;
};


GType gtk_hscrollbar_get_type (void) __attribute__((__const__));
GtkWidget* gtk_hscrollbar_new (GtkAdjustment *adjustment);



# 103 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkhseparator.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkhseparator.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkseparator.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkseparator.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkseparator.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkseparator.h"
typedef struct _GtkSeparator GtkSeparator;
typedef struct _GtkSeparatorClass GtkSeparatorClass;

struct _GtkSeparator
{
  GtkWidget widget;
};

struct _GtkSeparatorClass
{
  GtkWidgetClass parent_class;
};


GType gtk_separator_get_type (void) __attribute__((__const__));


# 36 "/usr/include/gtk-2.0/gtk/gtkhseparator.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkhseparator.h"
typedef struct _GtkHSeparator GtkHSeparator;
typedef struct _GtkHSeparatorClass GtkHSeparatorClass;

struct _GtkHSeparator
{
  GtkSeparator separator;
};

struct _GtkHSeparatorClass
{
  GtkSeparatorClass parent_class;
};


GType gtk_hseparator_get_type (void) __attribute__((__const__));
GtkWidget* gtk_hseparator_new (void);



# 104 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkhsv.h" 1
# 39 "/usr/include/gtk-2.0/gtk/gtkhsv.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 40 "/usr/include/gtk-2.0/gtk/gtkhsv.h" 2


# 51 "/usr/include/gtk-2.0/gtk/gtkhsv.h"
typedef struct _GtkHSV GtkHSV;
typedef struct _GtkHSVClass GtkHSVClass;

struct _GtkHSV
{
  GtkWidget parent_instance;


  gpointer priv;
};

struct _GtkHSVClass
{
  GtkWidgetClass parent_class;


  void (* changed) (GtkHSV *hsv);


  void (* move) (GtkHSV *hsv,
                    GtkDirectionType type);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_hsv_get_type (void) __attribute__((__const__));
GtkWidget* gtk_hsv_new (void);
void gtk_hsv_set_color (GtkHSV *hsv,
     double h,
     double s,
     double v);
void gtk_hsv_get_color (GtkHSV *hsv,
     gdouble *h,
     gdouble *s,
     gdouble *v);
void gtk_hsv_set_metrics (GtkHSV *hsv,
     gint size,
     gint ring_width);
void gtk_hsv_get_metrics (GtkHSV *hsv,
     gint *size,
     gint *ring_width);
gboolean gtk_hsv_is_adjusting (GtkHSV *hsv);


void gtk_hsv_to_rgb (gdouble h,
     gdouble s,
     gdouble v,
     gdouble *r,
     gdouble *g,
     gdouble *b);
void gtk_rgb_to_hsv (gdouble r,
     gdouble g,
     gdouble b,
     gdouble *h,
     gdouble *s,
     gdouble *v);


# 105 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkiconfactory.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkiconfactory.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkrc.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkiconfactory.h" 2



typedef struct _GtkIconFactoryClass GtkIconFactoryClass;
# 50 "/usr/include/gtk-2.0/gtk/gtkiconfactory.h"
struct _GtkIconFactory
{
  GObject parent_instance;

  GHashTable *icons;
};

struct _GtkIconFactoryClass
{
  GObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};







GType gtk_icon_factory_get_type (void) __attribute__((__const__));
GtkIconFactory* gtk_icon_factory_new (void);
void gtk_icon_factory_add (GtkIconFactory *factory,
                                           const gchar *stock_id,
                                           GtkIconSet *icon_set);
GtkIconSet* gtk_icon_factory_lookup (GtkIconFactory *factory,
                                           const gchar *stock_id);



void gtk_icon_factory_add_default (GtkIconFactory *factory);
void gtk_icon_factory_remove_default (GtkIconFactory *factory);
GtkIconSet* gtk_icon_factory_lookup_default (const gchar *stock_id);
# 100 "/usr/include/gtk-2.0/gtk/gtkiconfactory.h"
gboolean gtk_icon_size_lookup (GtkIconSize size,
         gint *width,
         gint *height);

gboolean gtk_icon_size_lookup_for_settings (GtkSettings *settings,
         GtkIconSize size,
         gint *width,
         gint *height);

GtkIconSize gtk_icon_size_register (const gchar *name,
                                                    gint width,
                                                    gint height);
void gtk_icon_size_register_alias (const gchar *alias,
                                                    GtkIconSize target);
GtkIconSize gtk_icon_size_from_name (const gchar *name);
const gchar* gtk_icon_size_get_name (GtkIconSize size);



GType gtk_icon_set_get_type (void) __attribute__((__const__));
GtkIconSet* gtk_icon_set_new (void);
GtkIconSet* gtk_icon_set_new_from_pixbuf (GdkPixbuf *pixbuf);

GtkIconSet* gtk_icon_set_ref (GtkIconSet *icon_set);
void gtk_icon_set_unref (GtkIconSet *icon_set);
GtkIconSet* gtk_icon_set_copy (GtkIconSet *icon_set);




GdkPixbuf* gtk_icon_set_render_icon (GtkIconSet *icon_set,
                                          GtkStyle *style,
                                          GtkTextDirection direction,
                                          GtkStateType state,
                                          GtkIconSize size,
                                          GtkWidget *widget,
                                          const char *detail);


void gtk_icon_set_add_source (GtkIconSet *icon_set,
                                          const GtkIconSource *source);

void gtk_icon_set_get_sizes (GtkIconSet *icon_set,
                                          GtkIconSize **sizes,
                                          gint *n_sizes);

GType gtk_icon_source_get_type (void) __attribute__((__const__));
GtkIconSource* gtk_icon_source_new (void);
GtkIconSource* gtk_icon_source_copy (const GtkIconSource *source);
void gtk_icon_source_free (GtkIconSource *source);

void gtk_icon_source_set_filename (GtkIconSource *source,
                                                         const gchar *filename);
void gtk_icon_source_set_icon_name (GtkIconSource *source,
                                                         const gchar *icon_name);
void gtk_icon_source_set_pixbuf (GtkIconSource *source,
                                                         GdkPixbuf *pixbuf);

const gchar* gtk_icon_source_get_filename (const GtkIconSource *source);
const gchar* gtk_icon_source_get_icon_name (const GtkIconSource *source);
GdkPixbuf* gtk_icon_source_get_pixbuf (const GtkIconSource *source);

void gtk_icon_source_set_direction_wildcarded (GtkIconSource *source,
                                                           gboolean setting);
void gtk_icon_source_set_state_wildcarded (GtkIconSource *source,
                                                           gboolean setting);
void gtk_icon_source_set_size_wildcarded (GtkIconSource *source,
                                                           gboolean setting);
gboolean gtk_icon_source_get_size_wildcarded (const GtkIconSource *source);
gboolean gtk_icon_source_get_state_wildcarded (const GtkIconSource *source);
gboolean gtk_icon_source_get_direction_wildcarded (const GtkIconSource *source);
void gtk_icon_source_set_direction (GtkIconSource *source,
                                                           GtkTextDirection direction);
void gtk_icon_source_set_state (GtkIconSource *source,
                                                           GtkStateType state);
void gtk_icon_source_set_size (GtkIconSource *source,
                                                           GtkIconSize size);
GtkTextDirection gtk_icon_source_get_direction (const GtkIconSource *source);
GtkStateType gtk_icon_source_get_state (const GtkIconSource *source);
GtkIconSize gtk_icon_source_get_size (const GtkIconSource *source);



void _gtk_icon_set_invalidate_caches (void);
GList* _gtk_icon_factory_list_ids (void);
void _gtk_icon_factory_ensure_default_icons (void);


# 106 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkicontheme.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkicontheme.h"

# 41 "/usr/include/gtk-2.0/gtk/gtkicontheme.h"
typedef struct _GtkIconInfo GtkIconInfo;
typedef struct _GtkIconTheme GtkIconTheme;
typedef struct _GtkIconThemeClass GtkIconThemeClass;
typedef struct _GtkIconThemePrivate GtkIconThemePrivate;

struct _GtkIconTheme
{

  GObject parent_instance;

  GtkIconThemePrivate *priv;
};

struct _GtkIconThemeClass
{
  GObjectClass parent_class;

  void (* changed) (GtkIconTheme *icon_theme);
};
# 80 "/usr/include/gtk-2.0/gtk/gtkicontheme.h"
typedef enum
{
  GTK_ICON_LOOKUP_NO_SVG = 1 << 0,
  GTK_ICON_LOOKUP_FORCE_SVG = 1 << 1,
  GTK_ICON_LOOKUP_USE_BUILTIN = 1 << 2,
  GTK_ICON_LOOKUP_GENERIC_FALLBACK = 1 << 3,
  GTK_ICON_LOOKUP_FORCE_SIZE = 1 << 4
} GtkIconLookupFlags;
# 98 "/usr/include/gtk-2.0/gtk/gtkicontheme.h"
typedef enum {
  GTK_ICON_THEME_NOT_FOUND,
  GTK_ICON_THEME_FAILED
} GtkIconThemeError;

GQuark gtk_icon_theme_error_quark (void);
# 114 "/usr/include/gtk-2.0/gtk/gtkicontheme.h"
GType gtk_icon_theme_get_type (void) __attribute__((__const__));

GtkIconTheme *gtk_icon_theme_new (void);
GtkIconTheme *gtk_icon_theme_get_default (void);
GtkIconTheme *gtk_icon_theme_get_for_screen (GdkScreen *screen);
void gtk_icon_theme_set_screen (GtkIconTheme *icon_theme,
          GdkScreen *screen);

void gtk_icon_theme_set_search_path (GtkIconTheme *icon_theme,
          const gchar *path[],
          gint n_elements);
void gtk_icon_theme_get_search_path (GtkIconTheme *icon_theme,
          gchar **path[],
          gint *n_elements);
void gtk_icon_theme_append_search_path (GtkIconTheme *icon_theme,
          const gchar *path);
void gtk_icon_theme_prepend_search_path (GtkIconTheme *icon_theme,
          const gchar *path);

void gtk_icon_theme_set_custom_theme (GtkIconTheme *icon_theme,
          const gchar *theme_name);

gboolean gtk_icon_theme_has_icon (GtkIconTheme *icon_theme,
          const gchar *icon_name);
gint *gtk_icon_theme_get_icon_sizes (GtkIconTheme *icon_theme,
          const gchar *icon_name);
GtkIconInfo * gtk_icon_theme_lookup_icon (GtkIconTheme *icon_theme,
          const gchar *icon_name,
          gint size,
          GtkIconLookupFlags flags);
GtkIconInfo * gtk_icon_theme_choose_icon (GtkIconTheme *icon_theme,
          const gchar *icon_names[],
          gint size,
          GtkIconLookupFlags flags);
GdkPixbuf * gtk_icon_theme_load_icon (GtkIconTheme *icon_theme,
          const gchar *icon_name,
          gint size,
          GtkIconLookupFlags flags,
          GError **error);

GtkIconInfo * gtk_icon_theme_lookup_by_gicon (GtkIconTheme *icon_theme,
                                                    GIcon *icon,
                                                    gint size,
                                                    GtkIconLookupFlags flags);

GList * gtk_icon_theme_list_icons (GtkIconTheme *icon_theme,
          const gchar *context);
GList * gtk_icon_theme_list_contexts (GtkIconTheme *icon_theme);
char * gtk_icon_theme_get_example_icon_name (GtkIconTheme *icon_theme);

gboolean gtk_icon_theme_rescan_if_needed (GtkIconTheme *icon_theme);

void gtk_icon_theme_add_builtin_icon (const gchar *icon_name,
                 gint size,
                 GdkPixbuf *pixbuf);

GType gtk_icon_info_get_type (void) __attribute__((__const__));
GtkIconInfo * gtk_icon_info_copy (GtkIconInfo *icon_info);
void gtk_icon_info_free (GtkIconInfo *icon_info);

GtkIconInfo * gtk_icon_info_new_for_pixbuf (GtkIconTheme *icon_theme,
                                                        GdkPixbuf *pixbuf);

gint gtk_icon_info_get_base_size (GtkIconInfo *icon_info);
const gchar *gtk_icon_info_get_filename (GtkIconInfo *icon_info);
GdkPixbuf * gtk_icon_info_get_builtin_pixbuf (GtkIconInfo *icon_info);
GdkPixbuf * gtk_icon_info_load_icon (GtkIconInfo *icon_info,
       GError **error);
void gtk_icon_info_set_raw_coordinates (GtkIconInfo *icon_info,
        gboolean raw_coordinates);

gboolean gtk_icon_info_get_embedded_rect (GtkIconInfo *icon_info,
             GdkRectangle *rectangle);
gboolean gtk_icon_info_get_attach_points (GtkIconInfo *icon_info,
             GdkPoint **points,
             gint *n_points);
const gchar *gtk_icon_info_get_display_name (GtkIconInfo *icon_info);


void _gtk_icon_theme_check_reload (GdkDisplay *display);
void _gtk_icon_theme_ensure_builtin_cache (void);


# 107 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkiconview.h" 1
# 27 "/usr/include/gtk-2.0/gtk/gtkiconview.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcontainer.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkiconview.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreemodel.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkiconview.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcellrenderer.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkiconview.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkselection.h" 1
# 31 "/usr/include/gtk-2.0/gtk/gtkiconview.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktooltip.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtktooltip.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkwindow.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtktooltip.h" 2







GType gtk_tooltip_get_type (void);

void gtk_tooltip_set_markup (GtkTooltip *tooltip,
                                          const gchar *markup);
void gtk_tooltip_set_text (GtkTooltip *tooltip,
                                          const gchar *text);
void gtk_tooltip_set_icon (GtkTooltip *tooltip,
                                          GdkPixbuf *pixbuf);
void gtk_tooltip_set_icon_from_stock (GtkTooltip *tooltip,
                                          const gchar *stock_id,
                                          GtkIconSize size);
void gtk_tooltip_set_icon_from_icon_name (GtkTooltip *tooltip,
              const gchar *icon_name,
              GtkIconSize size);
void gtk_tooltip_set_custom (GtkTooltip *tooltip,
                                          GtkWidget *custom_widget);

void gtk_tooltip_set_tip_area (GtkTooltip *tooltip,
                                          const GdkRectangle *rect);

void gtk_tooltip_trigger_tooltip_query (GdkDisplay *display);


void _gtk_tooltip_focus_in (GtkWidget *widget);
void _gtk_tooltip_focus_out (GtkWidget *widget);
void _gtk_tooltip_toggle_keyboard_mode (GtkWidget *widget);
void _gtk_tooltip_handle_event (GdkEvent *event);
void _gtk_tooltip_hide (GtkWidget *widget);


# 32 "/usr/include/gtk-2.0/gtk/gtkiconview.h" 2


# 42 "/usr/include/gtk-2.0/gtk/gtkiconview.h"
typedef struct _GtkIconView GtkIconView;
typedef struct _GtkIconViewClass GtkIconViewClass;
typedef struct _GtkIconViewPrivate GtkIconViewPrivate;

typedef void (* GtkIconViewForeachFunc) (GtkIconView *icon_view,
          GtkTreePath *path,
          gpointer data);

typedef enum
{
  GTK_ICON_VIEW_NO_DROP,
  GTK_ICON_VIEW_DROP_INTO,
  GTK_ICON_VIEW_DROP_LEFT,
  GTK_ICON_VIEW_DROP_RIGHT,
  GTK_ICON_VIEW_DROP_ABOVE,
  GTK_ICON_VIEW_DROP_BELOW
} GtkIconViewDropPosition;

struct _GtkIconView
{
  GtkContainer parent;

  GtkIconViewPrivate *priv;
};

struct _GtkIconViewClass
{
  GtkContainerClass parent_class;

  void (* set_scroll_adjustments) (GtkIconView *icon_view,
          GtkAdjustment *hadjustment,
          GtkAdjustment *vadjustment);

  void (* item_activated) (GtkIconView *icon_view,
          GtkTreePath *path);
  void (* selection_changed) (GtkIconView *icon_view);


  void (* select_all) (GtkIconView *icon_view);
  void (* unselect_all) (GtkIconView *icon_view);
  void (* select_cursor_item) (GtkIconView *icon_view);
  void (* toggle_cursor_item) (GtkIconView *icon_view);
  gboolean (* move_cursor) (GtkIconView *icon_view,
          GtkMovementStep step,
          gint count);
  gboolean (* activate_cursor_item) (GtkIconView *icon_view);
};

GType gtk_icon_view_get_type (void) __attribute__((__const__));
GtkWidget * gtk_icon_view_new (void);
GtkWidget * gtk_icon_view_new_with_model (GtkTreeModel *model);

void gtk_icon_view_set_model (GtkIconView *icon_view,
              GtkTreeModel *model);
GtkTreeModel * gtk_icon_view_get_model (GtkIconView *icon_view);
void gtk_icon_view_set_text_column (GtkIconView *icon_view,
               gint column);
gint gtk_icon_view_get_text_column (GtkIconView *icon_view);
void gtk_icon_view_set_markup_column (GtkIconView *icon_view,
             gint column);
gint gtk_icon_view_get_markup_column (GtkIconView *icon_view);
void gtk_icon_view_set_pixbuf_column (GtkIconView *icon_view,
             gint column);
gint gtk_icon_view_get_pixbuf_column (GtkIconView *icon_view);

void gtk_icon_view_set_orientation (GtkIconView *icon_view,
                       GtkOrientation orientation);
GtkOrientation gtk_icon_view_get_orientation (GtkIconView *icon_view);
void gtk_icon_view_set_columns (GtkIconView *icon_view,
              gint columns);
gint gtk_icon_view_get_columns (GtkIconView *icon_view);
void gtk_icon_view_set_item_width (GtkIconView *icon_view,
             gint item_width);
gint gtk_icon_view_get_item_width (GtkIconView *icon_view);
void gtk_icon_view_set_spacing (GtkIconView *icon_view,
              gint spacing);
gint gtk_icon_view_get_spacing (GtkIconView *icon_view);
void gtk_icon_view_set_row_spacing (GtkIconView *icon_view,
             gint row_spacing);
gint gtk_icon_view_get_row_spacing (GtkIconView *icon_view);
void gtk_icon_view_set_column_spacing (GtkIconView *icon_view,
             gint column_spacing);
gint gtk_icon_view_get_column_spacing (GtkIconView *icon_view);
void gtk_icon_view_set_margin (GtkIconView *icon_view,
             gint margin);
gint gtk_icon_view_get_margin (GtkIconView *icon_view);


GtkTreePath * gtk_icon_view_get_path_at_pos (GtkIconView *icon_view,
      gint x,
      gint y);
gboolean gtk_icon_view_get_item_at_pos (GtkIconView *icon_view,
      gint x,
      gint y,
      GtkTreePath **path,
      GtkCellRenderer **cell);
gboolean gtk_icon_view_get_visible_range (GtkIconView *icon_view,
      GtkTreePath **start_path,
      GtkTreePath **end_path);

void gtk_icon_view_selected_foreach (GtkIconView *icon_view,
       GtkIconViewForeachFunc func,
       gpointer data);
void gtk_icon_view_set_selection_mode (GtkIconView *icon_view,
       GtkSelectionMode mode);
GtkSelectionMode gtk_icon_view_get_selection_mode (GtkIconView *icon_view);
void gtk_icon_view_select_path (GtkIconView *icon_view,
         GtkTreePath *path);
void gtk_icon_view_unselect_path (GtkIconView *icon_view,
         GtkTreePath *path);
gboolean gtk_icon_view_path_is_selected (GtkIconView *icon_view,
         GtkTreePath *path);
GList *gtk_icon_view_get_selected_items (GtkIconView *icon_view);
void gtk_icon_view_select_all (GtkIconView *icon_view);
void gtk_icon_view_unselect_all (GtkIconView *icon_view);
void gtk_icon_view_item_activated (GtkIconView *icon_view,
         GtkTreePath *path);
void gtk_icon_view_set_cursor (GtkIconView *icon_view,
         GtkTreePath *path,
         GtkCellRenderer *cell,
         gboolean start_editing);
gboolean gtk_icon_view_get_cursor (GtkIconView *icon_view,
         GtkTreePath **path,
         GtkCellRenderer **cell);
void gtk_icon_view_scroll_to_path (GtkIconView *icon_view,
                                                   GtkTreePath *path,
         gboolean use_align,
         gfloat row_align,
                                                   gfloat col_align);


void gtk_icon_view_enable_model_drag_source (GtkIconView *icon_view,
              GdkModifierType start_button_mask,
              const GtkTargetEntry *targets,
              gint n_targets,
              GdkDragAction actions);
void gtk_icon_view_enable_model_drag_dest (GtkIconView *icon_view,
              const GtkTargetEntry *targets,
              gint n_targets,
              GdkDragAction actions);
void gtk_icon_view_unset_model_drag_source (GtkIconView *icon_view);
void gtk_icon_view_unset_model_drag_dest (GtkIconView *icon_view);
void gtk_icon_view_set_reorderable (GtkIconView *icon_view,
              gboolean reorderable);
gboolean gtk_icon_view_get_reorderable (GtkIconView *icon_view);



void gtk_icon_view_set_drag_dest_item (GtkIconView *icon_view,
              GtkTreePath *path,
              GtkIconViewDropPosition pos);
void gtk_icon_view_get_drag_dest_item (GtkIconView *icon_view,
              GtkTreePath **path,
              GtkIconViewDropPosition *pos);
gboolean gtk_icon_view_get_dest_item_at_pos (GtkIconView *icon_view,
              gint drag_x,
              gint drag_y,
              GtkTreePath **path,
              GtkIconViewDropPosition *pos);
GdkPixmap *gtk_icon_view_create_drag_icon (GtkIconView *icon_view,
              GtkTreePath *path);

void gtk_icon_view_convert_widget_to_bin_window_coords (GtkIconView *icon_view,
                                                               gint wx,
                                                               gint wy,
                                                               gint *bx,
                                                               gint *by);


void gtk_icon_view_set_tooltip_item (GtkIconView *icon_view,
                                                               GtkTooltip *tooltip,
                                                               GtkTreePath *path);
void gtk_icon_view_set_tooltip_cell (GtkIconView *icon_view,
                                                               GtkTooltip *tooltip,
                                                               GtkTreePath *path,
                                                               GtkCellRenderer *cell);
gboolean gtk_icon_view_get_tooltip_context (GtkIconView *icon_view,
                                                               gint *x,
                                                               gint *y,
                                                               gboolean keyboard_tip,
                                                               GtkTreeModel **model,
                                                               GtkTreePath **path,
                                                               GtkTreeIter *iter);
void gtk_icon_view_set_tooltip_column (GtkIconView *icon_view,
                                                               gint column);
gint gtk_icon_view_get_tooltip_column (GtkIconView *icon_view);



# 108 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkimage.h" 1
# 109 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkimagemenuitem.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkimagemenuitem.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkmenuitem.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkimagemenuitem.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkimagemenuitem.h"
typedef struct _GtkImageMenuItem GtkImageMenuItem;
typedef struct _GtkImageMenuItemClass GtkImageMenuItemClass;

struct _GtkImageMenuItem
{
  GtkMenuItem menu_item;


  GtkWidget *image;

};

struct _GtkImageMenuItemClass
{
  GtkMenuItemClass parent_class;
};


GType gtk_image_menu_item_get_type (void) __attribute__((__const__));
GtkWidget* gtk_image_menu_item_new (void);
GtkWidget* gtk_image_menu_item_new_with_label (const gchar *label);
GtkWidget* gtk_image_menu_item_new_with_mnemonic (const gchar *label);
GtkWidget* gtk_image_menu_item_new_from_stock (const gchar *stock_id,
                                                  GtkAccelGroup *accel_group);
void gtk_image_menu_item_set_always_show_image (GtkImageMenuItem *image_menu_item,
                                                      gboolean always_show);
gboolean gtk_image_menu_item_get_always_show_image (GtkImageMenuItem *image_menu_item);
void gtk_image_menu_item_set_image (GtkImageMenuItem *image_menu_item,
                                                  GtkWidget *image);
GtkWidget* gtk_image_menu_item_get_image (GtkImageMenuItem *image_menu_item);
void gtk_image_menu_item_set_use_stock (GtkImageMenuItem *image_menu_item,
        gboolean use_stock);
gboolean gtk_image_menu_item_get_use_stock (GtkImageMenuItem *image_menu_item);
void gtk_image_menu_item_set_accel_group (GtkImageMenuItem *image_menu_item,
        GtkAccelGroup *accel_group);


# 110 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkimcontext.h" 1
# 111 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkimcontextsimple.h" 1
# 27 "/usr/include/gtk-2.0/gtk/gtkimcontextsimple.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkimcontext.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkimcontextsimple.h" 2



# 41 "/usr/include/gtk-2.0/gtk/gtkimcontextsimple.h"
typedef struct _GtkIMContextSimple GtkIMContextSimple;
typedef struct _GtkIMContextSimpleClass GtkIMContextSimpleClass;



struct _GtkIMContextSimple
{
  GtkIMContext object;

  GSList *tables;

  guint compose_buffer[7 + 1];
  gunichar tentative_match;
  gint tentative_match_len;

  guint in_hex_sequence : 1;
  guint modifiers_dropped : 1;
};

struct _GtkIMContextSimpleClass
{
  GtkIMContextClass parent_class;
};

GType gtk_im_context_simple_get_type (void) __attribute__((__const__));
GtkIMContext *gtk_im_context_simple_new (void);

void gtk_im_context_simple_add_table (GtkIMContextSimple *context_simple,
            guint16 *data,
            gint max_seq_len,
            gint n_seqs);



# 112 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkimmulticontext.h" 1
# 27 "/usr/include/gtk-2.0/gtk/gtkimmulticontext.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkimcontext.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkimmulticontext.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkmenushell.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkimmulticontext.h" 2


# 40 "/usr/include/gtk-2.0/gtk/gtkimmulticontext.h"
typedef struct _GtkIMMulticontext GtkIMMulticontext;
typedef struct _GtkIMMulticontextClass GtkIMMulticontextClass;
typedef struct _GtkIMMulticontextPrivate GtkIMMulticontextPrivate;

struct _GtkIMMulticontext
{
  GtkIMContext object;

  GtkIMContext *slave;

  GtkIMMulticontextPrivate *priv;

  gchar *context_id;
};

struct _GtkIMMulticontextClass
{
  GtkIMContextClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_im_multicontext_get_type (void) __attribute__((__const__));
GtkIMContext *gtk_im_multicontext_new (void);

void gtk_im_multicontext_append_menuitems (GtkIMMulticontext *context,
          GtkMenuShell *menushell);
const char * gtk_im_multicontext_get_context_id (GtkIMMulticontext *context);

void gtk_im_multicontext_set_context_id (GtkIMMulticontext *context,
                                                    const char *context_id);


# 113 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkinputdialog.h" 1
# 45 "/usr/include/gtk-2.0/gtk/gtkinputdialog.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkdialog.h" 1
# 46 "/usr/include/gtk-2.0/gtk/gtkinputdialog.h" 2



# 58 "/usr/include/gtk-2.0/gtk/gtkinputdialog.h"
typedef struct _GtkInputDialog GtkInputDialog;
typedef struct _GtkInputDialogClass GtkInputDialogClass;

struct _GtkInputDialog
{
  GtkDialog dialog;

  GtkWidget *axis_list;
  GtkWidget *axis_listbox;
  GtkWidget *mode_optionmenu;

  GtkWidget *close_button;
  GtkWidget *save_button;

  GtkWidget *axis_items[GDK_AXIS_LAST];
  GdkDevice *current_device;

  GtkWidget *keys_list;
  GtkWidget *keys_listbox;
};

struct _GtkInputDialogClass
{
  GtkDialogClass parent_class;

  void (* enable_device) (GtkInputDialog *inputd,
     GdkDevice *device);
  void (* disable_device) (GtkInputDialog *inputd,
     GdkDevice *device);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_input_dialog_get_type (void) __attribute__((__const__));
GtkWidget* gtk_input_dialog_new (void);



# 114 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkinvisible.h" 1
# 34 "/usr/include/gtk-2.0/gtk/gtkinvisible.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkinvisible.h" 2


# 46 "/usr/include/gtk-2.0/gtk/gtkinvisible.h"
typedef struct _GtkInvisible GtkInvisible;
typedef struct _GtkInvisibleClass GtkInvisibleClass;

struct _GtkInvisible
{
  GtkWidget widget;

  gboolean has_user_ref_count;
  GdkScreen *screen;
};

struct _GtkInvisibleClass
{
  GtkWidgetClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_invisible_get_type (void) __attribute__((__const__));

GtkWidget* gtk_invisible_new (void);
GtkWidget* gtk_invisible_new_for_screen (GdkScreen *screen);
void gtk_invisible_set_screen (GtkInvisible *invisible,
      GdkScreen *screen);
GdkScreen* gtk_invisible_get_screen (GtkInvisible *invisible);


# 115 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkitem.h" 1
# 116 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtklabel.h" 1
# 117 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtklayout.h" 1
# 39 "/usr/include/gtk-2.0/gtk/gtklayout.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcontainer.h" 1
# 40 "/usr/include/gtk-2.0/gtk/gtklayout.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkadjustment.h" 1
# 41 "/usr/include/gtk-2.0/gtk/gtklayout.h" 2



# 53 "/usr/include/gtk-2.0/gtk/gtklayout.h"
typedef struct _GtkLayout GtkLayout;
typedef struct _GtkLayoutClass GtkLayoutClass;

struct _GtkLayout
{
  GtkContainer container;

  GList *children;

  guint width;
  guint height;

  GtkAdjustment *hadjustment;
  GtkAdjustment *vadjustment;


  GdkWindow *bin_window;


  GdkVisibilityState visibility;
  gint scroll_x;
  gint scroll_y;

  guint freeze_count;
};

struct _GtkLayoutClass
{
  GtkContainerClass parent_class;

  void (*set_scroll_adjustments) (GtkLayout *layout,
         GtkAdjustment *hadjustment,
         GtkAdjustment *vadjustment);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_layout_get_type (void) __attribute__((__const__));
GtkWidget* gtk_layout_new (GtkAdjustment *hadjustment,
               GtkAdjustment *vadjustment);
GdkWindow* gtk_layout_get_bin_window (GtkLayout *layout);
void gtk_layout_put (GtkLayout *layout,
                             GtkWidget *child_widget,
                             gint x,
                             gint y);

void gtk_layout_move (GtkLayout *layout,
                             GtkWidget *child_widget,
                             gint x,
                             gint y);

void gtk_layout_set_size (GtkLayout *layout,
                      guint width,
                      guint height);
void gtk_layout_get_size (GtkLayout *layout,
        guint *width,
        guint *height);

GtkAdjustment* gtk_layout_get_hadjustment (GtkLayout *layout);
GtkAdjustment* gtk_layout_get_vadjustment (GtkLayout *layout);
void gtk_layout_set_hadjustment (GtkLayout *layout,
        GtkAdjustment *adjustment);
void gtk_layout_set_vadjustment (GtkLayout *layout,
        GtkAdjustment *adjustment);
# 132 "/usr/include/gtk-2.0/gtk/gtklayout.h"
void gtk_layout_freeze (GtkLayout *layout);
void gtk_layout_thaw (GtkLayout *layout);



# 118 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtklinkbutton.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtklinkbutton.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkbutton.h" 1
# 33 "/usr/include/gtk-2.0/gtk/gtklinkbutton.h" 2


# 43 "/usr/include/gtk-2.0/gtk/gtklinkbutton.h"
typedef struct _GtkLinkButton GtkLinkButton;
typedef struct _GtkLinkButtonClass GtkLinkButtonClass;
typedef struct _GtkLinkButtonPrivate GtkLinkButtonPrivate;

typedef void (*GtkLinkButtonUriFunc) (GtkLinkButton *button,
          const gchar *link_,
          gpointer user_data);

struct _GtkLinkButton
{
  GtkButton parent_instance;

  GtkLinkButtonPrivate *priv;
};

struct _GtkLinkButtonClass
{
  GtkButtonClass parent_class;

  void (*_gtk_padding1) (void);
  void (*_gtk_padding2) (void);
  void (*_gtk_padding3) (void);
  void (*_gtk_padding4) (void);
};

GType gtk_link_button_get_type (void) __attribute__((__const__));

GtkWidget * gtk_link_button_new (const gchar *uri);
GtkWidget * gtk_link_button_new_with_label (const gchar *uri,
               const gchar *label);

const gchar *gtk_link_button_get_uri (GtkLinkButton *link_button);
void gtk_link_button_set_uri (GtkLinkButton *link_button,
               const gchar *uri);

GtkLinkButtonUriFunc gtk_link_button_set_uri_hook (GtkLinkButtonUriFunc func,
        gpointer data,
        GDestroyNotify destroy);

gboolean gtk_link_button_get_visited (GtkLinkButton *link_button);
void gtk_link_button_set_visited (GtkLinkButton *link_button,
                                                         gboolean visited);



# 119 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkliststore.h" 1
# 120 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkmain.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkmain.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 37 "/usr/include/gtk-2.0/gtk/gtkmain.h" 2






# 62 "/usr/include/gtk-2.0/gtk/gtkmain.h"
typedef gint (*GtkKeySnoopFunc) (GtkWidget *grab_widget,
          GdkEventKey *event,
          gpointer func_data);
# 78 "/usr/include/gtk-2.0/gtk/gtkmain.h"
extern const guint gtk_major_version;
extern const guint gtk_minor_version;
extern const guint gtk_micro_version;
extern const guint gtk_binary_age;
extern const guint gtk_interface_age;
const gchar* gtk_check_version (guint required_major,
           guint required_minor,
           guint required_micro);





gboolean gtk_parse_args (int *argc,
       char ***argv);

void gtk_init (int *argc,
                                   char ***argv);

gboolean gtk_init_check (int *argc,
                                   char ***argv);

gboolean gtk_init_with_args (int *argc,
       char ***argv,
       char *parameter_string,
       GOptionEntry *entries,
       char *translation_domain,
       GError **error);

GOptionGroup *gtk_get_option_group (gboolean open_default_display);
# 131 "/usr/include/gtk-2.0/gtk/gtkmain.h"
void gtk_exit (gint error_code);


void gtk_disable_setlocale (void);
gchar * gtk_set_locale (void);
PangoLanguage *gtk_get_default_language (void);
gboolean gtk_events_pending (void);





void gtk_main_do_event (GdkEvent *event);

void gtk_main (void);
guint gtk_main_level (void);
void gtk_main_quit (void);
gboolean gtk_main_iteration (void);

gboolean gtk_main_iteration_do (gboolean blocking);

gboolean gtk_true (void) __attribute__((__const__));
gboolean gtk_false (void) __attribute__((__const__));

void gtk_grab_add (GtkWidget *widget);
GtkWidget* gtk_grab_get_current (void);
void gtk_grab_remove (GtkWidget *widget);

void gtk_init_add (GtkFunction function,
        gpointer data);
void gtk_quit_add_destroy (guint main_level,
        GtkObject *object);
guint gtk_quit_add (guint main_level,
        GtkFunction function,
        gpointer data);
guint gtk_quit_add_full (guint main_level,
        GtkFunction function,
        GtkCallbackMarshal marshal,
        gpointer data,
        GDestroyNotify destroy);
void gtk_quit_remove (guint quit_handler_id);
void gtk_quit_remove_by_data (gpointer data);

guint gtk_timeout_add (guint32 interval,
        GtkFunction function,
        gpointer data);
guint gtk_timeout_add_full (guint32 interval,
        GtkFunction function,
        GtkCallbackMarshal marshal,
        gpointer data,
        GDestroyNotify destroy);
void gtk_timeout_remove (guint timeout_handler_id);

guint gtk_idle_add (GtkFunction function,
        gpointer data);
guint gtk_idle_add_priority (gint priority,
        GtkFunction function,
        gpointer data);
guint gtk_idle_add_full (gint priority,
        GtkFunction function,
        GtkCallbackMarshal marshal,
        gpointer data,
        GDestroyNotify destroy);
void gtk_idle_remove (guint idle_handler_id);
void gtk_idle_remove_by_data (gpointer data);
guint gtk_input_add_full (gint source,
        GdkInputCondition condition,
        GdkInputFunction function,
        GtkCallbackMarshal marshal,
        gpointer data,
        GDestroyNotify destroy);
void gtk_input_remove (guint input_handler_id);


guint gtk_key_snooper_install (GtkKeySnoopFunc snooper,
        gpointer func_data);
void gtk_key_snooper_remove (guint snooper_handler_id);

GdkEvent* gtk_get_current_event (void);
guint32 gtk_get_current_event_time (void);
gboolean gtk_get_current_event_state (GdkModifierType *state);

GtkWidget* gtk_get_event_widget (GdkEvent *event);




void gtk_propagate_event (GtkWidget *widget,
        GdkEvent *event);

gboolean _gtk_boolean_handled_accumulator (GSignalInvocationHint *ihint,
                                   GValue *return_accu,
                                   const GValue *handler_return,
                                   gpointer dummy);

gchar *_gtk_get_lc_ctype (void);


# 121 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkmenu.h" 1
# 122 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkmenubar.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkmenubar.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkmenushell.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkmenubar.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkmenubar.h"
typedef struct _GtkMenuBar GtkMenuBar;
typedef struct _GtkMenuBarClass GtkMenuBarClass;

struct _GtkMenuBar
{
  GtkMenuShell menu_shell;
};

struct _GtkMenuBarClass
{
  GtkMenuShellClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_menu_bar_get_type (void) __attribute__((__const__));
GtkWidget* gtk_menu_bar_new (void);

GtkPackDirection gtk_menu_bar_get_pack_direction (GtkMenuBar *menubar);
void gtk_menu_bar_set_pack_direction (GtkMenuBar *menubar,
        GtkPackDirection pack_dir);
GtkPackDirection gtk_menu_bar_get_child_pack_direction (GtkMenuBar *menubar);
void gtk_menu_bar_set_child_pack_direction (GtkMenuBar *menubar,
       GtkPackDirection child_pack_dir);
# 85 "/usr/include/gtk-2.0/gtk/gtkmenubar.h"
void _gtk_menu_bar_cycle_focus (GtkMenuBar *menubar,
    GtkDirectionType dir);



# 123 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkmenuitem.h" 1
# 124 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkmenushell.h" 1
# 125 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkmenutoolbutton.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkmenutoolbutton.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkmenu.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkmenutoolbutton.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktoolbutton.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtktoolbutton.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktoolitem.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtktoolitem.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkbin.h" 1
# 31 "/usr/include/gtk-2.0/gtk/gtktoolitem.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktooltips.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtktooltips.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 33 "/usr/include/gtk-2.0/gtk/gtktooltips.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkwindow.h" 1
# 34 "/usr/include/gtk-2.0/gtk/gtktooltips.h" 2



# 46 "/usr/include/gtk-2.0/gtk/gtktooltips.h"
typedef struct _GtkTooltips GtkTooltips;
typedef struct _GtkTooltipsClass GtkTooltipsClass;
typedef struct _GtkTooltipsData GtkTooltipsData;

struct _GtkTooltipsData
{
  GtkTooltips *tooltips;
  GtkWidget *widget;
  gchar *tip_text;
  gchar *tip_private;
};

struct _GtkTooltips
{
  GtkObject parent_instance;


  GtkWidget *tip_window;
  GtkWidget *tip_label;
  GtkTooltipsData *active_tips_data;
  GList *tips_data_list;

  guint delay : 30;
  guint enabled : 1;
  guint have_grab : 1;
  guint use_sticky_delay : 1;
  gint timer_tag;
  GTimeVal last_popdown;
};

struct _GtkTooltipsClass
{
  GtkObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_tooltips_get_type (void) __attribute__((__const__));
GtkTooltips* gtk_tooltips_new (void);

void gtk_tooltips_enable (GtkTooltips *tooltips);
void gtk_tooltips_disable (GtkTooltips *tooltips);
void gtk_tooltips_set_delay (GtkTooltips *tooltips,
         guint delay);
void gtk_tooltips_set_tip (GtkTooltips *tooltips,
         GtkWidget *widget,
         const gchar *tip_text,
         const gchar *tip_private);
GtkTooltipsData* gtk_tooltips_data_get (GtkWidget *widget);
void gtk_tooltips_force_window (GtkTooltips *tooltips);

gboolean gtk_tooltips_get_info_from_tip_window (GtkWindow *tip_window,
                                                        GtkTooltips **tooltips,
                                                        GtkWidget **current_widget);


# 32 "/usr/include/gtk-2.0/gtk/gtktoolitem.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkmenuitem.h" 1
# 33 "/usr/include/gtk-2.0/gtk/gtktoolitem.h" 2


# 43 "/usr/include/gtk-2.0/gtk/gtktoolitem.h"
typedef struct _GtkToolItem GtkToolItem;
typedef struct _GtkToolItemClass GtkToolItemClass;
typedef struct _GtkToolItemPrivate GtkToolItemPrivate;

struct _GtkToolItem
{
  GtkBin parent;


  GtkToolItemPrivate *priv;
};

struct _GtkToolItemClass
{
  GtkBinClass parent_class;


  gboolean (* create_menu_proxy) (GtkToolItem *tool_item);
  void (* toolbar_reconfigured) (GtkToolItem *tool_item);

  gboolean (* set_tooltip) (GtkToolItem *tool_item,
           GtkTooltips *tooltips,
           const gchar *tip_text,
           const gchar *tip_private);





  void (* _gtk_reserved1) (void);
  void (* _gtk_reserved2) (void);
  void (* _gtk_reserved3) (void);
  void (* _gtk_reserved4) (void);
};

GType gtk_tool_item_get_type (void) __attribute__((__const__));
GtkToolItem *gtk_tool_item_new (void);

void gtk_tool_item_set_homogeneous (GtkToolItem *tool_item,
       gboolean homogeneous);
gboolean gtk_tool_item_get_homogeneous (GtkToolItem *tool_item);

void gtk_tool_item_set_expand (GtkToolItem *tool_item,
       gboolean expand);
gboolean gtk_tool_item_get_expand (GtkToolItem *tool_item);


void gtk_tool_item_set_tooltip (GtkToolItem *tool_item,
       GtkTooltips *tooltips,
       const gchar *tip_text,
       const gchar *tip_private);

void gtk_tool_item_set_tooltip_text (GtkToolItem *tool_item,
       const gchar *text);
void gtk_tool_item_set_tooltip_markup (GtkToolItem *tool_item,
       const gchar *markup);

void gtk_tool_item_set_use_drag_window (GtkToolItem *tool_item,
       gboolean use_drag_window);
gboolean gtk_tool_item_get_use_drag_window (GtkToolItem *tool_item);

void gtk_tool_item_set_visible_horizontal (GtkToolItem *tool_item,
       gboolean visible_horizontal);
gboolean gtk_tool_item_get_visible_horizontal (GtkToolItem *tool_item);

void gtk_tool_item_set_visible_vertical (GtkToolItem *tool_item,
       gboolean visible_vertical);
gboolean gtk_tool_item_get_visible_vertical (GtkToolItem *tool_item);

gboolean gtk_tool_item_get_is_important (GtkToolItem *tool_item);
void gtk_tool_item_set_is_important (GtkToolItem *tool_item,
       gboolean is_important);

GtkIconSize gtk_tool_item_get_icon_size (GtkToolItem *tool_item);
GtkOrientation gtk_tool_item_get_orientation (GtkToolItem *tool_item);
GtkToolbarStyle gtk_tool_item_get_toolbar_style (GtkToolItem *tool_item);
GtkReliefStyle gtk_tool_item_get_relief_style (GtkToolItem *tool_item);

GtkWidget * gtk_tool_item_retrieve_proxy_menu_item (GtkToolItem *tool_item);
GtkWidget * gtk_tool_item_get_proxy_menu_item (GtkToolItem *tool_item,
       const gchar *menu_item_id);
void gtk_tool_item_set_proxy_menu_item (GtkToolItem *tool_item,
       const gchar *menu_item_id,
       GtkWidget *menu_item);
void gtk_tool_item_rebuild_menu (GtkToolItem *tool_item);

void gtk_tool_item_toolbar_reconfigured (GtkToolItem *tool_item);



gboolean _gtk_tool_item_create_menu_proxy (GtkToolItem *tool_item);


# 31 "/usr/include/gtk-2.0/gtk/gtktoolbutton.h" 2


# 41 "/usr/include/gtk-2.0/gtk/gtktoolbutton.h"
typedef struct _GtkToolButton GtkToolButton;
typedef struct _GtkToolButtonClass GtkToolButtonClass;
typedef struct _GtkToolButtonPrivate GtkToolButtonPrivate;

struct _GtkToolButton
{
  GtkToolItem parent;


  GtkToolButtonPrivate *priv;
};

struct _GtkToolButtonClass
{
  GtkToolItemClass parent_class;

  GType button_type;


  void (* clicked) (GtkToolButton *tool_item);


  void (* _gtk_reserved1) (void);
  void (* _gtk_reserved2) (void);
  void (* _gtk_reserved3) (void);
  void (* _gtk_reserved4) (void);
};

GType gtk_tool_button_get_type (void) __attribute__((__const__));
GtkToolItem *gtk_tool_button_new (GtkWidget *icon_widget,
          const gchar *label);
GtkToolItem *gtk_tool_button_new_from_stock (const gchar *stock_id);

void gtk_tool_button_set_label (GtkToolButton *button,
        const gchar *label);
const gchar *gtk_tool_button_get_label (GtkToolButton *button);
void gtk_tool_button_set_use_underline (GtkToolButton *button,
        gboolean use_underline);
gboolean gtk_tool_button_get_use_underline (GtkToolButton *button);
void gtk_tool_button_set_stock_id (GtkToolButton *button,
        const gchar *stock_id);
const gchar *gtk_tool_button_get_stock_id (GtkToolButton *button);
void gtk_tool_button_set_icon_name (GtkToolButton *button,
        const gchar *icon_name);
const gchar *gtk_tool_button_get_icon_name (GtkToolButton *button);
void gtk_tool_button_set_icon_widget (GtkToolButton *button,
        GtkWidget *icon_widget);
GtkWidget * gtk_tool_button_get_icon_widget (GtkToolButton *button);
void gtk_tool_button_set_label_widget (GtkToolButton *button,
        GtkWidget *label_widget);
GtkWidget * gtk_tool_button_get_label_widget (GtkToolButton *button);



GtkWidget *_gtk_tool_button_get_button (GtkToolButton *button);


# 31 "/usr/include/gtk-2.0/gtk/gtkmenutoolbutton.h" 2


# 41 "/usr/include/gtk-2.0/gtk/gtkmenutoolbutton.h"
typedef struct _GtkMenuToolButtonClass GtkMenuToolButtonClass;
typedef struct _GtkMenuToolButton GtkMenuToolButton;
typedef struct _GtkMenuToolButtonPrivate GtkMenuToolButtonPrivate;

struct _GtkMenuToolButton
{
  GtkToolButton parent;


  GtkMenuToolButtonPrivate *priv;
};

struct _GtkMenuToolButtonClass
{
  GtkToolButtonClass parent_class;

  void (*show_menu) (GtkMenuToolButton *button);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_menu_tool_button_get_type (void) __attribute__((__const__));
GtkToolItem *gtk_menu_tool_button_new (GtkWidget *icon_widget,
                                                   const gchar *label);
GtkToolItem *gtk_menu_tool_button_new_from_stock (const gchar *stock_id);

void gtk_menu_tool_button_set_menu (GtkMenuToolButton *button,
                                                   GtkWidget *menu);
GtkWidget *gtk_menu_tool_button_get_menu (GtkMenuToolButton *button);


void gtk_menu_tool_button_set_arrow_tooltip (GtkMenuToolButton *button,
                                                      GtkTooltips *tooltips,
                                                      const gchar *tip_text,
                                                      const gchar *tip_private);


void gtk_menu_tool_button_set_arrow_tooltip_text (GtkMenuToolButton *button,
            const gchar *text);
void gtk_menu_tool_button_set_arrow_tooltip_markup (GtkMenuToolButton *button,
            const gchar *markup);


# 126 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkmessagedialog.h" 1
# 34 "/usr/include/gtk-2.0/gtk/gtkmessagedialog.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkdialog.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkmessagedialog.h" 2



typedef enum
{
  GTK_MESSAGE_INFO,
  GTK_MESSAGE_WARNING,
  GTK_MESSAGE_QUESTION,
  GTK_MESSAGE_ERROR,
  GTK_MESSAGE_OTHER
} GtkMessageType;

typedef enum
{
  GTK_BUTTONS_NONE,
  GTK_BUTTONS_OK,
  GTK_BUTTONS_CLOSE,
  GTK_BUTTONS_CANCEL,
  GTK_BUTTONS_YES_NO,
  GTK_BUTTONS_OK_CANCEL
} GtkButtonsType;
# 64 "/usr/include/gtk-2.0/gtk/gtkmessagedialog.h"
typedef struct _GtkMessageDialog GtkMessageDialog;
typedef struct _GtkMessageDialogClass GtkMessageDialogClass;

struct _GtkMessageDialog
{


  GtkDialog parent_instance;

  GtkWidget *image;
  GtkWidget *label;
};

struct _GtkMessageDialogClass
{
  GtkDialogClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_message_dialog_get_type (void) __attribute__((__const__));

GtkWidget* gtk_message_dialog_new (GtkWindow *parent,
                                        GtkDialogFlags flags,
                                        GtkMessageType type,
                                        GtkButtonsType buttons,
                                        const gchar *message_format,
                                        ...) __attribute__((__format__ (__printf__, 5, 6)));

GtkWidget* gtk_message_dialog_new_with_markup (GtkWindow *parent,
                                                 GtkDialogFlags flags,
                                                 GtkMessageType type,
                                                 GtkButtonsType buttons,
                                                 const gchar *message_format,
                                                 ...) __attribute__((__format__ (__printf__, 5, 6)));

void gtk_message_dialog_set_image (GtkMessageDialog *dialog,
         GtkWidget *image);

GtkWidget * gtk_message_dialog_get_image (GtkMessageDialog *dialog);

void gtk_message_dialog_set_markup (GtkMessageDialog *message_dialog,
                                           const gchar *str);

void gtk_message_dialog_format_secondary_text (GtkMessageDialog *message_dialog,
                                                     const gchar *message_format,
                                                     ...) __attribute__((__format__ (__printf__, 2, 3)));

void gtk_message_dialog_format_secondary_markup (GtkMessageDialog *message_dialog,
                                                       const gchar *message_format,
                                                       ...) __attribute__((__format__ (__printf__, 2, 3)));


# 127 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkmisc.h" 1
# 128 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkmodules.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkmodules.h"
# 1 "/usr/include/gtk-2.0/gtk/gtksettings.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkmodules.h" 2







gchar * _gtk_find_module (const gchar *name,
            const gchar *type);
gchar **_gtk_get_module_path (const gchar *type);

void _gtk_modules_init (gint *argc,
           gchar ***argv,
           const gchar *gtk_modules_args);
void _gtk_modules_settings_changed (GtkSettings *settings,
           const gchar *modules);

typedef void (*GtkModuleInitFunc) (gint *argc,
           gchar ***argv);
typedef void (*GtkModuleDisplayInitFunc) (GdkDisplay *display);



# 129 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkmountoperation.h" 1
# 34 "/usr/include/gtk-2.0/gtk/gtkmountoperation.h"

# 43 "/usr/include/gtk-2.0/gtk/gtkmountoperation.h"
typedef struct _GtkMountOperation GtkMountOperation;
typedef struct _GtkMountOperationClass GtkMountOperationClass;
typedef struct _GtkMountOperationPrivate GtkMountOperationPrivate;

struct _GtkMountOperation
{
  GMountOperation parent_instance;

  GtkMountOperationPrivate *priv;
};

struct _GtkMountOperationClass
{
  GMountOperationClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_mount_operation_get_type (void);
GMountOperation *gtk_mount_operation_new (GtkWindow *parent);
gboolean gtk_mount_operation_is_showing (GtkMountOperation *op);
void gtk_mount_operation_set_parent (GtkMountOperation *op,
                                                 GtkWindow *parent);
GtkWindow * gtk_mount_operation_get_parent (GtkMountOperation *op);
void gtk_mount_operation_set_screen (GtkMountOperation *op,
                                                 GdkScreen *screen);
GdkScreen *gtk_mount_operation_get_screen (GtkMountOperation *op);


# 130 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtknotebook.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtknotebook.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcontainer.h" 1
# 37 "/usr/include/gtk-2.0/gtk/gtknotebook.h" 2



# 49 "/usr/include/gtk-2.0/gtk/gtknotebook.h"
typedef enum
{
  GTK_NOTEBOOK_TAB_FIRST,
  GTK_NOTEBOOK_TAB_LAST
} GtkNotebookTab;

typedef struct _GtkNotebook GtkNotebook;
typedef struct _GtkNotebookClass GtkNotebookClass;
typedef struct _GtkNotebookPage GtkNotebookPage;

struct _GtkNotebook
{
  GtkContainer container;

  GtkNotebookPage *cur_page;
  GList *children;
  GList *first_tab;
  GList *focus_tab;

  GtkWidget *menu;
  GdkWindow *event_window;

  guint32 timer;

  guint16 tab_hborder;
  guint16 tab_vborder;

  guint show_tabs : 1;
  guint homogeneous : 1;
  guint show_border : 1;
  guint tab_pos : 2;
  guint scrollable : 1;
  guint in_child : 3;
  guint click_child : 3;
  guint button : 2;
  guint need_timer : 1;
  guint child_has_focus : 1;
  guint have_visible_child : 1;
  guint focus_out : 1;

  guint has_before_previous : 1;
  guint has_before_next : 1;
  guint has_after_previous : 1;
  guint has_after_next : 1;
};

struct _GtkNotebookClass
{
  GtkContainerClass parent_class;

  void (* switch_page) (GtkNotebook *notebook,
                              GtkNotebookPage *page,
         guint page_num);


  gboolean (* select_page) (GtkNotebook *notebook,
                                gboolean move_focus);
  gboolean (* focus_tab) (GtkNotebook *notebook,
                                GtkNotebookTab type);
  gboolean (* change_current_page) (GtkNotebook *notebook,
                                gint offset);
  void (* move_focus_out) (GtkNotebook *notebook,
    GtkDirectionType direction);
  gboolean (* reorder_tab) (GtkNotebook *notebook,
    GtkDirectionType direction,
    gboolean move_to_last);


  gint (* insert_page) (GtkNotebook *notebook,
           GtkWidget *child,
    GtkWidget *tab_label,
    GtkWidget *menu_label,
    gint position);

  GtkNotebook * (* create_window) (GtkNotebook *notebook,
                                   GtkWidget *page,
                                   gint x,
                                   gint y);

  void (*_gtk_reserved1) (void);
};

typedef GtkNotebook* (*GtkNotebookWindowCreationFunc) (GtkNotebook *source,
                                                       GtkWidget *page,
                                                       gint x,
                                                       gint y,
                                                       gpointer data);





GType gtk_notebook_get_type (void) __attribute__((__const__));
GtkWidget * gtk_notebook_new (void);
gint gtk_notebook_append_page (GtkNotebook *notebook,
         GtkWidget *child,
         GtkWidget *tab_label);
gint gtk_notebook_append_page_menu (GtkNotebook *notebook,
         GtkWidget *child,
         GtkWidget *tab_label,
         GtkWidget *menu_label);
gint gtk_notebook_prepend_page (GtkNotebook *notebook,
         GtkWidget *child,
         GtkWidget *tab_label);
gint gtk_notebook_prepend_page_menu (GtkNotebook *notebook,
         GtkWidget *child,
         GtkWidget *tab_label,
         GtkWidget *menu_label);
gint gtk_notebook_insert_page (GtkNotebook *notebook,
         GtkWidget *child,
         GtkWidget *tab_label,
         gint position);
gint gtk_notebook_insert_page_menu (GtkNotebook *notebook,
         GtkWidget *child,
         GtkWidget *tab_label,
         GtkWidget *menu_label,
         gint position);
void gtk_notebook_remove_page (GtkNotebook *notebook,
         gint page_num);





void gtk_notebook_set_window_creation_hook (GtkNotebookWindowCreationFunc func,
         gpointer data,
                                            GDestroyNotify destroy);

void gtk_notebook_set_group_id (GtkNotebook *notebook,
         gint group_id);
gint gtk_notebook_get_group_id (GtkNotebook *notebook);



void gtk_notebook_set_group (GtkNotebook *notebook,
         gpointer group);
gpointer gtk_notebook_get_group (GtkNotebook *notebook);







gint gtk_notebook_get_current_page (GtkNotebook *notebook);
GtkWidget* gtk_notebook_get_nth_page (GtkNotebook *notebook,
       gint page_num);
gint gtk_notebook_get_n_pages (GtkNotebook *notebook);
gint gtk_notebook_page_num (GtkNotebook *notebook,
       GtkWidget *child);
void gtk_notebook_set_current_page (GtkNotebook *notebook,
       gint page_num);
void gtk_notebook_next_page (GtkNotebook *notebook);
void gtk_notebook_prev_page (GtkNotebook *notebook);





void gtk_notebook_set_show_border (GtkNotebook *notebook,
         gboolean show_border);
gboolean gtk_notebook_get_show_border (GtkNotebook *notebook);
void gtk_notebook_set_show_tabs (GtkNotebook *notebook,
         gboolean show_tabs);
gboolean gtk_notebook_get_show_tabs (GtkNotebook *notebook);
void gtk_notebook_set_tab_pos (GtkNotebook *notebook,
                GtkPositionType pos);
GtkPositionType gtk_notebook_get_tab_pos (GtkNotebook *notebook);


void gtk_notebook_set_homogeneous_tabs (GtkNotebook *notebook,
         gboolean homogeneous);
void gtk_notebook_set_tab_border (GtkNotebook *notebook,
         guint border_width);
void gtk_notebook_set_tab_hborder (GtkNotebook *notebook,
         guint tab_hborder);
void gtk_notebook_set_tab_vborder (GtkNotebook *notebook,
         guint tab_vborder);


void gtk_notebook_set_scrollable (GtkNotebook *notebook,
         gboolean scrollable);
gboolean gtk_notebook_get_scrollable (GtkNotebook *notebook);





void gtk_notebook_popup_enable (GtkNotebook *notebook);
void gtk_notebook_popup_disable (GtkNotebook *notebook);





GtkWidget * gtk_notebook_get_tab_label (GtkNotebook *notebook,
        GtkWidget *child);
void gtk_notebook_set_tab_label (GtkNotebook *notebook,
        GtkWidget *child,
        GtkWidget *tab_label);
void gtk_notebook_set_tab_label_text (GtkNotebook *notebook,
        GtkWidget *child,
        const gchar *tab_text);
const gchar *gtk_notebook_get_tab_label_text (GtkNotebook *notebook,
             GtkWidget *child);
GtkWidget * gtk_notebook_get_menu_label (GtkNotebook *notebook,
        GtkWidget *child);
void gtk_notebook_set_menu_label (GtkNotebook *notebook,
        GtkWidget *child,
        GtkWidget *menu_label);
void gtk_notebook_set_menu_label_text (GtkNotebook *notebook,
        GtkWidget *child,
        const gchar *menu_text);
const gchar *gtk_notebook_get_menu_label_text (GtkNotebook *notebook,
       GtkWidget *child);
void gtk_notebook_query_tab_label_packing (GtkNotebook *notebook,
        GtkWidget *child,
        gboolean *expand,
        gboolean *fill,
        GtkPackType *pack_type);
void gtk_notebook_set_tab_label_packing (GtkNotebook *notebook,
        GtkWidget *child,
        gboolean expand,
        gboolean fill,
        GtkPackType pack_type);
void gtk_notebook_reorder_child (GtkNotebook *notebook,
        GtkWidget *child,
        gint position);
gboolean gtk_notebook_get_tab_reorderable (GtkNotebook *notebook,
        GtkWidget *child);
void gtk_notebook_set_tab_reorderable (GtkNotebook *notebook,
        GtkWidget *child,
        gboolean reorderable);
gboolean gtk_notebook_get_tab_detachable (GtkNotebook *notebook,
        GtkWidget *child);
void gtk_notebook_set_tab_detachable (GtkNotebook *notebook,
        GtkWidget *child,
        gboolean detachable);







# 131 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkobject.h" 1
# 132 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkorientable.h" 1
# 31 "/usr/include/gtk-2.0/gtk/gtkorientable.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtkorientable.h" 2


# 43 "/usr/include/gtk-2.0/gtk/gtkorientable.h"
typedef struct _GtkOrientable GtkOrientable;
typedef struct _GtkOrientableIface GtkOrientableIface;

struct _GtkOrientableIface
{
  GTypeInterface base_iface;
};


GType gtk_orientable_get_type (void) __attribute__((__const__));

void gtk_orientable_set_orientation (GtkOrientable *orientable,
                                               GtkOrientation orientation);
GtkOrientation gtk_orientable_get_orientation (GtkOrientable *orientable);


# 133 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkpagesetup.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkpagesetup.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkpapersize.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkpapersize.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkenums.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkpapersize.h" 2




typedef struct _GtkPaperSize GtkPaperSize;
# 47 "/usr/include/gtk-2.0/gtk/gtkpapersize.h"
GType gtk_paper_size_get_type (void) __attribute__((__const__));

GtkPaperSize *gtk_paper_size_new (const gchar *name);
GtkPaperSize *gtk_paper_size_new_from_ppd (const gchar *ppd_name,
        const gchar *ppd_display_name,
        gdouble width,
        gdouble height);
GtkPaperSize *gtk_paper_size_new_custom (const gchar *name,
        const gchar *display_name,
        gdouble width,
        gdouble height,
        GtkUnit unit);
GtkPaperSize *gtk_paper_size_copy (GtkPaperSize *other);
void gtk_paper_size_free (GtkPaperSize *size);
gboolean gtk_paper_size_is_equal (GtkPaperSize *size1,
        GtkPaperSize *size2);

GList *gtk_paper_size_get_paper_sizes (gboolean include_custom);


const gchar *gtk_paper_size_get_name (GtkPaperSize *size);
const gchar *gtk_paper_size_get_display_name (GtkPaperSize *size);
const gchar *gtk_paper_size_get_ppd_name (GtkPaperSize *size);

gdouble gtk_paper_size_get_width (GtkPaperSize *size, GtkUnit unit);
gdouble gtk_paper_size_get_height (GtkPaperSize *size, GtkUnit unit);
gboolean gtk_paper_size_is_custom (GtkPaperSize *size);


void gtk_paper_size_set_size (GtkPaperSize *size,
                                                  gdouble width,
                                                  gdouble height,
                                                  GtkUnit unit);

gdouble gtk_paper_size_get_default_top_margin (GtkPaperSize *size,
        GtkUnit unit);
gdouble gtk_paper_size_get_default_bottom_margin (GtkPaperSize *size,
        GtkUnit unit);
gdouble gtk_paper_size_get_default_left_margin (GtkPaperSize *size,
        GtkUnit unit);
gdouble gtk_paper_size_get_default_right_margin (GtkPaperSize *size,
        GtkUnit unit);

const gchar *gtk_paper_size_get_default (void);

GtkPaperSize *gtk_paper_size_new_from_key_file (GKeyFile *key_file,
             const gchar *group_name,
             GError **error);
void gtk_paper_size_to_key_file (GtkPaperSize *size,
             GKeyFile *key_file,
             const gchar *group_name);


# 30 "/usr/include/gtk-2.0/gtk/gtkpagesetup.h" 2




typedef struct _GtkPageSetup GtkPageSetup;





GType gtk_page_setup_get_type (void) __attribute__((__const__));
GtkPageSetup * gtk_page_setup_new (void);
GtkPageSetup * gtk_page_setup_copy (GtkPageSetup *other);
GtkPageOrientation gtk_page_setup_get_orientation (GtkPageSetup *setup);
void gtk_page_setup_set_orientation (GtkPageSetup *setup,
           GtkPageOrientation orientation);
GtkPaperSize * gtk_page_setup_get_paper_size (GtkPageSetup *setup);
void gtk_page_setup_set_paper_size (GtkPageSetup *setup,
           GtkPaperSize *size);
gdouble gtk_page_setup_get_top_margin (GtkPageSetup *setup,
           GtkUnit unit);
void gtk_page_setup_set_top_margin (GtkPageSetup *setup,
           gdouble margin,
           GtkUnit unit);
gdouble gtk_page_setup_get_bottom_margin (GtkPageSetup *setup,
           GtkUnit unit);
void gtk_page_setup_set_bottom_margin (GtkPageSetup *setup,
           gdouble margin,
           GtkUnit unit);
gdouble gtk_page_setup_get_left_margin (GtkPageSetup *setup,
           GtkUnit unit);
void gtk_page_setup_set_left_margin (GtkPageSetup *setup,
           gdouble margin,
           GtkUnit unit);
gdouble gtk_page_setup_get_right_margin (GtkPageSetup *setup,
           GtkUnit unit);
void gtk_page_setup_set_right_margin (GtkPageSetup *setup,
           gdouble margin,
           GtkUnit unit);

void gtk_page_setup_set_paper_size_and_default_margins (GtkPageSetup *setup,
       GtkPaperSize *size);


gdouble gtk_page_setup_get_paper_width (GtkPageSetup *setup,
           GtkUnit unit);
gdouble gtk_page_setup_get_paper_height (GtkPageSetup *setup,
           GtkUnit unit);



gdouble gtk_page_setup_get_page_width (GtkPageSetup *setup,
           GtkUnit unit);
gdouble gtk_page_setup_get_page_height (GtkPageSetup *setup,
           GtkUnit unit);


GtkPageSetup *gtk_page_setup_new_from_file (const gchar *file_name,
           GError **error);
gboolean gtk_page_setup_load_file (GtkPageSetup *setup,
           const char *file_name,
           GError **error);
gboolean gtk_page_setup_to_file (GtkPageSetup *setup,
           const char *file_name,
           GError **error);
GtkPageSetup *gtk_page_setup_new_from_key_file (GKeyFile *key_file,
           const gchar *group_name,
           GError **error);
gboolean gtk_page_setup_load_key_file (GtkPageSetup *setup,
                         GKeyFile *key_file,
                         const gchar *group_name,
                         GError **error);
void gtk_page_setup_to_key_file (GtkPageSetup *setup,
           GKeyFile *key_file,
           const gchar *group_name);


# 134 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkpapersize.h" 1
# 135 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkpaned.h" 1
# 136 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkplug.h" 1
# 34 "/usr/include/gtk-2.0/gtk/gtkplug.h"
# 1 "/usr/include/gtk-2.0/gtk/gtksocket.h" 1
# 33 "/usr/include/gtk-2.0/gtk/gtksocket.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcontainer.h" 1
# 34 "/usr/include/gtk-2.0/gtk/gtksocket.h" 2


# 45 "/usr/include/gtk-2.0/gtk/gtksocket.h"
typedef struct _GtkSocket GtkSocket;
typedef struct _GtkSocketClass GtkSocketClass;

struct _GtkSocket
{
  GtkContainer container;

  guint16 request_width;
  guint16 request_height;
  guint16 current_width;
  guint16 current_height;

  GdkWindow *plug_window;
  GtkWidget *plug_widget;

  gshort xembed_version;
  guint same_app : 1;
  guint focus_in : 1;
  guint have_size : 1;
  guint need_map : 1;
  guint is_mapped : 1;
  guint active : 1;

  GtkAccelGroup *accel_group;
  GtkWidget *toplevel;
};

struct _GtkSocketClass
{
  GtkContainerClass parent_class;

  void (*plug_added) (GtkSocket *socket_);
  gboolean (*plug_removed) (GtkSocket *socket_);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_socket_get_type (void) __attribute__((__const__));
GtkWidget* gtk_socket_new (void);

void gtk_socket_add_id (GtkSocket *socket_,
       GdkNativeWindow window_id);
GdkNativeWindow gtk_socket_get_id (GtkSocket *socket_);
GdkWindow* gtk_socket_get_plug_window (GtkSocket *socket_);


void gtk_socket_steal (GtkSocket *socket_,
        GdkNativeWindow wid);



# 35 "/usr/include/gtk-2.0/gtk/gtkplug.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkwindow.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkplug.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkplug.h"
typedef struct _GtkPlug GtkPlug;
typedef struct _GtkPlugClass GtkPlugClass;


struct _GtkPlug
{
  GtkWindow window;

  GdkWindow *socket_window;
  GtkWidget *modality_window;
  GtkWindowGroup *modality_group;
  GHashTable *grabbed_keys;

  guint same_app : 1;
};

struct _GtkPlugClass
{
  GtkWindowClass parent_class;

  void (*embedded) (GtkPlug *plug);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_plug_get_type (void) __attribute__((__const__));


void gtk_plug_construct (GtkPlug *plug,
          GdkNativeWindow socket_id);
GtkWidget* gtk_plug_new (GdkNativeWindow socket_id);


void gtk_plug_construct_for_display (GtkPlug *plug,
        GdkDisplay *display,
        GdkNativeWindow socket_id);
GtkWidget* gtk_plug_new_for_display (GdkDisplay *display,
        GdkNativeWindow socket_id);

GdkNativeWindow gtk_plug_get_id (GtkPlug *plug);

gboolean gtk_plug_get_embedded (GtkPlug *plug);

GdkWindow *gtk_plug_get_socket_window (GtkPlug *plug);

void _gtk_plug_add_to_socket (GtkPlug *plug,
       GtkSocket *socket_);
void _gtk_plug_remove_from_socket (GtkPlug *plug,
       GtkSocket *socket_);


# 137 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkprintcontext.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkprintcontext.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkpagesetup.h" 1
# 31 "/usr/include/gtk-2.0/gtk/gtkprintcontext.h" 2




typedef struct _GtkPrintContext GtkPrintContext;





GType gtk_print_context_get_type (void) __attribute__((__const__));



cairo_t *gtk_print_context_get_cairo_context (GtkPrintContext *context);

GtkPageSetup *gtk_print_context_get_page_setup (GtkPrintContext *context);
gdouble gtk_print_context_get_width (GtkPrintContext *context);
gdouble gtk_print_context_get_height (GtkPrintContext *context);
gdouble gtk_print_context_get_dpi_x (GtkPrintContext *context);
gdouble gtk_print_context_get_dpi_y (GtkPrintContext *context);


PangoFontMap *gtk_print_context_get_pango_fontmap (GtkPrintContext *context);
PangoContext *gtk_print_context_create_pango_context (GtkPrintContext *context);
PangoLayout *gtk_print_context_create_pango_layout (GtkPrintContext *context);


void gtk_print_context_set_cairo_context (GtkPrintContext *context,
            cairo_t *cr,
            double dpi_x,
            double dpi_y);


# 138 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkprintoperation.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkprintoperation.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkmain.h" 1
# 31 "/usr/include/gtk-2.0/gtk/gtkprintoperation.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkwindow.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtkprintoperation.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkpagesetup.h" 1
# 33 "/usr/include/gtk-2.0/gtk/gtkprintoperation.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkprintsettings.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkprintsettings.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkpapersize.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkprintsettings.h" 2



typedef struct _GtkPrintSettings GtkPrintSettings;





typedef void (*GtkPrintSettingsFunc) (const gchar *key,
     const gchar *value,
     gpointer user_data);

typedef struct _GtkPageRange GtkPageRange;
struct _GtkPageRange
{
  gint start;
  gint end;
};

GType gtk_print_settings_get_type (void) __attribute__((__const__));
GtkPrintSettings *gtk_print_settings_new (void);

GtkPrintSettings *gtk_print_settings_copy (GtkPrintSettings *other);

GtkPrintSettings *gtk_print_settings_new_from_file (const gchar *file_name,
             GError **error);
gboolean gtk_print_settings_load_file (GtkPrintSettings *settings,
             const gchar *file_name,
             GError **error);
gboolean gtk_print_settings_to_file (GtkPrintSettings *settings,
             const gchar *file_name,
             GError **error);
GtkPrintSettings *gtk_print_settings_new_from_key_file (GKeyFile *key_file,
             const gchar *group_name,
             GError **error);
gboolean gtk_print_settings_load_key_file (GtkPrintSettings *settings,
             GKeyFile *key_file,
             const gchar *group_name,
             GError **error);
void gtk_print_settings_to_key_file (GtkPrintSettings *settings,
             GKeyFile *key_file,
             const gchar *group_name);
gboolean gtk_print_settings_has_key (GtkPrintSettings *settings,
             const gchar *key);
const gchar *gtk_print_settings_get (GtkPrintSettings *settings,
             const gchar *key);
void gtk_print_settings_set (GtkPrintSettings *settings,
             const gchar *key,
             const gchar *value);
void gtk_print_settings_unset (GtkPrintSettings *settings,
             const gchar *key);
void gtk_print_settings_foreach (GtkPrintSettings *settings,
             GtkPrintSettingsFunc func,
             gpointer user_data);
gboolean gtk_print_settings_get_bool (GtkPrintSettings *settings,
             const gchar *key);
void gtk_print_settings_set_bool (GtkPrintSettings *settings,
             const gchar *key,
             gboolean value);
gdouble gtk_print_settings_get_double (GtkPrintSettings *settings,
             const gchar *key);
gdouble gtk_print_settings_get_double_with_default (GtkPrintSettings *settings,
             const gchar *key,
             gdouble def);
void gtk_print_settings_set_double (GtkPrintSettings *settings,
             const gchar *key,
             gdouble value);
gdouble gtk_print_settings_get_length (GtkPrintSettings *settings,
             const gchar *key,
             GtkUnit unit);
void gtk_print_settings_set_length (GtkPrintSettings *settings,
             const gchar *key,
             gdouble value,
             GtkUnit unit);
gint gtk_print_settings_get_int (GtkPrintSettings *settings,
             const gchar *key);
gint gtk_print_settings_get_int_with_default (GtkPrintSettings *settings,
             const gchar *key,
             gint def);
void gtk_print_settings_set_int (GtkPrintSettings *settings,
             const gchar *key,
             gint value);
# 148 "/usr/include/gtk-2.0/gtk/gtkprintsettings.h"
const gchar *gtk_print_settings_get_printer (GtkPrintSettings *settings);
void gtk_print_settings_set_printer (GtkPrintSettings *settings,
        const gchar *printer);
GtkPageOrientation gtk_print_settings_get_orientation (GtkPrintSettings *settings);
void gtk_print_settings_set_orientation (GtkPrintSettings *settings,
        GtkPageOrientation orientation);
GtkPaperSize * gtk_print_settings_get_paper_size (GtkPrintSettings *settings);
void gtk_print_settings_set_paper_size (GtkPrintSettings *settings,
        GtkPaperSize *paper_size);
gdouble gtk_print_settings_get_paper_width (GtkPrintSettings *settings,
        GtkUnit unit);
void gtk_print_settings_set_paper_width (GtkPrintSettings *settings,
        gdouble width,
        GtkUnit unit);
gdouble gtk_print_settings_get_paper_height (GtkPrintSettings *settings,
        GtkUnit unit);
void gtk_print_settings_set_paper_height (GtkPrintSettings *settings,
        gdouble height,
        GtkUnit unit);
gboolean gtk_print_settings_get_use_color (GtkPrintSettings *settings);
void gtk_print_settings_set_use_color (GtkPrintSettings *settings,
        gboolean use_color);
gboolean gtk_print_settings_get_collate (GtkPrintSettings *settings);
void gtk_print_settings_set_collate (GtkPrintSettings *settings,
        gboolean collate);
gboolean gtk_print_settings_get_reverse (GtkPrintSettings *settings);
void gtk_print_settings_set_reverse (GtkPrintSettings *settings,
        gboolean reverse);
GtkPrintDuplex gtk_print_settings_get_duplex (GtkPrintSettings *settings);
void gtk_print_settings_set_duplex (GtkPrintSettings *settings,
        GtkPrintDuplex duplex);
GtkPrintQuality gtk_print_settings_get_quality (GtkPrintSettings *settings);
void gtk_print_settings_set_quality (GtkPrintSettings *settings,
        GtkPrintQuality quality);
gint gtk_print_settings_get_n_copies (GtkPrintSettings *settings);
void gtk_print_settings_set_n_copies (GtkPrintSettings *settings,
        gint num_copies);
gint gtk_print_settings_get_number_up (GtkPrintSettings *settings);
void gtk_print_settings_set_number_up (GtkPrintSettings *settings,
        gint number_up);
GtkNumberUpLayout gtk_print_settings_get_number_up_layout (GtkPrintSettings *settings);
void gtk_print_settings_set_number_up_layout (GtkPrintSettings *settings,
        GtkNumberUpLayout number_up_layout);
gint gtk_print_settings_get_resolution (GtkPrintSettings *settings);
void gtk_print_settings_set_resolution (GtkPrintSettings *settings,
        gint resolution);
gint gtk_print_settings_get_resolution_x (GtkPrintSettings *settings);
gint gtk_print_settings_get_resolution_y (GtkPrintSettings *settings);
void gtk_print_settings_set_resolution_xy (GtkPrintSettings *settings,
        gint resolution_x,
        gint resolution_y);
gdouble gtk_print_settings_get_printer_lpi (GtkPrintSettings *settings);
void gtk_print_settings_set_printer_lpi (GtkPrintSettings *settings,
        gdouble lpi);
gdouble gtk_print_settings_get_scale (GtkPrintSettings *settings);
void gtk_print_settings_set_scale (GtkPrintSettings *settings,
        gdouble scale);
GtkPrintPages gtk_print_settings_get_print_pages (GtkPrintSettings *settings);
void gtk_print_settings_set_print_pages (GtkPrintSettings *settings,
        GtkPrintPages pages);
GtkPageRange * gtk_print_settings_get_page_ranges (GtkPrintSettings *settings,
        gint *num_ranges);
void gtk_print_settings_set_page_ranges (GtkPrintSettings *settings,
        GtkPageRange *page_ranges,
        gint num_ranges);
GtkPageSet gtk_print_settings_get_page_set (GtkPrintSettings *settings);
void gtk_print_settings_set_page_set (GtkPrintSettings *settings,
        GtkPageSet page_set);
const gchar *gtk_print_settings_get_default_source (GtkPrintSettings *settings);
void gtk_print_settings_set_default_source (GtkPrintSettings *settings,
        const gchar *default_source);
const gchar *gtk_print_settings_get_media_type (GtkPrintSettings *settings);
void gtk_print_settings_set_media_type (GtkPrintSettings *settings,
        const gchar *media_type);
const gchar *gtk_print_settings_get_dither (GtkPrintSettings *settings);
void gtk_print_settings_set_dither (GtkPrintSettings *settings,
        const gchar *dither);
const gchar *gtk_print_settings_get_finishings (GtkPrintSettings *settings);
void gtk_print_settings_set_finishings (GtkPrintSettings *settings,
        const gchar *finishings);
const gchar *gtk_print_settings_get_output_bin (GtkPrintSettings *settings);
void gtk_print_settings_set_output_bin (GtkPrintSettings *settings,
        const gchar *output_bin);


# 34 "/usr/include/gtk-2.0/gtk/gtkprintoperation.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkprintcontext.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkprintoperation.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkprintoperationpreview.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkprintoperationpreview.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkprintcontext.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkprintoperationpreview.h" 2








typedef struct _GtkPrintOperationPreview GtkPrintOperationPreview;
typedef struct _GtkPrintOperationPreviewIface GtkPrintOperationPreviewIface;


struct _GtkPrintOperationPreviewIface
{
  GTypeInterface g_iface;


  void (*ready) (GtkPrintOperationPreview *preview,
           GtkPrintContext *context);
  void (*got_page_size) (GtkPrintOperationPreview *preview,
           GtkPrintContext *context,
           GtkPageSetup *page_setup);


  void (*render_page) (GtkPrintOperationPreview *preview,
           gint page_nr);
  gboolean (*is_selected) (GtkPrintOperationPreview *preview,
           gint page_nr);
  void (*end_preview) (GtkPrintOperationPreview *preview);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
};

GType gtk_print_operation_preview_get_type (void) __attribute__((__const__));

void gtk_print_operation_preview_render_page (GtkPrintOperationPreview *preview,
        gint page_nr);
void gtk_print_operation_preview_end_preview (GtkPrintOperationPreview *preview);
gboolean gtk_print_operation_preview_is_selected (GtkPrintOperationPreview *preview,
        gint page_nr);


# 36 "/usr/include/gtk-2.0/gtk/gtkprintoperation.h" 2



# 47 "/usr/include/gtk-2.0/gtk/gtkprintoperation.h"
typedef struct _GtkPrintOperationClass GtkPrintOperationClass;
typedef struct _GtkPrintOperationPrivate GtkPrintOperationPrivate;
typedef struct _GtkPrintOperation GtkPrintOperation;

typedef enum {
  GTK_PRINT_STATUS_INITIAL,
  GTK_PRINT_STATUS_PREPARING,
  GTK_PRINT_STATUS_GENERATING_DATA,
  GTK_PRINT_STATUS_SENDING_DATA,
  GTK_PRINT_STATUS_PENDING,
  GTK_PRINT_STATUS_PENDING_ISSUE,
  GTK_PRINT_STATUS_PRINTING,
  GTK_PRINT_STATUS_FINISHED,
  GTK_PRINT_STATUS_FINISHED_ABORTED
} GtkPrintStatus;

typedef enum {
  GTK_PRINT_OPERATION_RESULT_ERROR,
  GTK_PRINT_OPERATION_RESULT_APPLY,
  GTK_PRINT_OPERATION_RESULT_CANCEL,
  GTK_PRINT_OPERATION_RESULT_IN_PROGRESS
} GtkPrintOperationResult;

typedef enum {
  GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG,
  GTK_PRINT_OPERATION_ACTION_PRINT,
  GTK_PRINT_OPERATION_ACTION_PREVIEW,
  GTK_PRINT_OPERATION_ACTION_EXPORT
} GtkPrintOperationAction;


struct _GtkPrintOperation
{
  GObject parent_instance;

  GtkPrintOperationPrivate *priv;
};

struct _GtkPrintOperationClass
{
  GObjectClass parent_class;

  void (*done) (GtkPrintOperation *operation,
      GtkPrintOperationResult result);
  void (*begin_print) (GtkPrintOperation *operation,
      GtkPrintContext *context);
  gboolean (*paginate) (GtkPrintOperation *operation,
      GtkPrintContext *context);
  void (*request_page_setup) (GtkPrintOperation *operation,
      GtkPrintContext *context,
      gint page_nr,
      GtkPageSetup *setup);
  void (*draw_page) (GtkPrintOperation *operation,
      GtkPrintContext *context,
      gint page_nr);
  void (*end_print) (GtkPrintOperation *operation,
      GtkPrintContext *context);
  void (*status_changed) (GtkPrintOperation *operation);

  GtkWidget *(*create_custom_widget) (GtkPrintOperation *operation);
  void (*custom_widget_apply) (GtkPrintOperation *operation,
          GtkWidget *widget);

  gboolean (*preview) (GtkPrintOperation *operation,
         GtkPrintOperationPreview *preview,
         GtkPrintContext *context,
         GtkWindow *parent);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
};



typedef enum
{
  GTK_PRINT_ERROR_GENERAL,
  GTK_PRINT_ERROR_INTERNAL_ERROR,
  GTK_PRINT_ERROR_NOMEM,
  GTK_PRINT_ERROR_INVALID_FILE
} GtkPrintError;

GQuark gtk_print_error_quark (void);

GType gtk_print_operation_get_type (void) __attribute__((__const__));
GtkPrintOperation * gtk_print_operation_new (void);
void gtk_print_operation_set_default_page_setup (GtkPrintOperation *op,
            GtkPageSetup *default_page_setup);
GtkPageSetup * gtk_print_operation_get_default_page_setup (GtkPrintOperation *op);
void gtk_print_operation_set_print_settings (GtkPrintOperation *op,
            GtkPrintSettings *print_settings);
GtkPrintSettings * gtk_print_operation_get_print_settings (GtkPrintOperation *op);
void gtk_print_operation_set_job_name (GtkPrintOperation *op,
            const gchar *job_name);
void gtk_print_operation_set_n_pages (GtkPrintOperation *op,
            gint n_pages);
void gtk_print_operation_set_current_page (GtkPrintOperation *op,
            gint current_page);
void gtk_print_operation_set_use_full_page (GtkPrintOperation *op,
            gboolean full_page);
void gtk_print_operation_set_unit (GtkPrintOperation *op,
            GtkUnit unit);
void gtk_print_operation_set_export_filename (GtkPrintOperation *op,
            const gchar *filename);
void gtk_print_operation_set_track_print_status (GtkPrintOperation *op,
            gboolean track_status);
void gtk_print_operation_set_show_progress (GtkPrintOperation *op,
            gboolean show_progress);
void gtk_print_operation_set_allow_async (GtkPrintOperation *op,
            gboolean allow_async);
void gtk_print_operation_set_custom_tab_label (GtkPrintOperation *op,
            const gchar *label);
GtkPrintOperationResult gtk_print_operation_run (GtkPrintOperation *op,
            GtkPrintOperationAction action,
            GtkWindow *parent,
            GError **error);
void gtk_print_operation_get_error (GtkPrintOperation *op,
            GError **error);
GtkPrintStatus gtk_print_operation_get_status (GtkPrintOperation *op);
const gchar * gtk_print_operation_get_status_string (GtkPrintOperation *op);
gboolean gtk_print_operation_is_finished (GtkPrintOperation *op);
void gtk_print_operation_cancel (GtkPrintOperation *op);
void gtk_print_operation_draw_page_finish (GtkPrintOperation *op);
void gtk_print_operation_set_defer_drawing (GtkPrintOperation *op);

GtkPageSetup *gtk_print_run_page_setup_dialog (GtkWindow *parent,
            GtkPageSetup *page_setup,
            GtkPrintSettings *settings);

typedef void (* GtkPageSetupDoneFunc) (GtkPageSetup *page_setup,
     gpointer data);

void gtk_print_run_page_setup_dialog_async (GtkWindow *parent,
            GtkPageSetup *page_setup,
            GtkPrintSettings *settings,
                                                                    GtkPageSetupDoneFunc done_cb,
                                                                    gpointer data);


# 139 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkprintoperationpreview.h" 1
# 140 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkprintsettings.h" 1
# 141 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkprogressbar.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkprogressbar.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkprogress.h" 1
# 31 "/usr/include/gtk-2.0/gtk/gtkprogress.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtkprogress.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkadjustment.h" 1
# 33 "/usr/include/gtk-2.0/gtk/gtkprogress.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkprogress.h"
typedef struct _GtkProgress GtkProgress;
typedef struct _GtkProgressClass GtkProgressClass;


struct _GtkProgress
{
  GtkWidget widget;

  GtkAdjustment *adjustment;
  GdkPixmap *offscreen_pixmap;
  gchar *format;
  gfloat x_align;
  gfloat y_align;

  guint show_text : 1;
  guint activity_mode : 1;
  guint use_text_format : 1;
};

struct _GtkProgressClass
{
  GtkWidgetClass parent_class;

  void (* paint) (GtkProgress *progress);
  void (* update) (GtkProgress *progress);
  void (* act_mode_enter) (GtkProgress *progress);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};







GType gtk_progress_get_type (void) __attribute__((__const__));
void gtk_progress_set_show_text (GtkProgress *progress,
          gboolean show_text);
void gtk_progress_set_text_alignment (GtkProgress *progress,
          gfloat x_align,
          gfloat y_align);
void gtk_progress_set_format_string (GtkProgress *progress,
          const gchar *format);
void gtk_progress_set_adjustment (GtkProgress *progress,
          GtkAdjustment *adjustment);
void gtk_progress_configure (GtkProgress *progress,
          gdouble value,
          gdouble min,
          gdouble max);
void gtk_progress_set_percentage (GtkProgress *progress,
          gdouble percentage);
void gtk_progress_set_value (GtkProgress *progress,
          gdouble value);
gdouble gtk_progress_get_value (GtkProgress *progress);
void gtk_progress_set_activity_mode (GtkProgress *progress,
          gboolean activity_mode);
gchar* gtk_progress_get_current_text (GtkProgress *progress);
gchar* gtk_progress_get_text_from_value (GtkProgress *progress,
          gdouble value);
gdouble gtk_progress_get_current_percentage (GtkProgress *progress);
gdouble gtk_progress_get_percentage_from_value (GtkProgress *progress,
         gdouble value);




# 36 "/usr/include/gtk-2.0/gtk/gtkprogressbar.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkprogressbar.h"
typedef struct _GtkProgressBar GtkProgressBar;
typedef struct _GtkProgressBarClass GtkProgressBarClass;

typedef enum
{
  GTK_PROGRESS_CONTINUOUS,
  GTK_PROGRESS_DISCRETE
} GtkProgressBarStyle;

typedef enum
{
  GTK_PROGRESS_LEFT_TO_RIGHT,
  GTK_PROGRESS_RIGHT_TO_LEFT,
  GTK_PROGRESS_BOTTOM_TO_TOP,
  GTK_PROGRESS_TOP_TO_BOTTOM
} GtkProgressBarOrientation;

struct _GtkProgressBar
{
  GtkProgress progress;

  GtkProgressBarStyle bar_style;
  GtkProgressBarOrientation orientation;

  guint blocks;
  gint in_block;

  gint activity_pos;
  guint activity_step;
  guint activity_blocks;

  gdouble pulse_fraction;

  guint activity_dir : 1;
  guint ellipsize : 3;
  guint dirty : 1;
};

struct _GtkProgressBarClass
{
  GtkProgressClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_progress_bar_get_type (void) __attribute__((__const__));
GtkWidget* gtk_progress_bar_new (void);
# 128 "/usr/include/gtk-2.0/gtk/gtkprogressbar.h"
void gtk_progress_bar_pulse (GtkProgressBar *pbar);
void gtk_progress_bar_set_text (GtkProgressBar *pbar,
                                                  const gchar *text);
void gtk_progress_bar_set_fraction (GtkProgressBar *pbar,
                                                  gdouble fraction);

void gtk_progress_bar_set_pulse_step (GtkProgressBar *pbar,
                                                  gdouble fraction);
void gtk_progress_bar_set_orientation (GtkProgressBar *pbar,
        GtkProgressBarOrientation orientation);

const gchar* gtk_progress_bar_get_text (GtkProgressBar *pbar);
gdouble gtk_progress_bar_get_fraction (GtkProgressBar *pbar);
gdouble gtk_progress_bar_get_pulse_step (GtkProgressBar *pbar);

GtkProgressBarOrientation gtk_progress_bar_get_orientation (GtkProgressBar *pbar);
void gtk_progress_bar_set_ellipsize (GtkProgressBar *pbar,
         PangoEllipsizeMode mode);
PangoEllipsizeMode gtk_progress_bar_get_ellipsize (GtkProgressBar *pbar);





GtkWidget* gtk_progress_bar_new_with_adjustment (GtkAdjustment *adjustment);
void gtk_progress_bar_set_bar_style (GtkProgressBar *pbar,
        GtkProgressBarStyle style);
void gtk_progress_bar_set_discrete_blocks (GtkProgressBar *pbar,
        guint blocks);




void gtk_progress_bar_set_activity_step (GtkProgressBar *pbar,
                                                  guint step);
void gtk_progress_bar_set_activity_blocks (GtkProgressBar *pbar,
        guint blocks);
void gtk_progress_bar_update (GtkProgressBar *pbar,
        gdouble percentage);




# 142 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkradioaction.h" 1
# 38 "/usr/include/gtk-2.0/gtk/gtkradioaction.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktoggleaction.h" 1
# 38 "/usr/include/gtk-2.0/gtk/gtktoggleaction.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkaction.h" 1
# 39 "/usr/include/gtk-2.0/gtk/gtktoggleaction.h" 2


# 49 "/usr/include/gtk-2.0/gtk/gtktoggleaction.h"
typedef struct _GtkToggleAction GtkToggleAction;
typedef struct _GtkToggleActionPrivate GtkToggleActionPrivate;
typedef struct _GtkToggleActionClass GtkToggleActionClass;

struct _GtkToggleAction
{
  GtkAction parent;



  GtkToggleActionPrivate *private_data;
};

struct _GtkToggleActionClass
{
  GtkActionClass parent_class;

  void (* toggled) (GtkToggleAction *action);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_toggle_action_get_type (void) __attribute__((__const__));
GtkToggleAction *gtk_toggle_action_new (const gchar *name,
                                                      const gchar *label,
                                                      const gchar *tooltip,
                                                      const gchar *stock_id);
void gtk_toggle_action_toggled (GtkToggleAction *action);
void gtk_toggle_action_set_active (GtkToggleAction *action,
                                                      gboolean is_active);
gboolean gtk_toggle_action_get_active (GtkToggleAction *action);
void gtk_toggle_action_set_draw_as_radio (GtkToggleAction *action,
                                                      gboolean draw_as_radio);
gboolean gtk_toggle_action_get_draw_as_radio (GtkToggleAction *action);



# 39 "/usr/include/gtk-2.0/gtk/gtkradioaction.h" 2


# 49 "/usr/include/gtk-2.0/gtk/gtkradioaction.h"
typedef struct _GtkRadioAction GtkRadioAction;
typedef struct _GtkRadioActionPrivate GtkRadioActionPrivate;
typedef struct _GtkRadioActionClass GtkRadioActionClass;

struct _GtkRadioAction
{
  GtkToggleAction parent;



  GtkRadioActionPrivate *private_data;
};

struct _GtkRadioActionClass
{
  GtkToggleActionClass parent_class;

  void (* changed) (GtkRadioAction *action, GtkRadioAction *current);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_radio_action_get_type (void) __attribute__((__const__));
GtkRadioAction *gtk_radio_action_new (const gchar *name,
                                                    const gchar *label,
                                                    const gchar *tooltip,
                                                    const gchar *stock_id,
                                                    gint value);
GSList *gtk_radio_action_get_group (GtkRadioAction *action);
void gtk_radio_action_set_group (GtkRadioAction *action,
                                                    GSList *group);
gint gtk_radio_action_get_current_value (GtkRadioAction *action);
void gtk_radio_action_set_current_value (GtkRadioAction *action,
                                                    gint current_value);


# 143 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkradiobutton.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkradiobutton.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcheckbutton.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkradiobutton.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkradiobutton.h"
typedef struct _GtkRadioButton GtkRadioButton;
typedef struct _GtkRadioButtonClass GtkRadioButtonClass;

struct _GtkRadioButton
{
  GtkCheckButton check_button;

  GSList *group;
};

struct _GtkRadioButtonClass
{
  GtkCheckButtonClass parent_class;


  void (*group_changed) (GtkRadioButton *radio_button);


  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_radio_button_get_type (void) __attribute__((__const__));

GtkWidget* gtk_radio_button_new (GSList *group);
GtkWidget* gtk_radio_button_new_from_widget (GtkRadioButton *radio_group_member);
GtkWidget* gtk_radio_button_new_with_label (GSList *group,
                                                           const gchar *label);
GtkWidget* gtk_radio_button_new_with_label_from_widget (GtkRadioButton *radio_group_member,
                                                           const gchar *label);
GtkWidget* gtk_radio_button_new_with_mnemonic (GSList *group,
                                                           const gchar *label);
GtkWidget* gtk_radio_button_new_with_mnemonic_from_widget (GtkRadioButton *radio_group_member,
                                                           const gchar *label);
GSList* gtk_radio_button_get_group (GtkRadioButton *radio_button);
void gtk_radio_button_set_group (GtkRadioButton *radio_button,
                                                           GSList *group);






# 144 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkradiomenuitem.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkradiomenuitem.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcheckmenuitem.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkradiomenuitem.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkradiomenuitem.h"
typedef struct _GtkRadioMenuItem GtkRadioMenuItem;
typedef struct _GtkRadioMenuItemClass GtkRadioMenuItemClass;

struct _GtkRadioMenuItem
{
  GtkCheckMenuItem check_menu_item;

  GSList *group;
};

struct _GtkRadioMenuItemClass
{
  GtkCheckMenuItemClass parent_class;


  void (*group_changed) (GtkRadioMenuItem *radio_menu_item);


  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_radio_menu_item_get_type (void) __attribute__((__const__));

GtkWidget* gtk_radio_menu_item_new (GSList *group);
GtkWidget* gtk_radio_menu_item_new_with_label (GSList *group,
             const gchar *label);
GtkWidget* gtk_radio_menu_item_new_with_mnemonic (GSList *group,
             const gchar *label);
GtkWidget* gtk_radio_menu_item_new_from_widget (GtkRadioMenuItem *group);
GtkWidget *gtk_radio_menu_item_new_with_mnemonic_from_widget (GtkRadioMenuItem *group,
             const gchar *label);
GtkWidget *gtk_radio_menu_item_new_with_label_from_widget (GtkRadioMenuItem *group,
             const gchar *label);
GSList* gtk_radio_menu_item_get_group (GtkRadioMenuItem *radio_menu_item);
void gtk_radio_menu_item_set_group (GtkRadioMenuItem *radio_menu_item,
             GSList *group);






# 145 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkradiotoolbutton.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkradiotoolbutton.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktoggletoolbutton.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtktoggletoolbutton.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktoolbutton.h" 1
# 31 "/usr/include/gtk-2.0/gtk/gtktoggletoolbutton.h" 2


# 41 "/usr/include/gtk-2.0/gtk/gtktoggletoolbutton.h"
typedef struct _GtkToggleToolButton GtkToggleToolButton;
typedef struct _GtkToggleToolButtonClass GtkToggleToolButtonClass;
typedef struct _GtkToggleToolButtonPrivate GtkToggleToolButtonPrivate;

struct _GtkToggleToolButton
{
  GtkToolButton parent;


  GtkToggleToolButtonPrivate *priv;
};

struct _GtkToggleToolButtonClass
{
  GtkToolButtonClass parent_class;


  void (* toggled) (GtkToggleToolButton *button);


  void (* _gtk_reserved1) (void);
  void (* _gtk_reserved2) (void);
  void (* _gtk_reserved3) (void);
  void (* _gtk_reserved4) (void);
};

GType gtk_toggle_tool_button_get_type (void) __attribute__((__const__));
GtkToolItem *gtk_toggle_tool_button_new (void);
GtkToolItem *gtk_toggle_tool_button_new_from_stock (const gchar *stock_id);

void gtk_toggle_tool_button_set_active (GtkToggleToolButton *button,
          gboolean is_active);
gboolean gtk_toggle_tool_button_get_active (GtkToggleToolButton *button);


# 31 "/usr/include/gtk-2.0/gtk/gtkradiotoolbutton.h" 2


# 41 "/usr/include/gtk-2.0/gtk/gtkradiotoolbutton.h"
typedef struct _GtkRadioToolButton GtkRadioToolButton;
typedef struct _GtkRadioToolButtonClass GtkRadioToolButtonClass;

struct _GtkRadioToolButton
{
  GtkToggleToolButton parent;
};

struct _GtkRadioToolButtonClass
{
  GtkToggleToolButtonClass parent_class;


  void (* _gtk_reserved1) (void);
  void (* _gtk_reserved2) (void);
  void (* _gtk_reserved3) (void);
  void (* _gtk_reserved4) (void);
};

GType gtk_radio_tool_button_get_type (void) __attribute__((__const__));

GtkToolItem *gtk_radio_tool_button_new (GSList *group);
GtkToolItem *gtk_radio_tool_button_new_from_stock (GSList *group,
              const gchar *stock_id);
GtkToolItem *gtk_radio_tool_button_new_from_widget (GtkRadioToolButton *group);
GtkToolItem *gtk_radio_tool_button_new_with_stock_from_widget (GtkRadioToolButton *group,
              const gchar *stock_id);
GSList * gtk_radio_tool_button_get_group (GtkRadioToolButton *button);
void gtk_radio_tool_button_set_group (GtkRadioToolButton *button,
              GSList *group);


# 146 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkrange.h" 1
# 147 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkrc.h" 1
# 148 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkrecentaction.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkrecentaction.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkaction.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkrecentaction.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkrecentmanager.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtkrecentmanager.h"

# 43 "/usr/include/gtk-2.0/gtk/gtkrecentmanager.h"
typedef struct _GtkRecentInfo GtkRecentInfo;
typedef struct _GtkRecentData GtkRecentData;
typedef struct _GtkRecentManager GtkRecentManager;
typedef struct _GtkRecentManagerClass GtkRecentManagerClass;
typedef struct _GtkRecentManagerPrivate GtkRecentManagerPrivate;
# 69 "/usr/include/gtk-2.0/gtk/gtkrecentmanager.h"
struct _GtkRecentData
{
  gchar *display_name;
  gchar *description;

  gchar *mime_type;

  gchar *app_name;
  gchar *app_exec;

  gchar **groups;

  gboolean is_private;
};

struct _GtkRecentManager
{

  GObject parent_instance;

  GtkRecentManagerPrivate *priv;
};

struct _GtkRecentManagerClass
{

  GObjectClass parent_class;

  void (*changed) (GtkRecentManager *manager);


  void (*_gtk_recent1) (void);
  void (*_gtk_recent2) (void);
  void (*_gtk_recent3) (void);
  void (*_gtk_recent4) (void);
};
# 123 "/usr/include/gtk-2.0/gtk/gtkrecentmanager.h"
typedef enum
{
  GTK_RECENT_MANAGER_ERROR_NOT_FOUND,
  GTK_RECENT_MANAGER_ERROR_INVALID_URI,
  GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING,
  GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED,
  GTK_RECENT_MANAGER_ERROR_READ,
  GTK_RECENT_MANAGER_ERROR_WRITE,
  GTK_RECENT_MANAGER_ERROR_UNKNOWN
} GtkRecentManagerError;


GQuark gtk_recent_manager_error_quark (void);


GType gtk_recent_manager_get_type (void) __attribute__((__const__));

GtkRecentManager *gtk_recent_manager_new (void);
GtkRecentManager *gtk_recent_manager_get_default (void);


GtkRecentManager *gtk_recent_manager_get_for_screen (GdkScreen *screen);
void gtk_recent_manager_set_screen (GtkRecentManager *manager,
           GdkScreen *screen);


gboolean gtk_recent_manager_add_item (GtkRecentManager *manager,
           const gchar *uri);
gboolean gtk_recent_manager_add_full (GtkRecentManager *manager,
           const gchar *uri,
           const GtkRecentData *recent_data);
gboolean gtk_recent_manager_remove_item (GtkRecentManager *manager,
           const gchar *uri,
           GError **error);
GtkRecentInfo * gtk_recent_manager_lookup_item (GtkRecentManager *manager,
           const gchar *uri,
           GError **error);
gboolean gtk_recent_manager_has_item (GtkRecentManager *manager,
           const gchar *uri);
gboolean gtk_recent_manager_move_item (GtkRecentManager *manager,
           const gchar *uri,
           const gchar *new_uri,
           GError **error);
void gtk_recent_manager_set_limit (GtkRecentManager *manager,
           gint limit);
gint gtk_recent_manager_get_limit (GtkRecentManager *manager);
GList * gtk_recent_manager_get_items (GtkRecentManager *manager);
gint gtk_recent_manager_purge_items (GtkRecentManager *manager,
           GError **error);


GType gtk_recent_info_get_type (void) __attribute__((__const__));

GtkRecentInfo * gtk_recent_info_ref (GtkRecentInfo *info);
void gtk_recent_info_unref (GtkRecentInfo *info);

const gchar *gtk_recent_info_get_uri (GtkRecentInfo *info);
const gchar *gtk_recent_info_get_display_name (GtkRecentInfo *info);
const gchar *gtk_recent_info_get_description (GtkRecentInfo *info);
const gchar *gtk_recent_info_get_mime_type (GtkRecentInfo *info);
time_t gtk_recent_info_get_added (GtkRecentInfo *info);
time_t gtk_recent_info_get_modified (GtkRecentInfo *info);
time_t gtk_recent_info_get_visited (GtkRecentInfo *info);
gboolean gtk_recent_info_get_private_hint (GtkRecentInfo *info);
gboolean gtk_recent_info_get_application_info (GtkRecentInfo *info,
           const gchar *app_name,
           gchar **app_exec,
           guint *count,
           time_t *time_);
gchar ** gtk_recent_info_get_applications (GtkRecentInfo *info,
           gsize *length) __attribute__((__malloc__));
gchar * gtk_recent_info_last_application (GtkRecentInfo *info) __attribute__((__malloc__));
gboolean gtk_recent_info_has_application (GtkRecentInfo *info,
           const gchar *app_name);
gchar ** gtk_recent_info_get_groups (GtkRecentInfo *info,
           gsize *length) __attribute__((__malloc__));
gboolean gtk_recent_info_has_group (GtkRecentInfo *info,
           const gchar *group_name);
GdkPixbuf * gtk_recent_info_get_icon (GtkRecentInfo *info,
           gint size);
gchar * gtk_recent_info_get_short_name (GtkRecentInfo *info) __attribute__((__malloc__));
gchar * gtk_recent_info_get_uri_display (GtkRecentInfo *info) __attribute__((__malloc__));
gint gtk_recent_info_get_age (GtkRecentInfo *info);
gboolean gtk_recent_info_is_local (GtkRecentInfo *info);
gboolean gtk_recent_info_exists (GtkRecentInfo *info);
gboolean gtk_recent_info_match (GtkRecentInfo *info_a,
           GtkRecentInfo *info_b);


void _gtk_recent_manager_sync (void);


# 31 "/usr/include/gtk-2.0/gtk/gtkrecentaction.h" 2


# 41 "/usr/include/gtk-2.0/gtk/gtkrecentaction.h"
typedef struct _GtkRecentAction GtkRecentAction;
typedef struct _GtkRecentActionPrivate GtkRecentActionPrivate;
typedef struct _GtkRecentActionClass GtkRecentActionClass;

struct _GtkRecentAction
{
  GtkAction parent_instance;


  GtkRecentActionPrivate *priv;
};

struct _GtkRecentActionClass
{
  GtkActionClass parent_class;
};

GType gtk_recent_action_get_type (void) __attribute__((__const__));
GtkAction *gtk_recent_action_new (const gchar *name,
                                               const gchar *label,
                                               const gchar *tooltip,
                                               const gchar *stock_id);
GtkAction *gtk_recent_action_new_for_manager (const gchar *name,
                                               const gchar *label,
                                               const gchar *tooltip,
                                               const gchar *stock_id,
                                               GtkRecentManager *manager);
gboolean gtk_recent_action_get_show_numbers (GtkRecentAction *action);
void gtk_recent_action_set_show_numbers (GtkRecentAction *action,
                                               gboolean show_numbers);


# 149 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkrecentchooser.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkrecentchooser.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkrecentchooser.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkrecentmanager.h" 1
# 31 "/usr/include/gtk-2.0/gtk/gtkrecentchooser.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkrecentfilter.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkrecentfilter.h"






typedef struct _GtkRecentFilter GtkRecentFilter;
typedef struct _GtkRecentFilterInfo GtkRecentFilterInfo;

typedef enum {
  GTK_RECENT_FILTER_URI = 1 << 0,
  GTK_RECENT_FILTER_DISPLAY_NAME = 1 << 1,
  GTK_RECENT_FILTER_MIME_TYPE = 1 << 2,
  GTK_RECENT_FILTER_APPLICATION = 1 << 3,
  GTK_RECENT_FILTER_GROUP = 1 << 4,
  GTK_RECENT_FILTER_AGE = 1 << 5
} GtkRecentFilterFlags;

typedef gboolean (*GtkRecentFilterFunc) (const GtkRecentFilterInfo *filter_info,
      gpointer user_data);

struct _GtkRecentFilterInfo
{
  GtkRecentFilterFlags contains;

  const gchar *uri;
  const gchar *display_name;
  const gchar *mime_type;
  const gchar **applications;
  const gchar **groups;

  gint age;
};

GType gtk_recent_filter_get_type (void) __attribute__((__const__));

GtkRecentFilter * gtk_recent_filter_new (void);
void gtk_recent_filter_set_name (GtkRecentFilter *filter,
        const gchar *name);
const gchar *gtk_recent_filter_get_name (GtkRecentFilter *filter);

void gtk_recent_filter_add_mime_type (GtkRecentFilter *filter,
        const gchar *mime_type);
void gtk_recent_filter_add_pattern (GtkRecentFilter *filter,
        const gchar *pattern);
void gtk_recent_filter_add_pixbuf_formats (GtkRecentFilter *filter);
void gtk_recent_filter_add_application (GtkRecentFilter *filter,
        const gchar *application);
void gtk_recent_filter_add_group (GtkRecentFilter *filter,
        const gchar *group);
void gtk_recent_filter_add_age (GtkRecentFilter *filter,
        gint days);
void gtk_recent_filter_add_custom (GtkRecentFilter *filter,
        GtkRecentFilterFlags needed,
        GtkRecentFilterFunc func,
        gpointer data,
        GDestroyNotify data_destroy);

GtkRecentFilterFlags gtk_recent_filter_get_needed (GtkRecentFilter *filter);
gboolean gtk_recent_filter_filter (GtkRecentFilter *filter,
         const GtkRecentFilterInfo *filter_info);


# 32 "/usr/include/gtk-2.0/gtk/gtkrecentchooser.h" 2


# 54 "/usr/include/gtk-2.0/gtk/gtkrecentchooser.h"
typedef enum
{
  GTK_RECENT_SORT_NONE = 0,
  GTK_RECENT_SORT_MRU,
  GTK_RECENT_SORT_LRU,
  GTK_RECENT_SORT_CUSTOM
} GtkRecentSortType;

typedef gint (*GtkRecentSortFunc) (GtkRecentInfo *a,
       GtkRecentInfo *b,
       gpointer user_data);


typedef struct _GtkRecentChooser GtkRecentChooser;
typedef struct _GtkRecentChooserIface GtkRecentChooserIface;



typedef enum
{
  GTK_RECENT_CHOOSER_ERROR_NOT_FOUND,
  GTK_RECENT_CHOOSER_ERROR_INVALID_URI
} GtkRecentChooserError;

GQuark gtk_recent_chooser_error_quark (void);


struct _GtkRecentChooserIface
{
  GTypeInterface base_iface;




  gboolean (* set_current_uri) (GtkRecentChooser *chooser,
           const gchar *uri,
           GError **error);
  gchar * (* get_current_uri) (GtkRecentChooser *chooser);
  gboolean (* select_uri) (GtkRecentChooser *chooser,
           const gchar *uri,
           GError **error);
  void (* unselect_uri) (GtkRecentChooser *chooser,
                                            const gchar *uri);
  void (* select_all) (GtkRecentChooser *chooser);
  void (* unselect_all) (GtkRecentChooser *chooser);
  GList * (* get_items) (GtkRecentChooser *chooser);
  GtkRecentManager *(* get_recent_manager) (GtkRecentChooser *chooser);
  void (* add_filter) (GtkRecentChooser *chooser,
           GtkRecentFilter *filter);
  void (* remove_filter) (GtkRecentChooser *chooser,
           GtkRecentFilter *filter);
  GSList * (* list_filters) (GtkRecentChooser *chooser);
  void (* set_sort_func) (GtkRecentChooser *chooser,
           GtkRecentSortFunc sort_func,
           gpointer data,
           GDestroyNotify destroy);




  void (* item_activated) (GtkRecentChooser *chooser);
  void (* selection_changed) (GtkRecentChooser *chooser);
};

GType gtk_recent_chooser_get_type (void) __attribute__((__const__));




void gtk_recent_chooser_set_show_private (GtkRecentChooser *chooser,
         gboolean show_private);
gboolean gtk_recent_chooser_get_show_private (GtkRecentChooser *chooser);
void gtk_recent_chooser_set_show_not_found (GtkRecentChooser *chooser,
         gboolean show_not_found);
gboolean gtk_recent_chooser_get_show_not_found (GtkRecentChooser *chooser);
void gtk_recent_chooser_set_select_multiple (GtkRecentChooser *chooser,
         gboolean select_multiple);
gboolean gtk_recent_chooser_get_select_multiple (GtkRecentChooser *chooser);
void gtk_recent_chooser_set_limit (GtkRecentChooser *chooser,
         gint limit);
gint gtk_recent_chooser_get_limit (GtkRecentChooser *chooser);
void gtk_recent_chooser_set_local_only (GtkRecentChooser *chooser,
         gboolean local_only);
gboolean gtk_recent_chooser_get_local_only (GtkRecentChooser *chooser);
void gtk_recent_chooser_set_show_tips (GtkRecentChooser *chooser,
         gboolean show_tips);
gboolean gtk_recent_chooser_get_show_tips (GtkRecentChooser *chooser);

void gtk_recent_chooser_set_show_numbers (GtkRecentChooser *chooser,
         gboolean show_numbers);
gboolean gtk_recent_chooser_get_show_numbers (GtkRecentChooser *chooser);

void gtk_recent_chooser_set_show_icons (GtkRecentChooser *chooser,
         gboolean show_icons);
gboolean gtk_recent_chooser_get_show_icons (GtkRecentChooser *chooser);
void gtk_recent_chooser_set_sort_type (GtkRecentChooser *chooser,
         GtkRecentSortType sort_type);
GtkRecentSortType gtk_recent_chooser_get_sort_type (GtkRecentChooser *chooser);
void gtk_recent_chooser_set_sort_func (GtkRecentChooser *chooser,
         GtkRecentSortFunc sort_func,
         gpointer sort_data,
         GDestroyNotify data_destroy);




gboolean gtk_recent_chooser_set_current_uri (GtkRecentChooser *chooser,
          const gchar *uri,
          GError **error);
gchar * gtk_recent_chooser_get_current_uri (GtkRecentChooser *chooser);
GtkRecentInfo *gtk_recent_chooser_get_current_item (GtkRecentChooser *chooser);
gboolean gtk_recent_chooser_select_uri (GtkRecentChooser *chooser,
          const gchar *uri,
          GError **error);
void gtk_recent_chooser_unselect_uri (GtkRecentChooser *chooser,
                 const gchar *uri);
void gtk_recent_chooser_select_all (GtkRecentChooser *chooser);
void gtk_recent_chooser_unselect_all (GtkRecentChooser *chooser);
GList * gtk_recent_chooser_get_items (GtkRecentChooser *chooser);
gchar ** gtk_recent_chooser_get_uris (GtkRecentChooser *chooser,
          gsize *length);




void gtk_recent_chooser_add_filter (GtkRecentChooser *chooser,
          GtkRecentFilter *filter);
void gtk_recent_chooser_remove_filter (GtkRecentChooser *chooser,
         GtkRecentFilter *filter);
GSList * gtk_recent_chooser_list_filters (GtkRecentChooser *chooser);
void gtk_recent_chooser_set_filter (GtkRecentChooser *chooser,
         GtkRecentFilter *filter);
GtkRecentFilter *gtk_recent_chooser_get_filter (GtkRecentChooser *chooser);



# 150 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkrecentchooserdialog.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkrecentchooserdialog.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkdialog.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkrecentchooserdialog.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkrecentchooser.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkrecentchooserdialog.h" 2


# 40 "/usr/include/gtk-2.0/gtk/gtkrecentchooserdialog.h"
typedef struct _GtkRecentChooserDialog GtkRecentChooserDialog;
typedef struct _GtkRecentChooserDialogClass GtkRecentChooserDialogClass;

typedef struct _GtkRecentChooserDialogPrivate GtkRecentChooserDialogPrivate;


struct _GtkRecentChooserDialog
{

  GtkDialog parent_instance;

  GtkRecentChooserDialogPrivate *priv;
};

struct _GtkRecentChooserDialogClass
{
  GtkDialogClass parent_class;
};


GType gtk_recent_chooser_dialog_get_type (void) __attribute__((__const__));

GtkWidget *gtk_recent_chooser_dialog_new (const gchar *title,
                   GtkWindow *parent,
                   const gchar *first_button_text,
                   ...) __attribute__((__sentinel__));
GtkWidget *gtk_recent_chooser_dialog_new_for_manager (const gchar *title,
            GtkWindow *parent,
            GtkRecentManager *manager,
            const gchar *first_button_text,
            ...) __attribute__((__sentinel__));


# 151 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkrecentchoosermenu.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkrecentchoosermenu.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkmenu.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkrecentchoosermenu.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkrecentchooser.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkrecentchoosermenu.h" 2


# 40 "/usr/include/gtk-2.0/gtk/gtkrecentchoosermenu.h"
typedef struct _GtkRecentChooserMenu GtkRecentChooserMenu;
typedef struct _GtkRecentChooserMenuClass GtkRecentChooserMenuClass;
typedef struct _GtkRecentChooserMenuPrivate GtkRecentChooserMenuPrivate;

struct _GtkRecentChooserMenu
{

  GtkMenu parent_instance;

  GtkRecentChooserMenuPrivate *priv;
};

struct _GtkRecentChooserMenuClass
{
  GtkMenuClass parent_class;


  void (* gtk_recent1) (void);
  void (* gtk_recent2) (void);
  void (* gtk_recent3) (void);
  void (* gtk_recent4) (void);
};

GType gtk_recent_chooser_menu_get_type (void) __attribute__((__const__));

GtkWidget *gtk_recent_chooser_menu_new (void);
GtkWidget *gtk_recent_chooser_menu_new_for_manager (GtkRecentManager *manager);

gboolean gtk_recent_chooser_menu_get_show_numbers (GtkRecentChooserMenu *menu);
void gtk_recent_chooser_menu_set_show_numbers (GtkRecentChooserMenu *menu,
           gboolean show_numbers);


# 152 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkrecentchooserwidget.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtkrecentchooserwidget.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkrecentchooser.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkrecentchooserwidget.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkvbox.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkrecentchooserwidget.h" 2


# 40 "/usr/include/gtk-2.0/gtk/gtkrecentchooserwidget.h"
typedef struct _GtkRecentChooserWidget GtkRecentChooserWidget;
typedef struct _GtkRecentChooserWidgetClass GtkRecentChooserWidgetClass;

typedef struct _GtkRecentChooserWidgetPrivate GtkRecentChooserWidgetPrivate;

struct _GtkRecentChooserWidget
{

  GtkVBox parent_instance;

  GtkRecentChooserWidgetPrivate *priv;
};

struct _GtkRecentChooserWidgetClass
{
  GtkVBoxClass parent_class;
};

GType gtk_recent_chooser_widget_get_type (void) __attribute__((__const__));
GtkWidget *gtk_recent_chooser_widget_new (void);
GtkWidget *gtk_recent_chooser_widget_new_for_manager (GtkRecentManager *manager);


# 153 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkrecentfilter.h" 1
# 154 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkrecentmanager.h" 1
# 155 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkruler.h" 1
# 156 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkscale.h" 1
# 157 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkscalebutton.h" 1
# 43 "/usr/include/gtk-2.0/gtk/gtkscalebutton.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkbutton.h" 1
# 44 "/usr/include/gtk-2.0/gtk/gtkscalebutton.h" 2


# 54 "/usr/include/gtk-2.0/gtk/gtkscalebutton.h"
typedef struct _GtkScaleButton GtkScaleButton;
typedef struct _GtkScaleButtonClass GtkScaleButtonClass;
typedef struct _GtkScaleButtonPrivate GtkScaleButtonPrivate;

struct _GtkScaleButton
{
  GtkButton parent;

  GtkWidget *plus_button;
  GtkWidget *minus_button;


  GtkScaleButtonPrivate *priv;
};

struct _GtkScaleButtonClass
{
  GtkButtonClass parent_class;


  void (* value_changed) (GtkScaleButton *button,
                           gdouble value);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_scale_button_get_type (void) __attribute__((__const__));
GtkWidget * gtk_scale_button_new (GtkIconSize size,
                                                    gdouble min,
                                                    gdouble max,
                                                    gdouble step,
                                                    const gchar **icons);
void gtk_scale_button_set_icons (GtkScaleButton *button,
                                                    const gchar **icons);
gdouble gtk_scale_button_get_value (GtkScaleButton *button);
void gtk_scale_button_set_value (GtkScaleButton *button,
                                                    gdouble value);
GtkAdjustment * gtk_scale_button_get_adjustment (GtkScaleButton *button);
void gtk_scale_button_set_adjustment (GtkScaleButton *button,
                                                    GtkAdjustment *adjustment);
GtkWidget * gtk_scale_button_get_plus_button (GtkScaleButton *button);
GtkWidget * gtk_scale_button_get_minus_button (GtkScaleButton *button);
GtkWidget * gtk_scale_button_get_popup (GtkScaleButton *button);



GtkOrientation gtk_scale_button_get_orientation (GtkScaleButton *button);
void gtk_scale_button_set_orientation (GtkScaleButton *button,
                                                    GtkOrientation orientation);




# 158 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkscrollbar.h" 1
# 159 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkhscrollbar.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkvscrollbar.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkvscrollbar.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkscrollbar.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkvscrollbar.h" 2



# 49 "/usr/include/gtk-2.0/gtk/gtkvscrollbar.h"
typedef struct _GtkVScrollbar GtkVScrollbar;
typedef struct _GtkVScrollbarClass GtkVScrollbarClass;

struct _GtkVScrollbar
{
  GtkScrollbar scrollbar;
};

struct _GtkVScrollbarClass
{
  GtkScrollbarClass parent_class;
};


GType gtk_vscrollbar_get_type (void) __attribute__((__const__));
GtkWidget* gtk_vscrollbar_new (GtkAdjustment *adjustment);



# 37 "/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkviewport.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkviewport.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkadjustment.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkviewport.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkbin.h" 1
# 37 "/usr/include/gtk-2.0/gtk/gtkviewport.h" 2



# 50 "/usr/include/gtk-2.0/gtk/gtkviewport.h"
typedef struct _GtkViewport GtkViewport;
typedef struct _GtkViewportClass GtkViewportClass;

struct _GtkViewport
{
  GtkBin bin;

  GtkShadowType shadow_type;
  GdkWindow *view_window;
  GdkWindow *bin_window;
  GtkAdjustment *hadjustment;
  GtkAdjustment *vadjustment;
};

struct _GtkViewportClass
{
  GtkBinClass parent_class;

  void (*set_scroll_adjustments) (GtkViewport *viewport,
      GtkAdjustment *hadjustment,
      GtkAdjustment *vadjustment);
};


GType gtk_viewport_get_type (void) __attribute__((__const__));
GtkWidget* gtk_viewport_new (GtkAdjustment *hadjustment,
          GtkAdjustment *vadjustment);
GtkAdjustment* gtk_viewport_get_hadjustment (GtkViewport *viewport);
GtkAdjustment* gtk_viewport_get_vadjustment (GtkViewport *viewport);
void gtk_viewport_set_hadjustment (GtkViewport *viewport,
          GtkAdjustment *adjustment);
void gtk_viewport_set_vadjustment (GtkViewport *viewport,
          GtkAdjustment *adjustment);
void gtk_viewport_set_shadow_type (GtkViewport *viewport,
          GtkShadowType type);
GtkShadowType gtk_viewport_get_shadow_type (GtkViewport *viewport);



# 38 "/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h" 2



# 52 "/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h"
typedef struct _GtkScrolledWindow GtkScrolledWindow;
typedef struct _GtkScrolledWindowClass GtkScrolledWindowClass;

struct _GtkScrolledWindow
{
  GtkBin container;


  GtkWidget *hscrollbar;
  GtkWidget *vscrollbar;


  guint hscrollbar_policy : 2;
  guint vscrollbar_policy : 2;
  guint hscrollbar_visible : 1;
  guint vscrollbar_visible : 1;
  guint window_placement : 2;
  guint focus_out : 1;

  guint16 shadow_type;
};

struct _GtkScrolledWindowClass
{
  GtkBinClass parent_class;

  gint scrollbar_spacing;
# 87 "/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h"
  gboolean (*scroll_child) (GtkScrolledWindow *scrolled_window,
         GtkScrollType scroll,
       gboolean horizontal);

  void (* move_focus_out) (GtkScrolledWindow *scrolled_window,
      GtkDirectionType direction);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_scrolled_window_get_type (void) __attribute__((__const__));
GtkWidget* gtk_scrolled_window_new (GtkAdjustment *hadjustment,
            GtkAdjustment *vadjustment);
void gtk_scrolled_window_set_hadjustment (GtkScrolledWindow *scrolled_window,
            GtkAdjustment *hadjustment);
void gtk_scrolled_window_set_vadjustment (GtkScrolledWindow *scrolled_window,
            GtkAdjustment *vadjustment);
GtkAdjustment* gtk_scrolled_window_get_hadjustment (GtkScrolledWindow *scrolled_window);
GtkAdjustment* gtk_scrolled_window_get_vadjustment (GtkScrolledWindow *scrolled_window);
GtkWidget* gtk_scrolled_window_get_hscrollbar (GtkScrolledWindow *scrolled_window);
GtkWidget* gtk_scrolled_window_get_vscrollbar (GtkScrolledWindow *scrolled_window);
void gtk_scrolled_window_set_policy (GtkScrolledWindow *scrolled_window,
            GtkPolicyType hscrollbar_policy,
            GtkPolicyType vscrollbar_policy);
void gtk_scrolled_window_get_policy (GtkScrolledWindow *scrolled_window,
            GtkPolicyType *hscrollbar_policy,
            GtkPolicyType *vscrollbar_policy);
void gtk_scrolled_window_set_placement (GtkScrolledWindow *scrolled_window,
            GtkCornerType window_placement);
void gtk_scrolled_window_unset_placement (GtkScrolledWindow *scrolled_window);

GtkCornerType gtk_scrolled_window_get_placement (GtkScrolledWindow *scrolled_window);
void gtk_scrolled_window_set_shadow_type (GtkScrolledWindow *scrolled_window,
            GtkShadowType type);
GtkShadowType gtk_scrolled_window_get_shadow_type (GtkScrolledWindow *scrolled_window);
void gtk_scrolled_window_add_with_viewport (GtkScrolledWindow *scrolled_window,
            GtkWidget *child);

gint _gtk_scrolled_window_get_scrollbar_spacing (GtkScrolledWindow *scrolled_window);



# 160 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkselection.h" 1
# 161 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkseparator.h" 1
# 162 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkseparatormenuitem.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkseparatormenuitem.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkmenuitem.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkseparatormenuitem.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtkseparatormenuitem.h"
typedef struct _GtkSeparatorMenuItem GtkSeparatorMenuItem;
typedef struct _GtkSeparatorMenuItemClass GtkSeparatorMenuItemClass;

struct _GtkSeparatorMenuItem
{
  GtkMenuItem menu_item;
};

struct _GtkSeparatorMenuItemClass
{
  GtkMenuItemClass parent_class;
};


GType gtk_separator_menu_item_get_type (void) __attribute__((__const__));
GtkWidget* gtk_separator_menu_item_new (void);



# 163 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkseparatortoolitem.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkseparatortoolitem.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktoolitem.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkseparatortoolitem.h" 2


# 40 "/usr/include/gtk-2.0/gtk/gtkseparatortoolitem.h"
typedef struct _GtkSeparatorToolItem GtkSeparatorToolItem;
typedef struct _GtkSeparatorToolItemClass GtkSeparatorToolItemClass;
typedef struct _GtkSeparatorToolItemPrivate GtkSeparatorToolItemPrivate;

struct _GtkSeparatorToolItem
{
  GtkToolItem parent;


  GtkSeparatorToolItemPrivate *priv;
};

struct _GtkSeparatorToolItemClass
{
  GtkToolItemClass parent_class;


  void (* _gtk_reserved1) (void);
  void (* _gtk_reserved2) (void);
  void (* _gtk_reserved3) (void);
  void (* _gtk_reserved4) (void);
};

GType gtk_separator_tool_item_get_type (void) __attribute__((__const__));
GtkToolItem *gtk_separator_tool_item_new (void);

gboolean gtk_separator_tool_item_get_draw (GtkSeparatorToolItem *item);
void gtk_separator_tool_item_set_draw (GtkSeparatorToolItem *item,
            gboolean draw);


# 164 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtksettings.h" 1
# 165 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkshow.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkshow.h"


gboolean gtk_show_uri (GdkScreen *screen,
                        const gchar *uri,
                        guint32 timestamp,
                        GError **error);


# 166 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtksizegroup.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtksizegroup.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtksizegroup.h" 2


# 40 "/usr/include/gtk-2.0/gtk/gtksizegroup.h"
typedef struct _GtkSizeGroup GtkSizeGroup;
typedef struct _GtkSizeGroupClass GtkSizeGroupClass;

struct _GtkSizeGroup
{
  GObject parent_instance;


  GSList *widgets;

  guint8 mode;

  guint have_width : 1;
  guint have_height : 1;
  guint ignore_hidden : 1;

  GtkRequisition requisition;
};

struct _GtkSizeGroupClass
{
  GObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
# 80 "/usr/include/gtk-2.0/gtk/gtksizegroup.h"
typedef enum {
  GTK_SIZE_GROUP_NONE,
  GTK_SIZE_GROUP_HORIZONTAL,
  GTK_SIZE_GROUP_VERTICAL,
  GTK_SIZE_GROUP_BOTH
} GtkSizeGroupMode;

GType gtk_size_group_get_type (void) __attribute__((__const__));

GtkSizeGroup * gtk_size_group_new (GtkSizeGroupMode mode);
void gtk_size_group_set_mode (GtkSizeGroup *size_group,
            GtkSizeGroupMode mode);
GtkSizeGroupMode gtk_size_group_get_mode (GtkSizeGroup *size_group);
void gtk_size_group_set_ignore_hidden (GtkSizeGroup *size_group,
         gboolean ignore_hidden);
gboolean gtk_size_group_get_ignore_hidden (GtkSizeGroup *size_group);
void gtk_size_group_add_widget (GtkSizeGroup *size_group,
            GtkWidget *widget);
void gtk_size_group_remove_widget (GtkSizeGroup *size_group,
            GtkWidget *widget);
GSList * gtk_size_group_get_widgets (GtkSizeGroup *size_group);


void _gtk_size_group_get_child_requisition (GtkWidget *widget,
         GtkRequisition *requisition);
void _gtk_size_group_compute_requisition (GtkWidget *widget,
         GtkRequisition *requisition);
void _gtk_size_group_queue_resize (GtkWidget *widget);


# 167 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtksocket.h" 1
# 168 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkspinbutton.h" 1
# 38 "/usr/include/gtk-2.0/gtk/gtkspinbutton.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkentry.h" 1
# 39 "/usr/include/gtk-2.0/gtk/gtkspinbutton.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkadjustment.h" 1
# 40 "/usr/include/gtk-2.0/gtk/gtkspinbutton.h" 2



# 53 "/usr/include/gtk-2.0/gtk/gtkspinbutton.h"
typedef enum
{
  GTK_UPDATE_ALWAYS,
  GTK_UPDATE_IF_VALID
} GtkSpinButtonUpdatePolicy;

typedef enum
{
  GTK_SPIN_STEP_FORWARD,
  GTK_SPIN_STEP_BACKWARD,
  GTK_SPIN_PAGE_FORWARD,
  GTK_SPIN_PAGE_BACKWARD,
  GTK_SPIN_HOME,
  GTK_SPIN_END,
  GTK_SPIN_USER_DEFINED
} GtkSpinType;


typedef struct _GtkSpinButton GtkSpinButton;
typedef struct _GtkSpinButtonClass GtkSpinButtonClass;


struct _GtkSpinButton
{
  GtkEntry entry;

  GtkAdjustment *adjustment;

  GdkWindow *panel;

  guint32 timer;

  gdouble climb_rate;
  gdouble timer_step;

  GtkSpinButtonUpdatePolicy update_policy;

  guint in_child : 2;
  guint click_child : 2;
  guint button : 2;
  guint need_timer : 1;
  guint timer_calls : 3;
  guint digits : 10;
  guint numeric : 1;
  guint wrap : 1;
  guint snap_to_ticks : 1;
};

struct _GtkSpinButtonClass
{
  GtkEntryClass parent_class;

  gint (*input) (GtkSpinButton *spin_button,
    gdouble *new_value);
  gint (*output) (GtkSpinButton *spin_button);
  void (*value_changed) (GtkSpinButton *spin_button);


  void (*change_value) (GtkSpinButton *spin_button,
   GtkScrollType scroll);

  void (*wrapped) (GtkSpinButton *spin_button);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
};


GType gtk_spin_button_get_type (void) __attribute__((__const__));

void gtk_spin_button_configure (GtkSpinButton *spin_button,
          GtkAdjustment *adjustment,
          gdouble climb_rate,
          guint digits);

GtkWidget* gtk_spin_button_new (GtkAdjustment *adjustment,
          gdouble climb_rate,
          guint digits);

GtkWidget* gtk_spin_button_new_with_range (gdouble min,
          gdouble max,
          gdouble step);

void gtk_spin_button_set_adjustment (GtkSpinButton *spin_button,
          GtkAdjustment *adjustment);

GtkAdjustment* gtk_spin_button_get_adjustment (GtkSpinButton *spin_button);

void gtk_spin_button_set_digits (GtkSpinButton *spin_button,
          guint digits);
guint gtk_spin_button_get_digits (GtkSpinButton *spin_button);

void gtk_spin_button_set_increments (GtkSpinButton *spin_button,
          gdouble step,
          gdouble page);
void gtk_spin_button_get_increments (GtkSpinButton *spin_button,
          gdouble *step,
          gdouble *page);

void gtk_spin_button_set_range (GtkSpinButton *spin_button,
          gdouble min,
          gdouble max);
void gtk_spin_button_get_range (GtkSpinButton *spin_button,
          gdouble *min,
          gdouble *max);

gdouble gtk_spin_button_get_value (GtkSpinButton *spin_button);

gint gtk_spin_button_get_value_as_int (GtkSpinButton *spin_button);

void gtk_spin_button_set_value (GtkSpinButton *spin_button,
          gdouble value);

void gtk_spin_button_set_update_policy (GtkSpinButton *spin_button,
          GtkSpinButtonUpdatePolicy policy);
GtkSpinButtonUpdatePolicy gtk_spin_button_get_update_policy (GtkSpinButton *spin_button);

void gtk_spin_button_set_numeric (GtkSpinButton *spin_button,
          gboolean numeric);
gboolean gtk_spin_button_get_numeric (GtkSpinButton *spin_button);

void gtk_spin_button_spin (GtkSpinButton *spin_button,
          GtkSpinType direction,
          gdouble increment);

void gtk_spin_button_set_wrap (GtkSpinButton *spin_button,
          gboolean wrap);
gboolean gtk_spin_button_get_wrap (GtkSpinButton *spin_button);

void gtk_spin_button_set_snap_to_ticks (GtkSpinButton *spin_button,
          gboolean snap_to_ticks);
gboolean gtk_spin_button_get_snap_to_ticks (GtkSpinButton *spin_button);
void gtk_spin_button_update (GtkSpinButton *spin_button);







# 169 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkstatusbar.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkstatusbar.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkhbox.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkstatusbar.h" 2


# 47 "/usr/include/gtk-2.0/gtk/gtkstatusbar.h"
typedef struct _GtkStatusbar GtkStatusbar;
typedef struct _GtkStatusbarClass GtkStatusbarClass;

struct _GtkStatusbar
{
  GtkHBox parent_widget;

  GtkWidget *frame;
  GtkWidget *label;

  GSList *messages;
  GSList *keys;

  guint seq_context_id;
  guint seq_message_id;

  GdkWindow *grip_window;

  guint has_resize_grip : 1;
};

struct _GtkStatusbarClass
{
  GtkHBoxClass parent_class;

  gpointer reserved;

  void (*text_pushed) (GtkStatusbar *statusbar,
    guint context_id,
    const gchar *text);
  void (*text_popped) (GtkStatusbar *statusbar,
    guint context_id,
    const gchar *text);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_statusbar_get_type (void) __attribute__((__const__));
GtkWidget* gtk_statusbar_new (void);



guint gtk_statusbar_get_context_id (GtkStatusbar *statusbar,
      const gchar *context_description);

guint gtk_statusbar_push (GtkStatusbar *statusbar,
      guint context_id,
      const gchar *text);
void gtk_statusbar_pop (GtkStatusbar *statusbar,
      guint context_id);
void gtk_statusbar_remove (GtkStatusbar *statusbar,
      guint context_id,
      guint message_id);

void gtk_statusbar_set_has_resize_grip (GtkStatusbar *statusbar,
         gboolean setting);
gboolean gtk_statusbar_get_has_resize_grip (GtkStatusbar *statusbar);


# 170 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkstatusicon.h" 1
# 31 "/usr/include/gtk-2.0/gtk/gtkstatusicon.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkimage.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtkstatusicon.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkmenu.h" 1
# 33 "/usr/include/gtk-2.0/gtk/gtkstatusicon.h" 2


# 43 "/usr/include/gtk-2.0/gtk/gtkstatusicon.h"
typedef struct _GtkStatusIcon GtkStatusIcon;
typedef struct _GtkStatusIconClass GtkStatusIconClass;
typedef struct _GtkStatusIconPrivate GtkStatusIconPrivate;

struct _GtkStatusIcon
{
  GObject parent_instance;

  GtkStatusIconPrivate *priv;
};

struct _GtkStatusIconClass
{
  GObjectClass parent_class;

  void (* activate) (GtkStatusIcon *status_icon);
  void (* popup_menu) (GtkStatusIcon *status_icon,
                                     guint button,
                                     guint32 activate_time);
  gboolean (* size_changed) (GtkStatusIcon *status_icon,
                                     gint size);
  gboolean (* button_press_event) (GtkStatusIcon *status_icon,
                                     GdkEventButton *event);
  gboolean (* button_release_event) (GtkStatusIcon *status_icon,
                                     GdkEventButton *event);
  gboolean (* scroll_event) (GtkStatusIcon *status_icon,
                                     GdkEventScroll *event);
  gboolean (* query_tooltip) (GtkStatusIcon *status_icon,
                                     gint x,
                                     gint y,
                                     gboolean keyboard_mode,
                                     GtkTooltip *tooltip);

  void (*__gtk_reserved1);
  void (*__gtk_reserved2);
};

GType gtk_status_icon_get_type (void) __attribute__((__const__));

GtkStatusIcon *gtk_status_icon_new (void);
GtkStatusIcon *gtk_status_icon_new_from_pixbuf (GdkPixbuf *pixbuf);
GtkStatusIcon *gtk_status_icon_new_from_file (const gchar *filename);
GtkStatusIcon *gtk_status_icon_new_from_stock (const gchar *stock_id);
GtkStatusIcon *gtk_status_icon_new_from_icon_name (const gchar *icon_name);
GtkStatusIcon *gtk_status_icon_new_from_gicon (GIcon *icon);

void gtk_status_icon_set_from_pixbuf (GtkStatusIcon *status_icon,
         GdkPixbuf *pixbuf);
void gtk_status_icon_set_from_file (GtkStatusIcon *status_icon,
         const gchar *filename);
void gtk_status_icon_set_from_stock (GtkStatusIcon *status_icon,
         const gchar *stock_id);
void gtk_status_icon_set_from_icon_name (GtkStatusIcon *status_icon,
         const gchar *icon_name);
void gtk_status_icon_set_from_gicon (GtkStatusIcon *status_icon,
                                                          GIcon *icon);

GtkImageType gtk_status_icon_get_storage_type (GtkStatusIcon *status_icon);

GdkPixbuf *gtk_status_icon_get_pixbuf (GtkStatusIcon *status_icon);
const gchar *gtk_status_icon_get_stock (GtkStatusIcon *status_icon);
const gchar *gtk_status_icon_get_icon_name (GtkStatusIcon *status_icon);
GIcon *gtk_status_icon_get_gicon (GtkStatusIcon *status_icon);

gint gtk_status_icon_get_size (GtkStatusIcon *status_icon);

void gtk_status_icon_set_screen (GtkStatusIcon *status_icon,
                                                          GdkScreen *screen);
GdkScreen *gtk_status_icon_get_screen (GtkStatusIcon *status_icon);


void gtk_status_icon_set_tooltip (GtkStatusIcon *status_icon,
                                                          const gchar *tooltip_text);

void gtk_status_icon_set_has_tooltip (GtkStatusIcon *status_icon,
                                                          gboolean has_tooltip);
void gtk_status_icon_set_tooltip_text (GtkStatusIcon *status_icon,
                                                          const gchar *text);
void gtk_status_icon_set_tooltip_markup (GtkStatusIcon *status_icon,
                                                          const gchar *markup);
void gtk_status_icon_set_visible (GtkStatusIcon *status_icon,
         gboolean visible);
gboolean gtk_status_icon_get_visible (GtkStatusIcon *status_icon);

void gtk_status_icon_set_blinking (GtkStatusIcon *status_icon,
         gboolean blinking);
gboolean gtk_status_icon_get_blinking (GtkStatusIcon *status_icon);

gboolean gtk_status_icon_is_embedded (GtkStatusIcon *status_icon);

void gtk_status_icon_position_menu (GtkMenu *menu,
         gint *x,
         gint *y,
         gboolean *push_in,
         gpointer user_data);
gboolean gtk_status_icon_get_geometry (GtkStatusIcon *status_icon,
         GdkScreen **screen,
         GdkRectangle *area,
         GtkOrientation *orientation);
gboolean gtk_status_icon_get_has_tooltip (GtkStatusIcon *status_icon);
gchar *gtk_status_icon_get_tooltip_text (GtkStatusIcon *status_icon);
gchar *gtk_status_icon_get_tooltip_markup (GtkStatusIcon *status_icon);

guint32 gtk_status_icon_get_x11_window_id (GtkStatusIcon *status_icon);


# 171 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkstock.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkstock.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktypeutils.h" 1
# 37 "/usr/include/gtk-2.0/gtk/gtkstock.h" 2



typedef struct _GtkStockItem GtkStockItem;

struct _GtkStockItem
{
  gchar *stock_id;
  gchar *label;
  GdkModifierType modifier;
  guint keyval;
  gchar *translation_domain;
};

void gtk_stock_add (const GtkStockItem *items,
                               guint n_items);
void gtk_stock_add_static (const GtkStockItem *items,
                               guint n_items);
gboolean gtk_stock_lookup (const gchar *stock_id,
                               GtkStockItem *item);




GSList* gtk_stock_list_ids (void);

GtkStockItem *gtk_stock_item_copy (const GtkStockItem *item);
void gtk_stock_item_free (GtkStockItem *item);

void gtk_stock_set_translate_func (const gchar *domain,
         GtkTranslateFunc func,
         gpointer data,
         GDestroyNotify notify);
# 181 "/usr/include/gtk-2.0/gtk/gtkstock.h"

# 172 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkstyle.h" 1
# 173 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktable.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtktable.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcontainer.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtktable.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtktable.h"
typedef struct _GtkTable GtkTable;
typedef struct _GtkTableClass GtkTableClass;
typedef struct _GtkTableChild GtkTableChild;
typedef struct _GtkTableRowCol GtkTableRowCol;

struct _GtkTable
{
  GtkContainer container;

  GList *children;
  GtkTableRowCol *rows;
  GtkTableRowCol *cols;
  guint16 nrows;
  guint16 ncols;
  guint16 column_spacing;
  guint16 row_spacing;
  guint homogeneous : 1;
};

struct _GtkTableClass
{
  GtkContainerClass parent_class;
};

struct _GtkTableChild
{
  GtkWidget *widget;
  guint16 left_attach;
  guint16 right_attach;
  guint16 top_attach;
  guint16 bottom_attach;
  guint16 xpadding;
  guint16 ypadding;
  guint xexpand : 1;
  guint yexpand : 1;
  guint xshrink : 1;
  guint yshrink : 1;
  guint xfill : 1;
  guint yfill : 1;
};

struct _GtkTableRowCol
{
  guint16 requisition;
  guint16 allocation;
  guint16 spacing;
  guint need_expand : 1;
  guint need_shrink : 1;
  guint expand : 1;
  guint shrink : 1;
  guint empty : 1;
};


GType gtk_table_get_type (void) __attribute__((__const__));
GtkWidget* gtk_table_new (guint rows,
           guint columns,
           gboolean homogeneous);
void gtk_table_resize (GtkTable *table,
           guint rows,
           guint columns);
void gtk_table_attach (GtkTable *table,
           GtkWidget *child,
           guint left_attach,
           guint right_attach,
           guint top_attach,
           guint bottom_attach,
           GtkAttachOptions xoptions,
           GtkAttachOptions yoptions,
           guint xpadding,
           guint ypadding);
void gtk_table_attach_defaults (GtkTable *table,
           GtkWidget *widget,
           guint left_attach,
           guint right_attach,
           guint top_attach,
           guint bottom_attach);
void gtk_table_set_row_spacing (GtkTable *table,
           guint row,
           guint spacing);
guint gtk_table_get_row_spacing (GtkTable *table,
           guint row);
void gtk_table_set_col_spacing (GtkTable *table,
           guint column,
           guint spacing);
guint gtk_table_get_col_spacing (GtkTable *table,
           guint column);
void gtk_table_set_row_spacings (GtkTable *table,
           guint spacing);
guint gtk_table_get_default_row_spacing (GtkTable *table);
void gtk_table_set_col_spacings (GtkTable *table,
           guint spacing);
guint gtk_table_get_default_col_spacing (GtkTable *table);
void gtk_table_set_homogeneous (GtkTable *table,
           gboolean homogeneous);
gboolean gtk_table_get_homogeneous (GtkTable *table);



# 174 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktearoffmenuitem.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtktearoffmenuitem.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkmenuitem.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtktearoffmenuitem.h" 2



# 48 "/usr/include/gtk-2.0/gtk/gtktearoffmenuitem.h"
typedef struct _GtkTearoffMenuItem GtkTearoffMenuItem;
typedef struct _GtkTearoffMenuItemClass GtkTearoffMenuItemClass;

struct _GtkTearoffMenuItem
{
  GtkMenuItem menu_item;

  guint torn_off : 1;
};

struct _GtkTearoffMenuItemClass
{
  GtkMenuItemClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_tearoff_menu_item_get_type (void) __attribute__((__const__));
GtkWidget* gtk_tearoff_menu_item_new (void);


# 175 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktextbuffer.h" 1
# 34 "/usr/include/gtk-2.0/gtk/gtktextbuffer.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtktextbuffer.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkclipboard.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtktextbuffer.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktexttagtable.h" 1
# 34 "/usr/include/gtk-2.0/gtk/gtktexttagtable.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktexttag.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtktexttagtable.h" 2



typedef void (* GtkTextTagTableForeach) (GtkTextTag *tag, gpointer data);
# 47 "/usr/include/gtk-2.0/gtk/gtktexttagtable.h"
typedef struct _GtkTextTagTableClass GtkTextTagTableClass;

struct _GtkTextTagTable
{
  GObject parent_instance;

  GHashTable *hash;
  GSList *anonymous;
  gint anon_count;

  GSList *buffers;
};

struct _GtkTextTagTableClass
{
  GObjectClass parent_class;

  void (* tag_changed) (GtkTextTagTable *table, GtkTextTag *tag, gboolean size_changed);
  void (* tag_added) (GtkTextTagTable *table, GtkTextTag *tag);
  void (* tag_removed) (GtkTextTagTable *table, GtkTextTag *tag);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_text_tag_table_get_type (void) __attribute__((__const__));

GtkTextTagTable *gtk_text_tag_table_new (void);
void gtk_text_tag_table_add (GtkTextTagTable *table,
                                              GtkTextTag *tag);
void gtk_text_tag_table_remove (GtkTextTagTable *table,
                                              GtkTextTag *tag);
GtkTextTag *gtk_text_tag_table_lookup (GtkTextTagTable *table,
                                              const gchar *name);
void gtk_text_tag_table_foreach (GtkTextTagTable *table,
                                              GtkTextTagTableForeach func,
                                              gpointer data);
gint gtk_text_tag_table_get_size (GtkTextTagTable *table);





void _gtk_text_tag_table_add_buffer (GtkTextTagTable *table,
                                        gpointer buffer);
void _gtk_text_tag_table_remove_buffer (GtkTextTagTable *table,
                                        gpointer buffer);


# 37 "/usr/include/gtk-2.0/gtk/gtktextbuffer.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktextiter.h" 1
# 38 "/usr/include/gtk-2.0/gtk/gtktextbuffer.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktextmark.h" 1
# 57 "/usr/include/gtk-2.0/gtk/gtktextmark.h"




typedef struct _GtkTextMark GtkTextMark;
typedef struct _GtkTextMarkClass GtkTextMarkClass;
# 71 "/usr/include/gtk-2.0/gtk/gtktextmark.h"
struct _GtkTextMark
{
  GObject parent_instance;

  gpointer segment;
};

struct _GtkTextMarkClass
{
  GObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_text_mark_get_type (void) __attribute__((__const__));

void gtk_text_mark_set_visible (GtkTextMark *mark,
                                          gboolean setting);
gboolean gtk_text_mark_get_visible (GtkTextMark *mark);

GtkTextMark *gtk_text_mark_new (const gchar *name,
            gboolean left_gravity);
const gchar* gtk_text_mark_get_name (GtkTextMark *mark);
gboolean gtk_text_mark_get_deleted (GtkTextMark *mark);
GtkTextBuffer* gtk_text_mark_get_buffer (GtkTextMark *mark);
gboolean gtk_text_mark_get_left_gravity (GtkTextMark *mark);


# 39 "/usr/include/gtk-2.0/gtk/gtktextbuffer.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktextchild.h" 1
# 40 "/usr/include/gtk-2.0/gtk/gtktextbuffer.h" 2


# 54 "/usr/include/gtk-2.0/gtk/gtktextbuffer.h"
typedef enum
{
  GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS = - 1,
  GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT = - 2,
  GTK_TEXT_BUFFER_TARGET_INFO_TEXT = - 3
} GtkTextBufferTargetInfo;

typedef struct _GtkTextBTree GtkTextBTree;

typedef struct _GtkTextLogAttrCache GtkTextLogAttrCache;
# 72 "/usr/include/gtk-2.0/gtk/gtktextbuffer.h"
typedef struct _GtkTextBufferClass GtkTextBufferClass;

struct _GtkTextBuffer
{
  GObject parent_instance;

  GtkTextTagTable *tag_table;
  GtkTextBTree *btree;

  GSList *clipboard_contents_buffers;
  GSList *selection_clipboards;

  GtkTextLogAttrCache *log_attr_cache;

  guint user_action_count;


  guint modified : 1;

  guint has_selection : 1;
};

struct _GtkTextBufferClass
{
  GObjectClass parent_class;

  void (* insert_text) (GtkTextBuffer *buffer,
                            GtkTextIter *pos,
                            const gchar *text,
                            gint length);

  void (* insert_pixbuf) (GtkTextBuffer *buffer,
                            GtkTextIter *pos,
                            GdkPixbuf *pixbuf);

  void (* insert_child_anchor) (GtkTextBuffer *buffer,
                                  GtkTextIter *pos,
                                  GtkTextChildAnchor *anchor);

  void (* delete_range) (GtkTextBuffer *buffer,
                             GtkTextIter *start,
                             GtkTextIter *end);




  void (* changed) (GtkTextBuffer *buffer);



  void (* modified_changed) (GtkTextBuffer *buffer);


  void (* mark_set) (GtkTextBuffer *buffer,
                               const GtkTextIter *location,
                               GtkTextMark *mark);

  void (* mark_deleted) (GtkTextBuffer *buffer,
                               GtkTextMark *mark);

  void (* apply_tag) (GtkTextBuffer *buffer,
                               GtkTextTag *tag,
                               const GtkTextIter *start_char,
                               const GtkTextIter *end_char);

  void (* remove_tag) (GtkTextBuffer *buffer,
                               GtkTextTag *tag,
                               const GtkTextIter *start_char,
                               const GtkTextIter *end_char);


  void (* begin_user_action) (GtkTextBuffer *buffer);
  void (* end_user_action) (GtkTextBuffer *buffer);

  void (* paste_done) (GtkTextBuffer *buffer,
                               GtkClipboard *clipboard);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
};

GType gtk_text_buffer_get_type (void) __attribute__((__const__));




GtkTextBuffer *gtk_text_buffer_new (GtkTextTagTable *table);
gint gtk_text_buffer_get_line_count (GtkTextBuffer *buffer);
gint gtk_text_buffer_get_char_count (GtkTextBuffer *buffer);


GtkTextTagTable* gtk_text_buffer_get_tag_table (GtkTextBuffer *buffer);


void gtk_text_buffer_set_text (GtkTextBuffer *buffer,
                                        const gchar *text,
                                        gint len);


void gtk_text_buffer_insert (GtkTextBuffer *buffer,
                                        GtkTextIter *iter,
                                        const gchar *text,
                                        gint len);
void gtk_text_buffer_insert_at_cursor (GtkTextBuffer *buffer,
                                        const gchar *text,
                                        gint len);

gboolean gtk_text_buffer_insert_interactive (GtkTextBuffer *buffer,
                                                       GtkTextIter *iter,
                                                       const gchar *text,
                                                       gint len,
                                                       gboolean default_editable);
gboolean gtk_text_buffer_insert_interactive_at_cursor (GtkTextBuffer *buffer,
                                                       const gchar *text,
                                                       gint len,
                                                       gboolean default_editable);

void gtk_text_buffer_insert_range (GtkTextBuffer *buffer,
                                                   GtkTextIter *iter,
                                                   const GtkTextIter *start,
                                                   const GtkTextIter *end);
gboolean gtk_text_buffer_insert_range_interactive (GtkTextBuffer *buffer,
                                                   GtkTextIter *iter,
                                                   const GtkTextIter *start,
                                                   const GtkTextIter *end,
                                                   gboolean default_editable);

void gtk_text_buffer_insert_with_tags (GtkTextBuffer *buffer,
                                                   GtkTextIter *iter,
                                                   const gchar *text,
                                                   gint len,
                                                   GtkTextTag *first_tag,
                                                   ...) __attribute__((__sentinel__));

void gtk_text_buffer_insert_with_tags_by_name (GtkTextBuffer *buffer,
                                                   GtkTextIter *iter,
                                                   const gchar *text,
                                                   gint len,
                                                   const gchar *first_tag_name,
                                                   ...) __attribute__((__sentinel__));


void gtk_text_buffer_delete (GtkTextBuffer *buffer,
          GtkTextIter *start,
          GtkTextIter *end);
gboolean gtk_text_buffer_delete_interactive (GtkTextBuffer *buffer,
          GtkTextIter *start_iter,
          GtkTextIter *end_iter,
          gboolean default_editable);
gboolean gtk_text_buffer_backspace (GtkTextBuffer *buffer,
          GtkTextIter *iter,
          gboolean interactive,
          gboolean default_editable);


gchar *gtk_text_buffer_get_text (GtkTextBuffer *buffer,
                                                     const GtkTextIter *start,
                                                     const GtkTextIter *end,
                                                     gboolean include_hidden_chars);

gchar *gtk_text_buffer_get_slice (GtkTextBuffer *buffer,
                                                     const GtkTextIter *start,
                                                     const GtkTextIter *end,
                                                     gboolean include_hidden_chars);


void gtk_text_buffer_insert_pixbuf (GtkTextBuffer *buffer,
                                            GtkTextIter *iter,
                                            GdkPixbuf *pixbuf);


void gtk_text_buffer_insert_child_anchor (GtkTextBuffer *buffer,
                                                        GtkTextIter *iter,
                                                        GtkTextChildAnchor *anchor);


GtkTextChildAnchor *gtk_text_buffer_create_child_anchor (GtkTextBuffer *buffer,
                                                         GtkTextIter *iter);


void gtk_text_buffer_add_mark (GtkTextBuffer *buffer,
                                            GtkTextMark *mark,
                                            const GtkTextIter *where);
GtkTextMark *gtk_text_buffer_create_mark (GtkTextBuffer *buffer,
                                            const gchar *mark_name,
                                            const GtkTextIter *where,
                                            gboolean left_gravity);
void gtk_text_buffer_move_mark (GtkTextBuffer *buffer,
                                            GtkTextMark *mark,
                                            const GtkTextIter *where);
void gtk_text_buffer_delete_mark (GtkTextBuffer *buffer,
                                            GtkTextMark *mark);
GtkTextMark* gtk_text_buffer_get_mark (GtkTextBuffer *buffer,
                                            const gchar *name);

void gtk_text_buffer_move_mark_by_name (GtkTextBuffer *buffer,
                                          const gchar *name,
                                          const GtkTextIter *where);
void gtk_text_buffer_delete_mark_by_name (GtkTextBuffer *buffer,
                                          const gchar *name);

GtkTextMark* gtk_text_buffer_get_insert (GtkTextBuffer *buffer);
GtkTextMark* gtk_text_buffer_get_selection_bound (GtkTextBuffer *buffer);


void gtk_text_buffer_place_cursor (GtkTextBuffer *buffer,
                                   const GtkTextIter *where);
void gtk_text_buffer_select_range (GtkTextBuffer *buffer,
                                   const GtkTextIter *ins,
       const GtkTextIter *bound);




void gtk_text_buffer_apply_tag (GtkTextBuffer *buffer,
                                            GtkTextTag *tag,
                                            const GtkTextIter *start,
                                            const GtkTextIter *end);
void gtk_text_buffer_remove_tag (GtkTextBuffer *buffer,
                                            GtkTextTag *tag,
                                            const GtkTextIter *start,
                                            const GtkTextIter *end);
void gtk_text_buffer_apply_tag_by_name (GtkTextBuffer *buffer,
                                            const gchar *name,
                                            const GtkTextIter *start,
                                            const GtkTextIter *end);
void gtk_text_buffer_remove_tag_by_name (GtkTextBuffer *buffer,
                                            const gchar *name,
                                            const GtkTextIter *start,
                                            const GtkTextIter *end);
void gtk_text_buffer_remove_all_tags (GtkTextBuffer *buffer,
                                            const GtkTextIter *start,
                                            const GtkTextIter *end);





GtkTextTag *gtk_text_buffer_create_tag (GtkTextBuffer *buffer,
                                           const gchar *tag_name,
                                           const gchar *first_property_name,
                                           ...);




void gtk_text_buffer_get_iter_at_line_offset (GtkTextBuffer *buffer,
                                              GtkTextIter *iter,
                                              gint line_number,
                                              gint char_offset);
void gtk_text_buffer_get_iter_at_line_index (GtkTextBuffer *buffer,
                                              GtkTextIter *iter,
                                              gint line_number,
                                              gint byte_index);
void gtk_text_buffer_get_iter_at_offset (GtkTextBuffer *buffer,
                                              GtkTextIter *iter,
                                              gint char_offset);
void gtk_text_buffer_get_iter_at_line (GtkTextBuffer *buffer,
                                              GtkTextIter *iter,
                                              gint line_number);
void gtk_text_buffer_get_start_iter (GtkTextBuffer *buffer,
                                              GtkTextIter *iter);
void gtk_text_buffer_get_end_iter (GtkTextBuffer *buffer,
                                              GtkTextIter *iter);
void gtk_text_buffer_get_bounds (GtkTextBuffer *buffer,
                                              GtkTextIter *start,
                                              GtkTextIter *end);
void gtk_text_buffer_get_iter_at_mark (GtkTextBuffer *buffer,
                                              GtkTextIter *iter,
                                              GtkTextMark *mark);

void gtk_text_buffer_get_iter_at_child_anchor (GtkTextBuffer *buffer,
                                               GtkTextIter *iter,
                                               GtkTextChildAnchor *anchor);
# 360 "/usr/include/gtk-2.0/gtk/gtktextbuffer.h"
gboolean gtk_text_buffer_get_modified (GtkTextBuffer *buffer);
void gtk_text_buffer_set_modified (GtkTextBuffer *buffer,
                                                         gboolean setting);

gboolean gtk_text_buffer_get_has_selection (GtkTextBuffer *buffer);

void gtk_text_buffer_add_selection_clipboard (GtkTextBuffer *buffer,
       GtkClipboard *clipboard);
void gtk_text_buffer_remove_selection_clipboard (GtkTextBuffer *buffer,
       GtkClipboard *clipboard);

void gtk_text_buffer_cut_clipboard (GtkTextBuffer *buffer,
        GtkClipboard *clipboard,
                                                         gboolean default_editable);
void gtk_text_buffer_copy_clipboard (GtkTextBuffer *buffer,
        GtkClipboard *clipboard);
void gtk_text_buffer_paste_clipboard (GtkTextBuffer *buffer,
        GtkClipboard *clipboard,
        GtkTextIter *override_location,
                                                         gboolean default_editable);

gboolean gtk_text_buffer_get_selection_bounds (GtkTextBuffer *buffer,
                                                         GtkTextIter *start,
                                                         GtkTextIter *end);
gboolean gtk_text_buffer_delete_selection (GtkTextBuffer *buffer,
                                                         gboolean interactive,
                                                         gboolean default_editable);


void gtk_text_buffer_begin_user_action (GtkTextBuffer *buffer);
void gtk_text_buffer_end_user_action (GtkTextBuffer *buffer);

GtkTargetList * gtk_text_buffer_get_copy_target_list (GtkTextBuffer *buffer);
GtkTargetList * gtk_text_buffer_get_paste_target_list (GtkTextBuffer *buffer);


void _gtk_text_buffer_spew (GtkTextBuffer *buffer);

GtkTextBTree* _gtk_text_buffer_get_btree (GtkTextBuffer *buffer);

const PangoLogAttr* _gtk_text_buffer_get_line_log_attrs (GtkTextBuffer *buffer,
                                                         const GtkTextIter *anywhere_in_line,
                                                         gint *char_len);

void _gtk_text_buffer_notify_will_remove_tag (GtkTextBuffer *buffer,
                                              GtkTextTag *tag);


# 176 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktextbufferrichtext.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtktextbufferrichtext.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktextbuffer.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtktextbufferrichtext.h" 2



typedef guint8 * (* GtkTextBufferSerializeFunc) (GtkTextBuffer *register_buffer,
                                                   GtkTextBuffer *content_buffer,
                                                   const GtkTextIter *start,
                                                   const GtkTextIter *end,
                                                   gsize *length,
                                                   gpointer user_data);
typedef gboolean (* GtkTextBufferDeserializeFunc) (GtkTextBuffer *register_buffer,
                                                   GtkTextBuffer *content_buffer,
                                                   GtkTextIter *iter,
                                                   const guint8 *data,
                                                   gsize length,
                                                   gboolean create_tags,
                                                   gpointer user_data,
                                                   GError **error);

GdkAtom gtk_text_buffer_register_serialize_format (GtkTextBuffer *buffer,
                                                       const gchar *mime_type,
                                                       GtkTextBufferSerializeFunc function,
                                                       gpointer user_data,
                                                       GDestroyNotify user_data_destroy);
GdkAtom gtk_text_buffer_register_serialize_tagset (GtkTextBuffer *buffer,
                                                       const gchar *tagset_name);

GdkAtom gtk_text_buffer_register_deserialize_format (GtkTextBuffer *buffer,
                                                       const gchar *mime_type,
                                                       GtkTextBufferDeserializeFunc function,
                                                       gpointer user_data,
                                                       GDestroyNotify user_data_destroy);
GdkAtom gtk_text_buffer_register_deserialize_tagset (GtkTextBuffer *buffer,
                                                       const gchar *tagset_name);

void gtk_text_buffer_unregister_serialize_format (GtkTextBuffer *buffer,
                                                       GdkAtom format);
void gtk_text_buffer_unregister_deserialize_format (GtkTextBuffer *buffer,
                                                       GdkAtom format);

void gtk_text_buffer_deserialize_set_can_create_tags (GtkTextBuffer *buffer,
                                                          GdkAtom format,
                                                          gboolean can_create_tags);
gboolean gtk_text_buffer_deserialize_get_can_create_tags (GtkTextBuffer *buffer,
                                                          GdkAtom format);

GdkAtom * gtk_text_buffer_get_serialize_formats (GtkTextBuffer *buffer,
                                                       gint *n_formats);
GdkAtom * gtk_text_buffer_get_deserialize_formats (GtkTextBuffer *buffer,
                                                       gint *n_formats);

guint8 * gtk_text_buffer_serialize (GtkTextBuffer *register_buffer,
                                                       GtkTextBuffer *content_buffer,
                                                       GdkAtom format,
                                                       const GtkTextIter *start,
                                                       const GtkTextIter *end,
                                                       gsize *length);
gboolean gtk_text_buffer_deserialize (GtkTextBuffer *register_buffer,
                                                       GtkTextBuffer *content_buffer,
                                                       GdkAtom format,
                                                       GtkTextIter *iter,
                                                       const guint8 *data,
                                                       gsize length,
                                                       GError **error);


# 177 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktextchild.h" 1
# 178 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktextiter.h" 1
# 179 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktextmark.h" 1
# 180 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktexttag.h" 1
# 181 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktexttagtable.h" 1
# 182 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktextview.h" 1
# 34 "/usr/include/gtk-2.0/gtk/gtktextview.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcontainer.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtktextview.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkimcontext.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtktextview.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktextbuffer.h" 1
# 37 "/usr/include/gtk-2.0/gtk/gtktextview.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkmenu.h" 1
# 38 "/usr/include/gtk-2.0/gtk/gtktextview.h" 2


# 48 "/usr/include/gtk-2.0/gtk/gtktextview.h"
typedef enum
{
  GTK_TEXT_WINDOW_PRIVATE,
  GTK_TEXT_WINDOW_WIDGET,
  GTK_TEXT_WINDOW_TEXT,
  GTK_TEXT_WINDOW_LEFT,
  GTK_TEXT_WINDOW_RIGHT,
  GTK_TEXT_WINDOW_TOP,
  GTK_TEXT_WINDOW_BOTTOM
} GtkTextWindowType;



typedef struct _GtkTextView GtkTextView;
typedef struct _GtkTextViewClass GtkTextViewClass;


typedef struct _GtkTextWindow GtkTextWindow;
typedef struct _GtkTextPendingScroll GtkTextPendingScroll;

struct _GtkTextView
{
  GtkContainer parent_instance;

  struct _GtkTextLayout *layout;
  GtkTextBuffer *buffer;

  guint selection_drag_handler;
  guint scroll_timeout;


  gint pixels_above_lines;
  gint pixels_below_lines;
  gint pixels_inside_wrap;
  GtkWrapMode wrap_mode;
  GtkJustification justify;
  gint left_margin;
  gint right_margin;
  gint indent;
  PangoTabArray *tabs;
  guint editable : 1;

  guint overwrite_mode : 1;
  guint cursor_visible : 1;


  guint need_im_reset : 1;

  guint accepts_tab : 1;

  guint width_changed : 1;




  guint onscreen_validated : 1;

  guint mouse_cursor_obscured : 1;

  GtkTextWindow *text_window;
  GtkTextWindow *left_window;
  GtkTextWindow *right_window;
  GtkTextWindow *top_window;
  GtkTextWindow *bottom_window;

  GtkAdjustment *hadjustment;
  GtkAdjustment *vadjustment;

  gint xoffset;
  gint yoffset;
  gint width;
  gint height;
# 130 "/usr/include/gtk-2.0/gtk/gtktextview.h"
  gint virtual_cursor_x;
  gint virtual_cursor_y;

  GtkTextMark *first_para_mark;
  gint first_para_pixels;

  GtkTextMark *dnd_mark;
  guint blink_timeout;

  guint first_validate_idle;
  guint incremental_validate_idle;

  GtkIMContext *im_context;
  GtkWidget *popup_menu;

  gint drag_start_x;
  gint drag_start_y;

  GSList *children;

  GtkTextPendingScroll *pending_scroll;

  gint pending_place_cursor_button;
};

struct _GtkTextViewClass
{
  GtkContainerClass parent_class;

  void (* set_scroll_adjustments) (GtkTextView *text_view,
                                     GtkAdjustment *hadjustment,
                                     GtkAdjustment *vadjustment);

  void (* populate_popup) (GtkTextView *text_view,
                                     GtkMenu *menu);




  void (* move_cursor) (GtkTextView *text_view,
                        GtkMovementStep step,
                        gint count,
                        gboolean extend_selection);





  void (* page_horizontally) (GtkTextView *text_view,
                              gint count,
                              gboolean extend_selection);


  void (* set_anchor) (GtkTextView *text_view);


  void (* insert_at_cursor) (GtkTextView *text_view,
                                  const gchar *str);
  void (* delete_from_cursor) (GtkTextView *text_view,
                                  GtkDeleteType type,
                                  gint count);
  void (* backspace) (GtkTextView *text_view);


  void (* cut_clipboard) (GtkTextView *text_view);
  void (* copy_clipboard) (GtkTextView *text_view);
  void (* paste_clipboard) (GtkTextView *text_view);

  void (* toggle_overwrite) (GtkTextView *text_view);





  void (* move_focus) (GtkTextView *text_view,
                             GtkDirectionType direction);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
};

GType gtk_text_view_get_type (void) __attribute__((__const__));
GtkWidget * gtk_text_view_new (void);
GtkWidget * gtk_text_view_new_with_buffer (GtkTextBuffer *buffer);
void gtk_text_view_set_buffer (GtkTextView *text_view,
                                                    GtkTextBuffer *buffer);
GtkTextBuffer *gtk_text_view_get_buffer (GtkTextView *text_view);
gboolean gtk_text_view_scroll_to_iter (GtkTextView *text_view,
                                                    GtkTextIter *iter,
                                                    gdouble within_margin,
                                                    gboolean use_align,
                                                    gdouble xalign,
                                                    gdouble yalign);
void gtk_text_view_scroll_to_mark (GtkTextView *text_view,
                                                    GtkTextMark *mark,
                                                    gdouble within_margin,
                                                    gboolean use_align,
                                                    gdouble xalign,
                                                    gdouble yalign);
void gtk_text_view_scroll_mark_onscreen (GtkTextView *text_view,
                                                    GtkTextMark *mark);
gboolean gtk_text_view_move_mark_onscreen (GtkTextView *text_view,
                                                    GtkTextMark *mark);
gboolean gtk_text_view_place_cursor_onscreen (GtkTextView *text_view);

void gtk_text_view_get_visible_rect (GtkTextView *text_view,
                                                    GdkRectangle *visible_rect);
void gtk_text_view_set_cursor_visible (GtkTextView *text_view,
                                                    gboolean setting);
gboolean gtk_text_view_get_cursor_visible (GtkTextView *text_view);

void gtk_text_view_get_iter_location (GtkTextView *text_view,
                                                    const GtkTextIter *iter,
                                                    GdkRectangle *location);
void gtk_text_view_get_iter_at_location (GtkTextView *text_view,
                                                    GtkTextIter *iter,
                                                    gint x,
                                                    gint y);
void gtk_text_view_get_iter_at_position (GtkTextView *text_view,
                                                    GtkTextIter *iter,
          gint *trailing,
                                                    gint x,
                                                    gint y);
void gtk_text_view_get_line_yrange (GtkTextView *text_view,
                                                    const GtkTextIter *iter,
                                                    gint *y,
                                                    gint *height);

void gtk_text_view_get_line_at_y (GtkTextView *text_view,
                                                    GtkTextIter *target_iter,
                                                    gint y,
                                                    gint *line_top);

void gtk_text_view_buffer_to_window_coords (GtkTextView *text_view,
                                            GtkTextWindowType win,
                                            gint buffer_x,
                                            gint buffer_y,
                                            gint *window_x,
                                            gint *window_y);
void gtk_text_view_window_to_buffer_coords (GtkTextView *text_view,
                                            GtkTextWindowType win,
                                            gint window_x,
                                            gint window_y,
                                            gint *buffer_x,
                                            gint *buffer_y);

GdkWindow* gtk_text_view_get_window (GtkTextView *text_view,
                                                 GtkTextWindowType win);
GtkTextWindowType gtk_text_view_get_window_type (GtkTextView *text_view,
                                                 GdkWindow *window);

void gtk_text_view_set_border_window_size (GtkTextView *text_view,
                                           GtkTextWindowType type,
                                           gint size);
gint gtk_text_view_get_border_window_size (GtkTextView *text_view,
        GtkTextWindowType type);

gboolean gtk_text_view_forward_display_line (GtkTextView *text_view,
                                                       GtkTextIter *iter);
gboolean gtk_text_view_backward_display_line (GtkTextView *text_view,
                                                       GtkTextIter *iter);
gboolean gtk_text_view_forward_display_line_end (GtkTextView *text_view,
                                                       GtkTextIter *iter);
gboolean gtk_text_view_backward_display_line_start (GtkTextView *text_view,
                                                       GtkTextIter *iter);
gboolean gtk_text_view_starts_display_line (GtkTextView *text_view,
                                                       const GtkTextIter *iter);
gboolean gtk_text_view_move_visually (GtkTextView *text_view,
                                                       GtkTextIter *iter,
                                                       gint count);


void gtk_text_view_add_child_at_anchor (GtkTextView *text_view,
                                        GtkWidget *child,
                                        GtkTextChildAnchor *anchor);

void gtk_text_view_add_child_in_window (GtkTextView *text_view,
                                        GtkWidget *child,
                                        GtkTextWindowType which_window,

                                        gint xpos,
                                        gint ypos);

void gtk_text_view_move_child (GtkTextView *text_view,
                                        GtkWidget *child,

                                        gint xpos,
                                        gint ypos);



void gtk_text_view_set_wrap_mode (GtkTextView *text_view,
                                                       GtkWrapMode wrap_mode);
GtkWrapMode gtk_text_view_get_wrap_mode (GtkTextView *text_view);
void gtk_text_view_set_editable (GtkTextView *text_view,
                                                       gboolean setting);
gboolean gtk_text_view_get_editable (GtkTextView *text_view);
void gtk_text_view_set_overwrite (GtkTextView *text_view,
             gboolean overwrite);
gboolean gtk_text_view_get_overwrite (GtkTextView *text_view);
void gtk_text_view_set_accepts_tab (GtkTextView *text_view,
             gboolean accepts_tab);
gboolean gtk_text_view_get_accepts_tab (GtkTextView *text_view);
void gtk_text_view_set_pixels_above_lines (GtkTextView *text_view,
                                                       gint pixels_above_lines);
gint gtk_text_view_get_pixels_above_lines (GtkTextView *text_view);
void gtk_text_view_set_pixels_below_lines (GtkTextView *text_view,
                                                       gint pixels_below_lines);
gint gtk_text_view_get_pixels_below_lines (GtkTextView *text_view);
void gtk_text_view_set_pixels_inside_wrap (GtkTextView *text_view,
                                                       gint pixels_inside_wrap);
gint gtk_text_view_get_pixels_inside_wrap (GtkTextView *text_view);
void gtk_text_view_set_justification (GtkTextView *text_view,
                                                       GtkJustification justification);
GtkJustification gtk_text_view_get_justification (GtkTextView *text_view);
void gtk_text_view_set_left_margin (GtkTextView *text_view,
                                                       gint left_margin);
gint gtk_text_view_get_left_margin (GtkTextView *text_view);
void gtk_text_view_set_right_margin (GtkTextView *text_view,
                                                       gint right_margin);
gint gtk_text_view_get_right_margin (GtkTextView *text_view);
void gtk_text_view_set_indent (GtkTextView *text_view,
                                                       gint indent);
gint gtk_text_view_get_indent (GtkTextView *text_view);
void gtk_text_view_set_tabs (GtkTextView *text_view,
                                                       PangoTabArray *tabs);
PangoTabArray* gtk_text_view_get_tabs (GtkTextView *text_view);


GtkTextAttributes* gtk_text_view_get_default_attributes (GtkTextView *text_view);


# 183 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktoggleaction.h" 1
# 184 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktogglebutton.h" 1
# 185 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktoggletoolbutton.h" 1
# 186 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktoolbar.h" 1
# 40 "/usr/include/gtk-2.0/gtk/gtktoolbar.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcontainer.h" 1
# 41 "/usr/include/gtk-2.0/gtk/gtktoolbar.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktooltips.h" 1
# 42 "/usr/include/gtk-2.0/gtk/gtktoolbar.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktoolitem.h" 1
# 43 "/usr/include/gtk-2.0/gtk/gtktoolbar.h" 2




# 1 "/usr/include/gtk-2.0/gtk/gtkpixmap.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkpixmap.h"

# 45 "/usr/include/gtk-2.0/gtk/gtkpixmap.h"
typedef struct _GtkPixmap GtkPixmap;
typedef struct _GtkPixmapClass GtkPixmapClass;

struct _GtkPixmap
{
  GtkMisc misc;

  GdkPixmap *pixmap;
  GdkBitmap *mask;

  GdkPixmap *pixmap_insensitive;
  guint build_insensitive : 1;
};

struct _GtkPixmapClass
{
  GtkMiscClass parent_class;
};


GType gtk_pixmap_get_type (void) __attribute__((__const__));
GtkWidget* gtk_pixmap_new (GdkPixmap *pixmap,
      GdkBitmap *mask);
void gtk_pixmap_set (GtkPixmap *pixmap,
      GdkPixmap *val,
      GdkBitmap *mask);
void gtk_pixmap_get (GtkPixmap *pixmap,
      GdkPixmap **val,
      GdkBitmap **mask);

void gtk_pixmap_set_build_insensitive (GtkPixmap *pixmap,
                               gboolean build);



# 48 "/usr/include/gtk-2.0/gtk/gtktoolbar.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtksignal.h" 1
# 49 "/usr/include/gtk-2.0/gtk/gtktoolbar.h" 2




# 62 "/usr/include/gtk-2.0/gtk/gtktoolbar.h"
typedef enum
{
  GTK_TOOLBAR_CHILD_SPACE,
  GTK_TOOLBAR_CHILD_BUTTON,
  GTK_TOOLBAR_CHILD_TOGGLEBUTTON,
  GTK_TOOLBAR_CHILD_RADIOBUTTON,
  GTK_TOOLBAR_CHILD_WIDGET
} GtkToolbarChildType;

typedef struct _GtkToolbarChild GtkToolbarChild;

struct _GtkToolbarChild
{
  GtkToolbarChildType type;
  GtkWidget *widget;
  GtkWidget *icon;
  GtkWidget *label;
};



typedef enum
{
  GTK_TOOLBAR_SPACE_EMPTY,
  GTK_TOOLBAR_SPACE_LINE
} GtkToolbarSpaceStyle;

typedef struct _GtkToolbar GtkToolbar;
typedef struct _GtkToolbarClass GtkToolbarClass;
typedef struct _GtkToolbarPrivate GtkToolbarPrivate;

struct _GtkToolbar
{
  GtkContainer container;


  gint num_children;
  GList *children;
  GtkOrientation orientation;
  GtkToolbarStyle style;
  GtkIconSize icon_size;


  GtkTooltips *tooltips;





  gint button_maxw;
  gint button_maxh;

  guint _gtk_reserved1;
  guint _gtk_reserved2;

  guint style_set : 1;
  guint icon_size_set : 1;
};

struct _GtkToolbarClass
{
  GtkContainerClass parent_class;


  void (* orientation_changed) (GtkToolbar *toolbar,
        GtkOrientation orientation);
  void (* style_changed) (GtkToolbar *toolbar,
        GtkToolbarStyle style);
  gboolean (* popup_context_menu) (GtkToolbar *toolbar,
        gint x,
        gint y,
        gint button_number);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
};

GType gtk_toolbar_get_type (void) __attribute__((__const__));
GtkWidget * gtk_toolbar_new (void);

void gtk_toolbar_insert (GtkToolbar *toolbar,
           GtkToolItem *item,
           gint pos);

gint gtk_toolbar_get_item_index (GtkToolbar *toolbar,
           GtkToolItem *item);
gint gtk_toolbar_get_n_items (GtkToolbar *toolbar);
GtkToolItem * gtk_toolbar_get_nth_item (GtkToolbar *toolbar,
           gint n);

gboolean gtk_toolbar_get_show_arrow (GtkToolbar *toolbar);
void gtk_toolbar_set_show_arrow (GtkToolbar *toolbar,
           gboolean show_arrow);

GtkToolbarStyle gtk_toolbar_get_style (GtkToolbar *toolbar);
void gtk_toolbar_set_style (GtkToolbar *toolbar,
           GtkToolbarStyle style);
void gtk_toolbar_unset_style (GtkToolbar *toolbar);

GtkIconSize gtk_toolbar_get_icon_size (GtkToolbar *toolbar);
void gtk_toolbar_set_icon_size (GtkToolbar *toolbar,
                                                     GtkIconSize icon_size);
void gtk_toolbar_unset_icon_size (GtkToolbar *toolbar);

GtkReliefStyle gtk_toolbar_get_relief_style (GtkToolbar *toolbar);
gint gtk_toolbar_get_drop_index (GtkToolbar *toolbar,
           gint x,
           gint y);
void gtk_toolbar_set_drop_highlight_item (GtkToolbar *toolbar,
           GtkToolItem *tool_item,
           gint index_);



gchar * _gtk_toolbar_elide_underscores (const gchar *original);
void _gtk_toolbar_paint_space_line (GtkWidget *widget,
           GtkToolbar *toolbar,
           const GdkRectangle *area,
           const GtkAllocation *allocation);
gint _gtk_toolbar_get_default_space_size (void);





GtkOrientation gtk_toolbar_get_orientation (GtkToolbar *toolbar);
void gtk_toolbar_set_orientation (GtkToolbar *toolbar,
           GtkOrientation orientation);
gboolean gtk_toolbar_get_tooltips (GtkToolbar *toolbar);
void gtk_toolbar_set_tooltips (GtkToolbar *toolbar,
           gboolean enable);


GtkWidget* gtk_toolbar_append_item (GtkToolbar *toolbar,
          const char *text,
          const char *tooltip_text,
          const char *tooltip_private_text,
          GtkWidget *icon,
          GCallback callback,
          gpointer user_data);
GtkWidget* gtk_toolbar_prepend_item (GtkToolbar *toolbar,
          const char *text,
          const char *tooltip_text,
          const char *tooltip_private_text,
          GtkWidget *icon,
          GCallback callback,
          gpointer user_data);
GtkWidget* gtk_toolbar_insert_item (GtkToolbar *toolbar,
          const char *text,
          const char *tooltip_text,
          const char *tooltip_private_text,
          GtkWidget *icon,
          GCallback callback,
          gpointer user_data,
          gint position);


GtkWidget* gtk_toolbar_insert_stock (GtkToolbar *toolbar,
     const gchar *stock_id,
     const char *tooltip_text,
     const char *tooltip_private_text,
     GCallback callback,
     gpointer user_data,
     gint position);


void gtk_toolbar_append_space (GtkToolbar *toolbar);
void gtk_toolbar_prepend_space (GtkToolbar *toolbar);
void gtk_toolbar_insert_space (GtkToolbar *toolbar,
     gint position);
void gtk_toolbar_remove_space (GtkToolbar *toolbar,
                                        gint position);

GtkWidget* gtk_toolbar_append_element (GtkToolbar *toolbar,
     GtkToolbarChildType type,
     GtkWidget *widget,
     const char *text,
     const char *tooltip_text,
     const char *tooltip_private_text,
     GtkWidget *icon,
     GCallback callback,
     gpointer user_data);

GtkWidget* gtk_toolbar_prepend_element (GtkToolbar *toolbar,
     GtkToolbarChildType type,
     GtkWidget *widget,
     const char *text,
     const char *tooltip_text,
     const char *tooltip_private_text,
     GtkWidget *icon,
     GCallback callback,
     gpointer user_data);

GtkWidget* gtk_toolbar_insert_element (GtkToolbar *toolbar,
     GtkToolbarChildType type,
     GtkWidget *widget,
     const char *text,
     const char *tooltip_text,
     const char *tooltip_private_text,
     GtkWidget *icon,
     GCallback callback,
     gpointer user_data,
     gint position);


void gtk_toolbar_append_widget (GtkToolbar *toolbar,
     GtkWidget *widget,
     const char *tooltip_text,
     const char *tooltip_private_text);
void gtk_toolbar_prepend_widget (GtkToolbar *toolbar,
     GtkWidget *widget,
     const char *tooltip_text,
     const char *tooltip_private_text);
void gtk_toolbar_insert_widget (GtkToolbar *toolbar,
     GtkWidget *widget,
     const char *tooltip_text,
     const char *tooltip_private_text,
     gint position);





# 187 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktoolbutton.h" 1
# 188 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktoolitem.h" 1
# 189 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktoolshell.h" 1
# 31 "/usr/include/gtk-2.0/gtk/gtktoolshell.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkenums.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtktoolshell.h" 2









typedef struct _GtkToolShell GtkToolShell;
typedef struct _GtkToolShellIface GtkToolShellIface;
# 54 "/usr/include/gtk-2.0/gtk/gtktoolshell.h"
struct _GtkToolShellIface
{

  GTypeInterface g_iface;


  GtkIconSize (*get_icon_size) (GtkToolShell *shell);
  GtkOrientation (*get_orientation) (GtkToolShell *shell);
  GtkToolbarStyle (*get_style) (GtkToolShell *shell);
  GtkReliefStyle (*get_relief_style) (GtkToolShell *shell);
  void (*rebuild_menu) (GtkToolShell *shell);
};

GType gtk_tool_shell_get_type (void) __attribute__((__const__));

GtkIconSize gtk_tool_shell_get_icon_size (GtkToolShell *shell);
GtkOrientation gtk_tool_shell_get_orientation (GtkToolShell *shell);
GtkToolbarStyle gtk_tool_shell_get_style (GtkToolShell *shell);
GtkReliefStyle gtk_tool_shell_get_relief_style (GtkToolShell *shell);
void gtk_tool_shell_rebuild_menu (GtkToolShell *shell);


# 190 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktooltip.h" 1
# 191 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktestutils.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtktestutils.h"



void gtk_test_init (int *argcp,
                                                 char ***argvp,
                                                 ...);
void gtk_test_register_all_types (void);
const GType* gtk_test_list_all_types (guint *n_types);
GtkWidget* gtk_test_find_widget (GtkWidget *widget,
                                                 const gchar *label_pattern,
                                                 GType widget_type);
GtkWidget* gtk_test_create_widget (GType widget_type,
                                                 const gchar *first_property_name,
                                                 ...);
GtkWidget* gtk_test_create_simple_window (const gchar *window_title,
                                                 const gchar *dialog_text);
GtkWidget* gtk_test_display_button_window (const gchar *window_title,
                                                 const gchar *dialog_text,
                                                 ...);
void gtk_test_slider_set_perc (GtkWidget *widget,
                                                 double percentage);
double gtk_test_slider_get_value (GtkWidget *widget);
gboolean gtk_test_spin_button_click (GtkSpinButton *spinner,
                                                 guint button,
                                                 gboolean upwards);
gboolean gtk_test_widget_click (GtkWidget *widget,
                                                 guint button,
                                                 GdkModifierType modifiers);
gboolean gtk_test_widget_send_key (GtkWidget *widget,
                                                 guint keyval,
                                                 GdkModifierType modifiers);

void gtk_test_text_set (GtkWidget *widget,
                                                 const gchar *string);
gchar* gtk_test_text_get (GtkWidget *widget);


GtkWidget* gtk_test_find_sibling (GtkWidget *base_widget,
                                                 GType widget_type);
GtkWidget* gtk_test_find_label (GtkWidget *widget,
                                                 const gchar *label_pattern);

# 192 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreednd.h" 1
# 27 "/usr/include/gtk-2.0/gtk/gtktreednd.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktreemodel.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtktreednd.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkdnd.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtktreednd.h" 2








typedef struct _GtkTreeDragSource GtkTreeDragSource;
typedef struct _GtkTreeDragSourceIface GtkTreeDragSourceIface;

struct _GtkTreeDragSourceIface
{
  GTypeInterface g_iface;



  gboolean (* row_draggable) (GtkTreeDragSource *drag_source,
                                         GtkTreePath *path);

  gboolean (* drag_data_get) (GtkTreeDragSource *drag_source,
                                         GtkTreePath *path,
                                         GtkSelectionData *selection_data);

  gboolean (* drag_data_delete) (GtkTreeDragSource *drag_source,
                                         GtkTreePath *path);
};

GType gtk_tree_drag_source_get_type (void) __attribute__((__const__));


gboolean gtk_tree_drag_source_row_draggable (GtkTreeDragSource *drag_source,
                                                GtkTreePath *path);


gboolean gtk_tree_drag_source_drag_data_delete (GtkTreeDragSource *drag_source,
                                                GtkTreePath *path);




gboolean gtk_tree_drag_source_drag_data_get (GtkTreeDragSource *drag_source,
                                                GtkTreePath *path,
                                                GtkSelectionData *selection_data);






typedef struct _GtkTreeDragDest GtkTreeDragDest;
typedef struct _GtkTreeDragDestIface GtkTreeDragDestIface;

struct _GtkTreeDragDestIface
{
  GTypeInterface g_iface;



  gboolean (* drag_data_received) (GtkTreeDragDest *drag_dest,
                                       GtkTreePath *dest,
                                       GtkSelectionData *selection_data);

  gboolean (* row_drop_possible) (GtkTreeDragDest *drag_dest,
                                       GtkTreePath *dest_path,
           GtkSelectionData *selection_data);
};

GType gtk_tree_drag_dest_get_type (void) __attribute__((__const__));




gboolean gtk_tree_drag_dest_drag_data_received (GtkTreeDragDest *drag_dest,
      GtkTreePath *dest,
      GtkSelectionData *selection_data);



gboolean gtk_tree_drag_dest_row_drop_possible (GtkTreeDragDest *drag_dest,
      GtkTreePath *dest_path,
      GtkSelectionData *selection_data);





gboolean gtk_tree_set_row_drag_data (GtkSelectionData *selection_data,
      GtkTreeModel *tree_model,
      GtkTreePath *path);
gboolean gtk_tree_get_row_drag_data (GtkSelectionData *selection_data,
      GtkTreeModel **tree_model,
      GtkTreePath **path);


# 193 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreemodel.h" 1
# 194 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreemodelfilter.h" 1
# 195 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreemodelsort.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtktreemodelsort.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktreemodel.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtktreemodelsort.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreesortable.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtktreemodelsort.h" 2


# 40 "/usr/include/gtk-2.0/gtk/gtktreemodelsort.h"
typedef struct _GtkTreeModelSort GtkTreeModelSort;
typedef struct _GtkTreeModelSortClass GtkTreeModelSortClass;

struct _GtkTreeModelSort
{
  GObject parent;


  gpointer root;
  gint stamp;
  guint child_flags;
  GtkTreeModel *child_model;
  gint zero_ref_count;


  GList *sort_list;
  gint sort_column_id;
  GtkSortType order;


  GtkTreeIterCompareFunc default_sort_func;
  gpointer default_sort_data;
  GDestroyNotify default_sort_destroy;


  guint changed_id;
  guint inserted_id;
  guint has_child_toggled_id;
  guint deleted_id;
  guint reordered_id;
};

struct _GtkTreeModelSortClass
{
  GObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_tree_model_sort_get_type (void) __attribute__((__const__));
GtkTreeModel *gtk_tree_model_sort_new_with_model (GtkTreeModel *child_model);

GtkTreeModel *gtk_tree_model_sort_get_model (GtkTreeModelSort *tree_model);
GtkTreePath *gtk_tree_model_sort_convert_child_path_to_path (GtkTreeModelSort *tree_model_sort,
             GtkTreePath *child_path);
gboolean gtk_tree_model_sort_convert_child_iter_to_iter (GtkTreeModelSort *tree_model_sort,
             GtkTreeIter *sort_iter,
             GtkTreeIter *child_iter);
GtkTreePath *gtk_tree_model_sort_convert_path_to_child_path (GtkTreeModelSort *tree_model_sort,
             GtkTreePath *sorted_path);
void gtk_tree_model_sort_convert_iter_to_child_iter (GtkTreeModelSort *tree_model_sort,
             GtkTreeIter *child_iter,
             GtkTreeIter *sorted_iter);
void gtk_tree_model_sort_reset_default_sort_func (GtkTreeModelSort *tree_model_sort);
void gtk_tree_model_sort_clear_cache (GtkTreeModelSort *tree_model_sort);
gboolean gtk_tree_model_sort_iter_is_valid (GtkTreeModelSort *tree_model_sort,
                                                              GtkTreeIter *iter);



# 196 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreeselection.h" 1
# 27 "/usr/include/gtk-2.0/gtk/gtktreeselection.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktreeview.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtktreeselection.h" 2


# 39 "/usr/include/gtk-2.0/gtk/gtktreeselection.h"
typedef gboolean (* GtkTreeSelectionFunc) (GtkTreeSelection *selection,
           GtkTreeModel *model,
           GtkTreePath *path,
                                              gboolean path_currently_selected,
           gpointer data);
typedef void (* GtkTreeSelectionForeachFunc) (GtkTreeModel *model,
           GtkTreePath *path,
           GtkTreeIter *iter,
           gpointer data);

struct _GtkTreeSelection
{
  GObject parent;



  GtkTreeView *tree_view;
  GtkSelectionMode type;
  GtkTreeSelectionFunc user_func;
  gpointer user_data;
  GDestroyNotify destroy;
};

struct _GtkTreeSelectionClass
{
  GObjectClass parent_class;

  void (* changed) (GtkTreeSelection *selection);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_tree_selection_get_type (void) __attribute__((__const__));

void gtk_tree_selection_set_mode (GtkTreeSelection *selection,
        GtkSelectionMode type);
GtkSelectionMode gtk_tree_selection_get_mode (GtkTreeSelection *selection);
void gtk_tree_selection_set_select_function (GtkTreeSelection *selection,
        GtkTreeSelectionFunc func,
        gpointer data,
        GDestroyNotify destroy);
gpointer gtk_tree_selection_get_user_data (GtkTreeSelection *selection);
GtkTreeView* gtk_tree_selection_get_tree_view (GtkTreeSelection *selection);

GtkTreeSelectionFunc gtk_tree_selection_get_select_function (GtkTreeSelection *selection);



gboolean gtk_tree_selection_get_selected (GtkTreeSelection *selection,
        GtkTreeModel **model,
        GtkTreeIter *iter);
GList * gtk_tree_selection_get_selected_rows (GtkTreeSelection *selection,
                                                         GtkTreeModel **model);
gint gtk_tree_selection_count_selected_rows (GtkTreeSelection *selection);
void gtk_tree_selection_selected_foreach (GtkTreeSelection *selection,
        GtkTreeSelectionForeachFunc func,
        gpointer data);
void gtk_tree_selection_select_path (GtkTreeSelection *selection,
        GtkTreePath *path);
void gtk_tree_selection_unselect_path (GtkTreeSelection *selection,
        GtkTreePath *path);
void gtk_tree_selection_select_iter (GtkTreeSelection *selection,
        GtkTreeIter *iter);
void gtk_tree_selection_unselect_iter (GtkTreeSelection *selection,
        GtkTreeIter *iter);
gboolean gtk_tree_selection_path_is_selected (GtkTreeSelection *selection,
        GtkTreePath *path);
gboolean gtk_tree_selection_iter_is_selected (GtkTreeSelection *selection,
        GtkTreeIter *iter);
void gtk_tree_selection_select_all (GtkTreeSelection *selection);
void gtk_tree_selection_unselect_all (GtkTreeSelection *selection);
void gtk_tree_selection_select_range (GtkTreeSelection *selection,
        GtkTreePath *start_path,
        GtkTreePath *end_path);
void gtk_tree_selection_unselect_range (GtkTreeSelection *selection,
                                                         GtkTreePath *start_path,
        GtkTreePath *end_path);



# 197 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreesortable.h" 1
# 198 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreestore.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtktreestore.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktreemodel.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtktreestore.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreesortable.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtktreestore.h" 2




# 43 "/usr/include/gtk-2.0/gtk/gtktreestore.h"
typedef struct _GtkTreeStore GtkTreeStore;
typedef struct _GtkTreeStoreClass GtkTreeStoreClass;

struct _GtkTreeStore
{
  GObject parent;

  gint stamp;
  gpointer root;
  gpointer last;
  gint n_columns;
  gint sort_column_id;
  GList *sort_list;
  GtkSortType order;
  GType *column_headers;
  GtkTreeIterCompareFunc default_sort_func;
  gpointer default_sort_data;
  GDestroyNotify default_sort_destroy;
  guint columns_dirty : 1;
};

struct _GtkTreeStoreClass
{
  GObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_tree_store_get_type (void) __attribute__((__const__));
GtkTreeStore *gtk_tree_store_new (gint n_columns,
            ...);
GtkTreeStore *gtk_tree_store_newv (gint n_columns,
            GType *types);
void gtk_tree_store_set_column_types (GtkTreeStore *tree_store,
            gint n_columns,
            GType *types);



void gtk_tree_store_set_value (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            gint column,
            GValue *value);
void gtk_tree_store_set (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            ...);
void gtk_tree_store_set_valuesv (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            gint *columns,
            GValue *values,
            gint n_values);
void gtk_tree_store_set_valist (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            va_list var_args);
gboolean gtk_tree_store_remove (GtkTreeStore *tree_store,
            GtkTreeIter *iter);
void gtk_tree_store_insert (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            GtkTreeIter *parent,
            gint position);
void gtk_tree_store_insert_before (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            GtkTreeIter *parent,
            GtkTreeIter *sibling);
void gtk_tree_store_insert_after (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            GtkTreeIter *parent,
            GtkTreeIter *sibling);
void gtk_tree_store_insert_with_values (GtkTreeStore *tree_store,
       GtkTreeIter *iter,
       GtkTreeIter *parent,
       gint position,
       ...);
void gtk_tree_store_insert_with_valuesv (GtkTreeStore *tree_store,
        GtkTreeIter *iter,
        GtkTreeIter *parent,
        gint position,
        gint *columns,
        GValue *values,
        gint n_values);
void gtk_tree_store_prepend (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            GtkTreeIter *parent);
void gtk_tree_store_append (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            GtkTreeIter *parent);
gboolean gtk_tree_store_is_ancestor (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            GtkTreeIter *descendant);
gint gtk_tree_store_iter_depth (GtkTreeStore *tree_store,
            GtkTreeIter *iter);
void gtk_tree_store_clear (GtkTreeStore *tree_store);
gboolean gtk_tree_store_iter_is_valid (GtkTreeStore *tree_store,
                                               GtkTreeIter *iter);
void gtk_tree_store_reorder (GtkTreeStore *tree_store,
                                               GtkTreeIter *parent,
                                               gint *new_order);
void gtk_tree_store_swap (GtkTreeStore *tree_store,
                                               GtkTreeIter *a,
                                               GtkTreeIter *b);
void gtk_tree_store_move_before (GtkTreeStore *tree_store,
                                               GtkTreeIter *iter,
                                               GtkTreeIter *position);
void gtk_tree_store_move_after (GtkTreeStore *tree_store,
                                               GtkTreeIter *iter,
                                               GtkTreeIter *position);



# 199 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreeview.h" 1
# 200 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h" 1
# 201 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktypeutils.h" 1
# 202 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkuimanager.h" 1
# 38 "/usr/include/gtk-2.0/gtk/gtkuimanager.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkaccelgroup.h" 1
# 39 "/usr/include/gtk-2.0/gtk/gtkuimanager.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 40 "/usr/include/gtk-2.0/gtk/gtkuimanager.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkaction.h" 1
# 41 "/usr/include/gtk-2.0/gtk/gtkuimanager.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkactiongroup.h" 1
# 42 "/usr/include/gtk-2.0/gtk/gtkuimanager.h" 2


# 52 "/usr/include/gtk-2.0/gtk/gtkuimanager.h"
typedef struct _GtkUIManager GtkUIManager;
typedef struct _GtkUIManagerClass GtkUIManagerClass;
typedef struct _GtkUIManagerPrivate GtkUIManagerPrivate;


struct _GtkUIManager {
  GObject parent;



  GtkUIManagerPrivate *private_data;
};

struct _GtkUIManagerClass {
  GObjectClass parent_class;


  void (* add_widget) (GtkUIManager *merge,
                             GtkWidget *widget);
  void (* actions_changed) (GtkUIManager *merge);
  void (* connect_proxy) (GtkUIManager *merge,
        GtkAction *action,
        GtkWidget *proxy);
  void (* disconnect_proxy) (GtkUIManager *merge,
        GtkAction *action,
        GtkWidget *proxy);
  void (* pre_activate) (GtkUIManager *merge,
        GtkAction *action);
  void (* post_activate) (GtkUIManager *merge,
        GtkAction *action);


  GtkWidget * (* get_widget) (GtkUIManager *manager,
                              const gchar *path);
  GtkAction * (* get_action) (GtkUIManager *manager,
                              const gchar *path);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
};

typedef enum {
  GTK_UI_MANAGER_AUTO = 0,
  GTK_UI_MANAGER_MENUBAR = 1 << 0,
  GTK_UI_MANAGER_MENU = 1 << 1,
  GTK_UI_MANAGER_TOOLBAR = 1 << 2,
  GTK_UI_MANAGER_PLACEHOLDER = 1 << 3,
  GTK_UI_MANAGER_POPUP = 1 << 4,
  GTK_UI_MANAGER_MENUITEM = 1 << 5,
  GTK_UI_MANAGER_TOOLITEM = 1 << 6,
  GTK_UI_MANAGER_SEPARATOR = 1 << 7,
  GTK_UI_MANAGER_ACCELERATOR = 1 << 8,
  GTK_UI_MANAGER_POPUP_WITH_ACCELS = 1 << 9
} GtkUIManagerItemType;






GType gtk_ui_manager_get_type (void) __attribute__((__const__));
GtkUIManager *gtk_ui_manager_new (void);
void gtk_ui_manager_set_add_tearoffs (GtkUIManager *self,
         gboolean add_tearoffs);
gboolean gtk_ui_manager_get_add_tearoffs (GtkUIManager *self);
void gtk_ui_manager_insert_action_group (GtkUIManager *self,
         GtkActionGroup *action_group,
         gint pos);
void gtk_ui_manager_remove_action_group (GtkUIManager *self,
         GtkActionGroup *action_group);
GList *gtk_ui_manager_get_action_groups (GtkUIManager *self);
GtkAccelGroup *gtk_ui_manager_get_accel_group (GtkUIManager *self);
GtkWidget *gtk_ui_manager_get_widget (GtkUIManager *self,
         const gchar *path);
GSList *gtk_ui_manager_get_toplevels (GtkUIManager *self,
         GtkUIManagerItemType types);
GtkAction *gtk_ui_manager_get_action (GtkUIManager *self,
         const gchar *path);
guint gtk_ui_manager_add_ui_from_string (GtkUIManager *self,
         const gchar *buffer,
         gssize length,
         GError **error);
guint gtk_ui_manager_add_ui_from_file (GtkUIManager *self,
         const gchar *filename,
         GError **error);
void gtk_ui_manager_add_ui (GtkUIManager *self,
         guint merge_id,
         const gchar *path,
         const gchar *name,
         const gchar *action,
         GtkUIManagerItemType type,
         gboolean top);
void gtk_ui_manager_remove_ui (GtkUIManager *self,
         guint merge_id);
gchar *gtk_ui_manager_get_ui (GtkUIManager *self);
void gtk_ui_manager_ensure_update (GtkUIManager *self);
guint gtk_ui_manager_new_merge_id (GtkUIManager *self);


# 203 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkvbbox.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkvbbox.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkbbox.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkvbbox.h" 2



# 49 "/usr/include/gtk-2.0/gtk/gtkvbbox.h"
typedef struct _GtkVButtonBox GtkVButtonBox;
typedef struct _GtkVButtonBoxClass GtkVButtonBoxClass;

struct _GtkVButtonBox
{
  GtkButtonBox button_box;
};

struct _GtkVButtonBoxClass
{
  GtkButtonBoxClass parent_class;
};


GType gtk_vbutton_box_get_type (void) __attribute__((__const__));
GtkWidget *gtk_vbutton_box_new (void);




gint gtk_vbutton_box_get_spacing_default (void);
void gtk_vbutton_box_set_spacing_default (gint spacing);

GtkButtonBoxStyle gtk_vbutton_box_get_layout_default (void);
void gtk_vbutton_box_set_layout_default (GtkButtonBoxStyle layout);




# 204 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkvbox.h" 1
# 205 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkversion.h" 1
# 206 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkviewport.h" 1
# 207 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkvolumebutton.h" 1
# 37 "/usr/include/gtk-2.0/gtk/gtkvolumebutton.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkscalebutton.h" 1
# 38 "/usr/include/gtk-2.0/gtk/gtkvolumebutton.h" 2


# 48 "/usr/include/gtk-2.0/gtk/gtkvolumebutton.h"
typedef struct _GtkVolumeButton GtkVolumeButton;
typedef struct _GtkVolumeButtonClass GtkVolumeButtonClass;

struct _GtkVolumeButton
{
  GtkScaleButton parent;
};

struct _GtkVolumeButtonClass
{
  GtkScaleButtonClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_volume_button_get_type (void) __attribute__((__const__));
GtkWidget* gtk_volume_button_new (void);


# 208 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkvpaned.h" 1
# 34 "/usr/include/gtk-2.0/gtk/gtkvpaned.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkpaned.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkvpaned.h" 2


# 46 "/usr/include/gtk-2.0/gtk/gtkvpaned.h"
typedef struct _GtkVPaned GtkVPaned;
typedef struct _GtkVPanedClass GtkVPanedClass;

struct _GtkVPaned
{
  GtkPaned paned;
};

struct _GtkVPanedClass
{
  GtkPanedClass parent_class;
};


GType gtk_vpaned_get_type (void) __attribute__((__const__));
GtkWidget * gtk_vpaned_new (void);


# 209 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkvruler.h" 1
# 45 "/usr/include/gtk-2.0/gtk/gtkvruler.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkruler.h" 1
# 46 "/usr/include/gtk-2.0/gtk/gtkvruler.h" 2



# 59 "/usr/include/gtk-2.0/gtk/gtkvruler.h"
typedef struct _GtkVRuler GtkVRuler;
typedef struct _GtkVRulerClass GtkVRulerClass;

struct _GtkVRuler
{
  GtkRuler ruler;
};

struct _GtkVRulerClass
{
  GtkRulerClass parent_class;
};


GType gtk_vruler_get_type (void) __attribute__((__const__));
GtkWidget* gtk_vruler_new (void);



# 210 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkvscale.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkvscale.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkscale.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkvscale.h" 2



# 49 "/usr/include/gtk-2.0/gtk/gtkvscale.h"
typedef struct _GtkVScale GtkVScale;
typedef struct _GtkVScaleClass GtkVScaleClass;

struct _GtkVScale
{
  GtkScale scale;
};

struct _GtkVScaleClass
{
  GtkScaleClass parent_class;
};


GType gtk_vscale_get_type (void) __attribute__((__const__));
GtkWidget* gtk_vscale_new (GtkAdjustment *adjustment);
GtkWidget* gtk_vscale_new_with_range (gdouble min,
                                      gdouble max,
                                      gdouble step);



# 211 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkvscrollbar.h" 1
# 212 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkvseparator.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkvseparator.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkseparator.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkvseparator.h" 2



# 49 "/usr/include/gtk-2.0/gtk/gtkvseparator.h"
typedef struct _GtkVSeparator GtkVSeparator;
typedef struct _GtkVSeparatorClass GtkVSeparatorClass;

struct _GtkVSeparator
{
  GtkSeparator separator;
};

struct _GtkVSeparatorClass
{
  GtkSeparatorClass parent_class;
};


GType gtk_vseparator_get_type (void) __attribute__((__const__));
GtkWidget* gtk_vseparator_new (void);



# 213 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 214 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkwindow.h" 1
# 215 "/usr/include/gtk-2.0/gtk/gtk.h" 2


# 1 "/usr/include/gtk-2.0/gtk/gtktext.h" 1
# 218 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktree.h" 1
# 219 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreeitem.h" 1
# 220 "/usr/include/gtk-2.0/gtk/gtk.h" 2


# 1 "/usr/include/gtk-2.0/gtk/gtkclist.h" 1
# 34 "/usr/include/gtk-2.0/gtk/gtkclist.h"
# 1 "/usr/include/gtk-2.0/gtk/gtksignal.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkclist.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkalignment.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkclist.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtklabel.h" 1
# 37 "/usr/include/gtk-2.0/gtk/gtkclist.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkbutton.h" 1
# 38 "/usr/include/gtk-2.0/gtk/gtkclist.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkhscrollbar.h" 1
# 39 "/usr/include/gtk-2.0/gtk/gtkclist.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkvscrollbar.h" 1
# 40 "/usr/include/gtk-2.0/gtk/gtkclist.h" 2






enum {
  GTK_CLIST_IN_DRAG = 1 << 0,
  GTK_CLIST_ROW_HEIGHT_SET = 1 << 1,
  GTK_CLIST_SHOW_TITLES = 1 << 2,

  GTK_CLIST_ADD_MODE = 1 << 4,
  GTK_CLIST_AUTO_SORT = 1 << 5,
  GTK_CLIST_AUTO_RESIZE_BLOCKED = 1 << 6,
  GTK_CLIST_REORDERABLE = 1 << 7,
  GTK_CLIST_USE_DRAG_ICONS = 1 << 8,
  GTK_CLIST_DRAW_DRAG_LINE = 1 << 9,
  GTK_CLIST_DRAW_DRAG_RECT = 1 << 10
};


typedef enum
{
  GTK_CELL_EMPTY,
  GTK_CELL_TEXT,
  GTK_CELL_PIXMAP,
  GTK_CELL_PIXTEXT,
  GTK_CELL_WIDGET
} GtkCellType;

typedef enum
{
  GTK_CLIST_DRAG_NONE,
  GTK_CLIST_DRAG_BEFORE,
  GTK_CLIST_DRAG_INTO,
  GTK_CLIST_DRAG_AFTER
} GtkCListDragPos;

typedef enum
{
  GTK_BUTTON_IGNORED = 0,
  GTK_BUTTON_SELECTS = 1 << 0,
  GTK_BUTTON_DRAGS = 1 << 1,
  GTK_BUTTON_EXPANDS = 1 << 2
} GtkButtonAction;
# 117 "/usr/include/gtk-2.0/gtk/gtkclist.h"
typedef struct _GtkCList GtkCList;
typedef struct _GtkCListClass GtkCListClass;
typedef struct _GtkCListColumn GtkCListColumn;
typedef struct _GtkCListRow GtkCListRow;

typedef struct _GtkCell GtkCell;
typedef struct _GtkCellText GtkCellText;
typedef struct _GtkCellPixmap GtkCellPixmap;
typedef struct _GtkCellPixText GtkCellPixText;
typedef struct _GtkCellWidget GtkCellWidget;

typedef gint (*GtkCListCompareFunc) (GtkCList *clist,
         gconstpointer ptr1,
         gconstpointer ptr2);

typedef struct _GtkCListCellInfo GtkCListCellInfo;
typedef struct _GtkCListDestInfo GtkCListDestInfo;

struct _GtkCListCellInfo
{
  gint row;
  gint column;
};

struct _GtkCListDestInfo
{
  GtkCListCellInfo cell;
  GtkCListDragPos insert_pos;
};

struct _GtkCList
{
  GtkContainer container;

  guint16 flags;

  gpointer reserved1;
  gpointer reserved2;

  guint freeze_count;



  GdkRectangle internal_allocation;


  gint rows;
  gint row_height;
  GList *row_list;
  GList *row_list_end;


  gint columns;
  GdkRectangle column_title_area;
  GdkWindow *title_window;


  GtkCListColumn *column;



  GdkWindow *clist_window;
  gint clist_window_width;
  gint clist_window_height;


  gint hoffset;
  gint voffset;


  GtkShadowType shadow_type;


  GtkSelectionMode selection_mode;


  GList *selection;
  GList *selection_end;

  GList *undo_selection;
  GList *undo_unselection;
  gint undo_anchor;


  guint8 button_actions[5];

  guint8 drag_button;


  GtkCListCellInfo click_cell;


  GtkAdjustment *hadjustment;
  GtkAdjustment *vadjustment;


  GdkGC *xor_gc;


  GdkGC *fg_gc;
  GdkGC *bg_gc;


  GdkCursor *cursor_drag;


  gint x_drag;


  gint focus_row;

  gint focus_header_column;


  gint anchor;
  GtkStateType anchor_state;
  gint drag_pos;
  gint htimer;
  gint vtimer;

  GtkSortType sort_type;
  GtkCListCompareFunc compare;
  gint sort_column;

  gint drag_highlight_row;
  GtkCListDragPos drag_highlight_pos;
};

struct _GtkCListClass
{
  GtkContainerClass parent_class;

  void (*set_scroll_adjustments) (GtkCList *clist,
       GtkAdjustment *hadjustment,
       GtkAdjustment *vadjustment);
  void (*refresh) (GtkCList *clist);
  void (*select_row) (GtkCList *clist,
     gint row,
     gint column,
     GdkEvent *event);
  void (*unselect_row) (GtkCList *clist,
     gint row,
     gint column,
     GdkEvent *event);
  void (*row_move) (GtkCList *clist,
     gint source_row,
     gint dest_row);
  void (*click_column) (GtkCList *clist,
     gint column);
  void (*resize_column) (GtkCList *clist,
     gint column,
                                 gint width);
  void (*toggle_focus_row) (GtkCList *clist);
  void (*select_all) (GtkCList *clist);
  void (*unselect_all) (GtkCList *clist);
  void (*undo_selection) (GtkCList *clist);
  void (*start_selection) (GtkCList *clist);
  void (*end_selection) (GtkCList *clist);
  void (*extend_selection) (GtkCList *clist,
     GtkScrollType scroll_type,
     gfloat position,
     gboolean auto_start_selection);
  void (*scroll_horizontal) (GtkCList *clist,
     GtkScrollType scroll_type,
     gfloat position);
  void (*scroll_vertical) (GtkCList *clist,
     GtkScrollType scroll_type,
     gfloat position);
  void (*toggle_add_mode) (GtkCList *clist);
  void (*abort_column_resize) (GtkCList *clist);
  void (*resync_selection) (GtkCList *clist,
     GdkEvent *event);
  GList* (*selection_find) (GtkCList *clist,
     gint row_number,
     GList *row_list_element);
  void (*draw_row) (GtkCList *clist,
     GdkRectangle *area,
     gint row,
     GtkCListRow *clist_row);
  void (*draw_drag_highlight) (GtkCList *clist,
     GtkCListRow *target_row,
     gint target_row_number,
     GtkCListDragPos drag_pos);
  void (*clear) (GtkCList *clist);
  void (*fake_unselect_all) (GtkCList *clist,
     gint row);
  void (*sort_list) (GtkCList *clist);
  gint (*insert_row) (GtkCList *clist,
     gint row,
     gchar *text[]);
  void (*remove_row) (GtkCList *clist,
     gint row);
  void (*set_cell_contents) (GtkCList *clist,
     GtkCListRow *clist_row,
     gint column,
     GtkCellType type,
     const gchar *text,
     guint8 spacing,
     GdkPixmap *pixmap,
     GdkBitmap *mask);
  void (*cell_size_request) (GtkCList *clist,
     GtkCListRow *clist_row,
     gint column,
     GtkRequisition *requisition);

};

struct _GtkCListColumn
{
  gchar *title;
  GdkRectangle area;

  GtkWidget *button;
  GdkWindow *window;

  gint width;
  gint min_width;
  gint max_width;
  GtkJustification justification;

  guint visible : 1;
  guint width_set : 1;
  guint resizeable : 1;
  guint auto_resize : 1;
  guint button_passive : 1;
};

struct _GtkCListRow
{
  GtkCell *cell;
  GtkStateType state;

  GdkColor foreground;
  GdkColor background;

  GtkStyle *style;

  gpointer data;
  GDestroyNotify destroy;

  guint fg_set : 1;
  guint bg_set : 1;
  guint selectable : 1;
};


struct _GtkCellText
{
  GtkCellType type;

  gint16 vertical;
  gint16 horizontal;

  GtkStyle *style;

  gchar *text;
};

struct _GtkCellPixmap
{
  GtkCellType type;

  gint16 vertical;
  gint16 horizontal;

  GtkStyle *style;

  GdkPixmap *pixmap;
  GdkBitmap *mask;
};

struct _GtkCellPixText
{
  GtkCellType type;

  gint16 vertical;
  gint16 horizontal;

  GtkStyle *style;

  gchar *text;
  guint8 spacing;
  GdkPixmap *pixmap;
  GdkBitmap *mask;
};

struct _GtkCellWidget
{
  GtkCellType type;

  gint16 vertical;
  gint16 horizontal;

  GtkStyle *style;

  GtkWidget *widget;
};

struct _GtkCell
{
  GtkCellType type;

  gint16 vertical;
  gint16 horizontal;

  GtkStyle *style;

  union {
    gchar *text;

    struct {
      GdkPixmap *pixmap;
      GdkBitmap *mask;
    } pm;

    struct {
      gchar *text;
      guint8 spacing;
      GdkPixmap *pixmap;
      GdkBitmap *mask;
    } pt;

    GtkWidget *widget;
  } u;
};

GType gtk_clist_get_type (void) __attribute__((__const__));


GtkWidget* gtk_clist_new (gint columns);
GtkWidget* gtk_clist_new_with_titles (gint columns,
          gchar *titles[]);


void gtk_clist_set_hadjustment (GtkCList *clist,
    GtkAdjustment *adjustment);
void gtk_clist_set_vadjustment (GtkCList *clist,
    GtkAdjustment *adjustment);


GtkAdjustment* gtk_clist_get_hadjustment (GtkCList *clist);
GtkAdjustment* gtk_clist_get_vadjustment (GtkCList *clist);


void gtk_clist_set_shadow_type (GtkCList *clist,
    GtkShadowType type);


void gtk_clist_set_selection_mode (GtkCList *clist,
       GtkSelectionMode mode);


void gtk_clist_set_reorderable (GtkCList *clist,
    gboolean reorderable);
void gtk_clist_set_use_drag_icons (GtkCList *clist,
       gboolean use_icons);
void gtk_clist_set_button_actions (GtkCList *clist,
       guint button,
       guint8 button_actions);





void gtk_clist_freeze (GtkCList *clist);
void gtk_clist_thaw (GtkCList *clist);


void gtk_clist_column_titles_show (GtkCList *clist);
void gtk_clist_column_titles_hide (GtkCList *clist);





void gtk_clist_column_title_active (GtkCList *clist,
          gint column);
void gtk_clist_column_title_passive (GtkCList *clist,
          gint column);
void gtk_clist_column_titles_active (GtkCList *clist);
void gtk_clist_column_titles_passive (GtkCList *clist);


void gtk_clist_set_column_title (GtkCList *clist,
     gint column,
     const gchar *title);


gchar * gtk_clist_get_column_title (GtkCList *clist,
        gint column);


void gtk_clist_set_column_widget (GtkCList *clist,
      gint column,
      GtkWidget *widget);


GtkWidget * gtk_clist_get_column_widget (GtkCList *clist,
      gint column);


void gtk_clist_set_column_justification (GtkCList *clist,
      gint column,
      GtkJustification justification);


void gtk_clist_set_column_visibility (GtkCList *clist,
          gint column,
          gboolean visible);


void gtk_clist_set_column_resizeable (GtkCList *clist,
          gint column,
          gboolean resizeable);


void gtk_clist_set_column_auto_resize (GtkCList *clist,
           gint column,
           gboolean auto_resize);

gint gtk_clist_columns_autosize (GtkCList *clist);


gint gtk_clist_optimal_column_width (GtkCList *clist,
         gint column);





void gtk_clist_set_column_width (GtkCList *clist,
     gint column,
     gint width);


void gtk_clist_set_column_min_width (GtkCList *clist,
         gint column,
         gint min_width);
void gtk_clist_set_column_max_width (GtkCList *clist,
         gint column,
         gint max_width);




void gtk_clist_set_row_height (GtkCList *clist,
          guint height);






void gtk_clist_moveto (GtkCList *clist,
         gint row,
         gint column,
         gfloat row_align,
         gfloat col_align);


GtkVisibility gtk_clist_row_is_visible (GtkCList *clist,
     gint row);


GtkCellType gtk_clist_get_cell_type (GtkCList *clist,
         gint row,
         gint column);


void gtk_clist_set_text (GtkCList *clist,
    gint row,
    gint column,
    const gchar *text);




gint gtk_clist_get_text (GtkCList *clist,
    gint row,
    gint column,
    gchar **text);


void gtk_clist_set_pixmap (GtkCList *clist,
      gint row,
      gint column,
      GdkPixmap *pixmap,
      GdkBitmap *mask);

gint gtk_clist_get_pixmap (GtkCList *clist,
      gint row,
      gint column,
      GdkPixmap **pixmap,
      GdkBitmap **mask);


void gtk_clist_set_pixtext (GtkCList *clist,
       gint row,
       gint column,
       const gchar *text,
       guint8 spacing,
       GdkPixmap *pixmap,
       GdkBitmap *mask);

gint gtk_clist_get_pixtext (GtkCList *clist,
       gint row,
       gint column,
       gchar **text,
       guint8 *spacing,
       GdkPixmap **pixmap,
       GdkBitmap **mask);




void gtk_clist_set_foreground (GtkCList *clist,
          gint row,
          const GdkColor *color);




void gtk_clist_set_background (GtkCList *clist,
          gint row,
          const GdkColor *color);


void gtk_clist_set_cell_style (GtkCList *clist,
          gint row,
          gint column,
          GtkStyle *style);

GtkStyle *gtk_clist_get_cell_style (GtkCList *clist,
        gint row,
        gint column);

void gtk_clist_set_row_style (GtkCList *clist,
         gint row,
         GtkStyle *style);

GtkStyle *gtk_clist_get_row_style (GtkCList *clist,
       gint row);





void gtk_clist_set_shift (GtkCList *clist,
     gint row,
     gint column,
     gint vertical,
     gint horizontal);


void gtk_clist_set_selectable (GtkCList *clist,
          gint row,
          gboolean selectable);
gboolean gtk_clist_get_selectable (GtkCList *clist,
       gint row);




gint gtk_clist_prepend (GtkCList *clist,
          gchar *text[]);
gint gtk_clist_append (GtkCList *clist,
   gchar *text[]);




gint gtk_clist_insert (GtkCList *clist,
         gint row,
         gchar *text[]);


void gtk_clist_remove (GtkCList *clist,
         gint row);


void gtk_clist_set_row_data (GtkCList *clist,
        gint row,
        gpointer data);


void gtk_clist_set_row_data_full (GtkCList *clist,
             gint row,
             gpointer data,
      GDestroyNotify destroy);


gpointer gtk_clist_get_row_data (GtkCList *clist,
     gint row);




gint gtk_clist_find_row_from_data (GtkCList *clist,
       gpointer data);


void gtk_clist_select_row (GtkCList *clist,
      gint row,
      gint column);


void gtk_clist_unselect_row (GtkCList *clist,
        gint row,
        gint column);


void gtk_clist_undo_selection (GtkCList *clist);




void gtk_clist_clear (GtkCList *clist);





gint gtk_clist_get_selection_info (GtkCList *clist,
            gint x,
            gint y,
            gint *row,
            gint *column);


void gtk_clist_select_all (GtkCList *clist);


void gtk_clist_unselect_all (GtkCList *clist);


void gtk_clist_swap_rows (GtkCList *clist,
     gint row1,
     gint row2);


void gtk_clist_row_move (GtkCList *clist,
    gint source_row,
    gint dest_row);


void gtk_clist_set_compare_func (GtkCList *clist,
     GtkCListCompareFunc cmp_func);


void gtk_clist_set_sort_column (GtkCList *clist,
    gint column);


void gtk_clist_set_sort_type (GtkCList *clist,
         GtkSortType sort_type);


void gtk_clist_sort (GtkCList *clist);


void gtk_clist_set_auto_sort (GtkCList *clist,
         gboolean auto_sort);



PangoLayout *_gtk_clist_create_cell_layout (GtkCList *clist,
         GtkCListRow *clist_row,
         gint column);



# 223 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcombo.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkcombo.h"

# 45 "/usr/include/gtk-2.0/gtk/gtkcombo.h"
typedef struct _GtkCombo GtkCombo;
typedef struct _GtkComboClass GtkComboClass;


struct _GtkCombo {
 GtkHBox hbox;


 GtkWidget *entry;


 GtkWidget *button;
 GtkWidget *popup;
 GtkWidget *popwin;


 GtkWidget *list;


 guint entry_change_id;
 guint list_change_id;

 guint value_in_list:1;
 guint ok_if_empty:1;
 guint case_sensitive:1;
 guint use_arrows:1;
 guint use_arrows_always:1;

        guint16 current_button;
 guint activate_id;
};

struct _GtkComboClass {
 GtkHBoxClass parent_class;


        void (*_gtk_reserved1) (void);
        void (*_gtk_reserved2) (void);
        void (*_gtk_reserved3) (void);
        void (*_gtk_reserved4) (void);
};

GType gtk_combo_get_type (void) __attribute__((__const__));

GtkWidget* gtk_combo_new (void);

void gtk_combo_set_value_in_list (GtkCombo* combo,
                                            gboolean val,
                                            gboolean ok_if_empty);

void gtk_combo_set_use_arrows (GtkCombo* combo,
                                            gboolean val);

void gtk_combo_set_use_arrows_always (GtkCombo* combo,
                                            gboolean val);

void gtk_combo_set_case_sensitive (GtkCombo* combo,
                                            gboolean val);


void gtk_combo_set_item_string (GtkCombo* combo,
                                            GtkItem* item,
                                            const gchar* item_value);

void gtk_combo_set_popdown_strings (GtkCombo* combo,
                                            GList *strings);

void gtk_combo_disable_activate (GtkCombo* combo);


# 224 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkctree.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkctree.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkclist.h" 1
# 37 "/usr/include/gtk-2.0/gtk/gtkctree.h" 2


# 55 "/usr/include/gtk-2.0/gtk/gtkctree.h"
typedef enum
{
  GTK_CTREE_POS_BEFORE,
  GTK_CTREE_POS_AS_CHILD,
  GTK_CTREE_POS_AFTER
} GtkCTreePos;

typedef enum
{
  GTK_CTREE_LINES_NONE,
  GTK_CTREE_LINES_SOLID,
  GTK_CTREE_LINES_DOTTED,
  GTK_CTREE_LINES_TABBED
} GtkCTreeLineStyle;

typedef enum
{
  GTK_CTREE_EXPANDER_NONE,
  GTK_CTREE_EXPANDER_SQUARE,
  GTK_CTREE_EXPANDER_TRIANGLE,
  GTK_CTREE_EXPANDER_CIRCULAR
} GtkCTreeExpanderStyle;

typedef enum
{
  GTK_CTREE_EXPANSION_EXPAND,
  GTK_CTREE_EXPANSION_EXPAND_RECURSIVE,
  GTK_CTREE_EXPANSION_COLLAPSE,
  GTK_CTREE_EXPANSION_COLLAPSE_RECURSIVE,
  GTK_CTREE_EXPANSION_TOGGLE,
  GTK_CTREE_EXPANSION_TOGGLE_RECURSIVE
} GtkCTreeExpansionType;

typedef struct _GtkCTree GtkCTree;
typedef struct _GtkCTreeClass GtkCTreeClass;
typedef struct _GtkCTreeRow GtkCTreeRow;
typedef struct _GtkCTreeNode GtkCTreeNode;

typedef void (*GtkCTreeFunc) (GtkCTree *ctree,
         GtkCTreeNode *node,
         gpointer data);

typedef gboolean (*GtkCTreeGNodeFunc) (GtkCTree *ctree,
                                       guint depth,
                                       GNode *gnode,
           GtkCTreeNode *cnode,
                                       gpointer data);

typedef gboolean (*GtkCTreeCompareDragFunc) (GtkCTree *ctree,
                                             GtkCTreeNode *source_node,
                                             GtkCTreeNode *new_parent,
                                             GtkCTreeNode *new_sibling);

struct _GtkCTree
{
  GtkCList clist;

  GdkGC *lines_gc;

  gint tree_indent;
  gint tree_spacing;
  gint tree_column;

  guint line_style : 2;
  guint expander_style : 2;
  guint show_stub : 1;

  GtkCTreeCompareDragFunc drag_compare;
};

struct _GtkCTreeClass
{
  GtkCListClass parent_class;

  void (*tree_select_row) (GtkCTree *ctree,
        GtkCTreeNode *row,
        gint column);
  void (*tree_unselect_row) (GtkCTree *ctree,
        GtkCTreeNode *row,
        gint column);
  void (*tree_expand) (GtkCTree *ctree,
        GtkCTreeNode *node);
  void (*tree_collapse) (GtkCTree *ctree,
        GtkCTreeNode *node);
  void (*tree_move) (GtkCTree *ctree,
        GtkCTreeNode *node,
        GtkCTreeNode *new_parent,
        GtkCTreeNode *new_sibling);
  void (*change_focus_row_expansion) (GtkCTree *ctree,
          GtkCTreeExpansionType action);
};

struct _GtkCTreeRow
{
  GtkCListRow row;

  GtkCTreeNode *parent;
  GtkCTreeNode *sibling;
  GtkCTreeNode *children;

  GdkPixmap *pixmap_closed;
  GdkBitmap *mask_closed;
  GdkPixmap *pixmap_opened;
  GdkBitmap *mask_opened;

  guint16 level;

  guint is_leaf : 1;
  guint expanded : 1;
};

struct _GtkCTreeNode {
  GList list;
};






GType gtk_ctree_get_type (void) __attribute__((__const__));
GtkWidget * gtk_ctree_new_with_titles (gint columns,
        gint tree_column,
        gchar *titles[]);
GtkWidget * gtk_ctree_new (gint columns,
        gint tree_column);
GtkCTreeNode * gtk_ctree_insert_node (GtkCTree *ctree,
        GtkCTreeNode *parent,
        GtkCTreeNode *sibling,
        gchar *text[],
        guint8 spacing,
        GdkPixmap *pixmap_closed,
        GdkBitmap *mask_closed,
        GdkPixmap *pixmap_opened,
        GdkBitmap *mask_opened,
        gboolean is_leaf,
        gboolean expanded);
void gtk_ctree_remove_node (GtkCTree *ctree,
        GtkCTreeNode *node);
GtkCTreeNode * gtk_ctree_insert_gnode (GtkCTree *ctree,
        GtkCTreeNode *parent,
        GtkCTreeNode *sibling,
        GNode *gnode,
        GtkCTreeGNodeFunc func,
        gpointer data);
GNode * gtk_ctree_export_to_gnode (GtkCTree *ctree,
        GNode *parent,
        GNode *sibling,
        GtkCTreeNode *node,
        GtkCTreeGNodeFunc func,
        gpointer data);






void gtk_ctree_post_recursive (GtkCTree *ctree,
        GtkCTreeNode *node,
        GtkCTreeFunc func,
        gpointer data);
void gtk_ctree_post_recursive_to_depth (GtkCTree *ctree,
        GtkCTreeNode *node,
        gint depth,
        GtkCTreeFunc func,
        gpointer data);
void gtk_ctree_pre_recursive (GtkCTree *ctree,
        GtkCTreeNode *node,
        GtkCTreeFunc func,
        gpointer data);
void gtk_ctree_pre_recursive_to_depth (GtkCTree *ctree,
        GtkCTreeNode *node,
        gint depth,
        GtkCTreeFunc func,
        gpointer data);
gboolean gtk_ctree_is_viewable (GtkCTree *ctree,
               GtkCTreeNode *node);
GtkCTreeNode * gtk_ctree_last (GtkCTree *ctree,
               GtkCTreeNode *node);
GtkCTreeNode * gtk_ctree_find_node_ptr (GtkCTree *ctree,
               GtkCTreeRow *ctree_row);
GtkCTreeNode * gtk_ctree_node_nth (GtkCTree *ctree,
        guint row);
gboolean gtk_ctree_find (GtkCTree *ctree,
               GtkCTreeNode *node,
               GtkCTreeNode *child);
gboolean gtk_ctree_is_ancestor (GtkCTree *ctree,
               GtkCTreeNode *node,
               GtkCTreeNode *child);
GtkCTreeNode * gtk_ctree_find_by_row_data (GtkCTree *ctree,
               GtkCTreeNode *node,
               gpointer data);

GList * gtk_ctree_find_all_by_row_data (GtkCTree *ctree,
        GtkCTreeNode *node,
        gpointer data);
GtkCTreeNode * gtk_ctree_find_by_row_data_custom (GtkCTree *ctree,
        GtkCTreeNode *node,
        gpointer data,
        GCompareFunc func);

GList * gtk_ctree_find_all_by_row_data_custom (GtkCTree *ctree,
        GtkCTreeNode *node,
        gpointer data,
        GCompareFunc func);
gboolean gtk_ctree_is_hot_spot (GtkCTree *ctree,
               gint x,
               gint y);





void gtk_ctree_move (GtkCTree *ctree,
        GtkCTreeNode *node,
        GtkCTreeNode *new_parent,
        GtkCTreeNode *new_sibling);
void gtk_ctree_expand (GtkCTree *ctree,
        GtkCTreeNode *node);
void gtk_ctree_expand_recursive (GtkCTree *ctree,
        GtkCTreeNode *node);
void gtk_ctree_expand_to_depth (GtkCTree *ctree,
        GtkCTreeNode *node,
        gint depth);
void gtk_ctree_collapse (GtkCTree *ctree,
        GtkCTreeNode *node);
void gtk_ctree_collapse_recursive (GtkCTree *ctree,
        GtkCTreeNode *node);
void gtk_ctree_collapse_to_depth (GtkCTree *ctree,
        GtkCTreeNode *node,
        gint depth);
void gtk_ctree_toggle_expansion (GtkCTree *ctree,
        GtkCTreeNode *node);
void gtk_ctree_toggle_expansion_recursive (GtkCTree *ctree,
        GtkCTreeNode *node);
void gtk_ctree_select (GtkCTree *ctree,
        GtkCTreeNode *node);
void gtk_ctree_select_recursive (GtkCTree *ctree,
        GtkCTreeNode *node);
void gtk_ctree_unselect (GtkCTree *ctree,
        GtkCTreeNode *node);
void gtk_ctree_unselect_recursive (GtkCTree *ctree,
        GtkCTreeNode *node);
void gtk_ctree_real_select_recursive (GtkCTree *ctree,
        GtkCTreeNode *node,
        gint state);





void gtk_ctree_node_set_text (GtkCTree *ctree,
        GtkCTreeNode *node,
        gint column,
        const gchar *text);
void gtk_ctree_node_set_pixmap (GtkCTree *ctree,
        GtkCTreeNode *node,
        gint column,
        GdkPixmap *pixmap,
        GdkBitmap *mask);
void gtk_ctree_node_set_pixtext (GtkCTree *ctree,
        GtkCTreeNode *node,
        gint column,
        const gchar *text,
        guint8 spacing,
        GdkPixmap *pixmap,
        GdkBitmap *mask);
void gtk_ctree_set_node_info (GtkCTree *ctree,
        GtkCTreeNode *node,
        const gchar *text,
        guint8 spacing,
        GdkPixmap *pixmap_closed,
        GdkBitmap *mask_closed,
        GdkPixmap *pixmap_opened,
        GdkBitmap *mask_opened,
        gboolean is_leaf,
        gboolean expanded);
void gtk_ctree_node_set_shift (GtkCTree *ctree,
        GtkCTreeNode *node,
        gint column,
        gint vertical,
        gint horizontal);
void gtk_ctree_node_set_selectable (GtkCTree *ctree,
        GtkCTreeNode *node,
        gboolean selectable);
gboolean gtk_ctree_node_get_selectable (GtkCTree *ctree,
        GtkCTreeNode *node);
GtkCellType gtk_ctree_node_get_cell_type (GtkCTree *ctree,
        GtkCTreeNode *node,
        gint column);
gboolean gtk_ctree_node_get_text (GtkCTree *ctree,
        GtkCTreeNode *node,
        gint column,
        gchar **text);
gboolean gtk_ctree_node_get_pixmap (GtkCTree *ctree,
        GtkCTreeNode *node,
        gint column,
        GdkPixmap **pixmap,
        GdkBitmap **mask);
gboolean gtk_ctree_node_get_pixtext (GtkCTree *ctree,
        GtkCTreeNode *node,
        gint column,
        gchar **text,
        guint8 *spacing,
        GdkPixmap **pixmap,
        GdkBitmap **mask);
gboolean gtk_ctree_get_node_info (GtkCTree *ctree,
        GtkCTreeNode *node,
        gchar **text,
        guint8 *spacing,
        GdkPixmap **pixmap_closed,
        GdkBitmap **mask_closed,
        GdkPixmap **pixmap_opened,
        GdkBitmap **mask_opened,
        gboolean *is_leaf,
        gboolean *expanded);
void gtk_ctree_node_set_row_style (GtkCTree *ctree,
        GtkCTreeNode *node,
        GtkStyle *style);
GtkStyle * gtk_ctree_node_get_row_style (GtkCTree *ctree,
        GtkCTreeNode *node);
void gtk_ctree_node_set_cell_style (GtkCTree *ctree,
        GtkCTreeNode *node,
        gint column,
        GtkStyle *style);
GtkStyle * gtk_ctree_node_get_cell_style (GtkCTree *ctree,
        GtkCTreeNode *node,
        gint column);
void gtk_ctree_node_set_foreground (GtkCTree *ctree,
        GtkCTreeNode *node,
        const GdkColor *color);
void gtk_ctree_node_set_background (GtkCTree *ctree,
        GtkCTreeNode *node,
        const GdkColor *color);
void gtk_ctree_node_set_row_data (GtkCTree *ctree,
        GtkCTreeNode *node,
        gpointer data);
void gtk_ctree_node_set_row_data_full (GtkCTree *ctree,
        GtkCTreeNode *node,
        gpointer data,
        GDestroyNotify destroy);
gpointer gtk_ctree_node_get_row_data (GtkCTree *ctree,
        GtkCTreeNode *node);
void gtk_ctree_node_moveto (GtkCTree *ctree,
        GtkCTreeNode *node,
        gint column,
        gfloat row_align,
        gfloat col_align);
GtkVisibility gtk_ctree_node_is_visible (GtkCTree *ctree,
        GtkCTreeNode *node);





void gtk_ctree_set_indent (GtkCTree *ctree,
          gint indent);
void gtk_ctree_set_spacing (GtkCTree *ctree,
          gint spacing);
void gtk_ctree_set_show_stub (GtkCTree *ctree,
          gboolean show_stub);
void gtk_ctree_set_line_style (GtkCTree *ctree,
          GtkCTreeLineStyle line_style);
void gtk_ctree_set_expander_style (GtkCTree *ctree,
          GtkCTreeExpanderStyle expander_style);
void gtk_ctree_set_drag_compare_func (GtkCTree *ctree,
          GtkCTreeCompareDragFunc cmp_func);





void gtk_ctree_sort_node (GtkCTree *ctree,
        GtkCTreeNode *node);
void gtk_ctree_sort_recursive (GtkCTree *ctree,
        GtkCTreeNode *node);
# 439 "/usr/include/gtk-2.0/gtk/gtkctree.h"
GType gtk_ctree_node_get_type (void) __attribute__((__const__));


# 225 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkfilesel.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkfilesel.h"

# 46 "/usr/include/gtk-2.0/gtk/gtkfilesel.h"
typedef struct _GtkFileSelection GtkFileSelection;
typedef struct _GtkFileSelectionClass GtkFileSelectionClass;

struct _GtkFileSelection
{

  GtkDialog parent_instance;


  GtkWidget *dir_list;
  GtkWidget *file_list;
  GtkWidget *selection_entry;
  GtkWidget *selection_text;
  GtkWidget *main_vbox;
  GtkWidget *ok_button;
  GtkWidget *cancel_button;
  GtkWidget *help_button;
  GtkWidget *history_pulldown;
  GtkWidget *history_menu;
  GList *history_list;
  GtkWidget *fileop_dialog;
  GtkWidget *fileop_entry;
  gchar *fileop_file;
  gpointer cmpl_state;

  GtkWidget *fileop_c_dir;
  GtkWidget *fileop_del_file;
  GtkWidget *fileop_ren_file;

  GtkWidget *button_area;
  GtkWidget *action_area;


  GPtrArray *selected_names;
  gchar *last_selected;
};

struct _GtkFileSelectionClass
{
  GtkDialogClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
# 102 "/usr/include/gtk-2.0/gtk/gtkfilesel.h"
GType gtk_file_selection_get_type (void) __attribute__((__const__));
GtkWidget* gtk_file_selection_new (const gchar *title);
void gtk_file_selection_set_filename (GtkFileSelection *filesel,
         const gchar *filename);
const gchar* gtk_file_selection_get_filename (GtkFileSelection *filesel);

void gtk_file_selection_complete (GtkFileSelection *filesel,
         const gchar *pattern);
void gtk_file_selection_show_fileop_buttons (GtkFileSelection *filesel);
void gtk_file_selection_hide_fileop_buttons (GtkFileSelection *filesel);

gchar** gtk_file_selection_get_selections (GtkFileSelection *filesel);

void gtk_file_selection_set_select_multiple (GtkFileSelection *filesel,
         gboolean select_multiple);
gboolean gtk_file_selection_get_select_multiple (GtkFileSelection *filesel);



# 226 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkitemfactory.h" 1
# 38 "/usr/include/gtk-2.0/gtk/gtkitemfactory.h"


typedef void (*GtkPrintFunc) (gpointer func_data,
         const gchar *str);





typedef void (*GtkItemFactoryCallback) ();
typedef void (*GtkItemFactoryCallback1) (gpointer callback_data,
         guint callback_action,
         GtkWidget *widget);
# 60 "/usr/include/gtk-2.0/gtk/gtkitemfactory.h"
typedef struct _GtkItemFactory GtkItemFactory;
typedef struct _GtkItemFactoryClass GtkItemFactoryClass;
typedef struct _GtkItemFactoryEntry GtkItemFactoryEntry;
typedef struct _GtkItemFactoryItem GtkItemFactoryItem;

struct _GtkItemFactory
{
  GtkObject object;

  gchar *path;
  GtkAccelGroup *accel_group;
  GtkWidget *widget;
  GSList *items;

  GtkTranslateFunc translate_func;
  gpointer translate_data;
  GDestroyNotify translate_notify;
};

struct _GtkItemFactoryClass
{
  GtkObjectClass object_class;

  GHashTable *item_ht;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

struct _GtkItemFactoryEntry
{
  gchar *path;
  gchar *accelerator;

  GtkItemFactoryCallback callback;
  guint callback_action;
# 116 "/usr/include/gtk-2.0/gtk/gtkitemfactory.h"
  gchar *item_type;





  gconstpointer extra_data;
};

struct _GtkItemFactoryItem
{
  gchar *path;
  GSList *widgets;
};


GType gtk_item_factory_get_type (void) __attribute__((__const__));




GtkItemFactory* gtk_item_factory_new (GType container_type,
         const gchar *path,
         GtkAccelGroup *accel_group);
void gtk_item_factory_construct (GtkItemFactory *ifactory,
         GType container_type,
         const gchar *path,
         GtkAccelGroup *accel_group);



void gtk_item_factory_add_foreign (GtkWidget *accel_widget,
           const gchar *full_path,
           GtkAccelGroup *accel_group,
           guint keyval,
           GdkModifierType modifiers);

GtkItemFactory* gtk_item_factory_from_widget (GtkWidget *widget);
const gchar* gtk_item_factory_path_from_widget (GtkWidget *widget);

GtkWidget* gtk_item_factory_get_item (GtkItemFactory *ifactory,
             const gchar *path);
GtkWidget* gtk_item_factory_get_widget (GtkItemFactory *ifactory,
             const gchar *path);
GtkWidget* gtk_item_factory_get_widget_by_action (GtkItemFactory *ifactory,
             guint action);
GtkWidget* gtk_item_factory_get_item_by_action (GtkItemFactory *ifactory,
             guint action);

void gtk_item_factory_create_item (GtkItemFactory *ifactory,
      GtkItemFactoryEntry *entry,
      gpointer callback_data,
      guint callback_type);
void gtk_item_factory_create_items (GtkItemFactory *ifactory,
      guint n_entries,
      GtkItemFactoryEntry *entries,
      gpointer callback_data);
void gtk_item_factory_delete_item (GtkItemFactory *ifactory,
      const gchar *path);
void gtk_item_factory_delete_entry (GtkItemFactory *ifactory,
      GtkItemFactoryEntry *entry);
void gtk_item_factory_delete_entries (GtkItemFactory *ifactory,
      guint n_entries,
      GtkItemFactoryEntry *entries);
void gtk_item_factory_popup (GtkItemFactory *ifactory,
      guint x,
      guint y,
      guint mouse_button,
      guint32 time_);
void gtk_item_factory_popup_with_data(GtkItemFactory *ifactory,
      gpointer popup_data,
      GDestroyNotify destroy,
      guint x,
      guint y,
      guint mouse_button,
      guint32 time_);
gpointer gtk_item_factory_popup_data (GtkItemFactory *ifactory);
gpointer gtk_item_factory_popup_data_from_widget (GtkWidget *widget);
void gtk_item_factory_set_translate_func (GtkItemFactory *ifactory,
         GtkTranslateFunc func,
         gpointer data,
         GDestroyNotify notify);





typedef void (*GtkMenuCallback) (GtkWidget *widget,
     gpointer user_data);
typedef struct {
  gchar *path;
  gchar *accelerator;
  GtkMenuCallback callback;
  gpointer callback_data;
  GtkWidget *widget;
} GtkMenuEntry;


typedef void (*GtkItemFactoryCallback2) (GtkWidget *widget,
         gpointer callback_data,
         guint callback_action);


void gtk_item_factory_create_items_ac (GtkItemFactory *ifactory,
       guint n_entries,
       GtkItemFactoryEntry *entries,
       gpointer callback_data,
       guint callback_type);

GtkItemFactory* gtk_item_factory_from_path (const gchar *path);
void gtk_item_factory_create_menu_entries (guint n_entries,
           GtkMenuEntry *entries);
void gtk_item_factories_path_delete (const gchar *ifactory_path,
         const gchar *path);





# 227 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtklist.h" 1
# 34 "/usr/include/gtk-2.0/gtk/gtklist.h"

# 44 "/usr/include/gtk-2.0/gtk/gtklist.h"
typedef struct _GtkList GtkList;
typedef struct _GtkListClass GtkListClass;

struct _GtkList
{
  GtkContainer container;

  GList *children;
  GList *selection;

  GList *undo_selection;
  GList *undo_unselection;

  GtkWidget *last_focus_child;
  GtkWidget *undo_focus_child;

  guint htimer;
  guint vtimer;

  gint anchor;
  gint drag_pos;
  GtkStateType anchor_state;

  guint selection_mode : 2;
  guint drag_selection:1;
  guint add_mode:1;
};

struct _GtkListClass
{
  GtkContainerClass parent_class;

  void (* selection_changed) (GtkList *list);
  void (* select_child) (GtkList *list,
         GtkWidget *child);
  void (* unselect_child) (GtkList *list,
         GtkWidget *child);
};


GType gtk_list_get_type (void) __attribute__((__const__));
GtkWidget* gtk_list_new (void);
void gtk_list_insert_items (GtkList *list,
        GList *items,
        gint position);
void gtk_list_append_items (GtkList *list,
        GList *items);
void gtk_list_prepend_items (GtkList *list,
        GList *items);
void gtk_list_remove_items (GtkList *list,
        GList *items);
void gtk_list_remove_items_no_unref (GtkList *list,
        GList *items);
void gtk_list_clear_items (GtkList *list,
        gint start,
        gint end);
void gtk_list_select_item (GtkList *list,
        gint item);
void gtk_list_unselect_item (GtkList *list,
        gint item);
void gtk_list_select_child (GtkList *list,
        GtkWidget *child);
void gtk_list_unselect_child (GtkList *list,
        GtkWidget *child);
gint gtk_list_child_position (GtkList *list,
        GtkWidget *child);
void gtk_list_set_selection_mode (GtkList *list,
        GtkSelectionMode mode);

void gtk_list_extend_selection (GtkList *list,
        GtkScrollType scroll_type,
        gfloat position,
        gboolean auto_start_selection);
void gtk_list_start_selection (GtkList *list);
void gtk_list_end_selection (GtkList *list);
void gtk_list_select_all (GtkList *list);
void gtk_list_unselect_all (GtkList *list);
void gtk_list_scroll_horizontal (GtkList *list,
        GtkScrollType scroll_type,
        gfloat position);
void gtk_list_scroll_vertical (GtkList *list,
        GtkScrollType scroll_type,
        gfloat position);
void gtk_list_toggle_add_mode (GtkList *list);
void gtk_list_toggle_focus_row (GtkList *list);
void gtk_list_toggle_row (GtkList *list,
        GtkWidget *item);
void gtk_list_undo_selection (GtkList *list);
void gtk_list_end_drag_selection (GtkList *list);


# 228 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtklistitem.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtklistitem.h"

# 46 "/usr/include/gtk-2.0/gtk/gtklistitem.h"
typedef struct _GtkListItem GtkListItem;
typedef struct _GtkListItemClass GtkListItemClass;

struct _GtkListItem
{
  GtkItem item;
};

struct _GtkListItemClass
{
  GtkItemClass parent_class;

  void (*toggle_focus_row) (GtkListItem *list_item);
  void (*select_all) (GtkListItem *list_item);
  void (*unselect_all) (GtkListItem *list_item);
  void (*undo_selection) (GtkListItem *list_item);
  void (*start_selection) (GtkListItem *list_item);
  void (*end_selection) (GtkListItem *list_item);
  void (*extend_selection) (GtkListItem *list_item,
        GtkScrollType scroll_type,
        gfloat position,
        gboolean auto_start_selection);
  void (*scroll_horizontal) (GtkListItem *list_item,
        GtkScrollType scroll_type,
        gfloat position);
  void (*scroll_vertical) (GtkListItem *list_item,
        GtkScrollType scroll_type,
        gfloat position);
  void (*toggle_add_mode) (GtkListItem *list_item);
};


GType gtk_list_item_get_type (void) __attribute__((__const__));
GtkWidget* gtk_list_item_new (void);
GtkWidget* gtk_list_item_new_with_label (const gchar *label);
void gtk_list_item_select (GtkListItem *list_item);
void gtk_list_item_deselect (GtkListItem *list_item);




# 229 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkoldeditable.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkoldeditable.h"

# 45 "/usr/include/gtk-2.0/gtk/gtkoldeditable.h"
typedef struct _GtkOldEditable GtkOldEditable;
typedef struct _GtkOldEditableClass GtkOldEditableClass;

typedef void (*GtkTextFunction) (GtkOldEditable *editable, guint32 time_);

struct _GtkOldEditable
{
  GtkWidget widget;


  guint current_pos;

  guint selection_start_pos;
  guint selection_end_pos;
  guint has_selection : 1;


  guint editable : 1;
  guint visible : 1;

  gchar *clipboard_text;
};

struct _GtkOldEditableClass
{
  GtkWidgetClass parent_class;


  void (* activate) (GtkOldEditable *editable);
  void (* set_editable) (GtkOldEditable *editable,
       gboolean is_editable);
  void (* move_cursor) (GtkOldEditable *editable,
       gint x,
       gint y);
  void (* move_word) (GtkOldEditable *editable,
       gint n);
  void (* move_page) (GtkOldEditable *editable,
       gint x,
       gint y);
  void (* move_to_row) (GtkOldEditable *editable,
       gint row);
  void (* move_to_column) (GtkOldEditable *editable,
       gint row);
  void (* kill_char) (GtkOldEditable *editable,
       gint direction);
  void (* kill_word) (GtkOldEditable *editable,
       gint direction);
  void (* kill_line) (GtkOldEditable *editable,
       gint direction);
  void (* cut_clipboard) (GtkOldEditable *editable);
  void (* copy_clipboard) (GtkOldEditable *editable);
  void (* paste_clipboard) (GtkOldEditable *editable);






  void (* update_text) (GtkOldEditable *editable,
    gint start_pos,
    gint end_pos);
  gchar* (* get_chars) (GtkOldEditable *editable,
    gint start_pos,
    gint end_pos);
  void (* set_selection)(GtkOldEditable *editable,
    gint start_pos,
    gint end_pos);
  void (* set_position) (GtkOldEditable *editable,
    gint position);
};

GType gtk_old_editable_get_type (void) __attribute__((__const__));
void gtk_old_editable_claim_selection (GtkOldEditable *old_editable,
          gboolean claim,
          guint32 time_);
void gtk_old_editable_changed (GtkOldEditable *old_editable);


# 230 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkoptionmenu.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkoptionmenu.h"

# 45 "/usr/include/gtk-2.0/gtk/gtkoptionmenu.h"
typedef struct _GtkOptionMenu GtkOptionMenu;
typedef struct _GtkOptionMenuClass GtkOptionMenuClass;

struct _GtkOptionMenu
{
  GtkButton button;

  GtkWidget *menu;
  GtkWidget *menu_item;

  guint16 width;
  guint16 height;
};

struct _GtkOptionMenuClass
{
  GtkButtonClass parent_class;

  void (*changed) (GtkOptionMenu *option_menu);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_option_menu_get_type (void) __attribute__((__const__));
GtkWidget* gtk_option_menu_new (void);
GtkWidget* gtk_option_menu_get_menu (GtkOptionMenu *option_menu);
void gtk_option_menu_set_menu (GtkOptionMenu *option_menu,
     GtkWidget *menu);
void gtk_option_menu_remove_menu (GtkOptionMenu *option_menu);
gint gtk_option_menu_get_history (GtkOptionMenu *option_menu);
void gtk_option_menu_set_history (GtkOptionMenu *option_menu,
     guint index_);



# 231 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkpixmap.h" 1
# 232 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkpreview.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtkpreview.h"

# 45 "/usr/include/gtk-2.0/gtk/gtkpreview.h"
typedef struct _GtkPreview GtkPreview;
typedef struct _GtkPreviewInfo GtkPreviewInfo;
typedef union _GtkDitherInfo GtkDitherInfo;
typedef struct _GtkPreviewClass GtkPreviewClass;

struct _GtkPreview
{
  GtkWidget widget;

  guchar *buffer;
  guint16 buffer_width;
  guint16 buffer_height;

  guint16 bpp;
  guint16 rowstride;

  GdkRgbDither dither;

  guint type : 1;
  guint expand : 1;
};

struct _GtkPreviewInfo
{
  guchar *lookup;

  gdouble gamma;
};

union _GtkDitherInfo
{
  gushort s[2];
  guchar c[4];
};

struct _GtkPreviewClass
{
  GtkWidgetClass parent_class;

  GtkPreviewInfo info;

};


GType gtk_preview_get_type (void) __attribute__((__const__));
void gtk_preview_uninit (void);
GtkWidget* gtk_preview_new (GtkPreviewType type);
void gtk_preview_size (GtkPreview *preview,
      gint width,
      gint height);
void gtk_preview_put (GtkPreview *preview,
      GdkWindow *window,
      GdkGC *gc,
      gint srcx,
      gint srcy,
      gint destx,
      gint desty,
      gint width,
      gint height);
void gtk_preview_draw_row (GtkPreview *preview,
      guchar *data,
      gint x,
      gint y,
      gint w);
void gtk_preview_set_expand (GtkPreview *preview,
      gboolean expand);

void gtk_preview_set_gamma (double gamma_);
void gtk_preview_set_color_cube (guint nred_shades,
      guint ngreen_shades,
      guint nblue_shades,
      guint ngray_shades);
void gtk_preview_set_install_cmap (gint install_cmap);
void gtk_preview_set_reserved (gint nreserved);
void gtk_preview_set_dither (GtkPreview *preview,
      GdkRgbDither dither);
GdkVisual* gtk_preview_get_visual (void);
GdkColormap* gtk_preview_get_cmap (void);
GtkPreviewInfo* gtk_preview_get_info (void);






void gtk_preview_reset (void);



# 233 "/usr/include/gtk-2.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-2.0/gtk/gtksignal.h" 1
# 235 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktipsquery.h" 1
# 39 "/usr/include/gtk-2.0/gtk/gtktipsquery.h"

# 51 "/usr/include/gtk-2.0/gtk/gtktipsquery.h"
typedef struct _GtkTipsQuery GtkTipsQuery;
typedef struct _GtkTipsQueryClass GtkTipsQueryClass;



struct _GtkTipsQuery
{
  GtkLabel label;

  guint emit_always : 1;
  guint in_query : 1;
  gchar *label_inactive;
  gchar *label_no_tip;

  GtkWidget *caller;
  GtkWidget *last_crossed;

  GdkCursor *query_cursor;
};

struct _GtkTipsQueryClass
{
  GtkLabelClass parent_class;

  void (*start_query) (GtkTipsQuery *tips_query);
  void (*stop_query) (GtkTipsQuery *tips_query);
  void (*widget_entered) (GtkTipsQuery *tips_query,
     GtkWidget *widget,
     const gchar *tip_text,
     const gchar *tip_private);
  gint (*widget_selected) (GtkTipsQuery *tips_query,
     GtkWidget *widget,
     const gchar *tip_text,
     const gchar *tip_private,
     GdkEventButton *event);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};



GType gtk_tips_query_get_type (void) __attribute__((__const__));
GtkWidget* gtk_tips_query_new (void);
void gtk_tips_query_start_query (GtkTipsQuery *tips_query);
void gtk_tips_query_stop_query (GtkTipsQuery *tips_query);
void gtk_tips_query_set_caller (GtkTipsQuery *tips_query,
       GtkWidget *caller);
void gtk_tips_query_set_labels (GtkTipsQuery *tips_query,
       const gchar *label_inactive,
       const gchar *label_no_tip);


# 236 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktooltips.h" 1
# 237 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 35 "parser.c" 2
# 1 "/usr/include/glib-2.0/glib/gi18n.h" 1
# 25 "/usr/include/glib-2.0/glib/gi18n.h"
# 1 "/usr/include/libintl.h" 1 3 4
# 35 "/usr/include/libintl.h" 3 4





extern char *gettext (__const char *__msgid)
     __attribute__ ((__nothrow__)) __attribute__ ((__format_arg__ (1)));



extern char *dgettext (__const char *__domainname, __const char *__msgid)
     __attribute__ ((__nothrow__)) __attribute__ ((__format_arg__ (2)));
extern char *__dgettext (__const char *__domainname, __const char *__msgid)
     __attribute__ ((__nothrow__)) __attribute__ ((__format_arg__ (2)));



extern char *dcgettext (__const char *__domainname,
   __const char *__msgid, int __category)
     __attribute__ ((__nothrow__)) __attribute__ ((__format_arg__ (2)));
extern char *__dcgettext (__const char *__domainname,
     __const char *__msgid, int __category)
     __attribute__ ((__nothrow__)) __attribute__ ((__format_arg__ (2)));




extern char *ngettext (__const char *__msgid1, __const char *__msgid2,
         unsigned long int __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__format_arg__ (1))) __attribute__ ((__format_arg__ (2)));



extern char *dngettext (__const char *__domainname, __const char *__msgid1,
   __const char *__msgid2, unsigned long int __n)
     __attribute__ ((__nothrow__)) __attribute__ ((__format_arg__ (2))) __attribute__ ((__format_arg__ (3)));



extern char *dcngettext (__const char *__domainname, __const char *__msgid1,
    __const char *__msgid2, unsigned long int __n,
    int __category)
     __attribute__ ((__nothrow__)) __attribute__ ((__format_arg__ (2))) __attribute__ ((__format_arg__ (3)));





extern char *textdomain (__const char *__domainname) __attribute__ ((__nothrow__));



extern char *bindtextdomain (__const char *__domainname,
        __const char *__dirname) __attribute__ ((__nothrow__));



extern char *bind_textdomain_codeset (__const char *__domainname,
          __const char *__codeset) __attribute__ ((__nothrow__));







# 1 "/usr/lib64/gcc/x86_64-suse-linux/4.3/include/stddef.h" 1 3 4
# 102 "/usr/include/libintl.h" 2 3 4


# 1 "/usr/include/locale.h" 1 3 4
# 29 "/usr/include/locale.h" 3 4
# 1 "/usr/lib64/gcc/x86_64-suse-linux/4.3/include/stddef.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/bits/locale.h" 1 3 4
# 27 "/usr/include/bits/locale.h" 3 4
enum
{
  __LC_CTYPE = 0,
  __LC_NUMERIC = 1,
  __LC_TIME = 2,
  __LC_COLLATE = 3,
  __LC_MONETARY = 4,
  __LC_MESSAGES = 5,
  __LC_ALL = 6,
  __LC_PAPER = 7,
  __LC_NAME = 8,
  __LC_ADDRESS = 9,
  __LC_TELEPHONE = 10,
  __LC_MEASUREMENT = 11,
  __LC_IDENTIFICATION = 12
};
# 31 "/usr/include/locale.h" 2 3 4


# 51 "/usr/include/locale.h" 3 4



struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 121 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, __const char *__locale) __attribute__ ((__nothrow__));


extern struct lconv *localeconv (void) __attribute__ ((__nothrow__));


# 208 "/usr/include/locale.h" 3 4

# 105 "/usr/include/libintl.h" 2 3 4
# 122 "/usr/include/libintl.h" 3 4

# 26 "/usr/include/glib-2.0/glib/gi18n.h" 2
# 36 "parser.c" 2

# 1 "/usr/include/libxml2/libxml/parser.h" 1
# 15 "/usr/include/libxml2/libxml/parser.h"
# 1 "/usr/include/libxml2/libxml/xmlversion.h" 1
# 13 "/usr/include/libxml2/libxml/xmlversion.h"
# 1 "/usr/include/libxml2/libxml/xmlexports.h" 1
# 14 "/usr/include/libxml2/libxml/xmlversion.h" 2
# 24 "/usr/include/libxml2/libxml/xmlversion.h"
 void xmlCheckVersion(int version);
# 16 "/usr/include/libxml2/libxml/parser.h" 2
# 1 "/usr/include/libxml2/libxml/tree.h" 1
# 17 "/usr/include/libxml2/libxml/tree.h"
# 1 "/usr/include/libxml2/libxml/xmlstring.h" 1
# 28 "/usr/include/libxml2/libxml/xmlstring.h"
typedef unsigned char xmlChar;
# 40 "/usr/include/libxml2/libxml/xmlstring.h"
 xmlChar *
                xmlStrdup (const xmlChar *cur);
 xmlChar *
                xmlStrndup (const xmlChar *cur,
                                         int len);
 xmlChar *
                xmlCharStrndup (const char *cur,
                                         int len);
 xmlChar *
                xmlCharStrdup (const char *cur);
 xmlChar *
                xmlStrsub (const xmlChar *str,
                                         int start,
                                         int len);
 const xmlChar *
                xmlStrchr (const xmlChar *str,
                                         xmlChar val);
 const xmlChar *
                xmlStrstr (const xmlChar *str,
                                         const xmlChar *val);
 const xmlChar *
                xmlStrcasestr (const xmlChar *str,
                                         xmlChar *val);
 int
                xmlStrcmp (const xmlChar *str1,
                                         const xmlChar *str2);
 int
                xmlStrncmp (const xmlChar *str1,
                                         const xmlChar *str2,
                                         int len);
 int
                xmlStrcasecmp (const xmlChar *str1,
                                         const xmlChar *str2);
 int
                xmlStrncasecmp (const xmlChar *str1,
                                         const xmlChar *str2,
                                         int len);
 int
                xmlStrEqual (const xmlChar *str1,
                                         const xmlChar *str2);
 int
                xmlStrQEqual (const xmlChar *pref,
                                         const xmlChar *name,
                                         const xmlChar *str);
 int
                xmlStrlen (const xmlChar *str);
 xmlChar *
                xmlStrcat (xmlChar *cur,
                                         const xmlChar *add);
 xmlChar *
                xmlStrncat (xmlChar *cur,
                                         const xmlChar *add,
                                         int len);
 xmlChar *
                xmlStrncatNew (const xmlChar *str1,
                                         const xmlChar *str2,
                                         int len);
 int
                xmlStrPrintf (xmlChar *buf,
                                         int len,
                                         const xmlChar *msg,
                                         ...);
 int
                xmlStrVPrintf (xmlChar *buf,
                                         int len,
                                         const xmlChar *msg,
                                         va_list ap);

 int
        xmlGetUTF8Char (const unsigned char *utf,
                                         int *len);
 int
        xmlCheckUTF8 (const unsigned char *utf);
 int
        xmlUTF8Strsize (const xmlChar *utf,
                                         int len);
 xmlChar *
        xmlUTF8Strndup (const xmlChar *utf,
                                         int len);
 const xmlChar *
        xmlUTF8Strpos (const xmlChar *utf,
                                         int pos);
 int
        xmlUTF8Strloc (const xmlChar *utf,
                                         const xmlChar *utfchar);
 xmlChar *
        xmlUTF8Strsub (const xmlChar *utf,
                                         int start,
                                         int len);
 int
        xmlUTF8Strlen (const xmlChar *utf);
 int
        xmlUTF8Size (const xmlChar *utf);
 int
        xmlUTF8Charcmp (const xmlChar *utf1,
                                         const xmlChar *utf2);
# 18 "/usr/include/libxml2/libxml/tree.h" 2
# 27 "/usr/include/libxml2/libxml/tree.h"
typedef struct _xmlParserInputBuffer xmlParserInputBuffer;
typedef xmlParserInputBuffer *xmlParserInputBufferPtr;

typedef struct _xmlOutputBuffer xmlOutputBuffer;
typedef xmlOutputBuffer *xmlOutputBufferPtr;


typedef struct _xmlParserInput xmlParserInput;
typedef xmlParserInput *xmlParserInputPtr;

typedef struct _xmlParserCtxt xmlParserCtxt;
typedef xmlParserCtxt *xmlParserCtxtPtr;

typedef struct _xmlSAXLocator xmlSAXLocator;
typedef xmlSAXLocator *xmlSAXLocatorPtr;

typedef struct _xmlSAXHandler xmlSAXHandler;
typedef xmlSAXHandler *xmlSAXHandlerPtr;


typedef struct _xmlEntity xmlEntity;
typedef xmlEntity *xmlEntityPtr;
# 73 "/usr/include/libxml2/libxml/tree.h"
typedef enum {
    XML_BUFFER_ALLOC_DOUBLEIT,
    XML_BUFFER_ALLOC_EXACT,
    XML_BUFFER_ALLOC_IMMUTABLE,
    XML_BUFFER_ALLOC_IO
} xmlBufferAllocationScheme;






typedef struct _xmlBuffer xmlBuffer;
typedef xmlBuffer *xmlBufferPtr;
struct _xmlBuffer {
    xmlChar *content;
    unsigned int use;
    unsigned int size;
    xmlBufferAllocationScheme alloc;
    xmlChar *contentIO;
};
# 120 "/usr/include/libxml2/libxml/tree.h"
typedef enum {
    XML_ELEMENT_NODE= 1,
    XML_ATTRIBUTE_NODE= 2,
    XML_TEXT_NODE= 3,
    XML_CDATA_SECTION_NODE= 4,
    XML_ENTITY_REF_NODE= 5,
    XML_ENTITY_NODE= 6,
    XML_PI_NODE= 7,
    XML_COMMENT_NODE= 8,
    XML_DOCUMENT_NODE= 9,
    XML_DOCUMENT_TYPE_NODE= 10,
    XML_DOCUMENT_FRAG_NODE= 11,
    XML_NOTATION_NODE= 12,
    XML_HTML_DOCUMENT_NODE= 13,
    XML_DTD_NODE= 14,
    XML_ELEMENT_DECL= 15,
    XML_ATTRIBUTE_DECL= 16,
    XML_ENTITY_DECL= 17,
    XML_NAMESPACE_DECL= 18,
    XML_XINCLUDE_START= 19,
    XML_XINCLUDE_END= 20

   ,XML_DOCB_DOCUMENT_NODE= 21

} xmlElementType;
# 153 "/usr/include/libxml2/libxml/tree.h"
typedef struct _xmlNotation xmlNotation;
typedef xmlNotation *xmlNotationPtr;
struct _xmlNotation {
    const xmlChar *name;
    const xmlChar *PublicID;
    const xmlChar *SystemID;
};







typedef enum {
    XML_ATTRIBUTE_CDATA = 1,
    XML_ATTRIBUTE_ID,
    XML_ATTRIBUTE_IDREF ,
    XML_ATTRIBUTE_IDREFS,
    XML_ATTRIBUTE_ENTITY,
    XML_ATTRIBUTE_ENTITIES,
    XML_ATTRIBUTE_NMTOKEN,
    XML_ATTRIBUTE_NMTOKENS,
    XML_ATTRIBUTE_ENUMERATION,
    XML_ATTRIBUTE_NOTATION
} xmlAttributeType;







typedef enum {
    XML_ATTRIBUTE_NONE = 1,
    XML_ATTRIBUTE_REQUIRED,
    XML_ATTRIBUTE_IMPLIED,
    XML_ATTRIBUTE_FIXED
} xmlAttributeDefault;







typedef struct _xmlEnumeration xmlEnumeration;
typedef xmlEnumeration *xmlEnumerationPtr;
struct _xmlEnumeration {
    struct _xmlEnumeration *next;
    const xmlChar *name;
};







typedef struct _xmlAttribute xmlAttribute;
typedef xmlAttribute *xmlAttributePtr;
struct _xmlAttribute {
    void *_private;
    xmlElementType type;
    const xmlChar *name;
    struct _xmlNode *children;
    struct _xmlNode *last;
    struct _xmlDtd *parent;
    struct _xmlNode *next;
    struct _xmlNode *prev;
    struct _xmlDoc *doc;

    struct _xmlAttribute *nexth;
    xmlAttributeType atype;
    xmlAttributeDefault def;
    const xmlChar *defaultValue;
    xmlEnumerationPtr tree;
    const xmlChar *prefix;
    const xmlChar *elem;
};






typedef enum {
    XML_ELEMENT_CONTENT_PCDATA = 1,
    XML_ELEMENT_CONTENT_ELEMENT,
    XML_ELEMENT_CONTENT_SEQ,
    XML_ELEMENT_CONTENT_OR
} xmlElementContentType;






typedef enum {
    XML_ELEMENT_CONTENT_ONCE = 1,
    XML_ELEMENT_CONTENT_OPT,
    XML_ELEMENT_CONTENT_MULT,
    XML_ELEMENT_CONTENT_PLUS
} xmlElementContentOccur;
# 265 "/usr/include/libxml2/libxml/tree.h"
typedef struct _xmlElementContent xmlElementContent;
typedef xmlElementContent *xmlElementContentPtr;
struct _xmlElementContent {
    xmlElementContentType type;
    xmlElementContentOccur ocur;
    const xmlChar *name;
    struct _xmlElementContent *c1;
    struct _xmlElementContent *c2;
    struct _xmlElementContent *parent;
    const xmlChar *prefix;
};







typedef enum {
    XML_ELEMENT_TYPE_UNDEFINED = 0,
    XML_ELEMENT_TYPE_EMPTY = 1,
    XML_ELEMENT_TYPE_ANY,
    XML_ELEMENT_TYPE_MIXED,
    XML_ELEMENT_TYPE_ELEMENT
} xmlElementTypeVal;




# 1 "/usr/include/libxml2/libxml/xmlregexp.h" 1
# 28 "/usr/include/libxml2/libxml/xmlregexp.h"
typedef struct _xmlRegexp xmlRegexp;
typedef xmlRegexp *xmlRegexpPtr;






typedef struct _xmlRegExecCtxt xmlRegExecCtxt;
typedef xmlRegExecCtxt *xmlRegExecCtxtPtr;




# 1 "/usr/include/libxml2/libxml/tree.h" 1
# 43 "/usr/include/libxml2/libxml/xmlregexp.h" 2
# 1 "/usr/include/libxml2/libxml/dict.h" 1
# 24 "/usr/include/libxml2/libxml/dict.h"
typedef struct _xmlDict xmlDict;
typedef xmlDict *xmlDictPtr;




 xmlDictPtr
   xmlDictCreate (void);
 xmlDictPtr
   xmlDictCreateSub(xmlDictPtr sub);
 int
   xmlDictReference(xmlDictPtr dict);
 void
   xmlDictFree (xmlDictPtr dict);




 const xmlChar *
   xmlDictLookup (xmlDictPtr dict,
                           const xmlChar *name,
                           int len);
 const xmlChar *
   xmlDictExists (xmlDictPtr dict,
                           const xmlChar *name,
                           int len);
 const xmlChar *
   xmlDictQLookup (xmlDictPtr dict,
                           const xmlChar *prefix,
                           const xmlChar *name);
 int
   xmlDictOwns (xmlDictPtr dict,
      const xmlChar *str);
 int
   xmlDictSize (xmlDictPtr dict);




 void
                        xmlDictCleanup (void);
# 44 "/usr/include/libxml2/libxml/xmlregexp.h" 2







 xmlRegexpPtr
      xmlRegexpCompile (const xmlChar *regexp);
 void xmlRegFreeRegexp(xmlRegexpPtr regexp);
 int
      xmlRegexpExec (xmlRegexpPtr comp,
      const xmlChar *value);
 void
      xmlRegexpPrint (FILE *output,
      xmlRegexpPtr regexp);
 int
      xmlRegexpIsDeterminist(xmlRegexpPtr comp);
# 72 "/usr/include/libxml2/libxml/xmlregexp.h"
typedef void (*xmlRegExecCallbacks) (xmlRegExecCtxtPtr exec,
                              const xmlChar *token,
         void *transdata,
         void *inputdata);




 xmlRegExecCtxtPtr
      xmlRegNewExecCtxt (xmlRegexpPtr comp,
      xmlRegExecCallbacks callback,
      void *data);
 void
      xmlRegFreeExecCtxt (xmlRegExecCtxtPtr exec);
 int
      xmlRegExecPushString(xmlRegExecCtxtPtr exec,
      const xmlChar *value,
      void *data);
 int
      xmlRegExecPushString2(xmlRegExecCtxtPtr exec,
      const xmlChar *value,
      const xmlChar *value2,
      void *data);

 int
      xmlRegExecNextValues(xmlRegExecCtxtPtr exec,
      int *nbval,
      int *nbneg,
      xmlChar **values,
      int *terminal);
 int
      xmlRegExecErrInfo (xmlRegExecCtxtPtr exec,
      const xmlChar **string,
      int *nbval,
      int *nbneg,
      xmlChar **values,
      int *terminal);







typedef struct _xmlExpCtxt xmlExpCtxt;
typedef xmlExpCtxt *xmlExpCtxtPtr;

 void
   xmlExpFreeCtxt (xmlExpCtxtPtr ctxt);
 xmlExpCtxtPtr
   xmlExpNewCtxt (int maxNodes,
      xmlDictPtr dict);

 int
   xmlExpCtxtNbNodes(xmlExpCtxtPtr ctxt);
 int
   xmlExpCtxtNbCons(xmlExpCtxtPtr ctxt);


typedef struct _xmlExpNode xmlExpNode;
typedef xmlExpNode *xmlExpNodePtr;

typedef enum {
    XML_EXP_EMPTY = 0,
    XML_EXP_FORBID = 1,
    XML_EXP_ATOM = 2,
    XML_EXP_SEQ = 3,
    XML_EXP_OR = 4,
    XML_EXP_COUNT = 5
} xmlExpNodeType;





extern xmlExpNodePtr forbiddenExp;
extern xmlExpNodePtr emptyExp;




 void
   xmlExpFree (xmlExpCtxtPtr ctxt,
      xmlExpNodePtr expr);
 void
   xmlExpRef (xmlExpNodePtr expr);




 xmlExpNodePtr
   xmlExpParse (xmlExpCtxtPtr ctxt,
      const char *expr);
 xmlExpNodePtr
   xmlExpNewAtom (xmlExpCtxtPtr ctxt,
      const xmlChar *name,
      int len);
 xmlExpNodePtr
   xmlExpNewOr (xmlExpCtxtPtr ctxt,
      xmlExpNodePtr left,
      xmlExpNodePtr right);
 xmlExpNodePtr
   xmlExpNewSeq (xmlExpCtxtPtr ctxt,
      xmlExpNodePtr left,
      xmlExpNodePtr right);
 xmlExpNodePtr
   xmlExpNewRange (xmlExpCtxtPtr ctxt,
      xmlExpNodePtr subset,
      int min,
      int max);



 int
   xmlExpIsNillable(xmlExpNodePtr expr);
 int
   xmlExpMaxToken (xmlExpNodePtr expr);
 int
   xmlExpGetLanguage(xmlExpCtxtPtr ctxt,
      xmlExpNodePtr expr,
      const xmlChar**langList,
      int len);
 int
   xmlExpGetStart (xmlExpCtxtPtr ctxt,
      xmlExpNodePtr expr,
      const xmlChar**tokList,
      int len);
 xmlExpNodePtr
   xmlExpStringDerive(xmlExpCtxtPtr ctxt,
      xmlExpNodePtr expr,
      const xmlChar *str,
      int len);
 xmlExpNodePtr
   xmlExpExpDerive (xmlExpCtxtPtr ctxt,
      xmlExpNodePtr expr,
      xmlExpNodePtr sub);
 int
   xmlExpSubsume (xmlExpCtxtPtr ctxt,
      xmlExpNodePtr expr,
      xmlExpNodePtr sub);
 void
   xmlExpDump (xmlBufferPtr buf,
      xmlExpNodePtr expr);
# 295 "/usr/include/libxml2/libxml/tree.h" 2
# 305 "/usr/include/libxml2/libxml/tree.h"
typedef struct _xmlElement xmlElement;
typedef xmlElement *xmlElementPtr;
struct _xmlElement {
    void *_private;
    xmlElementType type;
    const xmlChar *name;
    struct _xmlNode *children;
    struct _xmlNode *last;
    struct _xmlDtd *parent;
    struct _xmlNode *next;
    struct _xmlNode *prev;
    struct _xmlDoc *doc;

    xmlElementTypeVal etype;
    xmlElementContentPtr content;
    xmlAttributePtr attributes;
    const xmlChar *prefix;

    xmlRegexpPtr contModel;



};
# 336 "/usr/include/libxml2/libxml/tree.h"
typedef xmlElementType xmlNsType;
# 348 "/usr/include/libxml2/libxml/tree.h"
typedef struct _xmlNs xmlNs;
typedef xmlNs *xmlNsPtr;
struct _xmlNs {
    struct _xmlNs *next;
    xmlNsType type;
    const xmlChar *href;
    const xmlChar *prefix;
    void *_private;
    struct _xmlDoc *context;
};







typedef struct _xmlDtd xmlDtd;
typedef xmlDtd *xmlDtdPtr;
struct _xmlDtd {
    void *_private;
    xmlElementType type;
    const xmlChar *name;
    struct _xmlNode *children;
    struct _xmlNode *last;
    struct _xmlDoc *parent;
    struct _xmlNode *next;
    struct _xmlNode *prev;
    struct _xmlDoc *doc;


    void *notations;
    void *elements;
    void *attributes;
    void *entities;
    const xmlChar *ExternalID;
    const xmlChar *SystemID;
    void *pentities;
};






typedef struct _xmlAttr xmlAttr;
typedef xmlAttr *xmlAttrPtr;
struct _xmlAttr {
    void *_private;
    xmlElementType type;
    const xmlChar *name;
    struct _xmlNode *children;
    struct _xmlNode *last;
    struct _xmlNode *parent;
    struct _xmlAttr *next;
    struct _xmlAttr *prev;
    struct _xmlDoc *doc;
    xmlNs *ns;
    xmlAttributeType atype;
    void *psvi;
};







typedef struct _xmlID xmlID;
typedef xmlID *xmlIDPtr;
struct _xmlID {
    struct _xmlID *next;
    const xmlChar *value;
    xmlAttrPtr attr;
    const xmlChar *name;
    int lineno;
    struct _xmlDoc *doc;
};







typedef struct _xmlRef xmlRef;
typedef xmlRef *xmlRefPtr;
struct _xmlRef {
    struct _xmlRef *next;
    const xmlChar *value;
    xmlAttrPtr attr;
    const xmlChar *name;
    int lineno;
};






typedef struct _xmlNode xmlNode;
typedef xmlNode *xmlNodePtr;
struct _xmlNode {
    void *_private;
    xmlElementType type;
    const xmlChar *name;
    struct _xmlNode *children;
    struct _xmlNode *last;
    struct _xmlNode *parent;
    struct _xmlNode *next;
    struct _xmlNode *prev;
    struct _xmlDoc *doc;


    xmlNs *ns;
    xmlChar *content;
    struct _xmlAttr *properties;
    xmlNs *nsDef;
    void *psvi;
    unsigned short line;
    unsigned short extra;
};
# 493 "/usr/include/libxml2/libxml/tree.h"
typedef enum {
    XML_DOC_WELLFORMED = 1<<0,
    XML_DOC_NSVALID = 1<<1,
    XML_DOC_OLD10 = 1<<2,
    XML_DOC_DTDVALID = 1<<3,
    XML_DOC_XINCLUDE = 1<<4,
    XML_DOC_USERBUILT = 1<<5,

    XML_DOC_INTERNAL = 1<<6,
    XML_DOC_HTML = 1<<7
} xmlDocProperties;






typedef struct _xmlDoc xmlDoc;
typedef xmlDoc *xmlDocPtr;
struct _xmlDoc {
    void *_private;
    xmlElementType type;
    char *name;
    struct _xmlNode *children;
    struct _xmlNode *last;
    struct _xmlNode *parent;
    struct _xmlNode *next;
    struct _xmlNode *prev;
    struct _xmlDoc *doc;


    int compression;
    int standalone;





    struct _xmlDtd *intSubset;
    struct _xmlDtd *extSubset;
    struct _xmlNs *oldNs;
    const xmlChar *version;
    const xmlChar *encoding;
    void *ids;
    void *refs;
    const xmlChar *URL;
    int charset;

    struct _xmlDict *dict;
    void *psvi;
    int parseFlags;

    int properties;

};


typedef struct _xmlDOMWrapCtxt xmlDOMWrapCtxt;
typedef xmlDOMWrapCtxt *xmlDOMWrapCtxtPtr;
# 564 "/usr/include/libxml2/libxml/tree.h"
typedef xmlNsPtr (*xmlDOMWrapAcquireNsFunction) (xmlDOMWrapCtxtPtr ctxt,
       xmlNodePtr node,
       const xmlChar *nsName,
       const xmlChar *nsPrefix);






struct _xmlDOMWrapCtxt {
    void * _private;




    int type;



    void * namespaceMap;




    xmlDOMWrapAcquireNsFunction getNsForNodeFunc;
};
# 620 "/usr/include/libxml2/libxml/tree.h"
 int
  xmlValidateNCName (const xmlChar *value,
      int space);



 int
  xmlValidateQName (const xmlChar *value,
      int space);
 int
  xmlValidateName (const xmlChar *value,
      int space);
 int
  xmlValidateNMToken (const xmlChar *value,
      int space);


 xmlChar *
  xmlBuildQName (const xmlChar *ncname,
      const xmlChar *prefix,
      xmlChar *memory,
      int len);
 xmlChar *
  xmlSplitQName2 (const xmlChar *name,
      xmlChar **prefix);
 const xmlChar *
  xmlSplitQName3 (const xmlChar *name,
      int *len);





 void
  xmlSetBufferAllocationScheme(xmlBufferAllocationScheme scheme);
 xmlBufferAllocationScheme
  xmlGetBufferAllocationScheme(void);

 xmlBufferPtr
  xmlBufferCreate (void);
 xmlBufferPtr
  xmlBufferCreateSize (size_t size);
 xmlBufferPtr
  xmlBufferCreateStatic (void *mem,
      size_t size);
 int
  xmlBufferResize (xmlBufferPtr buf,
      unsigned int size);
 void
  xmlBufferFree (xmlBufferPtr buf);
 int
  xmlBufferDump (FILE *file,
      xmlBufferPtr buf);
 int
  xmlBufferAdd (xmlBufferPtr buf,
      const xmlChar *str,
      int len);
 int
  xmlBufferAddHead (xmlBufferPtr buf,
      const xmlChar *str,
      int len);
 int
  xmlBufferCat (xmlBufferPtr buf,
      const xmlChar *str);
 int
  xmlBufferCCat (xmlBufferPtr buf,
      const char *str);
 int
  xmlBufferShrink (xmlBufferPtr buf,
      unsigned int len);
 int
  xmlBufferGrow (xmlBufferPtr buf,
      unsigned int len);
 void
  xmlBufferEmpty (xmlBufferPtr buf);
 const xmlChar*
  xmlBufferContent (const xmlBufferPtr buf);
 void
  xmlBufferSetAllocationScheme(xmlBufferPtr buf,
      xmlBufferAllocationScheme scheme);
 int
  xmlBufferLength (const xmlBufferPtr buf);




 xmlDtdPtr
  xmlCreateIntSubset (xmlDocPtr doc,
      const xmlChar *name,
      const xmlChar *ExternalID,
      const xmlChar *SystemID);
 xmlDtdPtr
  xmlNewDtd (xmlDocPtr doc,
      const xmlChar *name,
      const xmlChar *ExternalID,
      const xmlChar *SystemID);
 xmlDtdPtr
  xmlGetIntSubset (xmlDocPtr doc);
 void
  xmlFreeDtd (xmlDtdPtr cur);

 xmlNsPtr
  xmlNewGlobalNs (xmlDocPtr doc,
      const xmlChar *href,
      const xmlChar *prefix);

 xmlNsPtr
  xmlNewNs (xmlNodePtr node,
      const xmlChar *href,
      const xmlChar *prefix);
 void
  xmlFreeNs (xmlNsPtr cur);
 void
  xmlFreeNsList (xmlNsPtr cur);
 xmlDocPtr
  xmlNewDoc (const xmlChar *version);
 void
  xmlFreeDoc (xmlDocPtr cur);
 xmlAttrPtr
  xmlNewDocProp (xmlDocPtr doc,
      const xmlChar *name,
      const xmlChar *value);


 xmlAttrPtr
  xmlNewProp (xmlNodePtr node,
      const xmlChar *name,
      const xmlChar *value);

 xmlAttrPtr
  xmlNewNsProp (xmlNodePtr node,
      xmlNsPtr ns,
      const xmlChar *name,
      const xmlChar *value);
 xmlAttrPtr
  xmlNewNsPropEatName (xmlNodePtr node,
      xmlNsPtr ns,
      xmlChar *name,
      const xmlChar *value);
 void
  xmlFreePropList (xmlAttrPtr cur);
 void
  xmlFreeProp (xmlAttrPtr cur);
 xmlAttrPtr
  xmlCopyProp (xmlNodePtr target,
      xmlAttrPtr cur);
 xmlAttrPtr
  xmlCopyPropList (xmlNodePtr target,
      xmlAttrPtr cur);

 xmlDtdPtr
  xmlCopyDtd (xmlDtdPtr dtd);


 xmlDocPtr
  xmlCopyDoc (xmlDocPtr doc,
      int recursive);




 xmlNodePtr
  xmlNewDocNode (xmlDocPtr doc,
      xmlNsPtr ns,
      const xmlChar *name,
      const xmlChar *content);
 xmlNodePtr
  xmlNewDocNodeEatName (xmlDocPtr doc,
      xmlNsPtr ns,
      xmlChar *name,
      const xmlChar *content);
 xmlNodePtr
  xmlNewNode (xmlNsPtr ns,
      const xmlChar *name);
 xmlNodePtr
  xmlNewNodeEatName (xmlNsPtr ns,
      xmlChar *name);

 xmlNodePtr
  xmlNewChild (xmlNodePtr parent,
      xmlNsPtr ns,
      const xmlChar *name,
      const xmlChar *content);

 xmlNodePtr
  xmlNewDocText (xmlDocPtr doc,
      const xmlChar *content);
 xmlNodePtr
  xmlNewText (const xmlChar *content);
 xmlNodePtr
  xmlNewDocPI (xmlDocPtr doc,
      const xmlChar *name,
      const xmlChar *content);
 xmlNodePtr
  xmlNewPI (const xmlChar *name,
      const xmlChar *content);
 xmlNodePtr
  xmlNewDocTextLen (xmlDocPtr doc,
      const xmlChar *content,
      int len);
 xmlNodePtr
  xmlNewTextLen (const xmlChar *content,
      int len);
 xmlNodePtr
  xmlNewDocComment (xmlDocPtr doc,
      const xmlChar *content);
 xmlNodePtr
  xmlNewComment (const xmlChar *content);
 xmlNodePtr
  xmlNewCDataBlock (xmlDocPtr doc,
      const xmlChar *content,
      int len);
 xmlNodePtr
  xmlNewCharRef (xmlDocPtr doc,
      const xmlChar *name);
 xmlNodePtr
  xmlNewReference (xmlDocPtr doc,
      const xmlChar *name);
 xmlNodePtr
  xmlCopyNode (const xmlNodePtr node,
      int recursive);
 xmlNodePtr
  xmlDocCopyNode (const xmlNodePtr node,
      xmlDocPtr doc,
      int recursive);
 xmlNodePtr
  xmlDocCopyNodeList (xmlDocPtr doc,
      const xmlNodePtr node);
 xmlNodePtr
  xmlCopyNodeList (const xmlNodePtr node);

 xmlNodePtr
  xmlNewTextChild (xmlNodePtr parent,
      xmlNsPtr ns,
      const xmlChar *name,
      const xmlChar *content);
 xmlNodePtr
  xmlNewDocRawNode (xmlDocPtr doc,
      xmlNsPtr ns,
      const xmlChar *name,
      const xmlChar *content);
 xmlNodePtr
  xmlNewDocFragment (xmlDocPtr doc);





 long
  xmlGetLineNo (xmlNodePtr node);

 xmlChar *
  xmlGetNodePath (xmlNodePtr node);

 xmlNodePtr
  xmlDocGetRootElement (xmlDocPtr doc);
 xmlNodePtr
  xmlGetLastChild (xmlNodePtr parent);
 int
  xmlNodeIsText (xmlNodePtr node);
 int
  xmlIsBlankNode (xmlNodePtr node);





 xmlNodePtr
  xmlDocSetRootElement (xmlDocPtr doc,
      xmlNodePtr root);


 void
  xmlNodeSetName (xmlNodePtr cur,
      const xmlChar *name);

 xmlNodePtr
  xmlAddChild (xmlNodePtr parent,
      xmlNodePtr cur);
 xmlNodePtr
  xmlAddChildList (xmlNodePtr parent,
      xmlNodePtr cur);

 xmlNodePtr
  xmlReplaceNode (xmlNodePtr old,
      xmlNodePtr cur);



 xmlNodePtr
  xmlAddPrevSibling (xmlNodePtr cur,
      xmlNodePtr elem);

 xmlNodePtr
  xmlAddSibling (xmlNodePtr cur,
      xmlNodePtr elem);
 xmlNodePtr
  xmlAddNextSibling (xmlNodePtr cur,
      xmlNodePtr elem);
 void
  xmlUnlinkNode (xmlNodePtr cur);
 xmlNodePtr
  xmlTextMerge (xmlNodePtr first,
      xmlNodePtr second);
 int
  xmlTextConcat (xmlNodePtr node,
      const xmlChar *content,
      int len);
 void
  xmlFreeNodeList (xmlNodePtr cur);
 void
  xmlFreeNode (xmlNodePtr cur);
 void
  xmlSetTreeDoc (xmlNodePtr tree,
      xmlDocPtr doc);
 void
  xmlSetListDoc (xmlNodePtr list,
      xmlDocPtr doc);



 xmlNsPtr
  xmlSearchNs (xmlDocPtr doc,
      xmlNodePtr node,
      const xmlChar *nameSpace);
 xmlNsPtr
  xmlSearchNsByHref (xmlDocPtr doc,
      xmlNodePtr node,
      const xmlChar *href);

 xmlNsPtr *
  xmlGetNsList (xmlDocPtr doc,
      xmlNodePtr node);


 void
  xmlSetNs (xmlNodePtr node,
      xmlNsPtr ns);
 xmlNsPtr
  xmlCopyNamespace (xmlNsPtr cur);
 xmlNsPtr
  xmlCopyNamespaceList (xmlNsPtr cur);





 xmlAttrPtr
  xmlSetProp (xmlNodePtr node,
      const xmlChar *name,
      const xmlChar *value);
 xmlAttrPtr
  xmlSetNsProp (xmlNodePtr node,
      xmlNsPtr ns,
      const xmlChar *name,
      const xmlChar *value);

 xmlChar *
  xmlGetNoNsProp (xmlNodePtr node,
      const xmlChar *name);
 xmlChar *
  xmlGetProp (xmlNodePtr node,
      const xmlChar *name);
 xmlAttrPtr
  xmlHasProp (xmlNodePtr node,
      const xmlChar *name);
 xmlAttrPtr
  xmlHasNsProp (xmlNodePtr node,
      const xmlChar *name,
      const xmlChar *nameSpace);
 xmlChar *
  xmlGetNsProp (xmlNodePtr node,
      const xmlChar *name,
      const xmlChar *nameSpace);
 xmlNodePtr
  xmlStringGetNodeList (xmlDocPtr doc,
      const xmlChar *value);
 xmlNodePtr
  xmlStringLenGetNodeList (xmlDocPtr doc,
      const xmlChar *value,
      int len);
 xmlChar *
  xmlNodeListGetString (xmlDocPtr doc,
      xmlNodePtr list,
      int inLine);

 xmlChar *
  xmlNodeListGetRawString (xmlDocPtr doc,
      xmlNodePtr list,
      int inLine);

 void
  xmlNodeSetContent (xmlNodePtr cur,
      const xmlChar *content);

 void
  xmlNodeSetContentLen (xmlNodePtr cur,
      const xmlChar *content,
      int len);

 void
  xmlNodeAddContent (xmlNodePtr cur,
      const xmlChar *content);
 void
  xmlNodeAddContentLen (xmlNodePtr cur,
      const xmlChar *content,
      int len);
 xmlChar *
  xmlNodeGetContent (xmlNodePtr cur);
 int
  xmlNodeBufGetContent (xmlBufferPtr buffer,
      xmlNodePtr cur);
 xmlChar *
  xmlNodeGetLang (xmlNodePtr cur);
 int
  xmlNodeGetSpacePreserve (xmlNodePtr cur);

 void
  xmlNodeSetLang (xmlNodePtr cur,
      const xmlChar *lang);
 void
  xmlNodeSetSpacePreserve (xmlNodePtr cur,
      int val);

 xmlChar *
  xmlNodeGetBase (xmlDocPtr doc,
      xmlNodePtr cur);

 void
  xmlNodeSetBase (xmlNodePtr cur,
      const xmlChar *uri);





 int
  xmlRemoveProp (xmlAttrPtr cur);

 int
  xmlUnsetNsProp (xmlNodePtr node,
      xmlNsPtr ns,
      const xmlChar *name);
 int
  xmlUnsetProp (xmlNodePtr node,
      const xmlChar *name);





 void
  xmlBufferWriteCHAR (xmlBufferPtr buf,
      const xmlChar *string);
 void
  xmlBufferWriteChar (xmlBufferPtr buf,
      const char *string);
 void
  xmlBufferWriteQuotedString(xmlBufferPtr buf,
      const xmlChar *string);


 void xmlAttrSerializeTxtContent(xmlBufferPtr buf,
      xmlDocPtr doc,
      xmlAttrPtr attr,
      const xmlChar *string);






 int
  xmlReconciliateNs (xmlDocPtr doc,
      xmlNodePtr tree);






 void
  xmlDocDumpFormatMemory (xmlDocPtr cur,
      xmlChar **mem,
      int *size,
      int format);
 void
  xmlDocDumpMemory (xmlDocPtr cur,
      xmlChar **mem,
      int *size);
 void
  xmlDocDumpMemoryEnc (xmlDocPtr out_doc,
      xmlChar **doc_txt_ptr,
      int * doc_txt_len,
      const char *txt_encoding);
 void
  xmlDocDumpFormatMemoryEnc(xmlDocPtr out_doc,
      xmlChar **doc_txt_ptr,
      int * doc_txt_len,
      const char *txt_encoding,
      int format);
 int
  xmlDocFormatDump (FILE *f,
      xmlDocPtr cur,
      int format);
 int
  xmlDocDump (FILE *f,
      xmlDocPtr cur);
 void
  xmlElemDump (FILE *f,
      xmlDocPtr doc,
      xmlNodePtr cur);
 int
  xmlSaveFile (const char *filename,
      xmlDocPtr cur);
 int
  xmlSaveFormatFile (const char *filename,
      xmlDocPtr cur,
      int format);
 int
  xmlNodeDump (xmlBufferPtr buf,
      xmlDocPtr doc,
      xmlNodePtr cur,
      int level,
      int format);

 int
  xmlSaveFileTo (xmlOutputBufferPtr buf,
      xmlDocPtr cur,
      const char *encoding);
 int
  xmlSaveFormatFileTo (xmlOutputBufferPtr buf,
      xmlDocPtr cur,
             const char *encoding,
             int format);
 void
  xmlNodeDumpOutput (xmlOutputBufferPtr buf,
      xmlDocPtr doc,
      xmlNodePtr cur,
      int level,
      int format,
      const char *encoding);

 int
  xmlSaveFormatFileEnc (const char *filename,
      xmlDocPtr cur,
      const char *encoding,
      int format);

 int
  xmlSaveFileEnc (const char *filename,
      xmlDocPtr cur,
      const char *encoding);





 int
  xmlIsXHTML (const xmlChar *systemID,
      const xmlChar *publicID);




 int
  xmlGetDocCompressMode (xmlDocPtr doc);
 void
  xmlSetDocCompressMode (xmlDocPtr doc,
      int mode);
 int
  xmlGetCompressMode (void);
 void
  xmlSetCompressMode (int mode);




 xmlDOMWrapCtxtPtr
  xmlDOMWrapNewCtxt (void);
 void
  xmlDOMWrapFreeCtxt (xmlDOMWrapCtxtPtr ctxt);
 int
     xmlDOMWrapReconcileNamespaces(xmlDOMWrapCtxtPtr ctxt,
      xmlNodePtr elem,
      int options);
 int
     xmlDOMWrapAdoptNode (xmlDOMWrapCtxtPtr ctxt,
      xmlDocPtr sourceDoc,
      xmlNodePtr node,
      xmlDocPtr destDoc,
      xmlNodePtr destParent,
      int options);
 int
     xmlDOMWrapRemoveNode (xmlDOMWrapCtxtPtr ctxt,
      xmlDocPtr doc,
      xmlNodePtr node,
      int options);
 int
     xmlDOMWrapCloneNode (xmlDOMWrapCtxtPtr ctxt,
      xmlDocPtr sourceDoc,
      xmlNodePtr node,
      xmlNodePtr *clonedNode,
      xmlDocPtr destDoc,
      xmlNodePtr destParent,
      int deep,
      int options);
# 17 "/usr/include/libxml2/libxml/parser.h" 2

# 1 "/usr/include/libxml2/libxml/hash.h" 1
# 21 "/usr/include/libxml2/libxml/hash.h"
typedef struct _xmlHashTable xmlHashTable;
typedef xmlHashTable *xmlHashTablePtr;






# 1 "/usr/include/libxml2/libxml/parser.h" 1
# 30 "/usr/include/libxml2/libxml/hash.h" 2
# 69 "/usr/include/libxml2/libxml/hash.h"
typedef void (*xmlHashDeallocator)(void *payload, xmlChar *name);
# 79 "/usr/include/libxml2/libxml/hash.h"
typedef void *(*xmlHashCopier)(void *payload, xmlChar *name);
# 88 "/usr/include/libxml2/libxml/hash.h"
typedef void (*xmlHashScanner)(void *payload, void *data, xmlChar *name);
# 99 "/usr/include/libxml2/libxml/hash.h"
typedef void (*xmlHashScannerFull)(void *payload, void *data,
       const xmlChar *name, const xmlChar *name2,
       const xmlChar *name3);




 xmlHashTablePtr
   xmlHashCreate (int size);
 xmlHashTablePtr
   xmlHashCreateDict(int size,
      xmlDictPtr dict);
 void
   xmlHashFree (xmlHashTablePtr table,
      xmlHashDeallocator f);




 int
   xmlHashAddEntry (xmlHashTablePtr table,
                           const xmlChar *name,
                           void *userdata);
 int
   xmlHashUpdateEntry(xmlHashTablePtr table,
                           const xmlChar *name,
                           void *userdata,
      xmlHashDeallocator f);
 int
   xmlHashAddEntry2(xmlHashTablePtr table,
                           const xmlChar *name,
                           const xmlChar *name2,
                           void *userdata);
 int
   xmlHashUpdateEntry2(xmlHashTablePtr table,
                           const xmlChar *name,
                           const xmlChar *name2,
                           void *userdata,
      xmlHashDeallocator f);
 int
   xmlHashAddEntry3(xmlHashTablePtr table,
                           const xmlChar *name,
                           const xmlChar *name2,
                           const xmlChar *name3,
                           void *userdata);
 int
   xmlHashUpdateEntry3(xmlHashTablePtr table,
                           const xmlChar *name,
                           const xmlChar *name2,
                           const xmlChar *name3,
                           void *userdata,
      xmlHashDeallocator f);




 int
   xmlHashRemoveEntry(xmlHashTablePtr table, const xmlChar *name,
                           xmlHashDeallocator f);
 int
   xmlHashRemoveEntry2(xmlHashTablePtr table, const xmlChar *name,
                            const xmlChar *name2, xmlHashDeallocator f);
 int
   xmlHashRemoveEntry3(xmlHashTablePtr table, const xmlChar *name,
                            const xmlChar *name2, const xmlChar *name3,
                            xmlHashDeallocator f);




 void *
   xmlHashLookup (xmlHashTablePtr table,
      const xmlChar *name);
 void *
   xmlHashLookup2 (xmlHashTablePtr table,
      const xmlChar *name,
      const xmlChar *name2);
 void *
   xmlHashLookup3 (xmlHashTablePtr table,
      const xmlChar *name,
      const xmlChar *name2,
      const xmlChar *name3);
 void *
   xmlHashQLookup (xmlHashTablePtr table,
      const xmlChar *name,
      const xmlChar *prefix);
 void *
   xmlHashQLookup2 (xmlHashTablePtr table,
      const xmlChar *name,
      const xmlChar *prefix,
      const xmlChar *name2,
      const xmlChar *prefix2);
 void *
   xmlHashQLookup3 (xmlHashTablePtr table,
      const xmlChar *name,
      const xmlChar *prefix,
      const xmlChar *name2,
      const xmlChar *prefix2,
      const xmlChar *name3,
      const xmlChar *prefix3);




 xmlHashTablePtr
   xmlHashCopy (xmlHashTablePtr table,
      xmlHashCopier f);
 int
   xmlHashSize (xmlHashTablePtr table);
 void
   xmlHashScan (xmlHashTablePtr table,
      xmlHashScanner f,
      void *data);
 void
   xmlHashScan3 (xmlHashTablePtr table,
      const xmlChar *name,
      const xmlChar *name2,
      const xmlChar *name3,
      xmlHashScanner f,
      void *data);
 void
   xmlHashScanFull (xmlHashTablePtr table,
      xmlHashScannerFull f,
      void *data);
 void
   xmlHashScanFull3(xmlHashTablePtr table,
      const xmlChar *name,
      const xmlChar *name2,
      const xmlChar *name3,
      xmlHashScannerFull f,
      void *data);
# 19 "/usr/include/libxml2/libxml/parser.h" 2
# 1 "/usr/include/libxml2/libxml/valid.h" 1
# 15 "/usr/include/libxml2/libxml/valid.h"
# 1 "/usr/include/libxml2/libxml/xmlerror.h" 1
# 24 "/usr/include/libxml2/libxml/xmlerror.h"
typedef enum {
    XML_ERR_NONE = 0,
    XML_ERR_WARNING = 1,
    XML_ERR_ERROR = 2,
    XML_ERR_FATAL = 3
} xmlErrorLevel;






typedef enum {
    XML_FROM_NONE = 0,
    XML_FROM_PARSER,
    XML_FROM_TREE,
    XML_FROM_NAMESPACE,
    XML_FROM_DTD,
    XML_FROM_HTML,
    XML_FROM_MEMORY,
    XML_FROM_OUTPUT,
    XML_FROM_IO,
    XML_FROM_FTP,
    XML_FROM_HTTP,
    XML_FROM_XINCLUDE,
    XML_FROM_XPATH,
    XML_FROM_XPOINTER,
    XML_FROM_REGEXP,
    XML_FROM_DATATYPE,
    XML_FROM_SCHEMASP,
    XML_FROM_SCHEMASV,
    XML_FROM_RELAXNGP,
    XML_FROM_RELAXNGV,
    XML_FROM_CATALOG,
    XML_FROM_C14N,
    XML_FROM_XSLT,
    XML_FROM_VALID,
    XML_FROM_CHECK,
    XML_FROM_WRITER,
    XML_FROM_MODULE,
    XML_FROM_I18N,
    XML_FROM_SCHEMATRONV
} xmlErrorDomain;







typedef struct _xmlError xmlError;
typedef xmlError *xmlErrorPtr;
struct _xmlError {
    int domain;
    int code;
    char *message;
    xmlErrorLevel level;
    char *file;
    int line;
    char *str1;
    char *str2;
    char *str3;
    int int1;
    int int2;
    void *ctxt;
    void *node;
};






typedef enum {
    XML_ERR_OK = 0,
    XML_ERR_INTERNAL_ERROR,
    XML_ERR_NO_MEMORY,
    XML_ERR_DOCUMENT_START,
    XML_ERR_DOCUMENT_EMPTY,
    XML_ERR_DOCUMENT_END,
    XML_ERR_INVALID_HEX_CHARREF,
    XML_ERR_INVALID_DEC_CHARREF,
    XML_ERR_INVALID_CHARREF,
    XML_ERR_INVALID_CHAR,
    XML_ERR_CHARREF_AT_EOF,
    XML_ERR_CHARREF_IN_PROLOG,
    XML_ERR_CHARREF_IN_EPILOG,
    XML_ERR_CHARREF_IN_DTD,
    XML_ERR_ENTITYREF_AT_EOF,
    XML_ERR_ENTITYREF_IN_PROLOG,
    XML_ERR_ENTITYREF_IN_EPILOG,
    XML_ERR_ENTITYREF_IN_DTD,
    XML_ERR_PEREF_AT_EOF,
    XML_ERR_PEREF_IN_PROLOG,
    XML_ERR_PEREF_IN_EPILOG,
    XML_ERR_PEREF_IN_INT_SUBSET,
    XML_ERR_ENTITYREF_NO_NAME,
    XML_ERR_ENTITYREF_SEMICOL_MISSING,
    XML_ERR_PEREF_NO_NAME,
    XML_ERR_PEREF_SEMICOL_MISSING,
    XML_ERR_UNDECLARED_ENTITY,
    XML_WAR_UNDECLARED_ENTITY,
    XML_ERR_UNPARSED_ENTITY,
    XML_ERR_ENTITY_IS_EXTERNAL,
    XML_ERR_ENTITY_IS_PARAMETER,
    XML_ERR_UNKNOWN_ENCODING,
    XML_ERR_UNSUPPORTED_ENCODING,
    XML_ERR_STRING_NOT_STARTED,
    XML_ERR_STRING_NOT_CLOSED,
    XML_ERR_NS_DECL_ERROR,
    XML_ERR_ENTITY_NOT_STARTED,
    XML_ERR_ENTITY_NOT_FINISHED,
    XML_ERR_LT_IN_ATTRIBUTE,
    XML_ERR_ATTRIBUTE_NOT_STARTED,
    XML_ERR_ATTRIBUTE_NOT_FINISHED,
    XML_ERR_ATTRIBUTE_WITHOUT_VALUE,
    XML_ERR_ATTRIBUTE_REDEFINED,
    XML_ERR_LITERAL_NOT_STARTED,
    XML_ERR_LITERAL_NOT_FINISHED,
    XML_ERR_COMMENT_NOT_FINISHED,
    XML_ERR_PI_NOT_STARTED,
    XML_ERR_PI_NOT_FINISHED,
    XML_ERR_NOTATION_NOT_STARTED,
    XML_ERR_NOTATION_NOT_FINISHED,
    XML_ERR_ATTLIST_NOT_STARTED,
    XML_ERR_ATTLIST_NOT_FINISHED,
    XML_ERR_MIXED_NOT_STARTED,
    XML_ERR_MIXED_NOT_FINISHED,
    XML_ERR_ELEMCONTENT_NOT_STARTED,
    XML_ERR_ELEMCONTENT_NOT_FINISHED,
    XML_ERR_XMLDECL_NOT_STARTED,
    XML_ERR_XMLDECL_NOT_FINISHED,
    XML_ERR_CONDSEC_NOT_STARTED,
    XML_ERR_CONDSEC_NOT_FINISHED,
    XML_ERR_EXT_SUBSET_NOT_FINISHED,
    XML_ERR_DOCTYPE_NOT_FINISHED,
    XML_ERR_MISPLACED_CDATA_END,
    XML_ERR_CDATA_NOT_FINISHED,
    XML_ERR_RESERVED_XML_NAME,
    XML_ERR_SPACE_REQUIRED,
    XML_ERR_SEPARATOR_REQUIRED,
    XML_ERR_NMTOKEN_REQUIRED,
    XML_ERR_NAME_REQUIRED,
    XML_ERR_PCDATA_REQUIRED,
    XML_ERR_URI_REQUIRED,
    XML_ERR_PUBID_REQUIRED,
    XML_ERR_LT_REQUIRED,
    XML_ERR_GT_REQUIRED,
    XML_ERR_LTSLASH_REQUIRED,
    XML_ERR_EQUAL_REQUIRED,
    XML_ERR_TAG_NAME_MISMATCH,
    XML_ERR_TAG_NOT_FINISHED,
    XML_ERR_STANDALONE_VALUE,
    XML_ERR_ENCODING_NAME,
    XML_ERR_HYPHEN_IN_COMMENT,
    XML_ERR_INVALID_ENCODING,
    XML_ERR_EXT_ENTITY_STANDALONE,
    XML_ERR_CONDSEC_INVALID,
    XML_ERR_VALUE_REQUIRED,
    XML_ERR_NOT_WELL_BALANCED,
    XML_ERR_EXTRA_CONTENT,
    XML_ERR_ENTITY_CHAR_ERROR,
    XML_ERR_ENTITY_PE_INTERNAL,
    XML_ERR_ENTITY_LOOP,
    XML_ERR_ENTITY_BOUNDARY,
    XML_ERR_INVALID_URI,
    XML_ERR_URI_FRAGMENT,
    XML_WAR_CATALOG_PI,
    XML_ERR_NO_DTD,
    XML_ERR_CONDSEC_INVALID_KEYWORD,
    XML_ERR_VERSION_MISSING,
    XML_WAR_UNKNOWN_VERSION,
    XML_WAR_LANG_VALUE,
    XML_WAR_NS_URI,
    XML_WAR_NS_URI_RELATIVE,
    XML_ERR_MISSING_ENCODING,
    XML_WAR_SPACE_VALUE,
    XML_ERR_NOT_STANDALONE,
    XML_ERR_ENTITY_PROCESSING,
    XML_ERR_NOTATION_PROCESSING,
    XML_WAR_NS_COLUMN,
    XML_WAR_ENTITY_REDEFINED,
    XML_ERR_UNKNOWN_VERSION,
    XML_ERR_VERSION_MISMATCH,
    XML_NS_ERR_XML_NAMESPACE = 200,
    XML_NS_ERR_UNDEFINED_NAMESPACE,
    XML_NS_ERR_QNAME,
    XML_NS_ERR_ATTRIBUTE_REDEFINED,
    XML_NS_ERR_EMPTY,
    XML_NS_ERR_COLON,
    XML_DTD_ATTRIBUTE_DEFAULT = 500,
    XML_DTD_ATTRIBUTE_REDEFINED,
    XML_DTD_ATTRIBUTE_VALUE,
    XML_DTD_CONTENT_ERROR,
    XML_DTD_CONTENT_MODEL,
    XML_DTD_CONTENT_NOT_DETERMINIST,
    XML_DTD_DIFFERENT_PREFIX,
    XML_DTD_ELEM_DEFAULT_NAMESPACE,
    XML_DTD_ELEM_NAMESPACE,
    XML_DTD_ELEM_REDEFINED,
    XML_DTD_EMPTY_NOTATION,
    XML_DTD_ENTITY_TYPE,
    XML_DTD_ID_FIXED,
    XML_DTD_ID_REDEFINED,
    XML_DTD_ID_SUBSET,
    XML_DTD_INVALID_CHILD,
    XML_DTD_INVALID_DEFAULT,
    XML_DTD_LOAD_ERROR,
    XML_DTD_MISSING_ATTRIBUTE,
    XML_DTD_MIXED_CORRUPT,
    XML_DTD_MULTIPLE_ID,
    XML_DTD_NO_DOC,
    XML_DTD_NO_DTD,
    XML_DTD_NO_ELEM_NAME,
    XML_DTD_NO_PREFIX,
    XML_DTD_NO_ROOT,
    XML_DTD_NOTATION_REDEFINED,
    XML_DTD_NOTATION_VALUE,
    XML_DTD_NOT_EMPTY,
    XML_DTD_NOT_PCDATA,
    XML_DTD_NOT_STANDALONE,
    XML_DTD_ROOT_NAME,
    XML_DTD_STANDALONE_WHITE_SPACE,
    XML_DTD_UNKNOWN_ATTRIBUTE,
    XML_DTD_UNKNOWN_ELEM,
    XML_DTD_UNKNOWN_ENTITY,
    XML_DTD_UNKNOWN_ID,
    XML_DTD_UNKNOWN_NOTATION,
    XML_DTD_STANDALONE_DEFAULTED,
    XML_DTD_XMLID_VALUE,
    XML_DTD_XMLID_TYPE,
    XML_DTD_DUP_TOKEN,
    XML_HTML_STRUCURE_ERROR = 800,
    XML_HTML_UNKNOWN_TAG,
    XML_RNGP_ANYNAME_ATTR_ANCESTOR = 1000,
    XML_RNGP_ATTR_CONFLICT,
    XML_RNGP_ATTRIBUTE_CHILDREN,
    XML_RNGP_ATTRIBUTE_CONTENT,
    XML_RNGP_ATTRIBUTE_EMPTY,
    XML_RNGP_ATTRIBUTE_NOOP,
    XML_RNGP_CHOICE_CONTENT,
    XML_RNGP_CHOICE_EMPTY,
    XML_RNGP_CREATE_FAILURE,
    XML_RNGP_DATA_CONTENT,
    XML_RNGP_DEF_CHOICE_AND_INTERLEAVE,
    XML_RNGP_DEFINE_CREATE_FAILED,
    XML_RNGP_DEFINE_EMPTY,
    XML_RNGP_DEFINE_MISSING,
    XML_RNGP_DEFINE_NAME_MISSING,
    XML_RNGP_ELEM_CONTENT_EMPTY,
    XML_RNGP_ELEM_CONTENT_ERROR,
    XML_RNGP_ELEMENT_EMPTY,
    XML_RNGP_ELEMENT_CONTENT,
    XML_RNGP_ELEMENT_NAME,
    XML_RNGP_ELEMENT_NO_CONTENT,
    XML_RNGP_ELEM_TEXT_CONFLICT,
    XML_RNGP_EMPTY,
    XML_RNGP_EMPTY_CONSTRUCT,
    XML_RNGP_EMPTY_CONTENT,
    XML_RNGP_EMPTY_NOT_EMPTY,
    XML_RNGP_ERROR_TYPE_LIB,
    XML_RNGP_EXCEPT_EMPTY,
    XML_RNGP_EXCEPT_MISSING,
    XML_RNGP_EXCEPT_MULTIPLE,
    XML_RNGP_EXCEPT_NO_CONTENT,
    XML_RNGP_EXTERNALREF_EMTPY,
    XML_RNGP_EXTERNAL_REF_FAILURE,
    XML_RNGP_EXTERNALREF_RECURSE,
    XML_RNGP_FORBIDDEN_ATTRIBUTE,
    XML_RNGP_FOREIGN_ELEMENT,
    XML_RNGP_GRAMMAR_CONTENT,
    XML_RNGP_GRAMMAR_EMPTY,
    XML_RNGP_GRAMMAR_MISSING,
    XML_RNGP_GRAMMAR_NO_START,
    XML_RNGP_GROUP_ATTR_CONFLICT,
    XML_RNGP_HREF_ERROR,
    XML_RNGP_INCLUDE_EMPTY,
    XML_RNGP_INCLUDE_FAILURE,
    XML_RNGP_INCLUDE_RECURSE,
    XML_RNGP_INTERLEAVE_ADD,
    XML_RNGP_INTERLEAVE_CREATE_FAILED,
    XML_RNGP_INTERLEAVE_EMPTY,
    XML_RNGP_INTERLEAVE_NO_CONTENT,
    XML_RNGP_INVALID_DEFINE_NAME,
    XML_RNGP_INVALID_URI,
    XML_RNGP_INVALID_VALUE,
    XML_RNGP_MISSING_HREF,
    XML_RNGP_NAME_MISSING,
    XML_RNGP_NEED_COMBINE,
    XML_RNGP_NOTALLOWED_NOT_EMPTY,
    XML_RNGP_NSNAME_ATTR_ANCESTOR,
    XML_RNGP_NSNAME_NO_NS,
    XML_RNGP_PARAM_FORBIDDEN,
    XML_RNGP_PARAM_NAME_MISSING,
    XML_RNGP_PARENTREF_CREATE_FAILED,
    XML_RNGP_PARENTREF_NAME_INVALID,
    XML_RNGP_PARENTREF_NO_NAME,
    XML_RNGP_PARENTREF_NO_PARENT,
    XML_RNGP_PARENTREF_NOT_EMPTY,
    XML_RNGP_PARSE_ERROR,
    XML_RNGP_PAT_ANYNAME_EXCEPT_ANYNAME,
    XML_RNGP_PAT_ATTR_ATTR,
    XML_RNGP_PAT_ATTR_ELEM,
    XML_RNGP_PAT_DATA_EXCEPT_ATTR,
    XML_RNGP_PAT_DATA_EXCEPT_ELEM,
    XML_RNGP_PAT_DATA_EXCEPT_EMPTY,
    XML_RNGP_PAT_DATA_EXCEPT_GROUP,
    XML_RNGP_PAT_DATA_EXCEPT_INTERLEAVE,
    XML_RNGP_PAT_DATA_EXCEPT_LIST,
    XML_RNGP_PAT_DATA_EXCEPT_ONEMORE,
    XML_RNGP_PAT_DATA_EXCEPT_REF,
    XML_RNGP_PAT_DATA_EXCEPT_TEXT,
    XML_RNGP_PAT_LIST_ATTR,
    XML_RNGP_PAT_LIST_ELEM,
    XML_RNGP_PAT_LIST_INTERLEAVE,
    XML_RNGP_PAT_LIST_LIST,
    XML_RNGP_PAT_LIST_REF,
    XML_RNGP_PAT_LIST_TEXT,
    XML_RNGP_PAT_NSNAME_EXCEPT_ANYNAME,
    XML_RNGP_PAT_NSNAME_EXCEPT_NSNAME,
    XML_RNGP_PAT_ONEMORE_GROUP_ATTR,
    XML_RNGP_PAT_ONEMORE_INTERLEAVE_ATTR,
    XML_RNGP_PAT_START_ATTR,
    XML_RNGP_PAT_START_DATA,
    XML_RNGP_PAT_START_EMPTY,
    XML_RNGP_PAT_START_GROUP,
    XML_RNGP_PAT_START_INTERLEAVE,
    XML_RNGP_PAT_START_LIST,
    XML_RNGP_PAT_START_ONEMORE,
    XML_RNGP_PAT_START_TEXT,
    XML_RNGP_PAT_START_VALUE,
    XML_RNGP_PREFIX_UNDEFINED,
    XML_RNGP_REF_CREATE_FAILED,
    XML_RNGP_REF_CYCLE,
    XML_RNGP_REF_NAME_INVALID,
    XML_RNGP_REF_NO_DEF,
    XML_RNGP_REF_NO_NAME,
    XML_RNGP_REF_NOT_EMPTY,
    XML_RNGP_START_CHOICE_AND_INTERLEAVE,
    XML_RNGP_START_CONTENT,
    XML_RNGP_START_EMPTY,
    XML_RNGP_START_MISSING,
    XML_RNGP_TEXT_EXPECTED,
    XML_RNGP_TEXT_HAS_CHILD,
    XML_RNGP_TYPE_MISSING,
    XML_RNGP_TYPE_NOT_FOUND,
    XML_RNGP_TYPE_VALUE,
    XML_RNGP_UNKNOWN_ATTRIBUTE,
    XML_RNGP_UNKNOWN_COMBINE,
    XML_RNGP_UNKNOWN_CONSTRUCT,
    XML_RNGP_UNKNOWN_TYPE_LIB,
    XML_RNGP_URI_FRAGMENT,
    XML_RNGP_URI_NOT_ABSOLUTE,
    XML_RNGP_VALUE_EMPTY,
    XML_RNGP_VALUE_NO_CONTENT,
    XML_RNGP_XMLNS_NAME,
    XML_RNGP_XML_NS,
    XML_XPATH_EXPRESSION_OK = 1200,
    XML_XPATH_NUMBER_ERROR,
    XML_XPATH_UNFINISHED_LITERAL_ERROR,
    XML_XPATH_START_LITERAL_ERROR,
    XML_XPATH_VARIABLE_REF_ERROR,
    XML_XPATH_UNDEF_VARIABLE_ERROR,
    XML_XPATH_INVALID_PREDICATE_ERROR,
    XML_XPATH_EXPR_ERROR,
    XML_XPATH_UNCLOSED_ERROR,
    XML_XPATH_UNKNOWN_FUNC_ERROR,
    XML_XPATH_INVALID_OPERAND,
    XML_XPATH_INVALID_TYPE,
    XML_XPATH_INVALID_ARITY,
    XML_XPATH_INVALID_CTXT_SIZE,
    XML_XPATH_INVALID_CTXT_POSITION,
    XML_XPATH_MEMORY_ERROR,
    XML_XPTR_SYNTAX_ERROR,
    XML_XPTR_RESOURCE_ERROR,
    XML_XPTR_SUB_RESOURCE_ERROR,
    XML_XPATH_UNDEF_PREFIX_ERROR,
    XML_XPATH_ENCODING_ERROR,
    XML_XPATH_INVALID_CHAR_ERROR,
    XML_TREE_INVALID_HEX = 1300,
    XML_TREE_INVALID_DEC,
    XML_TREE_UNTERMINATED_ENTITY,
    XML_TREE_NOT_UTF8,
    XML_SAVE_NOT_UTF8 = 1400,
    XML_SAVE_CHAR_INVALID,
    XML_SAVE_NO_DOCTYPE,
    XML_SAVE_UNKNOWN_ENCODING,
    XML_REGEXP_COMPILE_ERROR = 1450,
    XML_IO_UNKNOWN = 1500,
    XML_IO_EACCES,
    XML_IO_EAGAIN,
    XML_IO_EBADF,
    XML_IO_EBADMSG,
    XML_IO_EBUSY,
    XML_IO_ECANCELED,
    XML_IO_ECHILD,
    XML_IO_EDEADLK,
    XML_IO_EDOM,
    XML_IO_EEXIST,
    XML_IO_EFAULT,
    XML_IO_EFBIG,
    XML_IO_EINPROGRESS,
    XML_IO_EINTR,
    XML_IO_EINVAL,
    XML_IO_EIO,
    XML_IO_EISDIR,
    XML_IO_EMFILE,
    XML_IO_EMLINK,
    XML_IO_EMSGSIZE,
    XML_IO_ENAMETOOLONG,
    XML_IO_ENFILE,
    XML_IO_ENODEV,
    XML_IO_ENOENT,
    XML_IO_ENOEXEC,
    XML_IO_ENOLCK,
    XML_IO_ENOMEM,
    XML_IO_ENOSPC,
    XML_IO_ENOSYS,
    XML_IO_ENOTDIR,
    XML_IO_ENOTEMPTY,
    XML_IO_ENOTSUP,
    XML_IO_ENOTTY,
    XML_IO_ENXIO,
    XML_IO_EPERM,
    XML_IO_EPIPE,
    XML_IO_ERANGE,
    XML_IO_EROFS,
    XML_IO_ESPIPE,
    XML_IO_ESRCH,
    XML_IO_ETIMEDOUT,
    XML_IO_EXDEV,
    XML_IO_NETWORK_ATTEMPT,
    XML_IO_ENCODER,
    XML_IO_FLUSH,
    XML_IO_WRITE,
    XML_IO_NO_INPUT,
    XML_IO_BUFFER_FULL,
    XML_IO_LOAD_ERROR,
    XML_IO_ENOTSOCK,
    XML_IO_EISCONN,
    XML_IO_ECONNREFUSED,
    XML_IO_ENETUNREACH,
    XML_IO_EADDRINUSE,
    XML_IO_EALREADY,
    XML_IO_EAFNOSUPPORT,
    XML_XINCLUDE_RECURSION=1600,
    XML_XINCLUDE_PARSE_VALUE,
    XML_XINCLUDE_ENTITY_DEF_MISMATCH,
    XML_XINCLUDE_NO_HREF,
    XML_XINCLUDE_NO_FALLBACK,
    XML_XINCLUDE_HREF_URI,
    XML_XINCLUDE_TEXT_FRAGMENT,
    XML_XINCLUDE_TEXT_DOCUMENT,
    XML_XINCLUDE_INVALID_CHAR,
    XML_XINCLUDE_BUILD_FAILED,
    XML_XINCLUDE_UNKNOWN_ENCODING,
    XML_XINCLUDE_MULTIPLE_ROOT,
    XML_XINCLUDE_XPTR_FAILED,
    XML_XINCLUDE_XPTR_RESULT,
    XML_XINCLUDE_INCLUDE_IN_INCLUDE,
    XML_XINCLUDE_FALLBACKS_IN_INCLUDE,
    XML_XINCLUDE_FALLBACK_NOT_IN_INCLUDE,
    XML_XINCLUDE_DEPRECATED_NS,
    XML_XINCLUDE_FRAGMENT_ID,
    XML_CATALOG_MISSING_ATTR = 1650,
    XML_CATALOG_ENTRY_BROKEN,
    XML_CATALOG_PREFER_VALUE,
    XML_CATALOG_NOT_CATALOG,
    XML_CATALOG_RECURSION,
    XML_SCHEMAP_PREFIX_UNDEFINED = 1700,
    XML_SCHEMAP_ATTRFORMDEFAULT_VALUE,
    XML_SCHEMAP_ATTRGRP_NONAME_NOREF,
    XML_SCHEMAP_ATTR_NONAME_NOREF,
    XML_SCHEMAP_COMPLEXTYPE_NONAME_NOREF,
    XML_SCHEMAP_ELEMFORMDEFAULT_VALUE,
    XML_SCHEMAP_ELEM_NONAME_NOREF,
    XML_SCHEMAP_EXTENSION_NO_BASE,
    XML_SCHEMAP_FACET_NO_VALUE,
    XML_SCHEMAP_FAILED_BUILD_IMPORT,
    XML_SCHEMAP_GROUP_NONAME_NOREF,
    XML_SCHEMAP_IMPORT_NAMESPACE_NOT_URI,
    XML_SCHEMAP_IMPORT_REDEFINE_NSNAME,
    XML_SCHEMAP_IMPORT_SCHEMA_NOT_URI,
    XML_SCHEMAP_INVALID_BOOLEAN,
    XML_SCHEMAP_INVALID_ENUM,
    XML_SCHEMAP_INVALID_FACET,
    XML_SCHEMAP_INVALID_FACET_VALUE,
    XML_SCHEMAP_INVALID_MAXOCCURS,
    XML_SCHEMAP_INVALID_MINOCCURS,
    XML_SCHEMAP_INVALID_REF_AND_SUBTYPE,
    XML_SCHEMAP_INVALID_WHITE_SPACE,
    XML_SCHEMAP_NOATTR_NOREF,
    XML_SCHEMAP_NOTATION_NO_NAME,
    XML_SCHEMAP_NOTYPE_NOREF,
    XML_SCHEMAP_REF_AND_SUBTYPE,
    XML_SCHEMAP_RESTRICTION_NONAME_NOREF,
    XML_SCHEMAP_SIMPLETYPE_NONAME,
    XML_SCHEMAP_TYPE_AND_SUBTYPE,
    XML_SCHEMAP_UNKNOWN_ALL_CHILD,
    XML_SCHEMAP_UNKNOWN_ANYATTRIBUTE_CHILD,
    XML_SCHEMAP_UNKNOWN_ATTR_CHILD,
    XML_SCHEMAP_UNKNOWN_ATTRGRP_CHILD,
    XML_SCHEMAP_UNKNOWN_ATTRIBUTE_GROUP,
    XML_SCHEMAP_UNKNOWN_BASE_TYPE,
    XML_SCHEMAP_UNKNOWN_CHOICE_CHILD,
    XML_SCHEMAP_UNKNOWN_COMPLEXCONTENT_CHILD,
    XML_SCHEMAP_UNKNOWN_COMPLEXTYPE_CHILD,
    XML_SCHEMAP_UNKNOWN_ELEM_CHILD,
    XML_SCHEMAP_UNKNOWN_EXTENSION_CHILD,
    XML_SCHEMAP_UNKNOWN_FACET_CHILD,
    XML_SCHEMAP_UNKNOWN_FACET_TYPE,
    XML_SCHEMAP_UNKNOWN_GROUP_CHILD,
    XML_SCHEMAP_UNKNOWN_IMPORT_CHILD,
    XML_SCHEMAP_UNKNOWN_LIST_CHILD,
    XML_SCHEMAP_UNKNOWN_NOTATION_CHILD,
    XML_SCHEMAP_UNKNOWN_PROCESSCONTENT_CHILD,
    XML_SCHEMAP_UNKNOWN_REF,
    XML_SCHEMAP_UNKNOWN_RESTRICTION_CHILD,
    XML_SCHEMAP_UNKNOWN_SCHEMAS_CHILD,
    XML_SCHEMAP_UNKNOWN_SEQUENCE_CHILD,
    XML_SCHEMAP_UNKNOWN_SIMPLECONTENT_CHILD,
    XML_SCHEMAP_UNKNOWN_SIMPLETYPE_CHILD,
    XML_SCHEMAP_UNKNOWN_TYPE,
    XML_SCHEMAP_UNKNOWN_UNION_CHILD,
    XML_SCHEMAP_ELEM_DEFAULT_FIXED,
    XML_SCHEMAP_REGEXP_INVALID,
    XML_SCHEMAP_FAILED_LOAD,
    XML_SCHEMAP_NOTHING_TO_PARSE,
    XML_SCHEMAP_NOROOT,
    XML_SCHEMAP_REDEFINED_GROUP,
    XML_SCHEMAP_REDEFINED_TYPE,
    XML_SCHEMAP_REDEFINED_ELEMENT,
    XML_SCHEMAP_REDEFINED_ATTRGROUP,
    XML_SCHEMAP_REDEFINED_ATTR,
    XML_SCHEMAP_REDEFINED_NOTATION,
    XML_SCHEMAP_FAILED_PARSE,
    XML_SCHEMAP_UNKNOWN_PREFIX,
    XML_SCHEMAP_DEF_AND_PREFIX,
    XML_SCHEMAP_UNKNOWN_INCLUDE_CHILD,
    XML_SCHEMAP_INCLUDE_SCHEMA_NOT_URI,
    XML_SCHEMAP_INCLUDE_SCHEMA_NO_URI,
    XML_SCHEMAP_NOT_SCHEMA,
    XML_SCHEMAP_UNKNOWN_MEMBER_TYPE,
    XML_SCHEMAP_INVALID_ATTR_USE,
    XML_SCHEMAP_RECURSIVE,
    XML_SCHEMAP_SUPERNUMEROUS_LIST_ITEM_TYPE,
    XML_SCHEMAP_INVALID_ATTR_COMBINATION,
    XML_SCHEMAP_INVALID_ATTR_INLINE_COMBINATION,
    XML_SCHEMAP_MISSING_SIMPLETYPE_CHILD,
    XML_SCHEMAP_INVALID_ATTR_NAME,
    XML_SCHEMAP_REF_AND_CONTENT,
    XML_SCHEMAP_CT_PROPS_CORRECT_1,
    XML_SCHEMAP_CT_PROPS_CORRECT_2,
    XML_SCHEMAP_CT_PROPS_CORRECT_3,
    XML_SCHEMAP_CT_PROPS_CORRECT_4,
    XML_SCHEMAP_CT_PROPS_CORRECT_5,
    XML_SCHEMAP_DERIVATION_OK_RESTRICTION_1,
    XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_1,
    XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_2,
    XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_2,
    XML_SCHEMAP_DERIVATION_OK_RESTRICTION_3,
    XML_SCHEMAP_WILDCARD_INVALID_NS_MEMBER,
    XML_SCHEMAP_INTERSECTION_NOT_EXPRESSIBLE,
    XML_SCHEMAP_UNION_NOT_EXPRESSIBLE,
    XML_SCHEMAP_SRC_IMPORT_3_1,
    XML_SCHEMAP_SRC_IMPORT_3_2,
    XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_1,
    XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_2,
    XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_3,
    XML_SCHEMAP_COS_CT_EXTENDS_1_3,
    XML_SCHEMAV_NOROOT = 1801,
    XML_SCHEMAV_UNDECLAREDELEM,
    XML_SCHEMAV_NOTTOPLEVEL,
    XML_SCHEMAV_MISSING,
    XML_SCHEMAV_WRONGELEM,
    XML_SCHEMAV_NOTYPE,
    XML_SCHEMAV_NOROLLBACK,
    XML_SCHEMAV_ISABSTRACT,
    XML_SCHEMAV_NOTEMPTY,
    XML_SCHEMAV_ELEMCONT,
    XML_SCHEMAV_HAVEDEFAULT,
    XML_SCHEMAV_NOTNILLABLE,
    XML_SCHEMAV_EXTRACONTENT,
    XML_SCHEMAV_INVALIDATTR,
    XML_SCHEMAV_INVALIDELEM,
    XML_SCHEMAV_NOTDETERMINIST,
    XML_SCHEMAV_CONSTRUCT,
    XML_SCHEMAV_INTERNAL,
    XML_SCHEMAV_NOTSIMPLE,
    XML_SCHEMAV_ATTRUNKNOWN,
    XML_SCHEMAV_ATTRINVALID,
    XML_SCHEMAV_VALUE,
    XML_SCHEMAV_FACET,
    XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_1,
    XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2,
    XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_3,
    XML_SCHEMAV_CVC_TYPE_3_1_1,
    XML_SCHEMAV_CVC_TYPE_3_1_2,
    XML_SCHEMAV_CVC_FACET_VALID,
    XML_SCHEMAV_CVC_LENGTH_VALID,
    XML_SCHEMAV_CVC_MINLENGTH_VALID,
    XML_SCHEMAV_CVC_MAXLENGTH_VALID,
    XML_SCHEMAV_CVC_MININCLUSIVE_VALID,
    XML_SCHEMAV_CVC_MAXINCLUSIVE_VALID,
    XML_SCHEMAV_CVC_MINEXCLUSIVE_VALID,
    XML_SCHEMAV_CVC_MAXEXCLUSIVE_VALID,
    XML_SCHEMAV_CVC_TOTALDIGITS_VALID,
    XML_SCHEMAV_CVC_FRACTIONDIGITS_VALID,
    XML_SCHEMAV_CVC_PATTERN_VALID,
    XML_SCHEMAV_CVC_ENUMERATION_VALID,
    XML_SCHEMAV_CVC_COMPLEX_TYPE_2_1,
    XML_SCHEMAV_CVC_COMPLEX_TYPE_2_2,
    XML_SCHEMAV_CVC_COMPLEX_TYPE_2_3,
    XML_SCHEMAV_CVC_COMPLEX_TYPE_2_4,
    XML_SCHEMAV_CVC_ELT_1,
    XML_SCHEMAV_CVC_ELT_2,
    XML_SCHEMAV_CVC_ELT_3_1,
    XML_SCHEMAV_CVC_ELT_3_2_1,
    XML_SCHEMAV_CVC_ELT_3_2_2,
    XML_SCHEMAV_CVC_ELT_4_1,
    XML_SCHEMAV_CVC_ELT_4_2,
    XML_SCHEMAV_CVC_ELT_4_3,
    XML_SCHEMAV_CVC_ELT_5_1_1,
    XML_SCHEMAV_CVC_ELT_5_1_2,
    XML_SCHEMAV_CVC_ELT_5_2_1,
    XML_SCHEMAV_CVC_ELT_5_2_2_1,
    XML_SCHEMAV_CVC_ELT_5_2_2_2_1,
    XML_SCHEMAV_CVC_ELT_5_2_2_2_2,
    XML_SCHEMAV_CVC_ELT_6,
    XML_SCHEMAV_CVC_ELT_7,
    XML_SCHEMAV_CVC_ATTRIBUTE_1,
    XML_SCHEMAV_CVC_ATTRIBUTE_2,
    XML_SCHEMAV_CVC_ATTRIBUTE_3,
    XML_SCHEMAV_CVC_ATTRIBUTE_4,
    XML_SCHEMAV_CVC_COMPLEX_TYPE_3_1,
    XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_1,
    XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_2,
    XML_SCHEMAV_CVC_COMPLEX_TYPE_4,
    XML_SCHEMAV_CVC_COMPLEX_TYPE_5_1,
    XML_SCHEMAV_CVC_COMPLEX_TYPE_5_2,
    XML_SCHEMAV_ELEMENT_CONTENT,
    XML_SCHEMAV_DOCUMENT_ELEMENT_MISSING,
    XML_SCHEMAV_CVC_COMPLEX_TYPE_1,
    XML_SCHEMAV_CVC_AU,
    XML_SCHEMAV_CVC_TYPE_1,
    XML_SCHEMAV_CVC_TYPE_2,
    XML_SCHEMAV_CVC_IDC,
    XML_SCHEMAV_CVC_WILDCARD,
    XML_SCHEMAV_MISC,
    XML_XPTR_UNKNOWN_SCHEME = 1900,
    XML_XPTR_CHILDSEQ_START,
    XML_XPTR_EVAL_FAILED,
    XML_XPTR_EXTRA_OBJECTS,
    XML_C14N_CREATE_CTXT = 1950,
    XML_C14N_REQUIRES_UTF8,
    XML_C14N_CREATE_STACK,
    XML_C14N_INVALID_NODE,
    XML_C14N_UNKNOW_NODE,
    XML_C14N_RELATIVE_NAMESPACE,
    XML_FTP_PASV_ANSWER = 2000,
    XML_FTP_EPSV_ANSWER,
    XML_FTP_ACCNT,
    XML_FTP_URL_SYNTAX,
    XML_HTTP_URL_SYNTAX = 2020,
    XML_HTTP_USE_IP,
    XML_HTTP_UNKNOWN_HOST,
    XML_SCHEMAP_SRC_SIMPLE_TYPE_1 = 3000,
    XML_SCHEMAP_SRC_SIMPLE_TYPE_2,
    XML_SCHEMAP_SRC_SIMPLE_TYPE_3,
    XML_SCHEMAP_SRC_SIMPLE_TYPE_4,
    XML_SCHEMAP_SRC_RESOLVE,
    XML_SCHEMAP_SRC_RESTRICTION_BASE_OR_SIMPLETYPE,
    XML_SCHEMAP_SRC_LIST_ITEMTYPE_OR_SIMPLETYPE,
    XML_SCHEMAP_SRC_UNION_MEMBERTYPES_OR_SIMPLETYPES,
    XML_SCHEMAP_ST_PROPS_CORRECT_1,
    XML_SCHEMAP_ST_PROPS_CORRECT_2,
    XML_SCHEMAP_ST_PROPS_CORRECT_3,
    XML_SCHEMAP_COS_ST_RESTRICTS_1_1,
    XML_SCHEMAP_COS_ST_RESTRICTS_1_2,
    XML_SCHEMAP_COS_ST_RESTRICTS_1_3_1,
    XML_SCHEMAP_COS_ST_RESTRICTS_1_3_2,
    XML_SCHEMAP_COS_ST_RESTRICTS_2_1,
    XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_1,
    XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_2,
    XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_1,
    XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_2,
    XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_3,
    XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_4,
    XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_5,
    XML_SCHEMAP_COS_ST_RESTRICTS_3_1,
    XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1,
    XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1_2,
    XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_2,
    XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_1,
    XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_3,
    XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_4,
    XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_5,
    XML_SCHEMAP_COS_ST_DERIVED_OK_2_1,
    XML_SCHEMAP_COS_ST_DERIVED_OK_2_2,
    XML_SCHEMAP_S4S_ELEM_NOT_ALLOWED,
    XML_SCHEMAP_S4S_ELEM_MISSING,
    XML_SCHEMAP_S4S_ATTR_NOT_ALLOWED,
    XML_SCHEMAP_S4S_ATTR_MISSING,
    XML_SCHEMAP_S4S_ATTR_INVALID_VALUE,
    XML_SCHEMAP_SRC_ELEMENT_1,
    XML_SCHEMAP_SRC_ELEMENT_2_1,
    XML_SCHEMAP_SRC_ELEMENT_2_2,
    XML_SCHEMAP_SRC_ELEMENT_3,
    XML_SCHEMAP_P_PROPS_CORRECT_1,
    XML_SCHEMAP_P_PROPS_CORRECT_2_1,
    XML_SCHEMAP_P_PROPS_CORRECT_2_2,
    XML_SCHEMAP_E_PROPS_CORRECT_2,
    XML_SCHEMAP_E_PROPS_CORRECT_3,
    XML_SCHEMAP_E_PROPS_CORRECT_4,
    XML_SCHEMAP_E_PROPS_CORRECT_5,
    XML_SCHEMAP_E_PROPS_CORRECT_6,
    XML_SCHEMAP_SRC_INCLUDE,
    XML_SCHEMAP_SRC_ATTRIBUTE_1,
    XML_SCHEMAP_SRC_ATTRIBUTE_2,
    XML_SCHEMAP_SRC_ATTRIBUTE_3_1,
    XML_SCHEMAP_SRC_ATTRIBUTE_3_2,
    XML_SCHEMAP_SRC_ATTRIBUTE_4,
    XML_SCHEMAP_NO_XMLNS,
    XML_SCHEMAP_NO_XSI,
    XML_SCHEMAP_COS_VALID_DEFAULT_1,
    XML_SCHEMAP_COS_VALID_DEFAULT_2_1,
    XML_SCHEMAP_COS_VALID_DEFAULT_2_2_1,
    XML_SCHEMAP_COS_VALID_DEFAULT_2_2_2,
    XML_SCHEMAP_CVC_SIMPLE_TYPE,
    XML_SCHEMAP_COS_CT_EXTENDS_1_1,
    XML_SCHEMAP_SRC_IMPORT_1_1,
    XML_SCHEMAP_SRC_IMPORT_1_2,
    XML_SCHEMAP_SRC_IMPORT_2,
    XML_SCHEMAP_SRC_IMPORT_2_1,
    XML_SCHEMAP_SRC_IMPORT_2_2,
    XML_SCHEMAP_INTERNAL,
    XML_SCHEMAP_NOT_DETERMINISTIC,
    XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_1,
    XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_2,
    XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_3,
    XML_SCHEMAP_MG_PROPS_CORRECT_1,
    XML_SCHEMAP_MG_PROPS_CORRECT_2,
    XML_SCHEMAP_SRC_CT_1,
    XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_3,
    XML_SCHEMAP_AU_PROPS_CORRECT_2,
    XML_SCHEMAP_A_PROPS_CORRECT_2,
    XML_SCHEMAP_C_PROPS_CORRECT,
    XML_SCHEMAP_SRC_REDEFINE,
    XML_SCHEMAP_SRC_IMPORT,
    XML_SCHEMAP_WARN_SKIP_SCHEMA,
    XML_SCHEMAP_WARN_UNLOCATED_SCHEMA,
    XML_SCHEMAP_WARN_ATTR_REDECL_PROH,
    XML_SCHEMAP_WARN_ATTR_POINTLESS_PROH,
    XML_SCHEMAP_AG_PROPS_CORRECT,
    XML_SCHEMAP_COS_CT_EXTENDS_1_2,
    XML_SCHEMAP_AU_PROPS_CORRECT,
    XML_SCHEMAP_A_PROPS_CORRECT_3,
    XML_SCHEMAP_COS_ALL_LIMITED,
    XML_SCHEMATRONV_ASSERT = 4000,
    XML_SCHEMATRONV_REPORT,
    XML_MODULE_OPEN = 4900,
    XML_MODULE_CLOSE,
    XML_CHECK_FOUND_ELEMENT = 5000,
    XML_CHECK_FOUND_ATTRIBUTE,
    XML_CHECK_FOUND_TEXT,
    XML_CHECK_FOUND_CDATA,
    XML_CHECK_FOUND_ENTITYREF,
    XML_CHECK_FOUND_ENTITY,
    XML_CHECK_FOUND_PI,
    XML_CHECK_FOUND_COMMENT,
    XML_CHECK_FOUND_DOCTYPE,
    XML_CHECK_FOUND_FRAGMENT,
    XML_CHECK_FOUND_NOTATION,
    XML_CHECK_UNKNOWN_NODE,
    XML_CHECK_ENTITY_TYPE,
    XML_CHECK_NO_PARENT,
    XML_CHECK_NO_DOC,
    XML_CHECK_NO_NAME,
    XML_CHECK_NO_ELEM,
    XML_CHECK_WRONG_DOC,
    XML_CHECK_NO_PREV,
    XML_CHECK_WRONG_PREV,
    XML_CHECK_NO_NEXT,
    XML_CHECK_WRONG_NEXT,
    XML_CHECK_NOT_DTD,
    XML_CHECK_NOT_ATTR,
    XML_CHECK_NOT_ATTR_DECL,
    XML_CHECK_NOT_ELEM_DECL,
    XML_CHECK_NOT_ENTITY_DECL,
    XML_CHECK_NOT_NS_DECL,
    XML_CHECK_NO_HREF,
    XML_CHECK_WRONG_PARENT,
    XML_CHECK_NS_SCOPE,
    XML_CHECK_NS_ANCESTOR,
    XML_CHECK_NOT_UTF8,
    XML_CHECK_NO_DICT,
    XML_CHECK_NOT_NCNAME,
    XML_CHECK_OUTSIDE_DICT,
    XML_CHECK_WRONG_NAME,
    XML_CHECK_NAME_NOT_NULL,
    XML_I18N_NO_NAME = 6000,
    XML_I18N_NO_HANDLER,
    XML_I18N_EXCESS_HANDLER,
    XML_I18N_CONV_FAILED,
    XML_I18N_NO_OUTPUT




} xmlParserErrors;
# 844 "/usr/include/libxml2/libxml/xmlerror.h"
typedef void ( *xmlGenericErrorFunc) (void *ctx,
     const char *msg,
      ...) __attribute__((__format__(__printf__,2,3)));
# 855 "/usr/include/libxml2/libxml/xmlerror.h"
typedef void ( *xmlStructuredErrorFunc) (void *userData, xmlErrorPtr error);





 void
    xmlSetGenericErrorFunc (void *ctx,
     xmlGenericErrorFunc handler);
 void
    initGenericErrorDefaultFunc (xmlGenericErrorFunc *handler);

 void
    xmlSetStructuredErrorFunc (void *ctx,
     xmlStructuredErrorFunc handler);




 void
    xmlParserError (void *ctx,
     const char *msg,
     ...) __attribute__((__format__(__printf__,2,3)));
 void
    xmlParserWarning (void *ctx,
     const char *msg,
     ...) __attribute__((__format__(__printf__,2,3)));
 void
    xmlParserValidityError (void *ctx,
     const char *msg,
     ...) __attribute__((__format__(__printf__,2,3)));
 void
    xmlParserValidityWarning (void *ctx,
     const char *msg,
     ...) __attribute__((__format__(__printf__,2,3)));
 void
    xmlParserPrintFileInfo (xmlParserInputPtr input);
 void
    xmlParserPrintFileContext (xmlParserInputPtr input);




 xmlErrorPtr
    xmlGetLastError (void);
 void
    xmlResetLastError (void);
 xmlErrorPtr
    xmlCtxtGetLastError (void *ctx);
 void
    xmlCtxtResetLastError (void *ctx);
 void
    xmlResetError (xmlErrorPtr err);
 int
    xmlCopyError (xmlErrorPtr from,
         xmlErrorPtr to);
# 16 "/usr/include/libxml2/libxml/valid.h" 2

# 1 "/usr/include/libxml2/libxml/list.h" 1
# 20 "/usr/include/libxml2/libxml/list.h"
typedef struct _xmlLink xmlLink;
typedef xmlLink *xmlLinkPtr;

typedef struct _xmlList xmlList;
typedef xmlList *xmlListPtr;







typedef void (*xmlListDeallocator) (xmlLinkPtr lk);
# 42 "/usr/include/libxml2/libxml/list.h"
typedef int (*xmlListDataCompare) (const void *data0, const void *data1);
# 52 "/usr/include/libxml2/libxml/list.h"
typedef int (*xmlListWalker) (const void *data, const void *user);


 xmlListPtr
  xmlListCreate (xmlListDeallocator deallocator,
                                  xmlListDataCompare compare);
 void
  xmlListDelete (xmlListPtr l);


 void *
  xmlListSearch (xmlListPtr l,
      void *data);
 void *
  xmlListReverseSearch (xmlListPtr l,
      void *data);
 int
  xmlListInsert (xmlListPtr l,
      void *data) ;
 int
  xmlListAppend (xmlListPtr l,
      void *data) ;
 int
  xmlListRemoveFirst (xmlListPtr l,
      void *data);
 int
  xmlListRemoveLast (xmlListPtr l,
      void *data);
 int
  xmlListRemoveAll (xmlListPtr l,
      void *data);
 void
  xmlListClear (xmlListPtr l);
 int
  xmlListEmpty (xmlListPtr l);
 xmlLinkPtr
  xmlListFront (xmlListPtr l);
 xmlLinkPtr
  xmlListEnd (xmlListPtr l);
 int
  xmlListSize (xmlListPtr l);

 void
  xmlListPopFront (xmlListPtr l);
 void
  xmlListPopBack (xmlListPtr l);
 int
  xmlListPushFront (xmlListPtr l,
      void *data);
 int
  xmlListPushBack (xmlListPtr l,
      void *data);


 void
  xmlListReverse (xmlListPtr l);
 void
  xmlListSort (xmlListPtr l);
 void
  xmlListWalk (xmlListPtr l,
      xmlListWalker walker,
      const void *user);
 void
  xmlListReverseWalk (xmlListPtr l,
      xmlListWalker walker,
      const void *user);
 void
  xmlListMerge (xmlListPtr l1,
      xmlListPtr l2);
 xmlListPtr
  xmlListDup (const xmlListPtr old);
 int
  xmlListCopy (xmlListPtr cur,
      const xmlListPtr old);

 void *
  xmlLinkGetData (xmlLinkPtr lk);
# 18 "/usr/include/libxml2/libxml/valid.h" 2
# 1 "/usr/include/libxml2/libxml/xmlautomata.h" 1
# 29 "/usr/include/libxml2/libxml/xmlautomata.h"
typedef struct _xmlAutomata xmlAutomata;
typedef xmlAutomata *xmlAutomataPtr;






typedef struct _xmlAutomataState xmlAutomataState;
typedef xmlAutomataState *xmlAutomataStatePtr;




 xmlAutomataPtr
      xmlNewAutomata (void);
 void
      xmlFreeAutomata (xmlAutomataPtr am);

 xmlAutomataStatePtr
      xmlAutomataGetInitState (xmlAutomataPtr am);
 int
      xmlAutomataSetFinalState (xmlAutomataPtr am,
       xmlAutomataStatePtr state);
 xmlAutomataStatePtr
      xmlAutomataNewState (xmlAutomataPtr am);
 xmlAutomataStatePtr
      xmlAutomataNewTransition (xmlAutomataPtr am,
       xmlAutomataStatePtr from,
       xmlAutomataStatePtr to,
       const xmlChar *token,
       void *data);
 xmlAutomataStatePtr
      xmlAutomataNewTransition2 (xmlAutomataPtr am,
       xmlAutomataStatePtr from,
       xmlAutomataStatePtr to,
       const xmlChar *token,
       const xmlChar *token2,
       void *data);
 xmlAutomataStatePtr
                    xmlAutomataNewNegTrans (xmlAutomataPtr am,
       xmlAutomataStatePtr from,
       xmlAutomataStatePtr to,
       const xmlChar *token,
       const xmlChar *token2,
       void *data);

 xmlAutomataStatePtr
      xmlAutomataNewCountTrans (xmlAutomataPtr am,
       xmlAutomataStatePtr from,
       xmlAutomataStatePtr to,
       const xmlChar *token,
       int min,
       int max,
       void *data);
 xmlAutomataStatePtr
      xmlAutomataNewCountTrans2 (xmlAutomataPtr am,
       xmlAutomataStatePtr from,
       xmlAutomataStatePtr to,
       const xmlChar *token,
       const xmlChar *token2,
       int min,
       int max,
       void *data);
 xmlAutomataStatePtr
      xmlAutomataNewOnceTrans (xmlAutomataPtr am,
       xmlAutomataStatePtr from,
       xmlAutomataStatePtr to,
       const xmlChar *token,
       int min,
       int max,
       void *data);
 xmlAutomataStatePtr
      xmlAutomataNewOnceTrans2 (xmlAutomataPtr am,
       xmlAutomataStatePtr from,
       xmlAutomataStatePtr to,
       const xmlChar *token,
       const xmlChar *token2,
       int min,
       int max,
       void *data);
 xmlAutomataStatePtr
      xmlAutomataNewAllTrans (xmlAutomataPtr am,
       xmlAutomataStatePtr from,
       xmlAutomataStatePtr to,
       int lax);
 xmlAutomataStatePtr
      xmlAutomataNewEpsilon (xmlAutomataPtr am,
       xmlAutomataStatePtr from,
       xmlAutomataStatePtr to);
 xmlAutomataStatePtr
      xmlAutomataNewCountedTrans (xmlAutomataPtr am,
       xmlAutomataStatePtr from,
       xmlAutomataStatePtr to,
       int counter);
 xmlAutomataStatePtr
      xmlAutomataNewCounterTrans (xmlAutomataPtr am,
       xmlAutomataStatePtr from,
       xmlAutomataStatePtr to,
       int counter);
 int
      xmlAutomataNewCounter (xmlAutomataPtr am,
       int min,
       int max);

 xmlRegexpPtr
      xmlAutomataCompile (xmlAutomataPtr am);
 int
      xmlAutomataIsDeterminist (xmlAutomataPtr am);
# 19 "/usr/include/libxml2/libxml/valid.h" 2
# 28 "/usr/include/libxml2/libxml/valid.h"
typedef struct _xmlValidState xmlValidState;
typedef xmlValidState *xmlValidStatePtr;
# 42 "/usr/include/libxml2/libxml/valid.h"
typedef void ( *xmlValidityErrorFunc) (void *ctx,
        const char *msg,
        ...) __attribute__((__format__(__printf__,2,3)));
# 57 "/usr/include/libxml2/libxml/valid.h"
typedef void ( *xmlValidityWarningFunc) (void *ctx,
          const char *msg,
          ...) __attribute__((__format__(__printf__,2,3)));
# 80 "/usr/include/libxml2/libxml/valid.h"
typedef struct _xmlValidCtxt xmlValidCtxt;
typedef xmlValidCtxt *xmlValidCtxtPtr;
struct _xmlValidCtxt {
    void *userData;
    xmlValidityErrorFunc error;
    xmlValidityWarningFunc warning;


    xmlNodePtr node;
    int nodeNr;
    int nodeMax;
    xmlNodePtr *nodeTab;

    unsigned int finishDtd;
    xmlDocPtr doc;
    int valid;


    xmlValidState *vstate;
    int vstateNr;
    int vstateMax;
    xmlValidState *vstateTab;


    xmlAutomataPtr am;
    xmlAutomataStatePtr state;




};






typedef struct _xmlHashTable xmlNotationTable;
typedef xmlNotationTable *xmlNotationTablePtr;






typedef struct _xmlHashTable xmlElementTable;
typedef xmlElementTable *xmlElementTablePtr;






typedef struct _xmlHashTable xmlAttributeTable;
typedef xmlAttributeTable *xmlAttributeTablePtr;






typedef struct _xmlHashTable xmlIDTable;
typedef xmlIDTable *xmlIDTablePtr;






typedef struct _xmlHashTable xmlRefTable;
typedef xmlRefTable *xmlRefTablePtr;


 xmlNotationPtr
  xmlAddNotationDecl (xmlValidCtxtPtr ctxt,
      xmlDtdPtr dtd,
      const xmlChar *name,
      const xmlChar *PublicID,
      const xmlChar *SystemID);

 xmlNotationTablePtr
  xmlCopyNotationTable (xmlNotationTablePtr table);

 void
  xmlFreeNotationTable (xmlNotationTablePtr table);

 void
  xmlDumpNotationDecl (xmlBufferPtr buf,
      xmlNotationPtr nota);
 void
  xmlDumpNotationTable (xmlBufferPtr buf,
      xmlNotationTablePtr table);




 xmlElementContentPtr
  xmlNewElementContent (const xmlChar *name,
      xmlElementContentType type);
 xmlElementContentPtr
  xmlCopyElementContent (xmlElementContentPtr content);
 void
  xmlFreeElementContent (xmlElementContentPtr cur);

 xmlElementContentPtr
  xmlNewDocElementContent (xmlDocPtr doc,
      const xmlChar *name,
      xmlElementContentType type);
 xmlElementContentPtr
  xmlCopyDocElementContent(xmlDocPtr doc,
      xmlElementContentPtr content);
 void
  xmlFreeDocElementContent(xmlDocPtr doc,
      xmlElementContentPtr cur);
 void
  xmlSnprintfElementContent(char *buf,
      int size,
                                  xmlElementContentPtr content,
      int englob);


 void
  xmlSprintfElementContent(char *buf,
                                  xmlElementContentPtr content,
      int englob);




 xmlElementPtr
  xmlAddElementDecl (xmlValidCtxtPtr ctxt,
      xmlDtdPtr dtd,
      const xmlChar *name,
      xmlElementTypeVal type,
      xmlElementContentPtr content);

 xmlElementTablePtr
  xmlCopyElementTable (xmlElementTablePtr table);

 void
  xmlFreeElementTable (xmlElementTablePtr table);

 void
  xmlDumpElementTable (xmlBufferPtr buf,
      xmlElementTablePtr table);
 void
  xmlDumpElementDecl (xmlBufferPtr buf,
      xmlElementPtr elem);



 xmlEnumerationPtr
  xmlCreateEnumeration (const xmlChar *name);
 void
  xmlFreeEnumeration (xmlEnumerationPtr cur);

 xmlEnumerationPtr
  xmlCopyEnumeration (xmlEnumerationPtr cur);



 xmlAttributePtr
  xmlAddAttributeDecl (xmlValidCtxtPtr ctxt,
      xmlDtdPtr dtd,
      const xmlChar *elem,
      const xmlChar *name,
      const xmlChar *ns,
      xmlAttributeType type,
      xmlAttributeDefault def,
      const xmlChar *defaultValue,
      xmlEnumerationPtr tree);

 xmlAttributeTablePtr
  xmlCopyAttributeTable (xmlAttributeTablePtr table);

 void
  xmlFreeAttributeTable (xmlAttributeTablePtr table);

 void
  xmlDumpAttributeTable (xmlBufferPtr buf,
     xmlAttributeTablePtr table);
 void
  xmlDumpAttributeDecl (xmlBufferPtr buf,
     xmlAttributePtr attr);



 xmlIDPtr
  xmlAddID (xmlValidCtxtPtr ctxt,
     xmlDocPtr doc,
     const xmlChar *value,
     xmlAttrPtr attr);
 void
  xmlFreeIDTable (xmlIDTablePtr table);
 xmlAttrPtr
  xmlGetID (xmlDocPtr doc,
     const xmlChar *ID);
 int
  xmlIsID (xmlDocPtr doc,
     xmlNodePtr elem,
     xmlAttrPtr attr);
 int
  xmlRemoveID (xmlDocPtr doc,
     xmlAttrPtr attr);


 xmlRefPtr
  xmlAddRef (xmlValidCtxtPtr ctxt,
     xmlDocPtr doc,
     const xmlChar *value,
     xmlAttrPtr attr);
 void
  xmlFreeRefTable (xmlRefTablePtr table);
 int
  xmlIsRef (xmlDocPtr doc,
     xmlNodePtr elem,
     xmlAttrPtr attr);
 int
  xmlRemoveRef (xmlDocPtr doc,
     xmlAttrPtr attr);
 xmlListPtr
  xmlGetRefs (xmlDocPtr doc,
     const xmlChar *ID);






 xmlValidCtxtPtr
  xmlNewValidCtxt(void);
 void
  xmlFreeValidCtxt(xmlValidCtxtPtr);

 int
  xmlValidateRoot (xmlValidCtxtPtr ctxt,
      xmlDocPtr doc);
 int
  xmlValidateElementDecl (xmlValidCtxtPtr ctxt,
      xmlDocPtr doc,
                           xmlElementPtr elem);
 xmlChar *
  xmlValidNormalizeAttributeValue(xmlDocPtr doc,
      xmlNodePtr elem,
      const xmlChar *name,
      const xmlChar *value);
 xmlChar *
  xmlValidCtxtNormalizeAttributeValue(xmlValidCtxtPtr ctxt,
      xmlDocPtr doc,
      xmlNodePtr elem,
      const xmlChar *name,
      const xmlChar *value);
 int
  xmlValidateAttributeDecl(xmlValidCtxtPtr ctxt,
      xmlDocPtr doc,
                           xmlAttributePtr attr);
 int
  xmlValidateAttributeValue(xmlAttributeType type,
      const xmlChar *value);
 int
  xmlValidateNotationDecl (xmlValidCtxtPtr ctxt,
      xmlDocPtr doc,
                           xmlNotationPtr nota);
 int
  xmlValidateDtd (xmlValidCtxtPtr ctxt,
      xmlDocPtr doc,
      xmlDtdPtr dtd);
 int
  xmlValidateDtdFinal (xmlValidCtxtPtr ctxt,
      xmlDocPtr doc);
 int
  xmlValidateDocument (xmlValidCtxtPtr ctxt,
      xmlDocPtr doc);
 int
  xmlValidateElement (xmlValidCtxtPtr ctxt,
      xmlDocPtr doc,
      xmlNodePtr elem);
 int
  xmlValidateOneElement (xmlValidCtxtPtr ctxt,
      xmlDocPtr doc,
                           xmlNodePtr elem);
 int
  xmlValidateOneAttribute (xmlValidCtxtPtr ctxt,
      xmlDocPtr doc,
      xmlNodePtr elem,
      xmlAttrPtr attr,
      const xmlChar *value);
 int
  xmlValidateOneNamespace (xmlValidCtxtPtr ctxt,
      xmlDocPtr doc,
      xmlNodePtr elem,
      const xmlChar *prefix,
      xmlNsPtr ns,
      const xmlChar *value);
 int
  xmlValidateDocumentFinal(xmlValidCtxtPtr ctxt,
      xmlDocPtr doc);



 int
  xmlValidateNotationUse (xmlValidCtxtPtr ctxt,
      xmlDocPtr doc,
      const xmlChar *notationName);


 int
  xmlIsMixedElement (xmlDocPtr doc,
      const xmlChar *name);
 xmlAttributePtr
  xmlGetDtdAttrDesc (xmlDtdPtr dtd,
      const xmlChar *elem,
      const xmlChar *name);
 xmlAttributePtr
  xmlGetDtdQAttrDesc (xmlDtdPtr dtd,
      const xmlChar *elem,
      const xmlChar *name,
      const xmlChar *prefix);
 xmlNotationPtr
  xmlGetDtdNotationDesc (xmlDtdPtr dtd,
      const xmlChar *name);
 xmlElementPtr
  xmlGetDtdQElementDesc (xmlDtdPtr dtd,
      const xmlChar *name,
      const xmlChar *prefix);
 xmlElementPtr
  xmlGetDtdElementDesc (xmlDtdPtr dtd,
      const xmlChar *name);



 int
  xmlValidGetPotentialChildren(xmlElementContent *ctree,
      const xmlChar **names,
      int *len,
      int max);

 int
  xmlValidGetValidElements(xmlNode *prev,
      xmlNode *next,
      const xmlChar **names,
      int max);
 int
  xmlValidateNameValue (const xmlChar *value);
 int
  xmlValidateNamesValue (const xmlChar *value);
 int
  xmlValidateNmtokenValue (const xmlChar *value);
 int
  xmlValidateNmtokensValue(const xmlChar *value);





 int
  xmlValidBuildContentModel(xmlValidCtxtPtr ctxt,
      xmlElementPtr elem);

 int
  xmlValidatePushElement (xmlValidCtxtPtr ctxt,
      xmlDocPtr doc,
      xmlNodePtr elem,
      const xmlChar *qname);
 int
  xmlValidatePushCData (xmlValidCtxtPtr ctxt,
      const xmlChar *data,
      int len);
 int
  xmlValidatePopElement (xmlValidCtxtPtr ctxt,
      xmlDocPtr doc,
      xmlNodePtr elem,
      const xmlChar *qname);
# 20 "/usr/include/libxml2/libxml/parser.h" 2
# 1 "/usr/include/libxml2/libxml/entities.h" 1
# 24 "/usr/include/libxml2/libxml/entities.h"
typedef enum {
    XML_INTERNAL_GENERAL_ENTITY = 1,
    XML_EXTERNAL_GENERAL_PARSED_ENTITY = 2,
    XML_EXTERNAL_GENERAL_UNPARSED_ENTITY = 3,
    XML_INTERNAL_PARAMETER_ENTITY = 4,
    XML_EXTERNAL_PARAMETER_ENTITY = 5,
    XML_INTERNAL_PREDEFINED_ENTITY = 6
} xmlEntityType;






struct _xmlEntity {
    void *_private;
    xmlElementType type;
    const xmlChar *name;
    struct _xmlNode *children;
    struct _xmlNode *last;
    struct _xmlDtd *parent;
    struct _xmlNode *next;
    struct _xmlNode *prev;
    struct _xmlDoc *doc;

    xmlChar *orig;
    xmlChar *content;
    int length;
    xmlEntityType etype;
    const xmlChar *ExternalID;
    const xmlChar *SystemID;

    struct _xmlEntity *nexte;
    const xmlChar *URI;
    int owner;
    int checked;


};






typedef struct _xmlHashTable xmlEntitiesTable;
typedef xmlEntitiesTable *xmlEntitiesTablePtr;






 void
  xmlInitializePredefinedEntities (void);


 xmlEntityPtr
   xmlNewEntity (xmlDocPtr doc,
       const xmlChar *name,
       int type,
       const xmlChar *ExternalID,
       const xmlChar *SystemID,
       const xmlChar *content);
 xmlEntityPtr
   xmlAddDocEntity (xmlDocPtr doc,
       const xmlChar *name,
       int type,
       const xmlChar *ExternalID,
       const xmlChar *SystemID,
       const xmlChar *content);
 xmlEntityPtr
   xmlAddDtdEntity (xmlDocPtr doc,
       const xmlChar *name,
       int type,
       const xmlChar *ExternalID,
       const xmlChar *SystemID,
       const xmlChar *content);
 xmlEntityPtr
   xmlGetPredefinedEntity (const xmlChar *name);
 xmlEntityPtr
   xmlGetDocEntity (xmlDocPtr doc,
       const xmlChar *name);
 xmlEntityPtr
   xmlGetDtdEntity (xmlDocPtr doc,
       const xmlChar *name);
 xmlEntityPtr
   xmlGetParameterEntity (xmlDocPtr doc,
       const xmlChar *name);

 const xmlChar *
   xmlEncodeEntities (xmlDocPtr doc,
       const xmlChar *input);

 xmlChar *
   xmlEncodeEntitiesReentrant(xmlDocPtr doc,
       const xmlChar *input);
 xmlChar *
   xmlEncodeSpecialChars (xmlDocPtr doc,
       const xmlChar *input);
 xmlEntitiesTablePtr
   xmlCreateEntitiesTable (void);

 xmlEntitiesTablePtr
   xmlCopyEntitiesTable (xmlEntitiesTablePtr table);

 void
   xmlFreeEntitiesTable (xmlEntitiesTablePtr table);

 void
   xmlDumpEntitiesTable (xmlBufferPtr buf,
       xmlEntitiesTablePtr table);
 void
   xmlDumpEntityDecl (xmlBufferPtr buf,
       xmlEntityPtr ent);


 void
   xmlCleanupPredefinedEntities(void);
# 21 "/usr/include/libxml2/libxml/parser.h" 2
# 1 "/usr/include/libxml2/libxml/xmlerror.h" 1
# 22 "/usr/include/libxml2/libxml/parser.h" 2
# 52 "/usr/include/libxml2/libxml/parser.h"
typedef void (* xmlParserInputDeallocate)(xmlChar *str);

struct _xmlParserInput {

    xmlParserInputBufferPtr buf;

    const char *filename;
    const char *directory;
    const xmlChar *base;
    const xmlChar *cur;
    const xmlChar *end;
    int length;
    int line;
    int col;





    unsigned long consumed;
    xmlParserInputDeallocate free;
    const xmlChar *encoding;
    const xmlChar *version;
    int standalone;
    int id;
};
# 86 "/usr/include/libxml2/libxml/parser.h"
typedef struct _xmlParserNodeInfo xmlParserNodeInfo;
typedef xmlParserNodeInfo *xmlParserNodeInfoPtr;

struct _xmlParserNodeInfo {
  const struct _xmlNode* node;

  unsigned long begin_pos;
  unsigned long begin_line;
  unsigned long end_pos;
  unsigned long end_line;
};

typedef struct _xmlParserNodeInfoSeq xmlParserNodeInfoSeq;
typedef xmlParserNodeInfoSeq *xmlParserNodeInfoSeqPtr;
struct _xmlParserNodeInfoSeq {
  unsigned long maximum;
  unsigned long length;
  xmlParserNodeInfo* buffer;
};







typedef enum {
    XML_PARSER_EOF = -1,
    XML_PARSER_START = 0,
    XML_PARSER_MISC,
    XML_PARSER_PI,
    XML_PARSER_DTD,
    XML_PARSER_PROLOG,
    XML_PARSER_COMMENT,
    XML_PARSER_START_TAG,
    XML_PARSER_CONTENT,
    XML_PARSER_CDATA_SECTION,
    XML_PARSER_END_TAG,
    XML_PARSER_ENTITY_DECL,
    XML_PARSER_ENTITY_VALUE,
    XML_PARSER_ATTRIBUTE_VALUE,
    XML_PARSER_SYSTEM_LITERAL,
    XML_PARSER_EPILOG,
    XML_PARSER_IGNORE,
    XML_PARSER_PUBLIC_LITERAL
} xmlParserInputState;
# 163 "/usr/include/libxml2/libxml/parser.h"
typedef enum {
    XML_PARSE_UNKNOWN = 0,
    XML_PARSE_DOM = 1,
    XML_PARSE_SAX = 2,
    XML_PARSE_PUSH_DOM = 3,
    XML_PARSE_PUSH_SAX = 4,
    XML_PARSE_READER = 5
} xmlParserMode;
# 184 "/usr/include/libxml2/libxml/parser.h"
struct _xmlParserCtxt {
    struct _xmlSAXHandler *sax;
    void *userData;
    xmlDocPtr myDoc;
    int wellFormed;
    int replaceEntities;
    const xmlChar *version;
    const xmlChar *encoding;
    int standalone;
    int html;


    xmlParserInputPtr input;
    int inputNr;
    int inputMax;
    xmlParserInputPtr *inputTab;


    xmlNodePtr node;
    int nodeNr;
    int nodeMax;
    xmlNodePtr *nodeTab;

    int record_info;
    xmlParserNodeInfoSeq node_seq;

    int errNo;

    int hasExternalSubset;
    int hasPErefs;
    int external;

    int valid;
    int validate;
    xmlValidCtxt vctxt;

    xmlParserInputState instate;
    int token;

    char *directory;


    const xmlChar *name;
    int nameNr;
    int nameMax;
    const xmlChar * *nameTab;

    long nbChars;
    long checkIndex;
    int keepBlanks;
    int disableSAX;
    int inSubset;
    const xmlChar * intSubName;
    xmlChar * extSubURI;
    xmlChar * extSubSystem;


    int * space;
    int spaceNr;
    int spaceMax;
    int * spaceTab;

    int depth;
    xmlParserInputPtr entity;
    int charset;

    int nodelen;
    int nodemem;
    int pedantic;
    void *_private;

    int loadsubset;
    int linenumbers;
    void *catalogs;
    int recovery;
    int progressive;
    xmlDictPtr dict;
    const xmlChar * *atts;
    int maxatts;
    int docdict;




    const xmlChar *str_xml;
    const xmlChar *str_xmlns;
    const xmlChar *str_xml_ns;




    int sax2;
    int nsNr;
    int nsMax;
    const xmlChar * *nsTab;
    int *attallocs;
    void * *pushTab;
    xmlHashTablePtr attsDefault;
    xmlHashTablePtr attsSpecial;
    int nsWellFormed;
    int options;




    int dictNames;
    int freeElemsNr;
    xmlNodePtr freeElems;
    int freeAttrsNr;
    xmlAttrPtr freeAttrs;




    xmlError lastError;
    xmlParserMode parseMode;
    unsigned long nbentities;
    unsigned long sizeentities;
};






struct _xmlSAXLocator {
    const xmlChar *(*getPublicId)(void *ctx);
    const xmlChar *(*getSystemId)(void *ctx);
    int (*getLineNumber)(void *ctx);
    int (*getColumnNumber)(void *ctx);
};
# 338 "/usr/include/libxml2/libxml/parser.h"
typedef xmlParserInputPtr (*resolveEntitySAXFunc) (void *ctx,
    const xmlChar *publicId,
    const xmlChar *systemId);
# 350 "/usr/include/libxml2/libxml/parser.h"
typedef void (*internalSubsetSAXFunc) (void *ctx,
    const xmlChar *name,
    const xmlChar *ExternalID,
    const xmlChar *SystemID);
# 363 "/usr/include/libxml2/libxml/parser.h"
typedef void (*externalSubsetSAXFunc) (void *ctx,
    const xmlChar *name,
    const xmlChar *ExternalID,
    const xmlChar *SystemID);
# 376 "/usr/include/libxml2/libxml/parser.h"
typedef xmlEntityPtr (*getEntitySAXFunc) (void *ctx,
    const xmlChar *name);
# 387 "/usr/include/libxml2/libxml/parser.h"
typedef xmlEntityPtr (*getParameterEntitySAXFunc) (void *ctx,
    const xmlChar *name);
# 400 "/usr/include/libxml2/libxml/parser.h"
typedef void (*entityDeclSAXFunc) (void *ctx,
    const xmlChar *name,
    int type,
    const xmlChar *publicId,
    const xmlChar *systemId,
    xmlChar *content);
# 415 "/usr/include/libxml2/libxml/parser.h"
typedef void (*notationDeclSAXFunc)(void *ctx,
    const xmlChar *name,
    const xmlChar *publicId,
    const xmlChar *systemId);
# 431 "/usr/include/libxml2/libxml/parser.h"
typedef void (*attributeDeclSAXFunc)(void *ctx,
    const xmlChar *elem,
    const xmlChar *fullname,
    int type,
    int def,
    const xmlChar *defaultValue,
    xmlEnumerationPtr tree);
# 447 "/usr/include/libxml2/libxml/parser.h"
typedef void (*elementDeclSAXFunc)(void *ctx,
    const xmlChar *name,
    int type,
    xmlElementContentPtr content);
# 461 "/usr/include/libxml2/libxml/parser.h"
typedef void (*unparsedEntityDeclSAXFunc)(void *ctx,
    const xmlChar *name,
    const xmlChar *publicId,
    const xmlChar *systemId,
    const xmlChar *notationName);
# 474 "/usr/include/libxml2/libxml/parser.h"
typedef void (*setDocumentLocatorSAXFunc) (void *ctx,
    xmlSAXLocatorPtr loc);






typedef void (*startDocumentSAXFunc) (void *ctx);






typedef void (*endDocumentSAXFunc) (void *ctx);
# 498 "/usr/include/libxml2/libxml/parser.h"
typedef void (*startElementSAXFunc) (void *ctx,
    const xmlChar *name,
    const xmlChar **atts);







typedef void (*endElementSAXFunc) (void *ctx,
    const xmlChar *name);
# 521 "/usr/include/libxml2/libxml/parser.h"
typedef void (*attributeSAXFunc) (void *ctx,
    const xmlChar *name,
    const xmlChar *value);







typedef void (*referenceSAXFunc) (void *ctx,
    const xmlChar *name);
# 541 "/usr/include/libxml2/libxml/parser.h"
typedef void (*charactersSAXFunc) (void *ctx,
    const xmlChar *ch,
    int len);
# 553 "/usr/include/libxml2/libxml/parser.h"
typedef void (*ignorableWhitespaceSAXFunc) (void *ctx,
    const xmlChar *ch,
    int len);
# 564 "/usr/include/libxml2/libxml/parser.h"
typedef void (*processingInstructionSAXFunc) (void *ctx,
    const xmlChar *target,
    const xmlChar *data);







typedef void (*commentSAXFunc) (void *ctx,
    const xmlChar *value);
# 584 "/usr/include/libxml2/libxml/parser.h"
typedef void (*cdataBlockSAXFunc) (
                         void *ctx,
    const xmlChar *value,
    int len);
# 596 "/usr/include/libxml2/libxml/parser.h"
typedef void ( *warningSAXFunc) (void *ctx,
    const char *msg, ...) __attribute__((__format__(__printf__,2,3)));
# 606 "/usr/include/libxml2/libxml/parser.h"
typedef void ( *errorSAXFunc) (void *ctx,
    const char *msg, ...) __attribute__((__format__(__printf__,2,3)));
# 618 "/usr/include/libxml2/libxml/parser.h"
typedef void ( *fatalErrorSAXFunc) (void *ctx,
    const char *msg, ...) __attribute__((__format__(__printf__,2,3)));
# 628 "/usr/include/libxml2/libxml/parser.h"
typedef int (*isStandaloneSAXFunc) (void *ctx);
# 637 "/usr/include/libxml2/libxml/parser.h"
typedef int (*hasInternalSubsetSAXFunc) (void *ctx);
# 647 "/usr/include/libxml2/libxml/parser.h"
typedef int (*hasExternalSubsetSAXFunc) (void *ctx);
# 680 "/usr/include/libxml2/libxml/parser.h"
typedef void (*startElementNsSAX2Func) (void *ctx,
     const xmlChar *localname,
     const xmlChar *prefix,
     const xmlChar *URI,
     int nb_namespaces,
     const xmlChar **namespaces,
     int nb_attributes,
     int nb_defaulted,
     const xmlChar **attributes);
# 701 "/usr/include/libxml2/libxml/parser.h"
typedef void (*endElementNsSAX2Func) (void *ctx,
     const xmlChar *localname,
     const xmlChar *prefix,
     const xmlChar *URI);


struct _xmlSAXHandler {
    internalSubsetSAXFunc internalSubset;
    isStandaloneSAXFunc isStandalone;
    hasInternalSubsetSAXFunc hasInternalSubset;
    hasExternalSubsetSAXFunc hasExternalSubset;
    resolveEntitySAXFunc resolveEntity;
    getEntitySAXFunc getEntity;
    entityDeclSAXFunc entityDecl;
    notationDeclSAXFunc notationDecl;
    attributeDeclSAXFunc attributeDecl;
    elementDeclSAXFunc elementDecl;
    unparsedEntityDeclSAXFunc unparsedEntityDecl;
    setDocumentLocatorSAXFunc setDocumentLocator;
    startDocumentSAXFunc startDocument;
    endDocumentSAXFunc endDocument;
    startElementSAXFunc startElement;
    endElementSAXFunc endElement;
    referenceSAXFunc reference;
    charactersSAXFunc characters;
    ignorableWhitespaceSAXFunc ignorableWhitespace;
    processingInstructionSAXFunc processingInstruction;
    commentSAXFunc comment;
    warningSAXFunc warning;
    errorSAXFunc error;
    fatalErrorSAXFunc fatalError;
    getParameterEntitySAXFunc getParameterEntity;
    cdataBlockSAXFunc cdataBlock;
    externalSubsetSAXFunc externalSubset;
    unsigned int initialized;

    void *_private;
    startElementNsSAX2Func startElementNs;
    endElementNsSAX2Func endElementNs;
    xmlStructuredErrorFunc serror;
};




typedef struct _xmlSAXHandlerV1 xmlSAXHandlerV1;
typedef xmlSAXHandlerV1 *xmlSAXHandlerV1Ptr;
struct _xmlSAXHandlerV1 {
    internalSubsetSAXFunc internalSubset;
    isStandaloneSAXFunc isStandalone;
    hasInternalSubsetSAXFunc hasInternalSubset;
    hasExternalSubsetSAXFunc hasExternalSubset;
    resolveEntitySAXFunc resolveEntity;
    getEntitySAXFunc getEntity;
    entityDeclSAXFunc entityDecl;
    notationDeclSAXFunc notationDecl;
    attributeDeclSAXFunc attributeDecl;
    elementDeclSAXFunc elementDecl;
    unparsedEntityDeclSAXFunc unparsedEntityDecl;
    setDocumentLocatorSAXFunc setDocumentLocator;
    startDocumentSAXFunc startDocument;
    endDocumentSAXFunc endDocument;
    startElementSAXFunc startElement;
    endElementSAXFunc endElement;
    referenceSAXFunc reference;
    charactersSAXFunc characters;
    ignorableWhitespaceSAXFunc ignorableWhitespace;
    processingInstructionSAXFunc processingInstruction;
    commentSAXFunc comment;
    warningSAXFunc warning;
    errorSAXFunc error;
    fatalErrorSAXFunc fatalError;
    getParameterEntitySAXFunc getParameterEntity;
    cdataBlockSAXFunc cdataBlock;
    externalSubsetSAXFunc externalSubset;
    unsigned int initialized;
};
# 790 "/usr/include/libxml2/libxml/parser.h"
typedef xmlParserInputPtr (*xmlExternalEntityLoader) (const char *URL,
      const char *ID,
      xmlParserCtxtPtr context);





# 1 "/usr/include/libxml2/libxml/encoding.h" 1
# 28 "/usr/include/libxml2/libxml/encoding.h"
# 1 "/usr/include/iconv.h" 1 3 4
# 24 "/usr/include/iconv.h" 3 4
# 1 "/usr/lib64/gcc/x86_64-suse-linux/4.3/include/stddef.h" 1 3 4
# 25 "/usr/include/iconv.h" 2 3 4





typedef void *iconv_t;







extern iconv_t iconv_open (__const char *__tocode, __const char *__fromcode);




extern size_t iconv (iconv_t __cd, char **__restrict __inbuf,
       size_t *__restrict __inbytesleft,
       char **__restrict __outbuf,
       size_t *__restrict __outbytesleft);





extern int iconv_close (iconv_t __cd);


# 29 "/usr/include/libxml2/libxml/encoding.h" 2
# 55 "/usr/include/libxml2/libxml/encoding.h"
typedef enum {
    XML_CHAR_ENCODING_ERROR= -1,
    XML_CHAR_ENCODING_NONE= 0,
    XML_CHAR_ENCODING_UTF8= 1,
    XML_CHAR_ENCODING_UTF16LE= 2,
    XML_CHAR_ENCODING_UTF16BE= 3,
    XML_CHAR_ENCODING_UCS4LE= 4,
    XML_CHAR_ENCODING_UCS4BE= 5,
    XML_CHAR_ENCODING_EBCDIC= 6,
    XML_CHAR_ENCODING_UCS4_2143=7,
    XML_CHAR_ENCODING_UCS4_3412=8,
    XML_CHAR_ENCODING_UCS2= 9,
    XML_CHAR_ENCODING_8859_1= 10,
    XML_CHAR_ENCODING_8859_2= 11,
    XML_CHAR_ENCODING_8859_3= 12,
    XML_CHAR_ENCODING_8859_4= 13,
    XML_CHAR_ENCODING_8859_5= 14,
    XML_CHAR_ENCODING_8859_6= 15,
    XML_CHAR_ENCODING_8859_7= 16,
    XML_CHAR_ENCODING_8859_8= 17,
    XML_CHAR_ENCODING_8859_9= 18,
    XML_CHAR_ENCODING_2022_JP= 19,
    XML_CHAR_ENCODING_SHIFT_JIS=20,
    XML_CHAR_ENCODING_EUC_JP= 21,
    XML_CHAR_ENCODING_ASCII= 22
} xmlCharEncoding;
# 98 "/usr/include/libxml2/libxml/encoding.h"
typedef int (* xmlCharEncodingInputFunc)(unsigned char *out, int *outlen,
                                         const unsigned char *in, int *inlen);
# 120 "/usr/include/libxml2/libxml/encoding.h"
typedef int (* xmlCharEncodingOutputFunc)(unsigned char *out, int *outlen,
                                          const unsigned char *in, int *inlen);







typedef struct _xmlCharEncodingHandler xmlCharEncodingHandler;
typedef xmlCharEncodingHandler *xmlCharEncodingHandlerPtr;
struct _xmlCharEncodingHandler {
    char *name;
    xmlCharEncodingInputFunc input;
    xmlCharEncodingOutputFunc output;

    iconv_t iconv_in;
    iconv_t iconv_out;

};
# 152 "/usr/include/libxml2/libxml/encoding.h"
 void
 xmlInitCharEncodingHandlers (void);
 void
 xmlCleanupCharEncodingHandlers (void);
 void
 xmlRegisterCharEncodingHandler (xmlCharEncodingHandlerPtr handler);
 xmlCharEncodingHandlerPtr
 xmlGetCharEncodingHandler (xmlCharEncoding enc);
 xmlCharEncodingHandlerPtr
 xmlFindCharEncodingHandler (const char *name);
 xmlCharEncodingHandlerPtr
 xmlNewCharEncodingHandler (const char *name,
                             xmlCharEncodingInputFunc input,
                             xmlCharEncodingOutputFunc output);




 int
 xmlAddEncodingAlias (const char *name,
      const char *alias);
 int
 xmlDelEncodingAlias (const char *alias);
 const char *
 xmlGetEncodingAlias (const char *alias);
 void
 xmlCleanupEncodingAliases (void);
 xmlCharEncoding
 xmlParseCharEncoding (const char *name);
 const char *
 xmlGetCharEncodingName (xmlCharEncoding enc);




 xmlCharEncoding
 xmlDetectCharEncoding (const unsigned char *in,
      int len);

 int
 xmlCharEncOutFunc (xmlCharEncodingHandler *handler,
      xmlBufferPtr out,
      xmlBufferPtr in);

 int
 xmlCharEncInFunc (xmlCharEncodingHandler *handler,
      xmlBufferPtr out,
      xmlBufferPtr in);
 int
 xmlCharEncFirstLine (xmlCharEncodingHandler *handler,
      xmlBufferPtr out,
      xmlBufferPtr in);
 int
 xmlCharEncCloseFunc (xmlCharEncodingHandler *handler);





 int
 UTF8Toisolat1 (unsigned char *out,
      int *outlen,
      const unsigned char *in,
      int *inlen);

 int
 isolat1ToUTF8 (unsigned char *out,
      int *outlen,
      const unsigned char *in,
      int *inlen);
# 799 "/usr/include/libxml2/libxml/parser.h" 2
# 1 "/usr/include/libxml2/libxml/xmlIO.h" 1
# 34 "/usr/include/libxml2/libxml/xmlIO.h"
typedef int ( *xmlInputMatchCallback) (char const *filename);
# 43 "/usr/include/libxml2/libxml/xmlIO.h"
typedef void * ( *xmlInputOpenCallback) (char const *filename);
# 54 "/usr/include/libxml2/libxml/xmlIO.h"
typedef int ( *xmlInputReadCallback) (void * context, char * buffer, int len);
# 63 "/usr/include/libxml2/libxml/xmlIO.h"
typedef int ( *xmlInputCloseCallback) (void * context);
# 80 "/usr/include/libxml2/libxml/xmlIO.h"
typedef int ( *xmlOutputMatchCallback) (char const *filename);
# 89 "/usr/include/libxml2/libxml/xmlIO.h"
typedef void * ( *xmlOutputOpenCallback) (char const *filename);
# 100 "/usr/include/libxml2/libxml/xmlIO.h"
typedef int ( *xmlOutputWriteCallback) (void * context, const char * buffer,
                                       int len);
# 110 "/usr/include/libxml2/libxml/xmlIO.h"
typedef int ( *xmlOutputCloseCallback) (void * context);






# 1 "/usr/include/libxml2/libxml/globals.h" 1
# 19 "/usr/include/libxml2/libxml/globals.h"
# 1 "/usr/include/libxml2/libxml/xmlerror.h" 1
# 20 "/usr/include/libxml2/libxml/globals.h" 2
# 1 "/usr/include/libxml2/libxml/SAX.h" 1
# 16 "/usr/include/libxml2/libxml/SAX.h"
# 1 "/usr/include/stdlib.h" 1 3 4
# 33 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib64/gcc/x86_64-suse-linux/4.3/include/stddef.h" 1 3 4
# 34 "/usr/include/stdlib.h" 2 3 4








# 1 "/usr/include/bits/waitflags.h" 1 3 4
# 43 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/bits/waitstatus.h" 1 3 4
# 44 "/usr/include/stdlib.h" 2 3 4
# 96 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 140 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__)) ;




extern double atof (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (__const char *__nptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (__const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





extern float strtof (__const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

extern long double strtold (__const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





extern long int strtol (__const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

extern unsigned long int strtoul (__const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

# 207 "/usr/include/stdlib.h" 3 4


__extension__
extern long long int strtoll (__const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtoull (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;

# 277 "/usr/include/stdlib.h" 3 4

extern __inline __attribute__ ((__gnu_inline__)) double
__attribute__ ((__nothrow__)) atof (__const char *__nptr)
{
  return strtod (__nptr, (char **) ((void *)0));
}
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__)) atoi (__const char *__nptr)
{
  return (int) strtol (__nptr, (char **) ((void *)0), 10);
}
extern __inline __attribute__ ((__gnu_inline__)) long int
__attribute__ ((__nothrow__)) atol (__const char *__nptr)
{
  return strtol (__nptr, (char **) ((void *)0), 10);
}




__extension__ extern __inline __attribute__ ((__gnu_inline__)) long long int
__attribute__ ((__nothrow__)) atoll (__const char *__nptr)
{
  return strtoll (__nptr, (char **) ((void *)0), 10);
}

# 378 "/usr/include/stdlib.h" 3 4


extern int rand (void) __attribute__ ((__nothrow__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__));




extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__));







extern double drand48 (void) __attribute__ ((__nothrow__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 469 "/usr/include/stdlib.h" 3 4


extern void *malloc (size_t __size) __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__)) __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__)) __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) __attribute__ ((__nothrow__));

# 511 "/usr/include/stdlib.h" 3 4


extern void abort (void) __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));

# 527 "/usr/include/stdlib.h" 3 4




extern void exit (int __status) __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));






extern void _Exit (int __status) __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));






extern char *getenv (__const char *__name) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;




extern char *__secure_getenv (__const char *__name)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1))) ;





extern int putenv (char *__string) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 640 "/usr/include/stdlib.h" 3 4





extern int system (__const char *__command) ;

# 670 "/usr/include/stdlib.h" 3 4
typedef int (*__compar_fn_t) (__const void *, __const void *);
# 680 "/usr/include/stdlib.h" 3 4



extern void *bsearch (__const void *__key, __const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;



extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
# 699 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__)) __attribute__ ((__const__)) ;

# 784 "/usr/include/stdlib.h" 3 4



extern int mblen (__const char *__s, size_t __n) __attribute__ ((__nothrow__)) ;


extern int mbtowc (wchar_t *__restrict __pwc,
     __const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__)) ;


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__)) ;



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   __const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__));

extern size_t wcstombs (char *__restrict __s,
   __const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__));

# 832 "/usr/include/stdlib.h" 3 4
extern void setkey (__const char *__key) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));
# 848 "/usr/include/stdlib.h" 3 4
extern int grantpt (int __fd) __attribute__ ((__nothrow__));



extern int unlockpt (int __fd) __attribute__ ((__nothrow__));




extern char *ptsname (int __fd) __attribute__ ((__nothrow__)) ;
# 891 "/usr/include/stdlib.h" 3 4

# 17 "/usr/include/libxml2/libxml/SAX.h" 2


# 1 "/usr/include/libxml2/libxml/xlink.h" 1
# 32 "/usr/include/libxml2/libxml/xlink.h"
typedef xmlChar *xlinkHRef;
typedef xmlChar *xlinkRole;
typedef xmlChar *xlinkTitle;

typedef enum {
    XLINK_TYPE_NONE = 0,
    XLINK_TYPE_SIMPLE,
    XLINK_TYPE_EXTENDED,
    XLINK_TYPE_EXTENDED_SET
} xlinkType;

typedef enum {
    XLINK_SHOW_NONE = 0,
    XLINK_SHOW_NEW,
    XLINK_SHOW_EMBED,
    XLINK_SHOW_REPLACE
} xlinkShow;

typedef enum {
    XLINK_ACTUATE_NONE = 0,
    XLINK_ACTUATE_AUTO,
    XLINK_ACTUATE_ONREQUEST
} xlinkActuate;
# 64 "/usr/include/libxml2/libxml/xlink.h"
typedef void (*xlinkNodeDetectFunc) (void *ctx, xmlNodePtr node);
# 81 "/usr/include/libxml2/libxml/xlink.h"
typedef void
(*xlinkSimpleLinkFunk) (void *ctx,
    xmlNodePtr node,
    const xlinkHRef href,
    const xlinkRole role,
    const xlinkTitle title);
# 106 "/usr/include/libxml2/libxml/xlink.h"
typedef void
(*xlinkExtendedLinkFunk)(void *ctx,
    xmlNodePtr node,
    int nbLocators,
    const xlinkHRef *hrefs,
    const xlinkRole *roles,
    int nbArcs,
    const xlinkRole *from,
    const xlinkRole *to,
    xlinkShow *show,
    xlinkActuate *actuate,
    int nbTitles,
    const xlinkTitle *titles,
    const xmlChar **langs);
# 134 "/usr/include/libxml2/libxml/xlink.h"
typedef void
(*xlinkExtendedLinkSetFunk) (void *ctx,
     xmlNodePtr node,
     int nbLocators,
     const xlinkHRef *hrefs,
     const xlinkRole *roles,
     int nbTitles,
     const xlinkTitle *titles,
     const xmlChar **langs);







typedef struct _xlinkHandler xlinkHandler;
typedef xlinkHandler *xlinkHandlerPtr;
struct _xlinkHandler {
    xlinkSimpleLinkFunk simple;
    xlinkExtendedLinkFunk extended;
    xlinkExtendedLinkSetFunk set;
};






 xlinkNodeDetectFunc
  xlinkGetDefaultDetect (void);
 void
  xlinkSetDefaultDetect (xlinkNodeDetectFunc func);




 xlinkHandlerPtr
  xlinkGetDefaultHandler (void);
 void
  xlinkSetDefaultHandler (xlinkHandlerPtr handler);




 xlinkType
  xlinkIsLink (xmlDocPtr doc,
      xmlNodePtr node);
# 20 "/usr/include/libxml2/libxml/SAX.h" 2






 const xmlChar *
  getPublicId (void *ctx);
 const xmlChar *
  getSystemId (void *ctx);
 void
  setDocumentLocator (void *ctx,
       xmlSAXLocatorPtr loc);

 int
  getLineNumber (void *ctx);
 int
  getColumnNumber (void *ctx);

 int
  isStandalone (void *ctx);
 int
  hasInternalSubset (void *ctx);
 int
  hasExternalSubset (void *ctx);

 void
  internalSubset (void *ctx,
       const xmlChar *name,
       const xmlChar *ExternalID,
       const xmlChar *SystemID);
 void
  externalSubset (void *ctx,
       const xmlChar *name,
       const xmlChar *ExternalID,
       const xmlChar *SystemID);
 xmlEntityPtr
  getEntity (void *ctx,
       const xmlChar *name);
 xmlEntityPtr
  getParameterEntity (void *ctx,
       const xmlChar *name);
 xmlParserInputPtr
  resolveEntity (void *ctx,
       const xmlChar *publicId,
       const xmlChar *systemId);

 void
  entityDecl (void *ctx,
       const xmlChar *name,
       int type,
       const xmlChar *publicId,
       const xmlChar *systemId,
       xmlChar *content);
 void
  attributeDecl (void *ctx,
       const xmlChar *elem,
       const xmlChar *fullname,
       int type,
       int def,
       const xmlChar *defaultValue,
       xmlEnumerationPtr tree);
 void
  elementDecl (void *ctx,
       const xmlChar *name,
       int type,
       xmlElementContentPtr content);
 void
  notationDecl (void *ctx,
       const xmlChar *name,
       const xmlChar *publicId,
       const xmlChar *systemId);
 void
  unparsedEntityDecl (void *ctx,
       const xmlChar *name,
       const xmlChar *publicId,
       const xmlChar *systemId,
       const xmlChar *notationName);

 void
  startDocument (void *ctx);
 void
  endDocument (void *ctx);
 void
  attribute (void *ctx,
       const xmlChar *fullname,
       const xmlChar *value);
 void
  startElement (void *ctx,
       const xmlChar *fullname,
       const xmlChar **atts);
 void
  endElement (void *ctx,
       const xmlChar *name);
 void
  reference (void *ctx,
       const xmlChar *name);
 void
  characters (void *ctx,
       const xmlChar *ch,
       int len);
 void
  ignorableWhitespace (void *ctx,
       const xmlChar *ch,
       int len);
 void
  processingInstruction (void *ctx,
       const xmlChar *target,
       const xmlChar *data);
 void
  globalNamespace (void *ctx,
       const xmlChar *href,
       const xmlChar *prefix);
 void
  setNamespace (void *ctx,
       const xmlChar *name);
 xmlNsPtr
  getNamespace (void *ctx);
 int
  checkNamespace (void *ctx,
       xmlChar *nameSpace);
 void
  namespaceDecl (void *ctx,
       const xmlChar *href,
       const xmlChar *prefix);
 void
  comment (void *ctx,
       const xmlChar *value);
 void
  cdataBlock (void *ctx,
       const xmlChar *value,
       int len);


 void
  initxmlDefaultSAXHandler (xmlSAXHandlerV1 *hdlr,
       int warning);

 void
  inithtmlDefaultSAXHandler (xmlSAXHandlerV1 *hdlr);


 void
  initdocbDefaultSAXHandler (xmlSAXHandlerV1 *hdlr);
# 21 "/usr/include/libxml2/libxml/globals.h" 2
# 1 "/usr/include/libxml2/libxml/SAX2.h" 1
# 24 "/usr/include/libxml2/libxml/SAX2.h"
 const xmlChar *
  xmlSAX2GetPublicId (void *ctx);
 const xmlChar *
  xmlSAX2GetSystemId (void *ctx);
 void
  xmlSAX2SetDocumentLocator (void *ctx,
       xmlSAXLocatorPtr loc);

 int
  xmlSAX2GetLineNumber (void *ctx);
 int
  xmlSAX2GetColumnNumber (void *ctx);

 int
  xmlSAX2IsStandalone (void *ctx);
 int
  xmlSAX2HasInternalSubset (void *ctx);
 int
  xmlSAX2HasExternalSubset (void *ctx);

 void
  xmlSAX2InternalSubset (void *ctx,
       const xmlChar *name,
       const xmlChar *ExternalID,
       const xmlChar *SystemID);
 void
  xmlSAX2ExternalSubset (void *ctx,
       const xmlChar *name,
       const xmlChar *ExternalID,
       const xmlChar *SystemID);
 xmlEntityPtr
  xmlSAX2GetEntity (void *ctx,
       const xmlChar *name);
 xmlEntityPtr
  xmlSAX2GetParameterEntity (void *ctx,
       const xmlChar *name);
 xmlParserInputPtr
  xmlSAX2ResolveEntity (void *ctx,
       const xmlChar *publicId,
       const xmlChar *systemId);

 void
  xmlSAX2EntityDecl (void *ctx,
       const xmlChar *name,
       int type,
       const xmlChar *publicId,
       const xmlChar *systemId,
       xmlChar *content);
 void
  xmlSAX2AttributeDecl (void *ctx,
       const xmlChar *elem,
       const xmlChar *fullname,
       int type,
       int def,
       const xmlChar *defaultValue,
       xmlEnumerationPtr tree);
 void
  xmlSAX2ElementDecl (void *ctx,
       const xmlChar *name,
       int type,
       xmlElementContentPtr content);
 void
  xmlSAX2NotationDecl (void *ctx,
       const xmlChar *name,
       const xmlChar *publicId,
       const xmlChar *systemId);
 void
  xmlSAX2UnparsedEntityDecl (void *ctx,
       const xmlChar *name,
       const xmlChar *publicId,
       const xmlChar *systemId,
       const xmlChar *notationName);

 void
  xmlSAX2StartDocument (void *ctx);
 void
  xmlSAX2EndDocument (void *ctx);

 void
  xmlSAX2StartElement (void *ctx,
       const xmlChar *fullname,
       const xmlChar **atts);
 void
  xmlSAX2EndElement (void *ctx,
       const xmlChar *name);

 void
  xmlSAX2StartElementNs (void *ctx,
       const xmlChar *localname,
       const xmlChar *prefix,
       const xmlChar *URI,
       int nb_namespaces,
       const xmlChar **namespaces,
       int nb_attributes,
       int nb_defaulted,
       const xmlChar **attributes);
 void
  xmlSAX2EndElementNs (void *ctx,
       const xmlChar *localname,
       const xmlChar *prefix,
       const xmlChar *URI);
 void
  xmlSAX2Reference (void *ctx,
       const xmlChar *name);
 void
  xmlSAX2Characters (void *ctx,
       const xmlChar *ch,
       int len);
 void
  xmlSAX2IgnorableWhitespace (void *ctx,
       const xmlChar *ch,
       int len);
 void
  xmlSAX2ProcessingInstruction (void *ctx,
       const xmlChar *target,
       const xmlChar *data);
 void
  xmlSAX2Comment (void *ctx,
       const xmlChar *value);
 void
  xmlSAX2CDataBlock (void *ctx,
       const xmlChar *value,
       int len);


 int
  xmlSAXDefaultVersion (int version);


 int
  xmlSAXVersion (xmlSAXHandler *hdlr,
       int version);
 void
  xmlSAX2InitDefaultSAXHandler (xmlSAXHandler *hdlr,
       int warning);

 void
  xmlSAX2InitHtmlDefaultSAXHandler(xmlSAXHandler *hdlr);
 void
  htmlDefaultSAXHandlerInit (void);


 void
  xmlSAX2InitDocbDefaultSAXHandler(xmlSAXHandler *hdlr);
 void
  docbDefaultSAXHandlerInit (void);

 void
  xmlDefaultSAXHandlerInit (void);
# 22 "/usr/include/libxml2/libxml/globals.h" 2
# 1 "/usr/include/libxml2/libxml/xmlmemory.h" 1
# 57 "/usr/include/libxml2/libxml/xmlmemory.h"
typedef void ( *xmlFreeFunc)(void *mem);
# 66 "/usr/include/libxml2/libxml/xmlmemory.h"
typedef void *(__attribute__((alloc_size(1))) *xmlMallocFunc)(size_t size);
# 77 "/usr/include/libxml2/libxml/xmlmemory.h"
typedef void *( *xmlReallocFunc)(void *mem, size_t size);
# 87 "/usr/include/libxml2/libxml/xmlmemory.h"
typedef char *( *xmlStrdupFunc)(const char *str);
# 103 "/usr/include/libxml2/libxml/xmlmemory.h"
 int
 xmlMemSetup (xmlFreeFunc freeFunc,
    xmlMallocFunc mallocFunc,
    xmlReallocFunc reallocFunc,
    xmlStrdupFunc strdupFunc);
 int
 xmlMemGet (xmlFreeFunc *freeFunc,
    xmlMallocFunc *mallocFunc,
    xmlReallocFunc *reallocFunc,
    xmlStrdupFunc *strdupFunc);
 int
 xmlGcMemSetup (xmlFreeFunc freeFunc,
    xmlMallocFunc mallocFunc,
    xmlMallocFunc mallocAtomicFunc,
    xmlReallocFunc reallocFunc,
    xmlStrdupFunc strdupFunc);
 int
 xmlGcMemGet (xmlFreeFunc *freeFunc,
    xmlMallocFunc *mallocFunc,
    xmlMallocFunc *mallocAtomicFunc,
    xmlReallocFunc *reallocFunc,
    xmlStrdupFunc *strdupFunc);




 int
 xmlInitMemory (void);




 void
                xmlCleanupMemory (void);



 int
 xmlMemUsed (void);
 int
 xmlMemBlocks (void);
 void
 xmlMemDisplay (FILE *fp);
 void
 xmlMemDisplayLast(FILE *fp, long nbBytes);
 void
 xmlMemShow (FILE *fp, int nr);
 void
 xmlMemoryDump (void);
 void *
 xmlMemMalloc (size_t size) __attribute__((alloc_size(1)));
 void *
 xmlMemRealloc (void *ptr,size_t size);
 void
 xmlMemFree (void *ptr);
 char *
 xmlMemoryStrdup (const char *str);
 void *
 xmlMallocLoc (size_t size, const char *file, int line) __attribute__((alloc_size(1)));
 void *
 xmlReallocLoc (void *ptr, size_t size, const char *file, int line);
 void *
 xmlMallocAtomicLoc (size_t size, const char *file, int line) __attribute__((alloc_size(1)));
 char *
 xmlMemStrdupLoc (const char *str, const char *file, int line);
# 23 "/usr/include/libxml2/libxml/globals.h" 2





 void xmlInitGlobals(void);
 void xmlCleanupGlobals(void);
# 42 "/usr/include/libxml2/libxml/globals.h"
typedef xmlParserInputBufferPtr (*xmlParserInputBufferCreateFilenameFunc) (const char *URI, xmlCharEncoding enc);
# 55 "/usr/include/libxml2/libxml/globals.h"
typedef xmlOutputBufferPtr (*xmlOutputBufferCreateFilenameFunc) (const char *URI, xmlCharEncodingHandlerPtr encoder, int compression);

 xmlParserInputBufferCreateFilenameFunc
 xmlParserInputBufferCreateFilenameDefault (xmlParserInputBufferCreateFilenameFunc func);
 xmlOutputBufferCreateFilenameFunc
 xmlOutputBufferCreateFilenameDefault (xmlOutputBufferCreateFilenameFunc func);
# 106 "/usr/include/libxml2/libxml/globals.h"
typedef void (*xmlRegisterNodeFunc) (xmlNodePtr node);






typedef void (*xmlDeregisterNodeFunc) (xmlNodePtr node);

typedef struct _xmlGlobalState xmlGlobalState;
typedef xmlGlobalState *xmlGlobalStatePtr;
struct _xmlGlobalState
{
 const char *xmlParserVersion;

 xmlSAXLocator xmlDefaultSAXLocator;
 xmlSAXHandlerV1 xmlDefaultSAXHandler;
 xmlSAXHandlerV1 docbDefaultSAXHandler;
 xmlSAXHandlerV1 htmlDefaultSAXHandler;

 xmlFreeFunc xmlFree;
 xmlMallocFunc xmlMalloc;
 xmlStrdupFunc xmlMemStrdup;
 xmlReallocFunc xmlRealloc;

 xmlGenericErrorFunc xmlGenericError;
 xmlStructuredErrorFunc xmlStructuredError;
 void *xmlGenericErrorContext;

 int oldXMLWDcompatibility;

 xmlBufferAllocationScheme xmlBufferAllocScheme;
 int xmlDefaultBufferSize;

 int xmlSubstituteEntitiesDefaultValue;
 int xmlDoValidityCheckingDefaultValue;
 int xmlGetWarningsDefaultValue;
 int xmlKeepBlanksDefaultValue;
 int xmlLineNumbersDefaultValue;
 int xmlLoadExtDtdDefaultValue;
 int xmlParserDebugEntities;
 int xmlPedanticParserDefaultValue;

 int xmlSaveNoEmptyTags;
 int xmlIndentTreeOutput;
 const char *xmlTreeIndentString;

 xmlRegisterNodeFunc xmlRegisterNodeDefaultValue;
 xmlDeregisterNodeFunc xmlDeregisterNodeDefaultValue;

 xmlMallocFunc xmlMallocAtomic;
 xmlError xmlLastError;

 xmlParserInputBufferCreateFilenameFunc xmlParserInputBufferCreateFilenameValue;
 xmlOutputBufferCreateFilenameFunc xmlOutputBufferCreateFilenameValue;
};




# 1 "/usr/include/libxml2/libxml/threads.h" 1
# 23 "/usr/include/libxml2/libxml/threads.h"
typedef struct _xmlMutex xmlMutex;
typedef xmlMutex *xmlMutexPtr;




typedef struct _xmlRMutex xmlRMutex;
typedef xmlRMutex *xmlRMutexPtr;




# 1 "/usr/include/libxml2/libxml/globals.h" 1
# 36 "/usr/include/libxml2/libxml/threads.h" 2



 xmlMutexPtr
   xmlNewMutex (void);
 void
   xmlMutexLock (xmlMutexPtr tok);
 void
   xmlMutexUnlock (xmlMutexPtr tok);
 void
   xmlFreeMutex (xmlMutexPtr tok);

 xmlRMutexPtr
   xmlNewRMutex (void);
 void
   xmlRMutexLock (xmlRMutexPtr tok);
 void
   xmlRMutexUnlock (xmlRMutexPtr tok);
 void
   xmlFreeRMutex (xmlRMutexPtr tok);




 void
   xmlInitThreads (void);
 void
   xmlLockLibrary (void);
 void
   xmlUnlockLibrary(void);
 int
   xmlGetThreadId (void);
 int
   xmlIsMainThread (void);
 void
   xmlCleanupThreads(void);
 xmlGlobalStatePtr
   xmlGetGlobalState(void);
# 167 "/usr/include/libxml2/libxml/globals.h" 2




 void xmlInitializeGlobalState(xmlGlobalStatePtr gs);

 void xmlThrDefSetGenericErrorFunc(void *ctx, xmlGenericErrorFunc handler);

 void xmlThrDefSetStructuredErrorFunc(void *ctx, xmlStructuredErrorFunc handler);

 xmlRegisterNodeFunc xmlRegisterNodeDefault(xmlRegisterNodeFunc func);
 xmlRegisterNodeFunc xmlThrDefRegisterNodeDefault(xmlRegisterNodeFunc func);
 xmlDeregisterNodeFunc xmlDeregisterNodeDefault(xmlDeregisterNodeFunc func);
 xmlDeregisterNodeFunc xmlThrDefDeregisterNodeDefault(xmlDeregisterNodeFunc func);

 xmlOutputBufferCreateFilenameFunc
 xmlThrDefOutputBufferCreateFilenameDefault(xmlOutputBufferCreateFilenameFunc func);
 xmlParserInputBufferCreateFilenameFunc
 xmlThrDefParserInputBufferCreateFilenameDefault(xmlParserInputBufferCreateFilenameFunc func);
# 240 "/usr/include/libxml2/libxml/globals.h"
extern xmlMallocFunc xmlMalloc;
extern xmlMallocFunc xmlMallocAtomic;
extern xmlReallocFunc xmlRealloc;
extern xmlFreeFunc xmlFree;
extern xmlStrdupFunc xmlMemStrdup;



 xmlSAXHandlerV1 * __docbDefaultSAXHandler(void);
# 258 "/usr/include/libxml2/libxml/globals.h"
 xmlSAXHandlerV1 * __htmlDefaultSAXHandler(void);
# 267 "/usr/include/libxml2/libxml/globals.h"
 xmlError * __xmlLastError(void);
# 282 "/usr/include/libxml2/libxml/globals.h"
 int * __oldXMLWDcompatibility(void);







 xmlBufferAllocationScheme * __xmlBufferAllocScheme(void);






 xmlBufferAllocationScheme xmlThrDefBufferAllocScheme(xmlBufferAllocationScheme v);

 int * __xmlDefaultBufferSize(void);






 int xmlThrDefDefaultBufferSize(int v);

 xmlSAXHandlerV1 * __xmlDefaultSAXHandler(void);







 xmlSAXLocator * __xmlDefaultSAXLocator(void);







 int * __xmlDoValidityCheckingDefaultValue(void);






 int xmlThrDefDoValidityCheckingDefaultValue(int v);

 xmlGenericErrorFunc * __xmlGenericError(void);







 xmlStructuredErrorFunc * __xmlStructuredError(void);







 void * * __xmlGenericErrorContext(void);







 int * __xmlGetWarningsDefaultValue(void);






 int xmlThrDefGetWarningsDefaultValue(int v);

 int * __xmlIndentTreeOutput(void);






 int xmlThrDefIndentTreeOutput(int v);

 const char * * __xmlTreeIndentString(void);






 const char * xmlThrDefTreeIndentString(const char * v);

 int * __xmlKeepBlanksDefaultValue(void);






 int xmlThrDefKeepBlanksDefaultValue(int v);

 int * __xmlLineNumbersDefaultValue(void);






 int xmlThrDefLineNumbersDefaultValue(int v);

 int * __xmlLoadExtDtdDefaultValue(void);






 int xmlThrDefLoadExtDtdDefaultValue(int v);

 int * __xmlParserDebugEntities(void);






 int xmlThrDefParserDebugEntities(int v);

 const char * * __xmlParserVersion(void);







 int * __xmlPedanticParserDefaultValue(void);






 int xmlThrDefPedanticParserDefaultValue(int v);

 int * __xmlSaveNoEmptyTags(void);






 int xmlThrDefSaveNoEmptyTags(int v);

 int * __xmlSubstituteEntitiesDefaultValue(void);






 int xmlThrDefSubstituteEntitiesDefaultValue(int v);

 xmlRegisterNodeFunc * __xmlRegisterNodeDefaultValue(void);







 xmlDeregisterNodeFunc * __xmlDeregisterNodeDefaultValue(void);







 xmlParserInputBufferCreateFilenameFunc * __xmlParserInputBufferCreateFilenameValue(void);







 xmlOutputBufferCreateFilenameFunc * __xmlOutputBufferCreateFilenameValue(void);
# 118 "/usr/include/libxml2/libxml/xmlIO.h" 2







struct _xmlParserInputBuffer {
    void* context;
    xmlInputReadCallback readcallback;
    xmlInputCloseCallback closecallback;

    xmlCharEncodingHandlerPtr encoder;

    xmlBufferPtr buffer;
    xmlBufferPtr raw;
    int compressed;
    int error;
    unsigned long rawconsumed;
};



struct _xmlOutputBuffer {
    void* context;
    xmlOutputWriteCallback writecallback;
    xmlOutputCloseCallback closecallback;

    xmlCharEncodingHandlerPtr encoder;

    xmlBufferPtr buffer;
    xmlBufferPtr conv;
    int written;
    int error;
};





 void
 xmlCleanupInputCallbacks (void);

 int
 xmlPopInputCallbacks (void);

 void
 xmlRegisterDefaultInputCallbacks (void);
 xmlParserInputBufferPtr
 xmlAllocParserInputBuffer (xmlCharEncoding enc);

 xmlParserInputBufferPtr
 xmlParserInputBufferCreateFilename (const char *URI,
                                                 xmlCharEncoding enc);
 xmlParserInputBufferPtr
 xmlParserInputBufferCreateFile (FILE *file,
                                                 xmlCharEncoding enc);
 xmlParserInputBufferPtr
 xmlParserInputBufferCreateFd (int fd,
                                          xmlCharEncoding enc);
 xmlParserInputBufferPtr
 xmlParserInputBufferCreateMem (const char *mem, int size,
                                          xmlCharEncoding enc);
 xmlParserInputBufferPtr
 xmlParserInputBufferCreateStatic (const char *mem, int size,
                                          xmlCharEncoding enc);
 xmlParserInputBufferPtr
 xmlParserInputBufferCreateIO (xmlInputReadCallback ioread,
       xmlInputCloseCallback ioclose,
       void *ioctx,
                                          xmlCharEncoding enc);
 int
 xmlParserInputBufferRead (xmlParserInputBufferPtr in,
       int len);
 int
 xmlParserInputBufferGrow (xmlParserInputBufferPtr in,
       int len);
 int
 xmlParserInputBufferPush (xmlParserInputBufferPtr in,
       int len,
       const char *buf);
 void
 xmlFreeParserInputBuffer (xmlParserInputBufferPtr in);
 char *
 xmlParserGetDirectory (const char *filename);

 int
 xmlRegisterInputCallbacks (xmlInputMatchCallback matchFunc,
       xmlInputOpenCallback openFunc,
       xmlInputReadCallback readFunc,
       xmlInputCloseCallback closeFunc);

xmlParserInputBufferPtr
 __xmlParserInputBufferCreateFilename(const char *URI,
          xmlCharEncoding enc);





 void
 xmlCleanupOutputCallbacks (void);
 void
 xmlRegisterDefaultOutputCallbacks(void);
 xmlOutputBufferPtr
 xmlAllocOutputBuffer (xmlCharEncodingHandlerPtr encoder);

 xmlOutputBufferPtr
 xmlOutputBufferCreateFilename (const char *URI,
      xmlCharEncodingHandlerPtr encoder,
      int compression);

 xmlOutputBufferPtr
 xmlOutputBufferCreateFile (FILE *file,
      xmlCharEncodingHandlerPtr encoder);

 xmlOutputBufferPtr
 xmlOutputBufferCreateBuffer (xmlBufferPtr buffer,
      xmlCharEncodingHandlerPtr encoder);

 xmlOutputBufferPtr
 xmlOutputBufferCreateFd (int fd,
      xmlCharEncodingHandlerPtr encoder);

 xmlOutputBufferPtr
 xmlOutputBufferCreateIO (xmlOutputWriteCallback iowrite,
      xmlOutputCloseCallback ioclose,
      void *ioctx,
      xmlCharEncodingHandlerPtr encoder);

 int
 xmlOutputBufferWrite (xmlOutputBufferPtr out,
      int len,
      const char *buf);
 int
 xmlOutputBufferWriteString (xmlOutputBufferPtr out,
      const char *str);
 int
 xmlOutputBufferWriteEscape (xmlOutputBufferPtr out,
      const xmlChar *str,
      xmlCharEncodingOutputFunc escaping);

 int
 xmlOutputBufferFlush (xmlOutputBufferPtr out);
 int
 xmlOutputBufferClose (xmlOutputBufferPtr out);

 int
 xmlRegisterOutputCallbacks (xmlOutputMatchCallback matchFunc,
      xmlOutputOpenCallback openFunc,
      xmlOutputWriteCallback writeFunc,
      xmlOutputCloseCallback closeFunc);

xmlOutputBufferPtr
 __xmlOutputBufferCreateFilename(const char *URI,
                              xmlCharEncodingHandlerPtr encoder,
                              int compression);



 void
 xmlRegisterHTTPPostCallbacks (void );




 xmlParserInputPtr
 xmlCheckHTTPInput (xmlParserCtxtPtr ctxt,
      xmlParserInputPtr ret);




 xmlParserInputPtr
 xmlNoNetExternalEntityLoader (const char *URL,
      const char *ID,
      xmlParserCtxtPtr ctxt);





 xmlChar *
 xmlNormalizeWindowsPath (const xmlChar *path);

 int
 xmlCheckFilename (const char *path);



 int
 xmlFileMatch (const char *filename);
 void *
 xmlFileOpen (const char *filename);
 int
 xmlFileRead (void * context,
      char * buffer,
      int len);
 int
 xmlFileClose (void * context);





 int
 xmlIOHTTPMatch (const char *filename);
 void *
 xmlIOHTTPOpen (const char *filename);

 void *
 xmlIOHTTPOpenW (const char * post_uri,
      int compression );

 int
 xmlIOHTTPRead (void * context,
      char * buffer,
      int len);
 int
 xmlIOHTTPClose (void * context);






 int
 xmlIOFTPMatch (const char *filename);
 void *
 xmlIOFTPOpen (const char *filename);
 int
 xmlIOFTPRead (void * context,
      char * buffer,
      int len);
 int
 xmlIOFTPClose (void * context);
# 800 "/usr/include/libxml2/libxml/parser.h" 2
# 810 "/usr/include/libxml2/libxml/parser.h"
 void
  xmlInitParser (void);
 void
  xmlCleanupParser (void);




 int
  xmlParserInputRead (xmlParserInputPtr in,
      int len);
 int
  xmlParserInputGrow (xmlParserInputPtr in,
      int len);





 xmlDocPtr
  xmlParseDoc (const xmlChar *cur);
 xmlDocPtr
  xmlParseFile (const char *filename);
 xmlDocPtr
  xmlParseMemory (const char *buffer,
      int size);

 int
  xmlSubstituteEntitiesDefault(int val);
 int
  xmlKeepBlanksDefault (int val);
 void
  xmlStopParser (xmlParserCtxtPtr ctxt);
 int
  xmlPedanticParserDefault(int val);
 int
  xmlLineNumbersDefault (int val);





 xmlDocPtr
  xmlRecoverDoc (xmlChar *cur);
 xmlDocPtr
  xmlRecoverMemory (const char *buffer,
      int size);
 xmlDocPtr
  xmlRecoverFile (const char *filename);





 int
  xmlParseDocument (xmlParserCtxtPtr ctxt);
 int
  xmlParseExtParsedEnt (xmlParserCtxtPtr ctxt);

 int
  xmlSAXUserParseFile (xmlSAXHandlerPtr sax,
      void *user_data,
      const char *filename);
 int
  xmlSAXUserParseMemory (xmlSAXHandlerPtr sax,
      void *user_data,
      const char *buffer,
      int size);
 xmlDocPtr
  xmlSAXParseDoc (xmlSAXHandlerPtr sax,
      const xmlChar *cur,
      int recovery);
 xmlDocPtr
  xmlSAXParseMemory (xmlSAXHandlerPtr sax,
      const char *buffer,
                                     int size,
      int recovery);
 xmlDocPtr
  xmlSAXParseMemoryWithData (xmlSAXHandlerPtr sax,
      const char *buffer,
                                     int size,
      int recovery,
      void *data);
 xmlDocPtr
  xmlSAXParseFile (xmlSAXHandlerPtr sax,
      const char *filename,
      int recovery);
 xmlDocPtr
  xmlSAXParseFileWithData (xmlSAXHandlerPtr sax,
      const char *filename,
      int recovery,
      void *data);
 xmlDocPtr
  xmlSAXParseEntity (xmlSAXHandlerPtr sax,
      const char *filename);
 xmlDocPtr
  xmlParseEntity (const char *filename);



 xmlDtdPtr
  xmlSAXParseDTD (xmlSAXHandlerPtr sax,
      const xmlChar *ExternalID,
      const xmlChar *SystemID);
 xmlDtdPtr
  xmlParseDTD (const xmlChar *ExternalID,
      const xmlChar *SystemID);
 xmlDtdPtr
  xmlIOParseDTD (xmlSAXHandlerPtr sax,
      xmlParserInputBufferPtr input,
      xmlCharEncoding enc);


 int
  xmlParseBalancedChunkMemory(xmlDocPtr doc,
      xmlSAXHandlerPtr sax,
      void *user_data,
      int depth,
      const xmlChar *string,
      xmlNodePtr *lst);

 xmlParserErrors
  xmlParseInNodeContext (xmlNodePtr node,
      const char *data,
      int datalen,
      int options,
      xmlNodePtr *lst);

 int
  xmlParseBalancedChunkMemoryRecover(xmlDocPtr doc,
                     xmlSAXHandlerPtr sax,
                     void *user_data,
                     int depth,
                     const xmlChar *string,
                     xmlNodePtr *lst,
                     int recover);
 int
  xmlParseExternalEntity (xmlDocPtr doc,
      xmlSAXHandlerPtr sax,
      void *user_data,
      int depth,
      const xmlChar *URL,
      const xmlChar *ID,
      xmlNodePtr *lst);

 int
  xmlParseCtxtExternalEntity(xmlParserCtxtPtr ctx,
      const xmlChar *URL,
      const xmlChar *ID,
      xmlNodePtr *lst);




 xmlParserCtxtPtr
  xmlNewParserCtxt (void);
 int
  xmlInitParserCtxt (xmlParserCtxtPtr ctxt);
 void
  xmlClearParserCtxt (xmlParserCtxtPtr ctxt);
 void
  xmlFreeParserCtxt (xmlParserCtxtPtr ctxt);

 void
  xmlSetupParserForBuffer (xmlParserCtxtPtr ctxt,
      const xmlChar* buffer,
      const char *filename);

 xmlParserCtxtPtr
  xmlCreateDocParserCtxt (const xmlChar *cur);





 int
  xmlGetFeaturesList (int *len,
      const char **result);
 int
  xmlGetFeature (xmlParserCtxtPtr ctxt,
      const char *name,
      void *result);
 int
  xmlSetFeature (xmlParserCtxtPtr ctxt,
      const char *name,
      void *value);






 xmlParserCtxtPtr
  xmlCreatePushParserCtxt(xmlSAXHandlerPtr sax,
      void *user_data,
      const char *chunk,
      int size,
      const char *filename);
 int
  xmlParseChunk (xmlParserCtxtPtr ctxt,
      const char *chunk,
      int size,
      int terminate);






 xmlParserCtxtPtr
  xmlCreateIOParserCtxt (xmlSAXHandlerPtr sax,
      void *user_data,
      xmlInputReadCallback ioread,
      xmlInputCloseCallback ioclose,
      void *ioctx,
      xmlCharEncoding enc);

 xmlParserInputPtr
  xmlNewIOInputStream (xmlParserCtxtPtr ctxt,
      xmlParserInputBufferPtr input,
      xmlCharEncoding enc);




 const xmlParserNodeInfo*
  xmlParserFindNodeInfo (const xmlParserCtxtPtr ctxt,
             const xmlNodePtr node);
 void
  xmlInitNodeInfoSeq (xmlParserNodeInfoSeqPtr seq);
 void
  xmlClearNodeInfoSeq (xmlParserNodeInfoSeqPtr seq);
 unsigned long
  xmlParserFindNodeInfoIndex(const xmlParserNodeInfoSeqPtr seq,
                                         const xmlNodePtr node);
 void
  xmlParserAddNodeInfo (xmlParserCtxtPtr ctxt,
      const xmlParserNodeInfoPtr info);





 void
  xmlSetExternalEntityLoader(xmlExternalEntityLoader f);
 xmlExternalEntityLoader
  xmlGetExternalEntityLoader(void);
 xmlParserInputPtr
  xmlLoadExternalEntity (const char *URL,
      const char *ID,
      xmlParserCtxtPtr ctxt);




 long
  xmlByteConsumed (xmlParserCtxtPtr ctxt);
# 1077 "/usr/include/libxml2/libxml/parser.h"
typedef enum {
    XML_PARSE_RECOVER = 1<<0,
    XML_PARSE_NOENT = 1<<1,
    XML_PARSE_DTDLOAD = 1<<2,
    XML_PARSE_DTDATTR = 1<<3,
    XML_PARSE_DTDVALID = 1<<4,
    XML_PARSE_NOERROR = 1<<5,
    XML_PARSE_NOWARNING = 1<<6,
    XML_PARSE_PEDANTIC = 1<<7,
    XML_PARSE_NOBLANKS = 1<<8,
    XML_PARSE_SAX1 = 1<<9,
    XML_PARSE_XINCLUDE = 1<<10,
    XML_PARSE_NONET = 1<<11,
    XML_PARSE_NODICT = 1<<12,
    XML_PARSE_NSCLEAN = 1<<13,
    XML_PARSE_NOCDATA = 1<<14,
    XML_PARSE_NOXINCNODE= 1<<15,
    XML_PARSE_COMPACT = 1<<16,


    XML_PARSE_OLD10 = 1<<17,
    XML_PARSE_NOBASEFIX = 1<<18,
    XML_PARSE_HUGE = 1<<19,
    XML_PARSE_OLDSAX = 1<<20
} xmlParserOption;

 void
  xmlCtxtReset (xmlParserCtxtPtr ctxt);
 int
  xmlCtxtResetPush (xmlParserCtxtPtr ctxt,
      const char *chunk,
      int size,
      const char *filename,
      const char *encoding);
 int
  xmlCtxtUseOptions (xmlParserCtxtPtr ctxt,
      int options);
 xmlDocPtr
  xmlReadDoc (const xmlChar *cur,
      const char *URL,
      const char *encoding,
      int options);
 xmlDocPtr
  xmlReadFile (const char *URL,
      const char *encoding,
      int options);
 xmlDocPtr
  xmlReadMemory (const char *buffer,
      int size,
      const char *URL,
      const char *encoding,
      int options);
 xmlDocPtr
  xmlReadFd (int fd,
      const char *URL,
      const char *encoding,
      int options);
 xmlDocPtr
  xmlReadIO (xmlInputReadCallback ioread,
      xmlInputCloseCallback ioclose,
      void *ioctx,
      const char *URL,
      const char *encoding,
      int options);
 xmlDocPtr
  xmlCtxtReadDoc (xmlParserCtxtPtr ctxt,
      const xmlChar *cur,
      const char *URL,
      const char *encoding,
      int options);
 xmlDocPtr
  xmlCtxtReadFile (xmlParserCtxtPtr ctxt,
      const char *filename,
      const char *encoding,
      int options);
 xmlDocPtr
  xmlCtxtReadMemory (xmlParserCtxtPtr ctxt,
      const char *buffer,
      int size,
      const char *URL,
      const char *encoding,
      int options);
 xmlDocPtr
  xmlCtxtReadFd (xmlParserCtxtPtr ctxt,
      int fd,
      const char *URL,
      const char *encoding,
      int options);
 xmlDocPtr
  xmlCtxtReadIO (xmlParserCtxtPtr ctxt,
      xmlInputReadCallback ioread,
      xmlInputCloseCallback ioclose,
      void *ioctx,
      const char *URL,
      const char *encoding,
      int options);
# 1184 "/usr/include/libxml2/libxml/parser.h"
typedef enum {
    XML_WITH_THREAD = 1,
    XML_WITH_TREE = 2,
    XML_WITH_OUTPUT = 3,
    XML_WITH_PUSH = 4,
    XML_WITH_READER = 5,
    XML_WITH_PATTERN = 6,
    XML_WITH_WRITER = 7,
    XML_WITH_SAX1 = 8,
    XML_WITH_FTP = 9,
    XML_WITH_HTTP = 10,
    XML_WITH_VALID = 11,
    XML_WITH_HTML = 12,
    XML_WITH_LEGACY = 13,
    XML_WITH_C14N = 14,
    XML_WITH_CATALOG = 15,
    XML_WITH_XPATH = 16,
    XML_WITH_XPTR = 17,
    XML_WITH_XINCLUDE = 18,
    XML_WITH_ICONV = 19,
    XML_WITH_ISO8859X = 20,
    XML_WITH_UNICODE = 21,
    XML_WITH_REGEXP = 22,
    XML_WITH_AUTOMATA = 23,
    XML_WITH_EXPR = 24,
    XML_WITH_SCHEMAS = 25,
    XML_WITH_SCHEMATRON = 26,
    XML_WITH_MODULES = 27,
    XML_WITH_DEBUG = 28,
    XML_WITH_DEBUG_MEM = 29,
    XML_WITH_DEBUG_RUN = 30,
    XML_WITH_ZLIB = 31,
    XML_WITH_NONE = 99999
} xmlFeature;

 int
  xmlHasFeature (xmlFeature feature);
# 38 "parser.c" 2


# 1 "debug.h" 1
# 26 "debug.h"
# 1 "/usr/include/glib-2.0/glib/gprintf.h" 1
# 27 "/usr/include/glib-2.0/glib/gprintf.h"


gint g_printf (gchar const *format,
                                   ...) __attribute__((__format__ (__printf__, 1, 2)));
gint g_fprintf (FILE *file,
       gchar const *format,
       ...) __attribute__((__format__ (__printf__, 2, 3)));
gint g_sprintf (gchar *string,
       gchar const *format,
       ...) __attribute__((__format__ (__printf__, 2, 3)));

gint g_vprintf (gchar const *format,
                                   va_list args);
gint g_vfprintf (FILE *file,
       gchar const *format,
       va_list args);
gint g_vsprintf (gchar *string,
       gchar const *format,
       va_list args);
gint g_vasprintf (gchar **string,
       gchar const *format,
       va_list args);


# 27 "debug.h" 2



# 51 "debug.h"
void debug_impl (const gchar *domain, const gchar *msg, ...);


# 41 "parser.c" 2
# 1 "gconf.h" 1
# 26 "gconf.h"

# 35 "gconf.h"
typedef struct _Conf Conf;
typedef struct _ConfClass ConfClass;

struct _Conf {
 GObject parent;
};

struct _ConfClass {
 GObjectClass parent_class;
};

typedef void (*ConfNotifyFunc) (Conf *conf,
           const gchar *key,
           gpointer user_data);

GType conf_get_type (void) __attribute__((__const__));
Conf *conf_get (void);
void conf_shutdown (void);
guint conf_notify_add (Conf *conf,
           const gchar *key,
           ConfNotifyFunc func,
           gpointer data);
gboolean conf_notify_remove (Conf *conf,
           guint id);
gboolean conf_set_int (Conf *conf,
           const gchar *key,
           gint value);
gboolean conf_get_int (Conf *conf,
           const gchar *key,
           gint *value);
gboolean conf_set_bool (Conf *conf,
           const gchar *key,
           gboolean value);
gboolean conf_get_bool (Conf *conf,
           const gchar *key,
           gboolean *value);
gboolean conf_set_string (Conf *conf,
           const gchar *key,
           const gchar *value);
gboolean conf_get_string (Conf *conf,
           const gchar *key,
           gchar **value);
gboolean conf_set_string_list (Conf *conf,
           const gchar *key,
           GSList *value);
gboolean conf_get_string_list (Conf *conf,
           const gchar *key,
           GSList **value);


# 42 "parser.c" 2

# 1 "main.h" 1
# 26 "main.h"

# 66 "main.h"

# 44 "parser.c" 2
# 1 "app.h" 1
# 32 "app.h"
# 1 "parser.h" 1
# 29 "parser.h"
xmlDoc *parser_parse (const char *data, gssize length, xmlNode **first_element);


gboolean parser_timeline( const gchar *data, gssize length );


void parser_reset_lastid( void );
# 33 "app.h" 2
# 1 "images.h" 1
# 59 "images.h"


gchar *images_get_filename( const gchar *url );

GtkImage *images_get_image_from_filename( const gchar *image_filename );
GtkImage *images_get_scaled_image_from_filename( const gchar *image_filename, gint width, gint height );

GtkImage *images_get_expanded_image_from_filename( const gchar *image_filename );
GtkImage *images_get_maximized_image_from_filename( const gchar *image_filename );
GtkImage *images_get_default_image_from_filename( const gchar *image_filename );
GtkImage *images_get_minimized_image_from_filename( const gchar *image_filename );

GdkPixbuf *images_get_expanded_pixbuf_from_filename( const gchar *image_filename );
GdkPixbuf *images_get_maximized_pixbuf_from_filename( const gchar *image_filename );
GdkPixbuf *images_get_default_pixbuf_from_filename( const gchar *image_filename );
GdkPixbuf *images_get_minimized_pixbuf_from_filename( const gchar *image_filename );

GdkPixbuf *images_expand_pixbuf( GdkPixbuf *pixbuf );
GdkPixbuf *images_maximize_pixbuf( GdkPixbuf *pixbuf );
GdkPixbuf *images_normalize_pixbuf( GdkPixbuf *pixbuf );
GdkPixbuf *images_minimize_pixbuf( GdkPixbuf *pixbuf );

GdkPixbuf *images_scale_pixbuf( GdkPixbuf *pixbuf, gint width, gint height );
GdkPixbuf *images_get_pixbuf_from_filename( const gchar *image_filename );
GdkPixbuf *images_get_unscaled_pixbuf_from_filename( const gchar *image_filename );
GdkPixbuf *images_get_scaled_pixbuf_from_filename( const gchar *image_filename, gint width, gint height );
GdkPixbuf *images_get_and_scale_pixbuf_from_filename( const gchar *image_filename, gint width, gint height );


# 34 "app.h" 2

# 1 "tweet-list.h" 1
# 51 "tweet-list.h"

# 63 "tweet-list.h"
typedef struct _TweetList TweetList;
typedef struct _TweetListClass TweetListClass;
typedef struct _TweetListPriv TweetListPriv;

struct _TweetList {
 GtkTreeView parent;
};

struct _TweetListClass {
 GtkTreeViewClass parent_class;
};


enum {
 PIXBUF_AVATAR,
 STRING_TEXT,
 STRING_NICK,
 STRING_DATE,
 STRING_TWEET,
 STRING_USER,
 ULONG_TWEET_ID,
 N_COLUMNS
};


GType tweet_list_get_type(void) __attribute__((__const__));
TweetList *tweet_list_new(void);
GtkListStore *tweet_list_get_store(void);


# 36 "app.h" 2



# 47 "app.h"
typedef struct _App App;
typedef struct _AppClass AppClass;
typedef struct _AppPriv AppPriv;

struct _AppPriv {

 GtkWidget *window;
 TweetList *listview;
 GtkWidget *statusbar;





 GList *widgets_connected;
 GList *widgets_disconnected;
 GList *widgets_tweet_selected;


 GSList *group;
 GtkRadioAction *menu_combined;
 GtkRadioAction *menu_public;
 GtkRadioAction *menu_friends;
 GtkRadioAction *menu_mine;
 GtkRadioAction *menu_direct_messages;
 GtkRadioAction *menu_direct_replies;

 GtkAction *friends_timelines;


 GtkStatusIcon *status_icon;


 GtkWidget *popup_menu;
 GtkToggleAction *popup_menu_show_app;


 char *username;
 char *password;


 guint size_timeout_id;


 GtkWidget *expand_box;
 GtkWidget *expand_image;
 GtkWidget *expand_title;
 GtkWidget *expand_label;
};

extern AppPriv *app_priv;

struct _App {
        GObject parent;
};

struct _AppClass {
        GObjectClass parent_class;
};

GType app_get_type (void) __attribute__((__const__));
void app_create (void);
App * app_get (void);
GtkWidget * app_get_window (void);
void app_set_visibility (gboolean visible);
void app_set_statusbar_msg (gchar *message);
void app_notify_sound (void);
void app_notify (gchar *msg);
void app_state_on_connection (gboolean connected);
void app_set_image( const gchar *file, GtkTreeIter iter );
void app_expand_message( const gchar *user_name, const gchar *user_nick, const gchar *date, const gchar *tweet, GdkPixbuf *pixbuf );


# 45 "parser.c" 2
# 1 "network.h" 1
# 28 "network.h"
# 1 "friends-manager.h" 1
# 27 "friends-manager.h"
void friends_manager_show(GtkWindow *parent);
# 29 "network.h" 2
# 1 "users.h" 1
# 58 "users.h"
typedef struct {
 unsigned long int id;
 gchar *user_name;
 gchar *nick_name;
 gchar *location;
 gchar *bio;
 gchar *url;
 gchar *image_url;
 gchar *image_filename;
 unsigned long int tweets;
 unsigned long int friends;
 unsigned long int followers;
 gboolean follower;
} User;






GList *users_new(const gchar *data, gssize length);
void users_free(const char *type, GList *users );


GList *user_get_friends(void);
void user_append_friend(User *user);
void user_remove_friend(User *user);



GList *user_get_followers(void);
void user_append_follower(User *user);
void user_remove_follower(User *user);


GList *user_get_friends_and_followers(gboolean use_cache);

void user_free_lists (void);


User *user_parse_new( const gchar *data, gssize length );
User *user_new(xmlNode *a_node);
int user_sort( User *a, User *b );
void user_free(User *user);
# 30 "network.h" 2
# 59 "network.h"
extern gboolean getting_followers;


void network_login( const char *username, const char *password );


void network_logout( void );


void network_post_status( const gchar *text );


void network_send_message( const gchar *friend, const gchar *text );


void network_get_timeline( const gchar *url_timeline );
void network_get_combined_timeline(void);



void network_get_user( const gchar *username );


void network_refresh(void);


User *network_fetch_profile(const gchar *user_name);
GList *network_get_friends_and_followers(gboolean use_cache);
GList *network_get_users_glist(gboolean get_friends);
gboolean network_download_avatar( const gchar *image_url );




void network_get_image (const gchar *image_url, GtkTreeIter iter);


void network_follow_user(const gchar *username);


void network_unfollow_user(const gchar *username);


void network_block_user(const gchar *username);


void network_new (void);

void network_close (void);

void network_stop (void);
# 46 "parser.c" 2







typedef struct {
 User *user;
 gchar *text;
 gchar *created_at;
 gchar *id;
} Status;

static Status *parser_node_status(xmlNode *a_node);
static gchar *parser_convert_time (const char *datetime);
static gboolean display_notification ( gpointer tweet );


static gint last_id = 0;

xmlDoc *parser_parse(const char *data, gssize length, xmlNode **first_element){
 xmlDoc* doc = ((void *)0);
 xmlNode* root_element = ((void *)0);


 doc = xmlReadMemory(data, length, "xml", "UTF-8", 0);
 if(doc == ((void *)0)) {
  debug_impl ("Parser", "failed to read xml data");

  return ((void *)0);
 }


 root_element = xmlDocGetRootElement(doc);
 if(root_element == ((void *)0)) {
  debug_impl ("Parser", "failed getting first element of xml data");

  xmlFreeDoc(doc);
  return ((void *)0);
 } else {
  *first_element = root_element;
 }

 return doc;
}


static gboolean display_notification(gpointer tweet){
 app_notify(tweet);
 if(tweet) g_free(tweet);
 return (0);
}



gboolean
parser_timeline(const gchar *data,
      gssize length){
 xmlDoc *doc = ((void *)0);
 xmlNode *root_element = ((void *)0);
 xmlNode *cur_node = ((void *)0);

 GtkListStore *store = ((void *)0);
 GtkTreeIter iter;

 Status *status;


 gboolean show_notification =(last_id > 0);
 gint lastTweet = 0;




 gboolean multiple_new_tweets = (0);

 gint tweet_display_delay = 0;
 const int tweet_display_interval = 5;


 doc = parser_parse(data, length, &root_element);

 if(!doc) {
  xmlCleanupParser();
  return (0);
 }


 store = tweet_list_get_store();
 gtk_list_store_clear(store);


 for(cur_node = root_element; cur_node; cur_node = cur_node->next) {
  if(cur_node->type != XML_ELEMENT_NODE ) continue;
  if( g_str_equal(cur_node->name, "statuses") || g_str_equal(cur_node->name, "direct-messages") ){
   cur_node = cur_node->children;
   continue;
  }


  if((!g_str_equal(cur_node->name, "status")) && (!g_str_equal(cur_node->name, "direct_message")) )
   continue;


  gchar *tweet;
  gchar *datetime;
  gint sid;


  status=parser_node_status(cur_node->children);

  sid = atoi(status->id);


  if(lastTweet == 0){
   lastTweet = sid;
  }


  datetime=parser_convert_time( status->created_at );
  tweet=g_strconcat(
     "<b>", status->user->nick_name, " ( @", status->user->user_name, " )", "</b> - ", datetime, "\n",
     "<small>", status->text, "</small>",
     ((void *)0)
  );

  if(sid > last_id && show_notification) {
   if(multiple_new_tweets != (!(0))) {
    app_notify_sound();
    multiple_new_tweets = (!(0));
   }
   g_timeout_add_seconds(tweet_display_delay,
           display_notification,
           g_strdup(tweet));

   tweet_display_delay += tweet_display_interval;
  }


  gtk_list_store_append(store, &iter);
  gtk_list_store_set(store, &iter,
       STRING_TEXT, tweet,
       STRING_NICK,status->user->nick_name,
       STRING_DATE, datetime,
       STRING_TWEET, status->text,
       STRING_USER, status->user->user_name,
       ULONG_TWEET_ID, (strtoul( status->id, ((void *)0), 0 )),
       -1);


  g_free(tweet);


  network_get_image(status->user->image_url, iter);


  user_free(status->user);
  if(status->text) g_free(status->text);
  if(status->created_at) g_free(status->created_at);
  if(status->id) g_free(status->id);

  g_free(status);
  g_free(datetime);
 }


 if(lastTweet > 0) {
  last_id = lastTweet;
 }


 xmlFreeDoc(doc);
 xmlCleanupParser();

 return (!(0));
}

static Status *
parser_node_status(xmlNode *a_node){
 xmlNode *cur_node = ((void *)0);
 xmlBufferPtr buffer;
 Status *status;

 buffer = xmlBufferCreate();
 status = ((Status *) g_malloc0 (((gsize) sizeof (Status)) * ((gsize) (1))));


 for(cur_node = a_node; cur_node; cur_node = cur_node->next) {
  if(cur_node->type != XML_ELEMENT_NODE)
   continue;
  if(xmlNodeBufGetContent(buffer, cur_node) != 0)
   continue;
  if(g_str_equal(cur_node->name, "created_at")) {
   const xmlChar *tmp;
   tmp = xmlBufferContent(buffer);
   status->created_at = g_strdup((const gchar *)tmp);
  } else if(g_str_equal(cur_node->name, "id")) {
   const xmlChar *tmp;

   tmp = xmlBufferContent(buffer);
   status->id = g_strdup((const gchar *)tmp);
  } else if(g_str_equal(cur_node->name, "text")) {
   const xmlChar *msg;
   gchar *cur;

   msg = xmlBufferContent(buffer);

   status->text = g_markup_escape_text((const char *)msg, -1);


   cur = status->text;
   while((cur = strstr(cur, "&amp;"))) {
    if((__extension__ (__builtin_constant_p (3) && ((__builtin_constant_p (cur + 5) && strlen (cur + 5) < ((size_t) (3))) || (__builtin_constant_p ("lt;") && strlen ("lt;") < ((size_t) (3)))) ? __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (cur + 5) && __builtin_constant_p ("lt;") && (__s1_len = strlen (cur + 5), __s2_len = strlen ("lt;"), (!((size_t)(const void *)((cur + 5) + 1) - (size_t)(const void *)(cur + 5) == 1) || __s1_len >= 4) && (!((size_t)(const void *)(("lt;") + 1) - (size_t)(const void *)("lt;") == 1) || __s2_len >= 4)) ? __builtin_strcmp (cur + 5, "lt;") : (__builtin_constant_p (cur + 5) && ((size_t)(const void *)((cur + 5) + 1) - (size_t)(const void *)(cur + 5) == 1) && (__s1_len = strlen (cur + 5), __s1_len < 4) ? (__builtin_constant_p ("lt;") && ((size_t)(const void *)(("lt;") + 1) - (size_t)(const void *)("lt;") == 1) ? __builtin_strcmp (cur + 5, "lt;") : (__extension__ ({ __const unsigned char *__s2 = (__const unsigned char *) (__const char *) ("lt;"); register int __result = (((__const unsigned char *) (__const char *) (cur + 5))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (cur + 5))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (cur + 5))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((__const unsigned char *) (__const char *) (cur + 5))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p ("lt;") && ((size_t)(const void *)(("lt;") + 1) - (size_t)(const void *)("lt;") == 1) && (__s2_len = strlen ("lt;"), __s2_len < 4) ? (__builtin_constant_p (cur + 5) && ((size_t)(const void *)((cur + 5) + 1) - (size_t)(const void *)(cur + 5) == 1) ? __builtin_strcmp (cur + 5, "lt;") : (__extension__ ({ __const unsigned char *__s1 = (__const unsigned char *) (__const char *) (cur + 5); register int __result = __s1[0] - ((__const unsigned char *) (__const char *) ("lt;"))[0]; if (__s2_len > 0 && __result == 0) { __result = (__s1[1] - ((__const unsigned char *) (__const char *) ("lt;"))[1]); if (__s2_len > 1 && __result == 0) { __result = (__s1[2] - ((__const unsigned char *) (__const char *) ("lt;"))[2]); if (__s2_len > 2 && __result == 0) __result = (__s1[3] - ((__const unsigned char *) (__const char *) ("lt;"))[3]); } } __result; }))) : __builtin_strcmp (cur + 5, "lt;")))); }) : strncmp (cur + 5, "lt;", 3))) == 0 || (__extension__ (__builtin_constant_p (3) && ((__builtin_constant_p (cur + 5) && strlen (cur + 5) < ((size_t) (3))) || (__builtin_constant_p ("gt;") && strlen ("gt;") < ((size_t) (3)))) ? __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (cur + 5) && __builtin_constant_p ("gt;") && (__s1_len = strlen (cur + 5), __s2_len = strlen ("gt;"), (!((size_t)(const void *)((cur + 5) + 1) - (size_t)(const void *)(cur + 5) == 1) || __s1_len >= 4) && (!((size_t)(const void *)(("gt;") + 1) - (size_t)(const void *)("gt;") == 1) || __s2_len >= 4)) ? __builtin_strcmp (cur + 5, "gt;") : (__builtin_constant_p (cur + 5) && ((size_t)(const void *)((cur + 5) + 1) - (size_t)(const void *)(cur + 5) == 1) && (__s1_len = strlen (cur + 5), __s1_len < 4) ? (__builtin_constant_p ("gt;") && ((size_t)(const void *)(("gt;") + 1) - (size_t)(const void *)("gt;") == 1) ? __builtin_strcmp (cur + 5, "gt;") : (__extension__ ({ __const unsigned char *__s2 = (__const unsigned char *) (__const char *) ("gt;"); register int __result = (((__const unsigned char *) (__const char *) (cur + 5))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (cur + 5))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((__const unsigned char *) (__const char *) (cur + 5))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((__const unsigned char *) (__const char *) (cur + 5))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p ("gt;") && ((size_t)(const void *)(("gt;") + 1) - (size_t)(const void *)("gt;") == 1) && (__s2_len = strlen ("gt;"), __s2_len < 4) ? (__builtin_constant_p (cur + 5) && ((size_t)(const void *)((cur + 5) + 1) - (size_t)(const void *)(cur + 5) == 1) ? __builtin_strcmp (cur + 5, "gt;") : (__extension__ ({ __const unsigned char *__s1 = (__const unsigned char *) (__const char *) (cur + 5); register int __result = __s1[0] - ((__const unsigned char *) (__const char *) ("gt;"))[0]; if (__s2_len > 0 && __result == 0) { __result = (__s1[1] - ((__const unsigned char *) (__const char *) ("gt;"))[1]); if (__s2_len > 1 && __result == 0) { __result = (__s1[2] - ((__const unsigned char *) (__const char *) ("gt;"))[2]); if (__s2_len > 2 && __result == 0) __result = (__s1[3] - ((__const unsigned char *) (__const char *) ("gt;"))[3]); } } __result; }))) : __builtin_strcmp (cur + 5, "gt;")))); }) : strncmp (cur + 5, "gt;", 3))) == 0)
     do { memmove ((cur + 1), (cur + 5), (strlen(cur + 5) + 1)); } while (0);
    else
     cur += 5;
   }

  } else if(g_str_equal(cur_node->name, "sender") ||
   g_str_equal(cur_node->name, "user")) {
   status->user=user_new(cur_node->children);
  }


  xmlBufferEmpty(buffer);

 }


 xmlBufferFree(buffer);

 return status;
}

static gchar *
parser_convert_time(const char *datetime){
 struct tm *ta;
 struct tm post;
 int seconds_local;
 int seconds_post;
 int diff;
 char *oldenv;
 time_t t = time(((void *)0));

 tzset();

 ta = gmtime(&t);
 ta->tm_isdst = -1;
 seconds_local = mktime(ta);

 oldenv = setlocale(__LC_TIME, "C");
 strptime(datetime, "%a %b %d %T +0000 %Y", &post);
 post.tm_isdst = -1;
 seconds_post = mktime(&post);

 setlocale(__LC_TIME, oldenv);

 diff = difftime(seconds_local, seconds_post);

 if(diff < 2) {
  return g_strdup(dcgettext (((void *)0), "1 second ago", __LC_MESSAGES));
 }

 if(diff < 60 ) {
  return g_strdup_printf(dcgettext (((void *)0), "%i seconds ago", __LC_MESSAGES), diff);
 } else if(diff < 120) {
  return g_strdup(dcgettext (((void *)0), "1 minute ago", __LC_MESSAGES));
 } else {

  diff = diff/60;
  if(diff < 60) {
   return g_strdup_printf(dcgettext (((void *)0), "%i minutes ago", __LC_MESSAGES), diff);
  } else if(diff < 120) {
   return g_strdup(dcgettext (((void *)0), "1 hour ago", __LC_MESSAGES));
  } else {

   diff = diff/60;
   if(diff < 24) {
    return g_strdup_printf(dcgettext (((void *)0), "%i hours ago", __LC_MESSAGES), diff);
   } else if(diff < 48) {
    return g_strdup(dcgettext (((void *)0), "1 day ago", __LC_MESSAGES));
   } else {

    diff = diff/24;
    if(diff < 30) {
     return g_strdup_printf(dcgettext (((void *)0), "%i days ago", __LC_MESSAGES), diff);
    } else if(diff < 60) {
     return g_strdup(dcgettext (((void *)0), "1 month ago", __LC_MESSAGES));
    } else {
     return g_strdup_printf(dcgettext (((void *)0), "%i months ago", __LC_MESSAGES),(diff/30));
    }
   }
  }
 }
 return ((void *)0);
}


void
parser_reset_lastid(){
 last_id = 0;
}
